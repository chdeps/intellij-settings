<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/registerAccount.handler.ts" timestamp="1558986263042">
        <mark key="[" line="12" column="27" />
      </file>
      <file name="/Dummy.txt" timestamp="1559550852798">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/backpack.config.js" timestamp="1559557656574">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="^" line="7" column="0" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/node_modules/react-native-recaptcha-v3/index.js" timestamp="1559125923067">
        <mark key="[" line="78" column="0" />
        <mark key="]" line="78" column="0" />
        <mark key="." line="78" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/sendEmailValidationEmail.handler.ts" timestamp="1559552084184">
        <mark key="[" line="38" column="0" />
        <mark key="]" line="38" column="0" />
        <mark key="." line="38" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-profile/business/profile.service.ts" timestamp="1558985518959">
        <mark key="[" line="12" column="3" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/.babelrc" timestamp="1559551676102" />
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.controller.ts" timestamp="1559025228634">
        <mark key="[" line="69" column="17" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/interface/hasVerifiedEmail.event.ts" timestamp="1558985603841">
        <mark key="[" line="2" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/interface/resetPasswordEmailSent.event.ts" timestamp="1558988330257">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/pages/Login/Login.component.js" timestamp="1559562967556">
        <mark key="[" line="250" column="18" />
        <mark key="]" line="250" column="18" />
        <mark key="." line="250" column="18" />
        <mark key="^" line="250" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/entrypoint.sh" timestamp="1559558378132" />
      <file name="$USER_HOME$/Projects/UGC/UGC/package.json" timestamp="1559148831520">
        <mark key="[" line="52" column="0" />
        <mark key="]" line="52" column="0" />
        <mark key="." line="52" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/Dockerfile" timestamp="1559558428364">
        <mark key="[" line="2" column="19" />
        <mark key="]" line="16" column="0" />
        <mark key="." line="16" column="0" />
        <mark key="^" line="16" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/captcha-html.ts" timestamp="1559470254684">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/patchPostMessageJsCode.js" timestamp="1559470977896">
        <mark key="[" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js" timestamp="1559120518439">
        <mark key="[" line="41" column="17" />
        <mark key="]" line="41" column="17" />
        <mark key="." line="41" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-app/src/pages/Landing/Login/Form.container.tsx" timestamp="1559469865223">
        <mark key="[" line="75" column="0" />
        <mark key="]" line="75" column="38" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.proto" timestamp="1559030607786">
        <mark key="[" line="22" column="7" />
        <mark key="]" line="22" column="6" />
        <mark key="." line="22" column="6" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/Recaptcha.component.js" timestamp="1559471307468">
        <mark key="[" line="75" column="0" />
        <mark key="]" line="75" column="0" />
        <mark key="." line="75" column="0" />
      </file>
      <file name="/JavaScript Console" timestamp="1559040615428">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/docker-compose.yml" timestamp="1559558662138" />
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/index.js" timestamp="1559148623006">
        <mark key="[" line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/payment/containers/storePaymentContainerFactory.ts" />
      <jump line="2" column="24" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/api/core/affiny.endpoints.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/subscriptions/containers/getSubscriptionContainerFactory.ts" />
      <jump line="79" column="17" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/payment/saga.test.ts" />
      <jump line="9" column="59" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="77" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="10" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/containers/loginContainerFactory.ts" />
      <jump line="54" column="23" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Recaptcha/captcha.js" />
      <jump line="75" column="10" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/PriceTable/PriceTable.component.tsx" />
      <jump line="48" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="110" column="30" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/patches/react-native+0.57.7.patch" />
      <jump line="48" column="83" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="113" column="18" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="30" column="22" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="66" column="4" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="222" column="5" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="210" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="184" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="169" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="48" column="6" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="145" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/config/webpack.config.dev.js" />
      <jump line="45" column="7" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/components/MemberCard/MemberCard.doc.tsx" />
      <jump line="1" column="25" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/setup/setup.ts" />
      <jump line="63" column="20" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.ts" />
      <jump line="60" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.web.ts" />
      <jump line="98" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.web.ts" />
      <jump line="0" column="33" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/RateCard/RateCardAndroid/RateCardAndroid.component.tsx" />
      <jump line="27" column="14" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="28" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="30" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="32" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="36" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="40" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="44" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="48" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="52" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="56" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="60" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="68" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="11" column="26" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Landing/Welcome/Welcome.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Landing/Welcome/Welcome.component.tsx" />
      <jump line="37" column="25" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="37" column="72" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Cards/FullPageMemberCard/FullPageMemberCard.component.test.tsx" />
      <jump line="30" column="2" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Cards/FullPageMemberCard/FullPageMemberCard.component.test.tsx" />
      <jump line="576" column="45" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/translations/locales/fr.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Yellow/trpc-mobile-app/web/src/components/Modal.js" />
      <jump line="12" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/components/BottomNavigation/BottomNavigation.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/components/BottomNavigation/BottomNavigation.component.tsx" />
      <jump line="1" column="15" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/WhyPremium/WhyPremium.component.tsx" />
      <jump line="0" column="32" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/pages/WhyPremium/WhyPremium.component.tsx" />
      <jump line="123" column="24" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/saga.ts" />
      <jump line="11" column="38" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/actions.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/actions.ts" />
      <jump line="16" column="9" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/ci/get-platform-deploy-strategy.sh" />
      <jump line="3" column="7" filename="$USER_HOME$/Projects/MapDojo/dojo-map-expo/src/lib/geolocation/index.js" />
      <jump line="0" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/NonScrollableDiv.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/NonScrollableDiv.container.tsx" />
      <jump line="23" column="56" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/ScrollableDiv.component.tsx" />
      <jump line="26" column="3" filename="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-web/src/helpers/cookies.test.ts" />
      <jump line="0" column="30" filename="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-web/src/helpers/cookies.test.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Generator/generator-rn-toolbox/generators/fastlane-setup/templates/env" />
      <jump line="0" column="15" filename="$USER_HOME$/Projects/Faurecia/customer-satisfaction/migrations/1554128851626-add_parent_account_id.js" />
      <jump line="5" column="20" filename="$USER_HOME$/Projects/onlineApp/OnlineApp/ios/Podfile" />
      <jump line="0" column="7" filename="$USER_HOME$/Projects/BigMamma/big-mamma/server/src/modules/Payment/payment.business.js" />
      <jump line="48" column="58" filename="$USER_HOME$/Projects/BigMamma/big-mamma/server/src/modules/Order/order.business.js" />
      <jump line="26" column="22" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.controller.ts" />
      <jump line="59" column="53" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/api-gateway/controllers/auth.controller.ts" />
      <jump line="0" column="13" filename="$USER_HOME$/Projects/InshAllah/InshAllah/fastlane/.env.staging" />
      <jump line="28" column="29" filename="$USER_HOME$/Projects/WWF/wag-app/src/components/CodePushUpdateButton.js" />
      <jump line="0" column="7" filename="$USER_HOME$/Projects/WWF/wag-app/src/components/CodePushUpdateButton.js" />
      <jump line="6" column="1" filename="$USER_HOME$/Projects/CQRS/blog/src/article.entity.ts" />
      <jump line="0" column="0" filename="/Dummy.txt" />
      <jump line="13" column="27" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/shared/tsconfig.base.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/shared/tsconfig.base.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-algo/tsconfig.json" />
      <jump line="15" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah/package.json" />
      <jump line="0" column="15" filename="$USER_HOME$/Projects/InshAllah/InshAllah/src/components/Cross/Cross.tsx" />
      <jump line="11" column="13" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/dto/authCredentials.dto.ts" />
      <jump line="3" column="26" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/dto/resetPassword.dto.ts" />
      <jump line="0" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/doesEmailAlreadyExist.handler.ts" />
      <jump line="11" column="45" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/login.handler.ts" />
      <jump line="1" column="17" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/sendResetPasswordEmail.handler.ts" />
      <jump line="10" column="5" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/getUserIdFromPwdToken.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/getUserIdFromPwdToken.handler.ts" />
      <jump line="89" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/query.generator.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/query.generator.js" />
      <jump line="10" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/logout.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/logout.handler.ts" />
      <jump line="0" column="4" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/command.generator.js" />
      <jump line="14" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/handler/loggedOut.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/handler/loggedOut.handler.ts" />
      <jump line="16" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/model/account.model.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/model/account.model.ts" />
      <jump line="78" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah/node_modules/@react-navigation/native/src/createAppContainer.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah/node_modules/@react-navigation/native/src/createAppContainer.js" />
      <jump line="12" column="12" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
      <jump line="35865" column="0" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
      <jump line="13" column="0" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
      <jump line="7" column="23" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/backpack.config.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="d" type="4">
        <text />
      </register>
      <register name="-" type="4">
        <text>main</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxtZXNzYWdlc1w+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICBsYW5nPXtjb25maWcuZW52LmxvY2FsZX0K</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIGNvbmZpZy5lbnRyeS5taWNyb3NlcnZpY2VfYWxnbyA9IFsnLi9wYSddOwogICAgY29uZmlnLmVudHJ5LmdhdGV3YXkgPSBbJy4vaW5kZXgudHMnXTsK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Zgo=</text>
      </register>
      <register name="s" type="4">
        <text>dfiiillvbdjjjjiiiiiilllaaaassss</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">KyAgICBjb21tb25fb2FyY2hpdmUodW5zaWduZWQgaW50IGZsYWdzID0gMCkgOiAK</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">KyAgICB2b2lkIHNhdmVfZW5kKGNvbnN0IGNoYXIgKiAvKm5hbWUqLyl7fQo=</text>
      </register>
      <register name="6" type="4">
        <text encoding="base64">CisgICAgY29tbW9uX29hcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyA9IDApIDogCisgICAgICAgIGJhc2ljX29hcmNoaXZlKGZsYWdzKSwKKyAgICAgICAgaW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+KCkKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX09BUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwCkBAIC0wLDAgKzEsNTcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAgCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZiAKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8gMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyAgZGVjbC5ocHAKKy8vCisvLyAgKGMpIENvcHlyaWdodCBSb2JlcnQgUmFtZXkgMjAwNAorLy8gIFVzZSwgbW9kaWZpY2F0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyAgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgbGlicmFyeSBob21lIHBhZ2UgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9zZXJpYWxpemF0aW9uCisKKy8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vIAorCisvLyBUaGlzIGhlYWRlciBpbXBsZW1lbnRzIHNlcGFyYXRlIGNvbXBpbGF0aW9uIGZlYXR1cmVzIGFzIGRlc2NyaWJlZCBpbgorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvbW9yZS9zZXBhcmF0ZV9jb21waWxhdGlvbi5odG1sCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorCisjaWYgKGRlZmluZWQoQk9PU1RfQUxMX0RZTl9MSU5LKSB8fCBkZWZpbmVkKEJPT1NUX1NFUklBTElaQVRJT05fRFlOX0xJTkspKQorICAgICNpZiBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfRVhQT1JUCisgICAgI2Vsc2UKKyAgICAgICAgI2RlZmluZSBCT09TVF9BUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0lNUE9SVAorICAgICNlbmRpZgorCisgICAgI2lmIGRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX1dBUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0VYUE9SVAorICAgICNlbHNlCisgICAgICAgICNkZWZpbmUgQk9PU1RfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyAgICAjaWYgZGVmaW5lZChCT09TVF9XQVJDSElWRV9TT1VSQ0UpIHx8IGRlZmluZWQoQk9PU1RfQVJDSElWRV9TT1VSQ0UpCisgICAgICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIEJPT1NUX1NZTUJPTF9FWFBPUlQKKyAgICAjZWxzZQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyNlbmRpZgorCisjaWYgISBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfREVDTCkKKyAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTAorI2VuZGlmCisjaWYgISBkZWZpbmVkKEJPT1NUX1dBUkNISVZFX0RFQ0wpCisgICAgI2RlZmluZSBCT09TVF9XQVJDSElWRV9ERUNMCisjZW5kaWYKKyNpZiAhIGRlZmluZWQoQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMKQorICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0RFQ0xfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvaGVscGVyX2NvbGxlY3Rpb24uaHBwCkBAIC0wLDAgKzEsOTkgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSEVMUEVSX0NPTExFQ1RJT05fSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0hFTFBFUl9DT0xMRUNUSU9OX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpICYmIChfTVNDX1ZFUiA+PSAxMDIwKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBoZWxwZXJfY29sbGVjdGlvbi5ocHA6IGFyY2hpdmUgc3VwcG9ydCBmb3IgcnVuLXRpbWUgaGVscGVycworCisvLyAoQykgQ29weXJpZ2h0IDIwMDItMjAwOCBSb2JlcnQgUmFtZXkgYW5kIEpvYXF1aW4gTSBMb3BleiBNdW5vegorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxjc3RkZGVmPiAvLyBOVUxMCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPHV0aWxpdHk+CisjaW5jbHVkZSA8bWVtb3J5PgorI2luY2x1ZGUgPGFsZ29yaXRobT4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9zbWFydF9wdHIvc2hhcmVkX3B0ci5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc21hcnRfcHRyL21ha2Vfc2hhcmVkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGhlbHBlcl9jb2xsZWN0aW9uCit7CisgICAgaGVscGVyX2NvbGxlY3Rpb24oY29uc3QgaGVscGVyX2NvbGxlY3Rpb24mKTsgICAgICAgICAgICAgIC8vIG5vbi1jb3B5YWJsZQorICAgIGhlbHBlcl9jb2xsZWN0aW9uJiBvcGVyYXRvciA9IChjb25zdCBoZWxwZXJfY29sbGVjdGlvbiYpOyAvLyBub24tY29weWFibGUKKworICAgIC8vIG5vdGU6IHdlIGRvbnQnIGFjdHVhbGx5ICJzaGFyZSIgdGhlIGZ1bmN0aW9uIG9iamVjdCBwb2ludGVyCisgICAgLy8gd2Ugb25seSB1c2Ugc2hhcmVkX3B0ciB0byBtYWtlIHN1cmUgdGhhdCBpdCBnZXQncyBkZWxldGVkCisKKyAgICB0eXBlZGVmIHN0ZDo6cGFpcjwKKyAgICAgICAgY29uc3Qgdm9pZCAqLAorICAgICAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPgorICAgID4gaGVscGVyX3ZhbHVlX3R5cGU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPiBtYWtlX2hlbHBlcl9wdHIoKXsKKyAgICAgICAgLy8gdXNlIGJvb3N0OjpzaGFyZWRfcHRyIHJhdGhlciB0aGFuIHN0ZDo6c2hhcmVkX3B0ciB0byBtYWludGFpbgorICAgICAgICAvLyBjKyswMyBjb21wYXRpYmlsaXR5CisgICAgICAgIHJldHVybiBib29zdDo6bWFrZV9zaGFyZWQ8VD4oKTsKKyAgICB9CisKKyAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGhlbHBlcl92YWx1ZV90eXBlPiBjb2xsZWN0aW9uOworICAgIGNvbGxlY3Rpb24gbV9jb2xsZWN0aW9uOworCisgICAgc3RydWN0IHByZWRpY2F0ZSB7CisgICAgICAgIEJPT1NUX0RFTEVURURfRlVOQ1RJT04ocHJlZGljYXRlICYgb3BlcmF0b3I9KGNvbnN0IHByZWRpY2F0ZSAmIHJocykpCisgICAgcHVibGljOgorICAgICAgICBjb25zdCB2b2lkICogY29uc3QgbV90aTsKKyAgICAgICAgYm9vbCBvcGVyYXRvcigpKGhlbHBlcl92YWx1ZV90eXBlIGNvbnN0ICZyaHMpIGNvbnN0IHsKKyAgICAgICAgICAgIHJldHVybiBtX3RpID09IHJocy5maXJzdDsKKyAgICAgICAgfQorICAgICAgICBwcmVkaWNhdGUoY29uc3Qgdm9pZCAqIHRpKSA6CisgICAgICAgICAgICBtX3RpKHRpKQorICAgICAgICB7fQorICAgIH07Citwcm90ZWN0ZWQ6CisgICAgaGVscGVyX2NvbGxlY3Rpb24oKXt9CisgICAgfmhlbHBlcl9jb2xsZWN0aW9uKCl7fQorcHVibGljOgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEhlbHBlcj4KKyAgICBIZWxwZXImIGZpbmRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApIHsKKyAgICAgICAgY29sbGVjdGlvbjo6Y29uc3RfaXRlcmF0b3IgaXQgPQorICAgICAgICAgICAgc3RkOjpmaW5kX2lmKAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5iZWdpbigpLAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5lbmQoKSwKKyAgICAgICAgICAgICAgICBwcmVkaWNhdGUoaWQpCisgICAgICAgICAgICApOworCisgICAgICAgIHZvaWQgKiBydmFsID0gMDsKKyAgICAgICAgaWYoaXQgPT0gbV9jb2xsZWN0aW9uLmVuZCgpKXsKKyAgICAgICAgICAgIG1fY29sbGVjdGlvbi5wdXNoX2JhY2soCisgICAgICAgICAgICAgICAgc3RkOjptYWtlX3BhaXIoaWQsIG1ha2VfaGVscGVyX3B0cjxIZWxwZXI+KCkpCisgICAgICAgICAgICApOworICAgICAgICAgICAgcnZhbCA9IG1fY29sbGVjdGlvbi5iYWNrKCkuc2Vjb25kLmdldCgpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICBydmFsID0gaXQtPnNlY29uZC5nZXQoKTsKKyAgICAgICAgfQorICAgICAgICByZXR1cm4gKnN0YXRpY19jYXN0PEhlbHBlciAqPihydmFsKTsKKyAgICB9Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0RFVEFJTF9IRUxQRVJfQ09MTEVDVElPTl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2VfaWFyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfSUFSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2hlbHBlcl9jb2xsZWN0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9pYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2VfaWFyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzx0cnVlPiBpc19sb2FkaW5nOworICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplciAmIGJwaXMgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX2lzZXJpYWxpemVyPEFyY2hpdmUsIFQ+IAorICAgICAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+cmVnaXN0ZXJfYmFzaWNfc2VyaWFsaXplcihicGlzLmdldF9iYXNpY19zZXJpYWxpemVyKCkpOworICAgICAgICByZXR1cm4gJiBicGlzOworICAgIH0KKyAgICB0ZW1wbGF0ZTxjbGFzcyBIZWxwZXI+CisgICAgSGVscGVyICYKKyAgICBnZXRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApeworICAgICAgICBoZWxwZXJfY29sbGVjdGlvbiAmIGhjID0gdGhpcy0+VGhpcygpLT5nZXRfaGVscGVyX2NvbGxlY3Rpb24oKTsKKyAgICAgICAgcmV0dXJuIGhjLnRlbXBsYXRlIGZpbmRfaGVscGVyPEhlbHBlcj4oaWQpOworICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvcj4+KFQgJiB0KXsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5sb2FkX292ZXJyaWRlKHQpOworICAgICAgICByZXR1cm4gKiB0aGlzLT5UaGlzKCk7CisgICAgfQorCisgICAgLy8gdGhlICYgb3BlcmF0b3IgCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3ImKFQgJiB0KXsKKyAgICAgICAgcmV0dXJuICoodGhpcy0+VGhpcygpKSA+PiB0OworICAgIH0KK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0lOVEVSRkFDRV9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2Vfb2FyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX09BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9vc2VyaWFsaXplci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9vYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2Vfb2FyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfbG9hZGluZzsKKyAgICB0eXBlZGVmIG1wbDo6Ym9vbF88dHJ1ZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShjb25zdCBUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplciAmIGJwb3MgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX29zZXJpYWxpemVyPEFyY2hpdmUsIFQ+CisgICAgICAgICAgICA+OjpnZXRfY29uc3RfaW5zdGFuY2UoKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5yZWdpc3Rlcl9iYXNpY19zZXJpYWxpemVyKGJwb3MuZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSk7CisgICAgICAgIHJldHVybiAmIGJwb3M7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlPGNsYXNzIEhlbHBlcj4KKyAgICBIZWxwZXIgJgorICAgIGdldF9oZWxwZXIodm9pZCAqIGNvbnN0IGlkID0gMCl7CisgICAgICAgIGhlbHBlcl9jb2xsZWN0aW9uICYgaGMgPSB0aGlzLT5UaGlzKCktPmdldF9oZWxwZXJfY29sbGVjdGlvbigpOworICAgICAgICByZXR1cm4gaGMudGVtcGxhdGUgZmluZF9oZWxwZXI8SGVscGVyPihpZCk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3I8PChjb25zdCBUICYgdCl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+c2F2ZV9vdmVycmlkZSh0KTsKKyAgICAgICAgcmV0dXJuICogdGhpcy0+VGhpcygpOworICAgIH0KKyAgICAKKyAgICAvLyB0aGUgJiBvcGVyYXRvciAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvciYoY29uc3QgVCAmIHQpeworICAgICAgICByZXR1cm4gKiB0aGlzIC0+VGhpcygpIDw8IHQ7CisgICAgfQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2lzZXJpYWxpemVyLmhwcApAQCAtMCwwICsxLDYyNCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9JU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfSVNFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNwcmFnbWEgaW5saW5lX2RlcHRoKDUxMSkKKyNwcmFnbWEgaW5saW5lX3JlY3Vyc2lvbihvbikKKyNlbmRpZgorCisjaWYgZGVmaW5lZChfX01XRVJLU19fKQorI3ByYWdtYSBpbmxpbmVfZGVwdGgoNTExKQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBpc2VyaWFsaXplci5ocHA6IGludGVyZmFjZSBmb3Igc2VyaWFsaXphdGlvbiBzeXN0ZW0uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPG5ldz4gICAgIC8vIGZvciBwbGFjZW1lbnQgbmV3CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc2l6ZV90LCBOVUxMCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZHsgCisgICAgdXNpbmcgOjpzaXplX3Q7IAorfSAvLyBuYW1lc3BhY2Ugc3RkCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZGVudGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2dyZWF0ZXJfZXF1YWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9lcXVhbF90by5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvY29yZS9ub19leGNlcHRpb25zX3N1cHBvcnQuaHBwPgorCisjaWZuZGVmIEJPT1NUX1NFUklBTElaQVRJT05fREVGQVVMVF9UWVBFX0lORk8gICAKKyAgICAjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9leHRlbmRlZF90eXBlX2luZm9fdHlwZWlkLmhwcD4gICAKKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NtYXJ0X2Nhc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vc3RhdGljX3dhcm5pbmcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9pbnRlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZW51bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2V4dGVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9seW1vcnBoaWMuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hc3N1bWVfYWJzdHJhY3QuaHBwPgorCisjaWZuZGVmIEJPT1NUX01TVkMKKyAgICAjZGVmaW5lIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IgKCAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICBCT09TVF9XT1JLQVJPVU5EKF9fSUJNQ1BQX18sIDwgMTIxMCkgICAgICAgICAgICBcCisgICAgICAgIHx8IGRlZmluZWQoX19TVU5QUk9fQ0MpICYmIChfX1NVTlBST19DQyA8IDB4NTkwKSAgIFwKKyAgICApCisjZWxzZQorICAgICNkZWZpbmUgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUiAwCisjZW5kaWYKKworI2lmICEgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2hhc19uZXdfb3BlcmF0b3IuaHBwPgorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NlcmlhbGl6YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdmVyc2lvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9sZXZlbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90eXBlX2luZm9faW1wbGVtZW50YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3ZvaWRfY2FzdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hcnJheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9jb2xsZWN0aW9uX3NpemVfdHlwZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zaW5nbGV0b24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vd3JhcHBlci5ocHA+CisKKy8vIHRoZSBmb2xsb3dpbmcgaXMgbmVlZCBvbmx5IGZvciBkeW5hbWljIGNhc3Qgb2YgcG9seW1vcnBoaWMgcG9pbnRlcnMKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2FyY2hpdmVfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FyY2hpdmVfc2VyaWFsaXplcl9tYXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NoZWNrLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLyBhbiBhY2Nlc3NvciB0byBwZXJtaXQgZnJpZW5kIGFjY2VzcyB0byBhcmNoaXZlcy4gIE5lZWRlZCBiZWNhdXNlCisvLyBzb21lIGNvbXBpbGVycyBkb24ndCBoYW5kbGUgZnJpZW5kIHRlbXBsYXRlcyBjb21wbGV0ZWx5CitjbGFzcyBsb2FkX2FjY2VzcyB7CitwdWJsaWM6CisgICAgdGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgVD4KKyAgICBzdGF0aWMgdm9pZCBsb2FkX3ByaW1pdGl2ZShBcmNoaXZlICZhciwgVCAmdCl7CisgICAgICAgIGFyLmxvYWQodCk7CisgICAgfQorfTsKKworbmFtZXNwYWNlIGRldGFpbCB7CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorY2xhc3MgaXNlcmlhbGl6ZXIgOiBwdWJsaWMgYmFzaWNfaXNlcmlhbGl6ZXIKK3sKK3ByaXZhdGU6CisgICAgdmlydHVhbCB2b2lkIGRlc3Ryb3koLypjb25zdCovIHZvaWQgKmFkZHJlc3MpIGNvbnN0IHsKKyAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmFjY2Vzczo6ZGVzdHJveShzdGF0aWNfY2FzdDxUICo+KGFkZHJlc3MpKTsKKyAgICB9Citwcm90ZWN0ZWQ6CisgICAgLy8gcHJvdGVjdGVkIGNvbnN0cnVjdG9yIHNpbmNlIGl0J3MgYWx3YXlzIGNyZWF0ZWQgYnkgc2luZ2xldG9uCisgICAgZXhwbGljaXQgaXNlcmlhbGl6ZXIoKSA6CisgICAgICAgIGJhc2ljX2lzZXJpYWxpemVyKAorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSAKKyAgICAgICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dHlwZV9pbmZvX2ltcGxlbWVudGF0aW9uPCBUID46OnR5cGUKKyAgICAgICAgICAgID46OmdldF9jb25zdF9pbnN0YW5jZSgpCisgICAgICAgICkKKyAgICB7fQorcHVibGljOgorICAgIHZpcnR1YWwgQk9PU1RfRExMRVhQT1JUIHZvaWQgbG9hZF9vYmplY3RfZGF0YSgKKyAgICAgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICAgICAgdm9pZCAqeCwgCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7CisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPjo6dmFsdWUgCisgICAgICAgICAgICA+PSBib29zdDo6c2VyaWFsaXphdGlvbjo6b2JqZWN0X2NsYXNzX2luZm87CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCB0cmFja2luZyhjb25zdCB1bnNpZ25lZCBpbnQgLyogZmxhZ3MgKi8pIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfYWx3YXlzCisgICAgICAgICAgICB8fCAoIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfc2VsZWN0aXZlbHkKKyAgICAgICAgICAgICAgICAmJiBzZXJpYWxpemVkX2FzX3BvaW50ZXIoKSk7CisgICAgfQorICAgIHZpcnR1YWwgdmVyc2lvbl90eXBlIHZlcnNpb24oKSBjb25zdCB7CisgICAgICAgIHJldHVybiB2ZXJzaW9uX3R5cGUoOjpib29zdDo6c2VyaWFsaXphdGlvbjo6dmVyc2lvbjwgVCA+Ojp2YWx1ZSk7CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0Ojppc19wb2x5bW9ycGhpYzwgVCA+Ojp2YWx1ZTsKKyAgICB9CisgICAgdmlydHVhbCB+aXNlcmlhbGl6ZXIoKXt9OworfTsKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorQk9PU1RfRExMRVhQT1JUIHZvaWQgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD46OmxvYWRfb2JqZWN0X2RhdGEoCisgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICB2b2lkICp4LCAKKyAgICBjb25zdCB1bnNpZ25lZCBpbnQgZmlsZV92ZXJzaW9uCispIGNvbnN0IHsKKyAgICAvLyBub3RlOiB3ZSBub3cgY29tbWVudCB0aGlzIG91dC4gQmVmb3JlIHdlIHBlcm1pdGVkIGFyY2hpdmUKKyAgICAvLyB2ZXJzaW9uICMgdG8gYmUgdmVyeSBsYXJnZS4gIE5vdyB3ZSBkb24ndC4gIFRvIHBlcm1pdAorICAgIC8vIHJlYWRlcnMgb2YgdGhlc2Ugb2xkIGFyY2hpdmVzLCB3ZSBoYXZlIHRvIHN1cHByZXNzIHRoaXMgCisgICAgLy8gY29kZS4gIFBlcmhhcHMgaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCByZS1lbmFibGUgaXQgYnV0CisgICAgLy8gcGVybWl0IGl0cyBzdXBwcmVzc2lvbiB3aXRoIGEgcnVudGltZSBzd2l0Y2guCisgICAgI2lmIDAKKyAgICAvLyB0cmFwIGNhc2Ugd2hlcmUgdGhlIHByb2dyYW0gY2Fubm90IGhhbmRsZSB0aGUgY3VycmVudCB2ZXJzaW9uCisgICAgaWYoZmlsZV92ZXJzaW9uID4gc3RhdGljX2Nhc3Q8Y29uc3QgdW5zaWduZWQgaW50Pih2ZXJzaW9uKCkpKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZTo6YXJjaGl2ZV9leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFyY2hpdmU6OmFyY2hpdmVfZXhjZXB0aW9uOjp1bnN1cHBvcnRlZF9jbGFzc192ZXJzaW9uLAorICAgICAgICAgICAgICAgIGdldF9kZWJ1Z19pbmZvKCkKKyAgICAgICAgICAgICkKKyAgICAgICAgKTsKKyAgICAjZW5kaWYKKyAgICAvLyBtYWtlIHN1cmUgY2FsbCBpcyByb3V0ZWQgdGhyb3VnaCB0aGUgaGlnZXN0IGludGVyZmFjZSB0aGF0IG1pZ2h0CisgICAgLy8gYmUgc3BlY2lhbGl6ZWQgYnkgdGhlIHVzZXIuCisgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNlcmlhbGl6ZV9hZGwoCisgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjpzbWFydF9jYXN0X3JlZmVyZW5jZTxBcmNoaXZlICY+KGFyKSwKKyAgICAgICAgKiBzdGF0aWNfY2FzdDxUICo+KHgpLCAKKyAgICAgICAgZmlsZV92ZXJzaW9uCisgICAgKTsKK30KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKKy8vIHRoZSBwdXJwb3NlIG9mIHRoaXMgY29kZSBpcyB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIGFuIG9iamVjdAorLy8gd2l0aG91dCByZXF1aXJpbmcgdGhlIGNvbnN0cnVjdG9yIHRvIGJlIGNhbGxlZC4gIFByZXN1bWFibHkKKy8vIHRoZSBhbGxvY2F0ZWQgb2JqZWN0IHdpbGwgYmUgc3Vic2VxdWVudGx5IGluaXRpYWxpemVkIHdpdGgKKy8vICJwbGFjZW1lbnQgbmV3Ii4gCisvLyBub3RlOiB3ZSBoYXZlIHRoZSBib29zdCB0eXBlIHRyYWl0IGhhc19uZXdfb3BlcmF0b3IgYnV0IHdlCisvLyBoYXZlIG5vIGNvcnJlc3BvbmRpbmcgaGFzX2RlbGV0ZV9vcGVyYXRvci4gIFNvIHdlIHByZXN1bWUKKy8vIHRoYXQgdGhlIGZvcm1lciBiZWluZyB0cnVlIHdvdWxkIGltcGx5IHRoYXQgdGhlIGEgZGVsZXRlCisvLyBvcGVyYXRvciBpcyBhbHNvIGRlZmluZWQgZm9yIHRoZSBjbGFzcyBULgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGhlYXBfYWxsb2NhdGlvbiB7CisgICAgLy8gYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiBkb2Vzbid0IHdvcmsgb24gdGhlc2UgY29tcGlsZXJzCisgICAgI2lmIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IKKyAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGhhbmRsZSBvcGVyYXRvciBuZXcgb3ZlcmxvYWQgZm9yIGNsYXNzIFQKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCl7CisgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgIH0KKyAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICp0KXsKKyAgICAgICAgICAgIChvcGVyYXRvciBkZWxldGUodCkpOworICAgICAgICB9CisgICAgI2Vsc2UKKyAgICAgICAgLy8gbm90ZTogd2UgcHJlc3VtZSB0aGF0IGEgdHJ1ZSB2YWx1ZSBmb3IgaGFzX25ld19vcGVyYXRvcgorICAgICAgICAvLyBpbXBsaWVzIHRoZSBleGlzdGVuY2Ugb2YgYSBjbGFzcyBzcGVjaWZpYyBkZWxldGUgb3BlcmF0b3IgYXMgd2VsbAorICAgICAgICAvLyBhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvci4KKyAgICAgICAgc3RydWN0IGhhc19uZXdfb3BlcmF0b3IgeworICAgICAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxUICo+KChUOjpvcGVyYXRvciBuZXcpKHNpemVvZihUKSkpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICogdCkgeworICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBpbGF0aW9uIGZhaWxzIGhlcmUsIHRoZSBsaWtlbHkgY2F1c2UgdGhhdCB0aGUgY2xhc3MKKyAgICAgICAgICAgICAgICAvLyBUIGhhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvciBidXQgbm8gY2xhc3Mgc3BlY2lmaWMKKyAgICAgICAgICAgICAgICAvLyBkZWxldGUgb3BlcmF0b3Igd2hpY2ggbWF0Y2hlcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZS4KKyAgICAgICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhpcyBzb2x1dGlvbiBhZGRyZXNzZXMgdGhlIGlzc3VlIHRoYXQgdHdvCisgICAgICAgICAgICAgICAgLy8gcG9zc2libGUgc2lnbmF0dXJlcy4gIEJ1dCBpdCBkb2Vzbid0IGFkZHJlc3MgdGhlIHBvc3NpYmlsaXR5CisgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGUgY2xhc3MgbWlnaHQgaGF2ZSBjbGFzcyBzcGVjaWZpYyBuZXcgd2l0aCBOTworICAgICAgICAgICAgICAgIC8vIGNsYXNzIHNwZWNpZmljIGRlbGV0ZSBhdCBhbGwuICBQYXRjaGVzIChjb21wYXRpYmxlIHdpdGgKKyAgICAgICAgICAgICAgICAvLyBDKyswMykgd2VsY29tZSEKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RydWN0IGRvZXNudF9oYXZlX25ld19vcGVyYXRvciB7CisgICAgICAgICAgICBzdGF0aWMgVCogaW52b2tlX25ldygpIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBzdGF0aWMgdm9pZCBpbnZva2VfZGVsZXRlKFQgKiB0KSB7CisgICAgICAgICAgICAgICAgLy8gTm90ZTogSSdtIHJlbGlhbmNlIHVwb24gYXV0b21hdGljIGNvbnZlcnNpb24gZnJvbSBUICogdG8gdm9pZCAqIGhlcmUKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHJldHVybiB0eXBleDo6aW52b2tlX25ldygpOworICAgICAgICB9CisgICAgICAgIHN0YXRpYyB2b2lkIGludm9rZV9kZWxldGUoVCAqdCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHR5cGV4OjppbnZva2VfZGVsZXRlKHQpOworICAgICAgICB9CisgICAgI2VuZGlmCisgICAgZXhwbGljaXQgaGVhcF9hbGxvY2F0aW9uKCl7CisgICAgICAgIG1fcCA9IGludm9rZV9uZXcoKTsKKyAgICB9CisgICAgfmhlYXBfYWxsb2NhdGlvbigpeworICAgICAgICBpZiAoMCAhPSBtX3ApCisgICAgICAgICAgICBpbnZva2VfZGVsZXRlKG1fcCk7CisgICAgfQorICAgIFQqIGdldCgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fcDsKKyAgICB9CisKKyAgICBUKiByZWxlYXNlKCkgeworICAgICAgICBUKiBwID0gbV9wOworICAgICAgICBtX3AgPSAwOworICAgICAgICByZXR1cm4gcDsKKyAgICB9Citwcml2YXRlOgorICAgIFQqIG1fcDsKK307CisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIFQ+CitjbGFzcyBwb2ludGVyX2lzZXJpYWxpemVyIDoKKyAgICBwdWJsaWMgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICB2aXJ0dWFsIHZvaWQgKiBoZWFwX2FsbG9jYXRpb24oKSBjb25zdCB7CisgICAgICAgIGRldGFpbDo6aGVhcF9hbGxvY2F0aW9uPFQ+IGg7CisgICAgICAgIFQgKiB0ID0gaC5nZXQoKTsKKyAgICAgICAgaC5yZWxlYXNlKCk7CisgICAgICAgIHJldHVybiB0OworICAgIH0KKyAgICB2aXJ0dWFsIGNvbnN0IGJhc2ljX2lzZXJpYWxpemVyICYgZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6c2luZ2xldG9uPAorICAgICAgICAgICAgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD4KKyAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgfQorICAgIEJPT1NUX0RMTEVYUE9SVCB2aXJ0dWFsIHZvaWQgbG9hZF9vYmplY3RfcHRyKAorICAgICAgICBiYXNpY19pYXJjaGl2ZSAmIGFyLCAKKyAgICAgICAgdm9pZCAqIHgsCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7Citwcm90ZWN0ZWQ6CisgICAgLy8gdGhpcyBzaG91bGQgYWx3YXkgYmUgYSBzaW5nbGV0b24gc28gbWFrZSB0aGUgY29uc3RydWN0b3IgcHJvdGVjdGVkCisgICAgcG9pbnRlcl9pc2VyaWFsaXplcigpOworICAgIH5w</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="8" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="9" type="4">
        <text encoding="base64"></text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxtZXNzYWdlc1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxtZXNzYWdlc1w+</last-pattern>
      <last-replace>onAnswerSelected</last-replace>
      <last-substitute encoding="base64">XDxtZXNzYWdlc1w+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDw7XD4=</entry>
        <entry encoding="base64">XDwiXD4=</entry>
        <entry encoding="base64">XDxleWVcPg==</entry>
        <entry encoding="base64">XDxBcHBOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxSb290U3RhY2tcPg==</entry>
        <entry encoding="base64">XDxhbGxRdWVzdGlvbnNcPg==</entry>
        <entry encoding="base64">XDxhbGxBY3RzXD4=</entry>
        <entry encoding="base64">XDxhbGxBY3RDYXRlZ29yaWVzXD4=</entry>
        <entry encoding="base64">XDxTdGFja05hdmlnYXRvclw+</entry>
        <entry encoding="base64">XDxUYWJOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxTd2l0Y2hOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxleHRlcm5hbFVybFw+</entry>
        <entry>i</entry>
        <entry encoding="base64">XDxzZXRBbnN3ZXJzXD4=</entry>
        <entry encoding="base64">XDxUVmFsaWRhdGVRdWVzdGlvblw+</entry>
        <entry encoding="base64">XDxvbkFuc3dlcnNTZWxlY3RlZFw+</entry>
        <entry encoding="base64">XDx2YWxpZGF0ZVF1ZXN0aW9uXD4=</entry>
        <entry encoding="base64">XDx2ZXJzaW9uXD4=</entry>
        <entry encoding="base64">XDxwYXRjaEFubm91bmNlQ29udGFpbmVyRmFjdG9yeVw+</entry>
        <entry encoding="base64">XDxtZXNzYWdlc1w+</entry>
      </history-search>
      <history-cmd>
        <entry>%s//STORE_COURSES</entry>
        <entry>%s//course</entry>
        <entry>%s//VALID/g</entry>
        <entry>%s//willReconnectWithSSO/g</entry>
        <entry>%s//willReconnectInSSO/g</entry>
        <entry>%s//RootStack/g</entry>
        <entry>%s//RootNavigator/g</entry>
        <entry>%s//questions/g</entry>
        <entry>%s//acts/g</entry>
        <entry>%s//actCategories/g</entry>
        <entry>%s//createStackNavigator</entry>
        <entry>%s//createTabNavigator</entry>
        <entry>%s//createSwitchNavigator</entry>
        <entry>%s//url/g</entry>
        <entry>//setAnswers/gc</entry>
        <entry>%s//setAnswers/g</entry>
        <entry>%s//onAnswersSelected/g</entry>
        <entry>%s//onAnswerSelected/g</entry>
        <entry>wq</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>