<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/registerAccount.handler.ts" timestamp="1558986263042">
        <mark key="[" line="12" column="27" />
      </file>
      <file name="/Dummy.txt" timestamp="1559547147905">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/node_modules/react-native-recaptcha-v3/index.js" timestamp="1559125923067">
        <mark key="[" line="78" column="0" />
        <mark key="]" line="78" column="0" />
        <mark key="." line="78" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/sendEmailValidationEmail.handler.ts" timestamp="1558992259307">
        <mark key="[" line="38" column="0" />
        <mark key="]" line="38" column="0" />
        <mark key="." line="38" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-profile/business/profile.service.ts" timestamp="1558985518959">
        <mark key="[" line="12" column="3" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.controller.ts" timestamp="1559025228634">
        <mark key="[" line="69" column="17" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/interface/hasVerifiedEmail.event.ts" timestamp="1558985603841">
        <mark key="[" line="2" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/interface/resetPasswordEmailSent.event.ts" timestamp="1558988330257">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/pages/Login/Login.component.js" timestamp="1559470563378">
        <mark key="[" line="250" column="18" />
        <mark key="]" line="250" column="18" />
        <mark key="." line="250" column="18" />
        <mark key="^" line="250" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/package.json" timestamp="1559148831520">
        <mark key="[" line="52" column="0" />
        <mark key="]" line="52" column="0" />
        <mark key="." line="52" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/captcha-html.ts" timestamp="1559470254684">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/patchPostMessageJsCode.js" timestamp="1559470977896">
        <mark key="[" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js" timestamp="1559120518439">
        <mark key="[" line="41" column="17" />
        <mark key="]" line="41" column="17" />
        <mark key="." line="41" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-app/src/pages/Landing/Login/Form.container.tsx" timestamp="1559469865223">
        <mark key="[" line="75" column="0" />
        <mark key="]" line="75" column="38" />
      </file>
      <file name="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.proto" timestamp="1559030607786">
        <mark key="[" line="22" column="7" />
        <mark key="]" line="22" column="6" />
        <mark key="." line="22" column="6" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/Recaptcha.component.js" timestamp="1559471307468">
        <mark key="[" line="75" column="0" />
        <mark key="]" line="75" column="0" />
        <mark key="." line="75" column="0" />
      </file>
      <file name="/JavaScript Console" timestamp="1559040615428">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/UGC/UGC/src/components/ReCaptcha/index.js" timestamp="1559148623006">
        <mark key="[" line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="17" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/payment/containers/storePaymentContainerFactory.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/payment/containers/storePaymentContainerFactory.ts" />
      <jump line="2" column="24" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/api/core/affiny.endpoints.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/subscriptions/containers/getSubscriptionContainerFactory.ts" />
      <jump line="79" column="17" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/payment/saga.test.ts" />
      <jump line="9" column="59" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="77" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="10" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/containers/loginContainerFactory.ts" />
      <jump line="54" column="23" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Recaptcha/captcha.js" />
      <jump line="75" column="10" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/PriceTable/PriceTable.component.tsx" />
      <jump line="48" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="110" column="30" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/patches/react-native+0.57.7.patch" />
      <jump line="48" column="83" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="113" column="18" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="30" column="22" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="66" column="4" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/bridges/RNIap.ts" />
      <jump line="222" column="5" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="210" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="184" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="169" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="48" column="6" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/modules/payment/saga.ts" />
      <jump line="145" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/config/webpack.config.dev.js" />
      <jump line="45" column="7" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/components/MemberCard/MemberCard.doc.tsx" />
      <jump line="1" column="25" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/setup/setup.ts" />
      <jump line="63" column="20" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.ts" />
      <jump line="60" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.web.ts" />
      <jump line="98" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/services/ImagePickerService.web.ts" />
      <jump line="0" column="33" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/RateCard/RateCardAndroid/RateCardAndroid.component.tsx" />
      <jump line="27" column="14" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="28" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="30" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="32" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="36" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="40" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="44" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="48" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="52" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="56" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="60" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="68" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/types/react-native-adjust/index.d.ts" />
      <jump line="11" column="26" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Landing/Welcome/Welcome.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Landing/Welcome/Welcome.component.tsx" />
      <jump line="37" column="25" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/MatchList/MatchList.component.tsx" />
      <jump line="37" column="72" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Cards/FullPageMemberCard/FullPageMemberCard.component.test.tsx" />
      <jump line="30" column="2" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/components/Cards/FullPageMemberCard/FullPageMemberCard.component.test.tsx" />
      <jump line="576" column="45" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/translations/locales/fr.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Yellow/trpc-mobile-app/web/src/components/Modal.js" />
      <jump line="12" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/components/BottomNavigation/BottomNavigation.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/Home/components/BottomNavigation/BottomNavigation.component.tsx" />
      <jump line="1" column="15" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/src/pages/WhyPremium/WhyPremium.component.tsx" />
      <jump line="0" column="32" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/pages/WhyPremium/WhyPremium.component.tsx" />
      <jump line="123" column="24" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/saga.ts" />
      <jump line="11" column="38" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/actions.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-core/modules/auth/actions.ts" />
      <jump line="16" column="9" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-app/ci/get-platform-deploy-strategy.sh" />
      <jump line="3" column="7" filename="$USER_HOME$/Projects/MapDojo/dojo-map-expo/src/lib/geolocation/index.js" />
      <jump line="0" column="21" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/NonScrollableDiv.component.tsx" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/NonScrollableDiv.container.tsx" />
      <jump line="23" column="56" filename="$USER_HOME$/Projects/Meetic/js-affiny/affiny-web/src/services/iosScroll/ScrollableDiv.component.tsx" />
      <jump line="26" column="3" filename="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-web/src/helpers/cookies.test.ts" />
      <jump line="0" column="30" filename="$USER_HOME$/Projects/Meetic/js-affiny/packages/affiny-web/src/helpers/cookies.test.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/Generator/generator-rn-toolbox/generators/fastlane-setup/templates/env" />
      <jump line="0" column="15" filename="$USER_HOME$/Projects/Faurecia/customer-satisfaction/migrations/1554128851626-add_parent_account_id.js" />
      <jump line="5" column="20" filename="$USER_HOME$/Projects/onlineApp/OnlineApp/ios/Podfile" />
      <jump line="0" column="7" filename="$USER_HOME$/Projects/BigMamma/big-mamma/server/src/modules/Payment/payment.business.js" />
      <jump line="48" column="58" filename="$USER_HOME$/Projects/BigMamma/big-mamma/server/src/modules/Order/order.business.js" />
      <jump line="26" column="22" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/infrastructure/api/auth.controller.ts" />
      <jump line="59" column="53" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/api-gateway/controllers/auth.controller.ts" />
      <jump line="0" column="13" filename="$USER_HOME$/Projects/InshAllah/InshAllah/fastlane/.env.staging" />
      <jump line="28" column="29" filename="$USER_HOME$/Projects/WWF/wag-app/src/components/CodePushUpdateButton.js" />
      <jump line="0" column="7" filename="$USER_HOME$/Projects/WWF/wag-app/src/components/CodePushUpdateButton.js" />
      <jump line="6" column="1" filename="$USER_HOME$/Projects/CQRS/blog/src/article.entity.ts" />
      <jump line="0" column="0" filename="/Dummy.txt" />
      <jump line="13" column="27" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/shared/tsconfig.base.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/shared/tsconfig.base.json" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-algo/tsconfig.json" />
      <jump line="15" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah/package.json" />
      <jump line="0" column="15" filename="$USER_HOME$/Projects/InshAllah/InshAllah/src/components/Cross/Cross.tsx" />
      <jump line="11" column="13" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/dto/authCredentials.dto.ts" />
      <jump line="3" column="26" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/dto/resetPassword.dto.ts" />
      <jump line="0" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/doesEmailAlreadyExist.handler.ts" />
      <jump line="11" column="45" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/login.handler.ts" />
      <jump line="1" column="17" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/sendResetPasswordEmail.handler.ts" />
      <jump line="10" column="5" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/getUserIdFromPwdToken.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/query/handler/getUserIdFromPwdToken.handler.ts" />
      <jump line="89" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/query.generator.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/query.generator.js" />
      <jump line="10" column="20" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/logout.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/business/command/handler/logout.handler.ts" />
      <jump line="0" column="4" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/utils-generator/generator/command.generator.js" />
      <jump line="14" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/handler/loggedOut.handler.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/event/handler/loggedOut.handler.ts" />
      <jump line="16" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/model/account.model.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah-Server/packages/microservice-auth/domain/model/account.model.ts" />
      <jump line="78" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah/node_modules/@react-navigation/native/src/createAppContainer.js" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/InshAllah/InshAllah/node_modules/@react-navigation/native/src/createAppContainer.js" />
      <jump line="12" column="12" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
      <jump line="35865" column="0" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
      <jump line="13" column="0" filename="$USER_HOME$/Projects/UGC/UGC/patches/react-native+0.57.8.patch" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">Zgo=</text>
      </register>
      <register name="d" type="4">
        <text />
      </register>
      <register name="-" type="4">
        <text>Add lang and keep webview re</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxtZXNzYWdlc1w+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICBsYW5nPXtjb25maWcuZW52LmxvY2FsZX0K</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">Zgo=</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">KyAgICBjb21tb25fb2FyY2hpdmUodW5zaWduZWQgaW50IGZsYWdzID0gMCkgOiAK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">KyAgICB2b2lkIHNhdmVfZW5kKGNvbnN0IGNoYXIgKiAvKm5hbWUqLyl7fQo=</text>
      </register>
      <register name="s" type="4">
        <text>dfiiillvbdjjjjiiiiiilllaaaassss</text>
      </register>
      <register name="4" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="4">
        <text encoding="base64">CisgICAgY29tbW9uX29hcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyA9IDApIDogCisgICAgICAgIGJhc2ljX29hcmNoaXZlKGZsYWdzKSwKKyAgICAgICAgaW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+KCkKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX09BUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwCkBAIC0wLDAgKzEsNTcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAgCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZiAKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8gMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyAgZGVjbC5ocHAKKy8vCisvLyAgKGMpIENvcHlyaWdodCBSb2JlcnQgUmFtZXkgMjAwNAorLy8gIFVzZSwgbW9kaWZpY2F0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyAgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgbGlicmFyeSBob21lIHBhZ2UgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9zZXJpYWxpemF0aW9uCisKKy8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vIAorCisvLyBUaGlzIGhlYWRlciBpbXBsZW1lbnRzIHNlcGFyYXRlIGNvbXBpbGF0aW9uIGZlYXR1cmVzIGFzIGRlc2NyaWJlZCBpbgorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvbW9yZS9zZXBhcmF0ZV9jb21waWxhdGlvbi5odG1sCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorCisjaWYgKGRlZmluZWQoQk9PU1RfQUxMX0RZTl9MSU5LKSB8fCBkZWZpbmVkKEJPT1NUX1NFUklBTElaQVRJT05fRFlOX0xJTkspKQorICAgICNpZiBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfRVhQT1JUCisgICAgI2Vsc2UKKyAgICAgICAgI2RlZmluZSBCT09TVF9BUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0lNUE9SVAorICAgICNlbmRpZgorCisgICAgI2lmIGRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX1dBUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0VYUE9SVAorICAgICNlbHNlCisgICAgICAgICNkZWZpbmUgQk9PU1RfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyAgICAjaWYgZGVmaW5lZChCT09TVF9XQVJDSElWRV9TT1VSQ0UpIHx8IGRlZmluZWQoQk9PU1RfQVJDSElWRV9TT1VSQ0UpCisgICAgICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIEJPT1NUX1NZTUJPTF9FWFBPUlQKKyAgICAjZWxzZQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyNlbmRpZgorCisjaWYgISBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfREVDTCkKKyAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTAorI2VuZGlmCisjaWYgISBkZWZpbmVkKEJPT1NUX1dBUkNISVZFX0RFQ0wpCisgICAgI2RlZmluZSBCT09TVF9XQVJDSElWRV9ERUNMCisjZW5kaWYKKyNpZiAhIGRlZmluZWQoQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMKQorICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0RFQ0xfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvaGVscGVyX2NvbGxlY3Rpb24uaHBwCkBAIC0wLDAgKzEsOTkgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSEVMUEVSX0NPTExFQ1RJT05fSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0hFTFBFUl9DT0xMRUNUSU9OX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpICYmIChfTVNDX1ZFUiA+PSAxMDIwKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBoZWxwZXJfY29sbGVjdGlvbi5ocHA6IGFyY2hpdmUgc3VwcG9ydCBmb3IgcnVuLXRpbWUgaGVscGVycworCisvLyAoQykgQ29weXJpZ2h0IDIwMDItMjAwOCBSb2JlcnQgUmFtZXkgYW5kIEpvYXF1aW4gTSBMb3BleiBNdW5vegorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxjc3RkZGVmPiAvLyBOVUxMCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPHV0aWxpdHk+CisjaW5jbHVkZSA8bWVtb3J5PgorI2luY2x1ZGUgPGFsZ29yaXRobT4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9zbWFydF9wdHIvc2hhcmVkX3B0ci5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc21hcnRfcHRyL21ha2Vfc2hhcmVkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGhlbHBlcl9jb2xsZWN0aW9uCit7CisgICAgaGVscGVyX2NvbGxlY3Rpb24oY29uc3QgaGVscGVyX2NvbGxlY3Rpb24mKTsgICAgICAgICAgICAgIC8vIG5vbi1jb3B5YWJsZQorICAgIGhlbHBlcl9jb2xsZWN0aW9uJiBvcGVyYXRvciA9IChjb25zdCBoZWxwZXJfY29sbGVjdGlvbiYpOyAvLyBub24tY29weWFibGUKKworICAgIC8vIG5vdGU6IHdlIGRvbnQnIGFjdHVhbGx5ICJzaGFyZSIgdGhlIGZ1bmN0aW9uIG9iamVjdCBwb2ludGVyCisgICAgLy8gd2Ugb25seSB1c2Ugc2hhcmVkX3B0ciB0byBtYWtlIHN1cmUgdGhhdCBpdCBnZXQncyBkZWxldGVkCisKKyAgICB0eXBlZGVmIHN0ZDo6cGFpcjwKKyAgICAgICAgY29uc3Qgdm9pZCAqLAorICAgICAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPgorICAgID4gaGVscGVyX3ZhbHVlX3R5cGU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPiBtYWtlX2hlbHBlcl9wdHIoKXsKKyAgICAgICAgLy8gdXNlIGJvb3N0OjpzaGFyZWRfcHRyIHJhdGhlciB0aGFuIHN0ZDo6c2hhcmVkX3B0ciB0byBtYWludGFpbgorICAgICAgICAvLyBjKyswMyBjb21wYXRpYmlsaXR5CisgICAgICAgIHJldHVybiBib29zdDo6bWFrZV9zaGFyZWQ8VD4oKTsKKyAgICB9CisKKyAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGhlbHBlcl92YWx1ZV90eXBlPiBjb2xsZWN0aW9uOworICAgIGNvbGxlY3Rpb24gbV9jb2xsZWN0aW9uOworCisgICAgc3RydWN0IHByZWRpY2F0ZSB7CisgICAgICAgIEJPT1NUX0RFTEVURURfRlVOQ1RJT04ocHJlZGljYXRlICYgb3BlcmF0b3I9KGNvbnN0IHByZWRpY2F0ZSAmIHJocykpCisgICAgcHVibGljOgorICAgICAgICBjb25zdCB2b2lkICogY29uc3QgbV90aTsKKyAgICAgICAgYm9vbCBvcGVyYXRvcigpKGhlbHBlcl92YWx1ZV90eXBlIGNvbnN0ICZyaHMpIGNvbnN0IHsKKyAgICAgICAgICAgIHJldHVybiBtX3RpID09IHJocy5maXJzdDsKKyAgICAgICAgfQorICAgICAgICBwcmVkaWNhdGUoY29uc3Qgdm9pZCAqIHRpKSA6CisgICAgICAgICAgICBtX3RpKHRpKQorICAgICAgICB7fQorICAgIH07Citwcm90ZWN0ZWQ6CisgICAgaGVscGVyX2NvbGxlY3Rpb24oKXt9CisgICAgfmhlbHBlcl9jb2xsZWN0aW9uKCl7fQorcHVibGljOgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEhlbHBlcj4KKyAgICBIZWxwZXImIGZpbmRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApIHsKKyAgICAgICAgY29sbGVjdGlvbjo6Y29uc3RfaXRlcmF0b3IgaXQgPQorICAgICAgICAgICAgc3RkOjpmaW5kX2lmKAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5iZWdpbigpLAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5lbmQoKSwKKyAgICAgICAgICAgICAgICBwcmVkaWNhdGUoaWQpCisgICAgICAgICAgICApOworCisgICAgICAgIHZvaWQgKiBydmFsID0gMDsKKyAgICAgICAgaWYoaXQgPT0gbV9jb2xsZWN0aW9uLmVuZCgpKXsKKyAgICAgICAgICAgIG1fY29sbGVjdGlvbi5wdXNoX2JhY2soCisgICAgICAgICAgICAgICAgc3RkOjptYWtlX3BhaXIoaWQsIG1ha2VfaGVscGVyX3B0cjxIZWxwZXI+KCkpCisgICAgICAgICAgICApOworICAgICAgICAgICAgcnZhbCA9IG1fY29sbGVjdGlvbi5iYWNrKCkuc2Vjb25kLmdldCgpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICBydmFsID0gaXQtPnNlY29uZC5nZXQoKTsKKyAgICAgICAgfQorICAgICAgICByZXR1cm4gKnN0YXRpY19jYXN0PEhlbHBlciAqPihydmFsKTsKKyAgICB9Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0RFVEFJTF9IRUxQRVJfQ09MTEVDVElPTl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2VfaWFyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfSUFSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2hlbHBlcl9jb2xsZWN0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9pYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2VfaWFyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzx0cnVlPiBpc19sb2FkaW5nOworICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplciAmIGJwaXMgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX2lzZXJpYWxpemVyPEFyY2hpdmUsIFQ+IAorICAgICAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+cmVnaXN0ZXJfYmFzaWNfc2VyaWFsaXplcihicGlzLmdldF9iYXNpY19zZXJpYWxpemVyKCkpOworICAgICAgICByZXR1cm4gJiBicGlzOworICAgIH0KKyAgICB0ZW1wbGF0ZTxjbGFzcyBIZWxwZXI+CisgICAgSGVscGVyICYKKyAgICBnZXRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApeworICAgICAgICBoZWxwZXJfY29sbGVjdGlvbiAmIGhjID0gdGhpcy0+VGhpcygpLT5nZXRfaGVscGVyX2NvbGxlY3Rpb24oKTsKKyAgICAgICAgcmV0dXJuIGhjLnRlbXBsYXRlIGZpbmRfaGVscGVyPEhlbHBlcj4oaWQpOworICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvcj4+KFQgJiB0KXsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5sb2FkX292ZXJyaWRlKHQpOworICAgICAgICByZXR1cm4gKiB0aGlzLT5UaGlzKCk7CisgICAgfQorCisgICAgLy8gdGhlICYgb3BlcmF0b3IgCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3ImKFQgJiB0KXsKKyAgICAgICAgcmV0dXJuICoodGhpcy0+VGhpcygpKSA+PiB0OworICAgIH0KK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0lOVEVSRkFDRV9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2Vfb2FyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX09BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9vc2VyaWFsaXplci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9vYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2Vfb2FyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfbG9hZGluZzsKKyAgICB0eXBlZGVmIG1wbDo6Ym9vbF88dHJ1ZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShjb25zdCBUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplciAmIGJwb3MgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX29zZXJpYWxpemVyPEFyY2hpdmUsIFQ+CisgICAgICAgICAgICA+OjpnZXRfY29uc3RfaW5zdGFuY2UoKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5yZWdpc3Rlcl9iYXNpY19zZXJpYWxpemVyKGJwb3MuZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSk7CisgICAgICAgIHJldHVybiAmIGJwb3M7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlPGNsYXNzIEhlbHBlcj4KKyAgICBIZWxwZXIgJgorICAgIGdldF9oZWxwZXIodm9pZCAqIGNvbnN0IGlkID0gMCl7CisgICAgICAgIGhlbHBlcl9jb2xsZWN0aW9uICYgaGMgPSB0aGlzLT5UaGlzKCktPmdldF9oZWxwZXJfY29sbGVjdGlvbigpOworICAgICAgICByZXR1cm4gaGMudGVtcGxhdGUgZmluZF9oZWxwZXI8SGVscGVyPihpZCk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3I8PChjb25zdCBUICYgdCl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+c2F2ZV9vdmVycmlkZSh0KTsKKyAgICAgICAgcmV0dXJuICogdGhpcy0+VGhpcygpOworICAgIH0KKyAgICAKKyAgICAvLyB0aGUgJiBvcGVyYXRvciAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvciYoY29uc3QgVCAmIHQpeworICAgICAgICByZXR1cm4gKiB0aGlzIC0+VGhpcygpIDw8IHQ7CisgICAgfQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2lzZXJpYWxpemVyLmhwcApAQCAtMCwwICsxLDYyNCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9JU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfSVNFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNwcmFnbWEgaW5saW5lX2RlcHRoKDUxMSkKKyNwcmFnbWEgaW5saW5lX3JlY3Vyc2lvbihvbikKKyNlbmRpZgorCisjaWYgZGVmaW5lZChfX01XRVJLU19fKQorI3ByYWdtYSBpbmxpbmVfZGVwdGgoNTExKQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBpc2VyaWFsaXplci5ocHA6IGludGVyZmFjZSBmb3Igc2VyaWFsaXphdGlvbiBzeXN0ZW0uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPG5ldz4gICAgIC8vIGZvciBwbGFjZW1lbnQgbmV3CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc2l6ZV90LCBOVUxMCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZHsgCisgICAgdXNpbmcgOjpzaXplX3Q7IAorfSAvLyBuYW1lc3BhY2Ugc3RkCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZGVudGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2dyZWF0ZXJfZXF1YWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9lcXVhbF90by5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvY29yZS9ub19leGNlcHRpb25zX3N1cHBvcnQuaHBwPgorCisjaWZuZGVmIEJPT1NUX1NFUklBTElaQVRJT05fREVGQVVMVF9UWVBFX0lORk8gICAKKyAgICAjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9leHRlbmRlZF90eXBlX2luZm9fdHlwZWlkLmhwcD4gICAKKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NtYXJ0X2Nhc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vc3RhdGljX3dhcm5pbmcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9pbnRlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZW51bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2V4dGVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9seW1vcnBoaWMuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hc3N1bWVfYWJzdHJhY3QuaHBwPgorCisjaWZuZGVmIEJPT1NUX01TVkMKKyAgICAjZGVmaW5lIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IgKCAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICBCT09TVF9XT1JLQVJPVU5EKF9fSUJNQ1BQX18sIDwgMTIxMCkgICAgICAgICAgICBcCisgICAgICAgIHx8IGRlZmluZWQoX19TVU5QUk9fQ0MpICYmIChfX1NVTlBST19DQyA8IDB4NTkwKSAgIFwKKyAgICApCisjZWxzZQorICAgICNkZWZpbmUgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUiAwCisjZW5kaWYKKworI2lmICEgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2hhc19uZXdfb3BlcmF0b3IuaHBwPgorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NlcmlhbGl6YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdmVyc2lvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9sZXZlbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90eXBlX2luZm9faW1wbGVtZW50YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3ZvaWRfY2FzdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hcnJheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9jb2xsZWN0aW9uX3NpemVfdHlwZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zaW5nbGV0b24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vd3JhcHBlci5ocHA+CisKKy8vIHRoZSBmb2xsb3dpbmcgaXMgbmVlZCBvbmx5IGZvciBkeW5hbWljIGNhc3Qgb2YgcG9seW1vcnBoaWMgcG9pbnRlcnMKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2FyY2hpdmVfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FyY2hpdmVfc2VyaWFsaXplcl9tYXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NoZWNrLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLyBhbiBhY2Nlc3NvciB0byBwZXJtaXQgZnJpZW5kIGFjY2VzcyB0byBhcmNoaXZlcy4gIE5lZWRlZCBiZWNhdXNlCisvLyBzb21lIGNvbXBpbGVycyBkb24ndCBoYW5kbGUgZnJpZW5kIHRlbXBsYXRlcyBjb21wbGV0ZWx5CitjbGFzcyBsb2FkX2FjY2VzcyB7CitwdWJsaWM6CisgICAgdGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgVD4KKyAgICBzdGF0aWMgdm9pZCBsb2FkX3ByaW1pdGl2ZShBcmNoaXZlICZhciwgVCAmdCl7CisgICAgICAgIGFyLmxvYWQodCk7CisgICAgfQorfTsKKworbmFtZXNwYWNlIGRldGFpbCB7CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorY2xhc3MgaXNlcmlhbGl6ZXIgOiBwdWJsaWMgYmFzaWNfaXNlcmlhbGl6ZXIKK3sKK3ByaXZhdGU6CisgICAgdmlydHVhbCB2b2lkIGRlc3Ryb3koLypjb25zdCovIHZvaWQgKmFkZHJlc3MpIGNvbnN0IHsKKyAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmFjY2Vzczo6ZGVzdHJveShzdGF0aWNfY2FzdDxUICo+KGFkZHJlc3MpKTsKKyAgICB9Citwcm90ZWN0ZWQ6CisgICAgLy8gcHJvdGVjdGVkIGNvbnN0cnVjdG9yIHNpbmNlIGl0J3MgYWx3YXlzIGNyZWF0ZWQgYnkgc2luZ2xldG9uCisgICAgZXhwbGljaXQgaXNlcmlhbGl6ZXIoKSA6CisgICAgICAgIGJhc2ljX2lzZXJpYWxpemVyKAorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSAKKyAgICAgICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dHlwZV9pbmZvX2ltcGxlbWVudGF0aW9uPCBUID46OnR5cGUKKyAgICAgICAgICAgID46OmdldF9jb25zdF9pbnN0YW5jZSgpCisgICAgICAgICkKKyAgICB7fQorcHVibGljOgorICAgIHZpcnR1YWwgQk9PU1RfRExMRVhQT1JUIHZvaWQgbG9hZF9vYmplY3RfZGF0YSgKKyAgICAgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICAgICAgdm9pZCAqeCwgCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7CisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPjo6dmFsdWUgCisgICAgICAgICAgICA+PSBib29zdDo6c2VyaWFsaXphdGlvbjo6b2JqZWN0X2NsYXNzX2luZm87CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCB0cmFja2luZyhjb25zdCB1bnNpZ25lZCBpbnQgLyogZmxhZ3MgKi8pIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfYWx3YXlzCisgICAgICAgICAgICB8fCAoIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfc2VsZWN0aXZlbHkKKyAgICAgICAgICAgICAgICAmJiBzZXJpYWxpemVkX2FzX3BvaW50ZXIoKSk7CisgICAgfQorICAgIHZpcnR1YWwgdmVyc2lvbl90eXBlIHZlcnNpb24oKSBjb25zdCB7CisgICAgICAgIHJldHVybiB2ZXJzaW9uX3R5cGUoOjpib29zdDo6c2VyaWFsaXphdGlvbjo6dmVyc2lvbjwgVCA+Ojp2YWx1ZSk7CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0Ojppc19wb2x5bW9ycGhpYzwgVCA+Ojp2YWx1ZTsKKyAgICB9CisgICAgdmlydHVhbCB+aXNlcmlhbGl6ZXIoKXt9OworfTsKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorQk9PU1RfRExMRVhQT1JUIHZvaWQgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD46OmxvYWRfb2JqZWN0X2RhdGEoCisgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICB2b2lkICp4LCAKKyAgICBjb25zdCB1bnNpZ25lZCBpbnQgZmlsZV92ZXJzaW9uCispIGNvbnN0IHsKKyAgICAvLyBub3RlOiB3ZSBub3cgY29tbWVudCB0aGlzIG91dC4gQmVmb3JlIHdlIHBlcm1pdGVkIGFyY2hpdmUKKyAgICAvLyB2ZXJzaW9uICMgdG8gYmUgdmVyeSBsYXJnZS4gIE5vdyB3ZSBkb24ndC4gIFRvIHBlcm1pdAorICAgIC8vIHJlYWRlcnMgb2YgdGhlc2Ugb2xkIGFyY2hpdmVzLCB3ZSBoYXZlIHRvIHN1cHByZXNzIHRoaXMgCisgICAgLy8gY29kZS4gIFBlcmhhcHMgaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCByZS1lbmFibGUgaXQgYnV0CisgICAgLy8gcGVybWl0IGl0cyBzdXBwcmVzc2lvbiB3aXRoIGEgcnVudGltZSBzd2l0Y2guCisgICAgI2lmIDAKKyAgICAvLyB0cmFwIGNhc2Ugd2hlcmUgdGhlIHByb2dyYW0gY2Fubm90IGhhbmRsZSB0aGUgY3VycmVudCB2ZXJzaW9uCisgICAgaWYoZmlsZV92ZXJzaW9uID4gc3RhdGljX2Nhc3Q8Y29uc3QgdW5zaWduZWQgaW50Pih2ZXJzaW9uKCkpKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZTo6YXJjaGl2ZV9leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFyY2hpdmU6OmFyY2hpdmVfZXhjZXB0aW9uOjp1bnN1cHBvcnRlZF9jbGFzc192ZXJzaW9uLAorICAgICAgICAgICAgICAgIGdldF9kZWJ1Z19pbmZvKCkKKyAgICAgICAgICAgICkKKyAgICAgICAgKTsKKyAgICAjZW5kaWYKKyAgICAvLyBtYWtlIHN1cmUgY2FsbCBpcyByb3V0ZWQgdGhyb3VnaCB0aGUgaGlnZXN0IGludGVyZmFjZSB0aGF0IG1pZ2h0CisgICAgLy8gYmUgc3BlY2lhbGl6ZWQgYnkgdGhlIHVzZXIuCisgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNlcmlhbGl6ZV9hZGwoCisgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjpzbWFydF9jYXN0X3JlZmVyZW5jZTxBcmNoaXZlICY+KGFyKSwKKyAgICAgICAgKiBzdGF0aWNfY2FzdDxUICo+KHgpLCAKKyAgICAgICAgZmlsZV92ZXJzaW9uCisgICAgKTsKK30KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKKy8vIHRoZSBwdXJwb3NlIG9mIHRoaXMgY29kZSBpcyB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIGFuIG9iamVjdAorLy8gd2l0aG91dCByZXF1aXJpbmcgdGhlIGNvbnN0cnVjdG9yIHRvIGJlIGNhbGxlZC4gIFByZXN1bWFibHkKKy8vIHRoZSBhbGxvY2F0ZWQgb2JqZWN0IHdpbGwgYmUgc3Vic2VxdWVudGx5IGluaXRpYWxpemVkIHdpdGgKKy8vICJwbGFjZW1lbnQgbmV3Ii4gCisvLyBub3RlOiB3ZSBoYXZlIHRoZSBib29zdCB0eXBlIHRyYWl0IGhhc19uZXdfb3BlcmF0b3IgYnV0IHdlCisvLyBoYXZlIG5vIGNvcnJlc3BvbmRpbmcgaGFzX2RlbGV0ZV9vcGVyYXRvci4gIFNvIHdlIHByZXN1bWUKKy8vIHRoYXQgdGhlIGZvcm1lciBiZWluZyB0cnVlIHdvdWxkIGltcGx5IHRoYXQgdGhlIGEgZGVsZXRlCisvLyBvcGVyYXRvciBpcyBhbHNvIGRlZmluZWQgZm9yIHRoZSBjbGFzcyBULgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGhlYXBfYWxsb2NhdGlvbiB7CisgICAgLy8gYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiBkb2Vzbid0IHdvcmsgb24gdGhlc2UgY29tcGlsZXJzCisgICAgI2lmIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IKKyAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGhhbmRsZSBvcGVyYXRvciBuZXcgb3ZlcmxvYWQgZm9yIGNsYXNzIFQKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCl7CisgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgIH0KKyAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICp0KXsKKyAgICAgICAgICAgIChvcGVyYXRvciBkZWxldGUodCkpOworICAgICAgICB9CisgICAgI2Vsc2UKKyAgICAgICAgLy8gbm90ZTogd2UgcHJlc3VtZSB0aGF0IGEgdHJ1ZSB2YWx1ZSBmb3IgaGFzX25ld19vcGVyYXRvcgorICAgICAgICAvLyBpbXBsaWVzIHRoZSBleGlzdGVuY2Ugb2YgYSBjbGFzcyBzcGVjaWZpYyBkZWxldGUgb3BlcmF0b3IgYXMgd2VsbAorICAgICAgICAvLyBhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvci4KKyAgICAgICAgc3RydWN0IGhhc19uZXdfb3BlcmF0b3IgeworICAgICAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxUICo+KChUOjpvcGVyYXRvciBuZXcpKHNpemVvZihUKSkpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICogdCkgeworICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBpbGF0aW9uIGZhaWxzIGhlcmUsIHRoZSBsaWtlbHkgY2F1c2UgdGhhdCB0aGUgY2xhc3MKKyAgICAgICAgICAgICAgICAvLyBUIGhhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvciBidXQgbm8gY2xhc3Mgc3BlY2lmaWMKKyAgICAgICAgICAgICAgICAvLyBkZWxldGUgb3BlcmF0b3Igd2hpY2ggbWF0Y2hlcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZS4KKyAgICAgICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhpcyBzb2x1dGlvbiBhZGRyZXNzZXMgdGhlIGlzc3VlIHRoYXQgdHdvCisgICAgICAgICAgICAgICAgLy8gcG9zc2libGUgc2lnbmF0dXJlcy4gIEJ1dCBpdCBkb2Vzbid0IGFkZHJlc3MgdGhlIHBvc3NpYmlsaXR5CisgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGUgY2xhc3MgbWlnaHQgaGF2ZSBjbGFzcyBzcGVjaWZpYyBuZXcgd2l0aCBOTworICAgICAgICAgICAgICAgIC8vIGNsYXNzIHNwZWNpZmljIGRlbGV0ZSBhdCBhbGwuICBQYXRjaGVzIChjb21wYXRpYmxlIHdpdGgKKyAgICAgICAgICAgICAgICAvLyBDKyswMykgd2VsY29tZSEKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RydWN0IGRvZXNudF9oYXZlX25ld19vcGVyYXRvciB7CisgICAgICAgICAgICBzdGF0aWMgVCogaW52b2tlX25ldygpIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBzdGF0aWMgdm9pZCBpbnZva2VfZGVsZXRlKFQgKiB0KSB7CisgICAgICAgICAgICAgICAgLy8gTm90ZTogSSdtIHJlbGlhbmNlIHVwb24gYXV0b21hdGljIGNvbnZlcnNpb24gZnJvbSBUICogdG8gdm9pZCAqIGhlcmUKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHJldHVybiB0eXBleDo6aW52b2tlX25ldygpOworICAgICAgICB9CisgICAgICAgIHN0YXRpYyB2b2lkIGludm9rZV9kZWxldGUoVCAqdCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHR5cGV4OjppbnZva2VfZGVsZXRlKHQpOworICAgICAgICB9CisgICAgI2VuZGlmCisgICAgZXhwbGljaXQgaGVhcF9hbGxvY2F0aW9uKCl7CisgICAgICAgIG1fcCA9IGludm9rZV9uZXcoKTsKKyAgICB9CisgICAgfmhlYXBfYWxsb2NhdGlvbigpeworICAgICAgICBpZiAoMCAhPSBtX3ApCisgICAgICAgICAgICBpbnZva2VfZGVsZXRlKG1fcCk7CisgICAgfQorICAgIFQqIGdldCgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fcDsKKyAgICB9CisKKyAgICBUKiByZWxlYXNlKCkgeworICAgICAgICBUKiBwID0gbV9wOworICAgICAgICBtX3AgPSAwOworICAgICAgICByZXR1cm4gcDsKKyAgICB9Citwcml2YXRlOgorICAgIFQqIG1fcDsKK307CisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIFQ+CitjbGFzcyBwb2ludGVyX2lzZXJpYWxpemVyIDoKKyAgICBwdWJsaWMgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICB2aXJ0dWFsIHZvaWQgKiBoZWFwX2FsbG9jYXRpb24oKSBjb25zdCB7CisgICAgICAgIGRldGFpbDo6aGVhcF9hbGxvY2F0aW9uPFQ+IGg7CisgICAgICAgIFQgKiB0ID0gaC5nZXQoKTsKKyAgICAgICAgaC5yZWxlYXNlKCk7CisgICAgICAgIHJldHVybiB0OworICAgIH0KKyAgICB2aXJ0dWFsIGNvbnN0IGJhc2ljX2lzZXJpYWxpemVyICYgZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6c2luZ2xldG9uPAorICAgICAgICAgICAgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD4KKyAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgfQorICAgIEJPT1NUX0RMTEVYUE9SVCB2aXJ0dWFsIHZvaWQgbG9hZF9vYmplY3RfcHRyKAorICAgICAgICBiYXNpY19pYXJjaGl2ZSAmIGFyLCAKKyAgICAgICAgdm9pZCAqIHgsCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7Citwcm90ZWN0ZWQ6CisgICAgLy8gdGhpcyBzaG91bGQgYWx3YXkgYmUgYSBzaW5nbGV0b24gc28gbWFrZSB0aGUgY29uc3RydWN0b3IgcHJvdGVjdGVkCisgICAgcG9pbnRlcl9pc2VyaWFsaXplcigpOworICAgIH5w</text>
      </register>
      <register name="6" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">CisgICAgY29tbW9uX29hcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyA9IDApIDogCisgICAgICAgIGJhc2ljX29hcmNoaXZlKGZsYWdzKSwKKyAgICAgICAgaW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+KCkKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX09BUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwCkBAIC0wLDAgKzEsNTcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAgCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZiAKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8gMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyAgZGVjbC5ocHAKKy8vCisvLyAgKGMpIENvcHlyaWdodCBSb2JlcnQgUmFtZXkgMjAwNAorLy8gIFVzZSwgbW9kaWZpY2F0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyAgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgbGlicmFyeSBob21lIHBhZ2UgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9zZXJpYWxpemF0aW9uCisKKy8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vIAorCisvLyBUaGlzIGhlYWRlciBpbXBsZW1lbnRzIHNlcGFyYXRlIGNvbXBpbGF0aW9uIGZlYXR1cmVzIGFzIGRlc2NyaWJlZCBpbgorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvbW9yZS9zZXBhcmF0ZV9jb21waWxhdGlvbi5odG1sCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorCisjaWYgKGRlZmluZWQoQk9PU1RfQUxMX0RZTl9MSU5LKSB8fCBkZWZpbmVkKEJPT1NUX1NFUklBTElaQVRJT05fRFlOX0xJTkspKQorICAgICNpZiBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfRVhQT1JUCisgICAgI2Vsc2UKKyAgICAgICAgI2RlZmluZSBCT09TVF9BUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0lNUE9SVAorICAgICNlbmRpZgorCisgICAgI2lmIGRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX1dBUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0VYUE9SVAorICAgICNlbHNlCisgICAgICAgICNkZWZpbmUgQk9PU1RfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyAgICAjaWYgZGVmaW5lZChCT09TVF9XQVJDSElWRV9TT1VSQ0UpIHx8IGRlZmluZWQoQk9PU1RfQVJDSElWRV9TT1VSQ0UpCisgICAgICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIEJPT1NUX1NZTUJPTF9FWFBPUlQKKyAgICAjZWxzZQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyNlbmRpZgorCisjaWYgISBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfREVDTCkKKyAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTAorI2VuZGlmCisjaWYgISBkZWZpbmVkKEJPT1NUX1dBUkNISVZFX0RFQ0wpCisgICAgI2RlZmluZSBCT09TVF9XQVJDSElWRV9ERUNMCisjZW5kaWYKKyNpZiAhIGRlZmluZWQoQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMKQorICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0RFQ0xfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvaGVscGVyX2NvbGxlY3Rpb24uaHBwCkBAIC0wLDAgKzEsOTkgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSEVMUEVSX0NPTExFQ1RJT05fSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0hFTFBFUl9DT0xMRUNUSU9OX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpICYmIChfTVNDX1ZFUiA+PSAxMDIwKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBoZWxwZXJfY29sbGVjdGlvbi5ocHA6IGFyY2hpdmUgc3VwcG9ydCBmb3IgcnVuLXRpbWUgaGVscGVycworCisvLyAoQykgQ29weXJpZ2h0IDIwMDItMjAwOCBSb2JlcnQgUmFtZXkgYW5kIEpvYXF1aW4gTSBMb3BleiBNdW5vegorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxjc3RkZGVmPiAvLyBOVUxMCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPHV0aWxpdHk+CisjaW5jbHVkZSA8bWVtb3J5PgorI2luY2x1ZGUgPGFsZ29yaXRobT4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9zbWFydF9wdHIvc2hhcmVkX3B0ci5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc21hcnRfcHRyL21ha2Vfc2hhcmVkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGhlbHBlcl9jb2xsZWN0aW9uCit7CisgICAgaGVscGVyX2NvbGxlY3Rpb24oY29uc3QgaGVscGVyX2NvbGxlY3Rpb24mKTsgICAgICAgICAgICAgIC8vIG5vbi1jb3B5YWJsZQorICAgIGhlbHBlcl9jb2xsZWN0aW9uJiBvcGVyYXRvciA9IChjb25zdCBoZWxwZXJfY29sbGVjdGlvbiYpOyAvLyBub24tY29weWFibGUKKworICAgIC8vIG5vdGU6IHdlIGRvbnQnIGFjdHVhbGx5ICJzaGFyZSIgdGhlIGZ1bmN0aW9uIG9iamVjdCBwb2ludGVyCisgICAgLy8gd2Ugb25seSB1c2Ugc2hhcmVkX3B0ciB0byBtYWtlIHN1cmUgdGhhdCBpdCBnZXQncyBkZWxldGVkCisKKyAgICB0eXBlZGVmIHN0ZDo6cGFpcjwKKyAgICAgICAgY29uc3Qgdm9pZCAqLAorICAgICAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPgorICAgID4gaGVscGVyX3ZhbHVlX3R5cGU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPiBtYWtlX2hlbHBlcl9wdHIoKXsKKyAgICAgICAgLy8gdXNlIGJvb3N0OjpzaGFyZWRfcHRyIHJhdGhlciB0aGFuIHN0ZDo6c2hhcmVkX3B0ciB0byBtYWludGFpbgorICAgICAgICAvLyBjKyswMyBjb21wYXRpYmlsaXR5CisgICAgICAgIHJldHVybiBib29zdDo6bWFrZV9zaGFyZWQ8VD4oKTsKKyAgICB9CisKKyAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGhlbHBlcl92YWx1ZV90eXBlPiBjb2xsZWN0aW9uOworICAgIGNvbGxlY3Rpb24gbV9jb2xsZWN0aW9uOworCisgICAgc3RydWN0IHByZWRpY2F0ZSB7CisgICAgICAgIEJPT1NUX0RFTEVURURfRlVOQ1RJT04ocHJlZGljYXRlICYgb3BlcmF0b3I9KGNvbnN0IHByZWRpY2F0ZSAmIHJocykpCisgICAgcHVibGljOgorICAgICAgICBjb25zdCB2b2lkICogY29uc3QgbV90aTsKKyAgICAgICAgYm9vbCBvcGVyYXRvcigpKGhlbHBlcl92YWx1ZV90eXBlIGNvbnN0ICZyaHMpIGNvbnN0IHsKKyAgICAgICAgICAgIHJldHVybiBtX3RpID09IHJocy5maXJzdDsKKyAgICAgICAgfQorICAgICAgICBwcmVkaWNhdGUoY29uc3Qgdm9pZCAqIHRpKSA6CisgICAgICAgICAgICBtX3RpKHRpKQorICAgICAgICB7fQorICAgIH07Citwcm90ZWN0ZWQ6CisgICAgaGVscGVyX2NvbGxlY3Rpb24oKXt9CisgICAgfmhlbHBlcl9jb2xsZWN0aW9uKCl7fQorcHVibGljOgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEhlbHBlcj4KKyAgICBIZWxwZXImIGZpbmRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApIHsKKyAgICAgICAgY29sbGVjdGlvbjo6Y29uc3RfaXRlcmF0b3IgaXQgPQorICAgICAgICAgICAgc3RkOjpmaW5kX2lmKAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5iZWdpbigpLAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5lbmQoKSwKKyAgICAgICAgICAgICAgICBwcmVkaWNhdGUoaWQpCisgICAgICAgICAgICApOworCisgICAgICAgIHZvaWQgKiBydmFsID0gMDsKKyAgICAgICAgaWYoaXQgPT0gbV9jb2xsZWN0aW9uLmVuZCgpKXsKKyAgICAgICAgICAgIG1fY29sbGVjdGlvbi5wdXNoX2JhY2soCisgICAgICAgICAgICAgICAgc3RkOjptYWtlX3BhaXIoaWQsIG1ha2VfaGVscGVyX3B0cjxIZWxwZXI+KCkpCisgICAgICAgICAgICApOworICAgICAgICAgICAgcnZhbCA9IG1fY29sbGVjdGlvbi5iYWNrKCkuc2Vjb25kLmdldCgpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICBydmFsID0gaXQtPnNlY29uZC5nZXQoKTsKKyAgICAgICAgfQorICAgICAgICByZXR1cm4gKnN0YXRpY19jYXN0PEhlbHBlciAqPihydmFsKTsKKyAgICB9Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0RFVEFJTF9IRUxQRVJfQ09MTEVDVElPTl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2VfaWFyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfSUFSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2hlbHBlcl9jb2xsZWN0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9pYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2VfaWFyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzx0cnVlPiBpc19sb2FkaW5nOworICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplciAmIGJwaXMgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX2lzZXJpYWxpemVyPEFyY2hpdmUsIFQ+IAorICAgICAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+cmVnaXN0ZXJfYmFzaWNfc2VyaWFsaXplcihicGlzLmdldF9iYXNpY19zZXJpYWxpemVyKCkpOworICAgICAgICByZXR1cm4gJiBicGlzOworICAgIH0KKyAgICB0ZW1wbGF0ZTxjbGFzcyBIZWxwZXI+CisgICAgSGVscGVyICYKKyAgICBnZXRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApeworICAgICAgICBoZWxwZXJfY29sbGVjdGlvbiAmIGhjID0gdGhpcy0+VGhpcygpLT5nZXRfaGVscGVyX2NvbGxlY3Rpb24oKTsKKyAgICAgICAgcmV0dXJuIGhjLnRlbXBsYXRlIGZpbmRfaGVscGVyPEhlbHBlcj4oaWQpOworICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvcj4+KFQgJiB0KXsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5sb2FkX292ZXJyaWRlKHQpOworICAgICAgICByZXR1cm4gKiB0aGlzLT5UaGlzKCk7CisgICAgfQorCisgICAgLy8gdGhlICYgb3BlcmF0b3IgCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3ImKFQgJiB0KXsKKyAgICAgICAgcmV0dXJuICoodGhpcy0+VGhpcygpKSA+PiB0OworICAgIH0KK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0lOVEVSRkFDRV9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2Vfb2FyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX09BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9vc2VyaWFsaXplci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9vYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2Vfb2FyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfbG9hZGluZzsKKyAgICB0eXBlZGVmIG1wbDo6Ym9vbF88dHJ1ZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShjb25zdCBUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplciAmIGJwb3MgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX29zZXJpYWxpemVyPEFyY2hpdmUsIFQ+CisgICAgICAgICAgICA+OjpnZXRfY29uc3RfaW5zdGFuY2UoKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5yZWdpc3Rlcl9iYXNpY19zZXJpYWxpemVyKGJwb3MuZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSk7CisgICAgICAgIHJldHVybiAmIGJwb3M7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlPGNsYXNzIEhlbHBlcj4KKyAgICBIZWxwZXIgJgorICAgIGdldF9oZWxwZXIodm9pZCAqIGNvbnN0IGlkID0gMCl7CisgICAgICAgIGhlbHBlcl9jb2xsZWN0aW9uICYgaGMgPSB0aGlzLT5UaGlzKCktPmdldF9oZWxwZXJfY29sbGVjdGlvbigpOworICAgICAgICByZXR1cm4gaGMudGVtcGxhdGUgZmluZF9oZWxwZXI8SGVscGVyPihpZCk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3I8PChjb25zdCBUICYgdCl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+c2F2ZV9vdmVycmlkZSh0KTsKKyAgICAgICAgcmV0dXJuICogdGhpcy0+VGhpcygpOworICAgIH0KKyAgICAKKyAgICAvLyB0aGUgJiBvcGVyYXRvciAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvciYoY29uc3QgVCAmIHQpeworICAgICAgICByZXR1cm4gKiB0aGlzIC0+VGhpcygpIDw8IHQ7CisgICAgfQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2lzZXJpYWxpemVyLmhwcApAQCAtMCwwICsxLDYyNCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9JU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfSVNFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNwcmFnbWEgaW5saW5lX2RlcHRoKDUxMSkKKyNwcmFnbWEgaW5saW5lX3JlY3Vyc2lvbihvbikKKyNlbmRpZgorCisjaWYgZGVmaW5lZChfX01XRVJLU19fKQorI3ByYWdtYSBpbmxpbmVfZGVwdGgoNTExKQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBpc2VyaWFsaXplci5ocHA6IGludGVyZmFjZSBmb3Igc2VyaWFsaXphdGlvbiBzeXN0ZW0uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPG5ldz4gICAgIC8vIGZvciBwbGFjZW1lbnQgbmV3CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc2l6ZV90LCBOVUxMCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZHsgCisgICAgdXNpbmcgOjpzaXplX3Q7IAorfSAvLyBuYW1lc3BhY2Ugc3RkCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZGVudGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2dyZWF0ZXJfZXF1YWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9lcXVhbF90by5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvY29yZS9ub19leGNlcHRpb25zX3N1cHBvcnQuaHBwPgorCisjaWZuZGVmIEJPT1NUX1NFUklBTElaQVRJT05fREVGQVVMVF9UWVBFX0lORk8gICAKKyAgICAjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9leHRlbmRlZF90eXBlX2luZm9fdHlwZWlkLmhwcD4gICAKKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NtYXJ0X2Nhc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vc3RhdGljX3dhcm5pbmcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9pbnRlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZW51bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2V4dGVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9seW1vcnBoaWMuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hc3N1bWVfYWJzdHJhY3QuaHBwPgorCisjaWZuZGVmIEJPT1NUX01TVkMKKyAgICAjZGVmaW5lIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IgKCAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICBCT09TVF9XT1JLQVJPVU5EKF9fSUJNQ1BQX18sIDwgMTIxMCkgICAgICAgICAgICBcCisgICAgICAgIHx8IGRlZmluZWQoX19TVU5QUk9fQ0MpICYmIChfX1NVTlBST19DQyA8IDB4NTkwKSAgIFwKKyAgICApCisjZWxzZQorICAgICNkZWZpbmUgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUiAwCisjZW5kaWYKKworI2lmICEgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2hhc19uZXdfb3BlcmF0b3IuaHBwPgorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NlcmlhbGl6YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdmVyc2lvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9sZXZlbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90eXBlX2luZm9faW1wbGVtZW50YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3ZvaWRfY2FzdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hcnJheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9jb2xsZWN0aW9uX3NpemVfdHlwZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zaW5nbGV0b24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vd3JhcHBlci5ocHA+CisKKy8vIHRoZSBmb2xsb3dpbmcgaXMgbmVlZCBvbmx5IGZvciBkeW5hbWljIGNhc3Qgb2YgcG9seW1vcnBoaWMgcG9pbnRlcnMKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2FyY2hpdmVfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FyY2hpdmVfc2VyaWFsaXplcl9tYXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NoZWNrLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLyBhbiBhY2Nlc3NvciB0byBwZXJtaXQgZnJpZW5kIGFjY2VzcyB0byBhcmNoaXZlcy4gIE5lZWRlZCBiZWNhdXNlCisvLyBzb21lIGNvbXBpbGVycyBkb24ndCBoYW5kbGUgZnJpZW5kIHRlbXBsYXRlcyBjb21wbGV0ZWx5CitjbGFzcyBsb2FkX2FjY2VzcyB7CitwdWJsaWM6CisgICAgdGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgVD4KKyAgICBzdGF0aWMgdm9pZCBsb2FkX3ByaW1pdGl2ZShBcmNoaXZlICZhciwgVCAmdCl7CisgICAgICAgIGFyLmxvYWQodCk7CisgICAgfQorfTsKKworbmFtZXNwYWNlIGRldGFpbCB7CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorY2xhc3MgaXNlcmlhbGl6ZXIgOiBwdWJsaWMgYmFzaWNfaXNlcmlhbGl6ZXIKK3sKK3ByaXZhdGU6CisgICAgdmlydHVhbCB2b2lkIGRlc3Ryb3koLypjb25zdCovIHZvaWQgKmFkZHJlc3MpIGNvbnN0IHsKKyAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmFjY2Vzczo6ZGVzdHJveShzdGF0aWNfY2FzdDxUICo+KGFkZHJlc3MpKTsKKyAgICB9Citwcm90ZWN0ZWQ6CisgICAgLy8gcHJvdGVjdGVkIGNvbnN0cnVjdG9yIHNpbmNlIGl0J3MgYWx3YXlzIGNyZWF0ZWQgYnkgc2luZ2xldG9uCisgICAgZXhwbGljaXQgaXNlcmlhbGl6ZXIoKSA6CisgICAgICAgIGJhc2ljX2lzZXJpYWxpemVyKAorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSAKKyAgICAgICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dHlwZV9pbmZvX2ltcGxlbWVudGF0aW9uPCBUID46OnR5cGUKKyAgICAgICAgICAgID46OmdldF9jb25zdF9pbnN0YW5jZSgpCisgICAgICAgICkKKyAgICB7fQorcHVibGljOgorICAgIHZpcnR1YWwgQk9PU1RfRExMRVhQT1JUIHZvaWQgbG9hZF9vYmplY3RfZGF0YSgKKyAgICAgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICAgICAgdm9pZCAqeCwgCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7CisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPjo6dmFsdWUgCisgICAgICAgICAgICA+PSBib29zdDo6c2VyaWFsaXphdGlvbjo6b2JqZWN0X2NsYXNzX2luZm87CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCB0cmFja2luZyhjb25zdCB1bnNpZ25lZCBpbnQgLyogZmxhZ3MgKi8pIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfYWx3YXlzCisgICAgICAgICAgICB8fCAoIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfc2VsZWN0aXZlbHkKKyAgICAgICAgICAgICAgICAmJiBzZXJpYWxpemVkX2FzX3BvaW50ZXIoKSk7CisgICAgfQorICAgIHZpcnR1YWwgdmVyc2lvbl90eXBlIHZlcnNpb24oKSBjb25zdCB7CisgICAgICAgIHJldHVybiB2ZXJzaW9uX3R5cGUoOjpib29zdDo6c2VyaWFsaXphdGlvbjo6dmVyc2lvbjwgVCA+Ojp2YWx1ZSk7CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0Ojppc19wb2x5bW9ycGhpYzwgVCA+Ojp2YWx1ZTsKKyAgICB9CisgICAgdmlydHVhbCB+aXNlcmlhbGl6ZXIoKXt9OworfTsKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorQk9PU1RfRExMRVhQT1JUIHZvaWQgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD46OmxvYWRfb2JqZWN0X2RhdGEoCisgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICB2b2lkICp4LCAKKyAgICBjb25zdCB1bnNpZ25lZCBpbnQgZmlsZV92ZXJzaW9uCispIGNvbnN0IHsKKyAgICAvLyBub3RlOiB3ZSBub3cgY29tbWVudCB0aGlzIG91dC4gQmVmb3JlIHdlIHBlcm1pdGVkIGFyY2hpdmUKKyAgICAvLyB2ZXJzaW9uICMgdG8gYmUgdmVyeSBsYXJnZS4gIE5vdyB3ZSBkb24ndC4gIFRvIHBlcm1pdAorICAgIC8vIHJlYWRlcnMgb2YgdGhlc2Ugb2xkIGFyY2hpdmVzLCB3ZSBoYXZlIHRvIHN1cHByZXNzIHRoaXMgCisgICAgLy8gY29kZS4gIFBlcmhhcHMgaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCByZS1lbmFibGUgaXQgYnV0CisgICAgLy8gcGVybWl0IGl0cyBzdXBwcmVzc2lvbiB3aXRoIGEgcnVudGltZSBzd2l0Y2guCisgICAgI2lmIDAKKyAgICAvLyB0cmFwIGNhc2Ugd2hlcmUgdGhlIHByb2dyYW0gY2Fubm90IGhhbmRsZSB0aGUgY3VycmVudCB2ZXJzaW9uCisgICAgaWYoZmlsZV92ZXJzaW9uID4gc3RhdGljX2Nhc3Q8Y29uc3QgdW5zaWduZWQgaW50Pih2ZXJzaW9uKCkpKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZTo6YXJjaGl2ZV9leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFyY2hpdmU6OmFyY2hpdmVfZXhjZXB0aW9uOjp1bnN1cHBvcnRlZF9jbGFzc192ZXJzaW9uLAorICAgICAgICAgICAgICAgIGdldF9kZWJ1Z19pbmZvKCkKKyAgICAgICAgICAgICkKKyAgICAgICAgKTsKKyAgICAjZW5kaWYKKyAgICAvLyBtYWtlIHN1cmUgY2FsbCBpcyByb3V0ZWQgdGhyb3VnaCB0aGUgaGlnZXN0IGludGVyZmFjZSB0aGF0IG1pZ2h0CisgICAgLy8gYmUgc3BlY2lhbGl6ZWQgYnkgdGhlIHVzZXIuCisgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNlcmlhbGl6ZV9hZGwoCisgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjpzbWFydF9jYXN0X3JlZmVyZW5jZTxBcmNoaXZlICY+KGFyKSwKKyAgICAgICAgKiBzdGF0aWNfY2FzdDxUICo+KHgpLCAKKyAgICAgICAgZmlsZV92ZXJzaW9uCisgICAgKTsKK30KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKKy8vIHRoZSBwdXJwb3NlIG9mIHRoaXMgY29kZSBpcyB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIGFuIG9iamVjdAorLy8gd2l0aG91dCByZXF1aXJpbmcgdGhlIGNvbnN0cnVjdG9yIHRvIGJlIGNhbGxlZC4gIFByZXN1bWFibHkKKy8vIHRoZSBhbGxvY2F0ZWQgb2JqZWN0IHdpbGwgYmUgc3Vic2VxdWVudGx5IGluaXRpYWxpemVkIHdpdGgKKy8vICJwbGFjZW1lbnQgbmV3Ii4gCisvLyBub3RlOiB3ZSBoYXZlIHRoZSBib29zdCB0eXBlIHRyYWl0IGhhc19uZXdfb3BlcmF0b3IgYnV0IHdlCisvLyBoYXZlIG5vIGNvcnJlc3BvbmRpbmcgaGFzX2RlbGV0ZV9vcGVyYXRvci4gIFNvIHdlIHByZXN1bWUKKy8vIHRoYXQgdGhlIGZvcm1lciBiZWluZyB0cnVlIHdvdWxkIGltcGx5IHRoYXQgdGhlIGEgZGVsZXRlCisvLyBvcGVyYXRvciBpcyBhbHNvIGRlZmluZWQgZm9yIHRoZSBjbGFzcyBULgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGhlYXBfYWxsb2NhdGlvbiB7CisgICAgLy8gYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiBkb2Vzbid0IHdvcmsgb24gdGhlc2UgY29tcGlsZXJzCisgICAgI2lmIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IKKyAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGhhbmRsZSBvcGVyYXRvciBuZXcgb3ZlcmxvYWQgZm9yIGNsYXNzIFQKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCl7CisgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgIH0KKyAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICp0KXsKKyAgICAgICAgICAgIChvcGVyYXRvciBkZWxldGUodCkpOworICAgICAgICB9CisgICAgI2Vsc2UKKyAgICAgICAgLy8gbm90ZTogd2UgcHJlc3VtZSB0aGF0IGEgdHJ1ZSB2YWx1ZSBmb3IgaGFzX25ld19vcGVyYXRvcgorICAgICAgICAvLyBpbXBsaWVzIHRoZSBleGlzdGVuY2Ugb2YgYSBjbGFzcyBzcGVjaWZpYyBkZWxldGUgb3BlcmF0b3IgYXMgd2VsbAorICAgICAgICAvLyBhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvci4KKyAgICAgICAgc3RydWN0IGhhc19uZXdfb3BlcmF0b3IgeworICAgICAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxUICo+KChUOjpvcGVyYXRvciBuZXcpKHNpemVvZihUKSkpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICogdCkgeworICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBpbGF0aW9uIGZhaWxzIGhlcmUsIHRoZSBsaWtlbHkgY2F1c2UgdGhhdCB0aGUgY2xhc3MKKyAgICAgICAgICAgICAgICAvLyBUIGhhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvciBidXQgbm8gY2xhc3Mgc3BlY2lmaWMKKyAgICAgICAgICAgICAgICAvLyBkZWxldGUgb3BlcmF0b3Igd2hpY2ggbWF0Y2hlcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZS4KKyAgICAgICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhpcyBzb2x1dGlvbiBhZGRyZXNzZXMgdGhlIGlzc3VlIHRoYXQgdHdvCisgICAgICAgICAgICAgICAgLy8gcG9zc2libGUgc2lnbmF0dXJlcy4gIEJ1dCBpdCBkb2Vzbid0IGFkZHJlc3MgdGhlIHBvc3NpYmlsaXR5CisgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGUgY2xhc3MgbWlnaHQgaGF2ZSBjbGFzcyBzcGVjaWZpYyBuZXcgd2l0aCBOTworICAgICAgICAgICAgICAgIC8vIGNsYXNzIHNwZWNpZmljIGRlbGV0ZSBhdCBhbGwuICBQYXRjaGVzIChjb21wYXRpYmxlIHdpdGgKKyAgICAgICAgICAgICAgICAvLyBDKyswMykgd2VsY29tZSEKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RydWN0IGRvZXNudF9oYXZlX25ld19vcGVyYXRvciB7CisgICAgICAgICAgICBzdGF0aWMgVCogaW52b2tlX25ldygpIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBzdGF0aWMgdm9pZCBpbnZva2VfZGVsZXRlKFQgKiB0KSB7CisgICAgICAgICAgICAgICAgLy8gTm90ZTogSSdtIHJlbGlhbmNlIHVwb24gYXV0b21hdGljIGNvbnZlcnNpb24gZnJvbSBUICogdG8gdm9pZCAqIGhlcmUKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHJldHVybiB0eXBleDo6aW52b2tlX25ldygpOworICAgICAgICB9CisgICAgICAgIHN0YXRpYyB2b2lkIGludm9rZV9kZWxldGUoVCAqdCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHR5cGV4OjppbnZva2VfZGVsZXRlKHQpOworICAgICAgICB9CisgICAgI2VuZGlmCisgICAgZXhwbGljaXQgaGVhcF9hbGxvY2F0aW9uKCl7CisgICAgICAgIG1fcCA9IGludm9rZV9uZXcoKTsKKyAgICB9CisgICAgfmhlYXBfYWxsb2NhdGlvbigpeworICAgICAgICBpZiAoMCAhPSBtX3ApCisgICAgICAgICAgICBpbnZva2VfZGVsZXRlKG1fcCk7CisgICAgfQorICAgIFQqIGdldCgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fcDsKKyAgICB9CisKKyAgICBUKiByZWxlYXNlKCkgeworICAgICAgICBUKiBwID0gbV9wOworICAgICAgICBtX3AgPSAwOworICAgICAgICByZXR1cm4gcDsKKyAgICB9Citwcml2YXRlOgorICAgIFQqIG1fcDsKK307CisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIFQ+CitjbGFzcyBwb2ludGVyX2lzZXJpYWxpemVyIDoKKyAgICBwdWJsaWMgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICB2aXJ0dWFsIHZvaWQgKiBoZWFwX2FsbG9jYXRpb24oKSBjb25zdCB7CisgICAgICAgIGRldGFpbDo6aGVhcF9hbGxvY2F0aW9uPFQ+IGg7CisgICAgICAgIFQgKiB0ID0gaC5nZXQoKTsKKyAgICAgICAgaC5yZWxlYXNlKCk7CisgICAgICAgIHJldHVybiB0OworICAgIH0KKyAgICB2aXJ0dWFsIGNvbnN0IGJhc2ljX2lzZXJpYWxpemVyICYgZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6c2luZ2xldG9uPAorICAgICAgICAgICAgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD4KKyAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgfQorICAgIEJPT1NUX0RMTEVYUE9SVCB2aXJ0dWFsIHZvaWQgbG9hZF9vYmplY3RfcHRyKAorICAgICAgICBiYXNpY19pYXJjaGl2ZSAmIGFyLCAKKyAgICAgICAgdm9pZCAqIHgsCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7Citwcm90ZWN0ZWQ6CisgICAgLy8gdGhpcyBzaG91bGQgYWx3YXkgYmUgYSBzaW5nbGV0b24gc28gbWFrZSB0aGUgY29uc3RydWN0b3IgcHJvdGVjdGVkCisgICAgcG9pbnRlcl9pc2VyaWFsaXplcigpOworICAgIH5w</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">LS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3NjcmlwdHMvLnBhY2thZ2VyLmVudgpAQCAtMCwwICsxIEBACitleHBvcnQgUkNUX01FVFJPX1BPUlQ9ODA4MQpuZXcgZmlsZSBtb2RlIDEwMDY0NApuZXcgZmlsZSBtb2RlIDEwMDY0NApCaW5hcnkgZmlsZXMgL2Rldi9udWxsIGFuZCBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0Ly5EU19TdG9yZSBkaWZmZXIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKQmluYXJ5IGZpbGVzIC9kZXYvbnVsbCBhbmQgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvLkRTX1N0b3JlIGRpZmZlcgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnMuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vLyBcZmlsZSBhY2N1bXVsYXRvcnMuaHBwCisvLy8gSW5jbHVkZXMgYWxsIG9mIHRoZSBBY2N1bXVsYXRvcnMgRnJhbWV3b3JrCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0FDQ1VNVUxBVE9SU19IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0FDQ1VNVUxBVE9SU19IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3Jfc2V0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2NvbmNlcHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0ZXJuYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZmVhdHVyZXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9hY2N1bXVsYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3dlaWdodC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3dlaWdodHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL2V4dGVybmFsX2FjY3VtdWxhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9ycy9kcm9wcGFibGVfYWNjdW11bGF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL3JlZmVyZW5jZV9hY2N1bXVsYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcnMvdmFsdWVfYWNjdW11bGF0b3IuaHBwPgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvYWNjdW11bGF0b3JzX2Z3ZC5ocHAKQEAgLTAsMCArMSwyMzAgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGFjY3VtdWxhdG9yc19md2QuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0FDQ1VNVUxBVE9SU19GV0RfSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19BQ0NVTVVMQVRPUlNfRldEX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvYXBwbHlfZndkLmhwcD4gLy8gZm9yIG1wbDo6bmEKKyNpbmNsdWRlIDxib29zdC9tcGwvbGltaXRzL3ZlY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL2NhdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL2FyaXRobWV0aWMvaW5jLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvcmVwZXRpdGlvbi9lbnVtX3BhcmFtc193aXRoX2FfZGVmYXVsdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV90cmFpbGluZ19wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL2VudW1fdHJhaWxpbmdfYmluYXJ5X3BhcmFtcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vcmVwZWF0X2Zyb21fdG8uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWxfZndkLmhwcD4KKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0ZFQVRVUkVTCisgIC8vLyBUaGUgbWF4aW11bSBudW1iZXIgb2YgYWNjdW11bGF0b3JzIHRoYXQgbWF5IGJlIHB1dCBpbiBhbiBhY2N1bXVsYXRvcl9zZXQuCisgIC8vLyBEZWZhdWx0cyB0byBCT09TVF9NUExfTElNSVRfVkVDVE9SX1NJWkUgKHdoaWNoIGRlZmF1bHRzIHRvIDIwKS4KKyMgZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMgQk9PU1RfTVBMX0xJTUlUX1ZFQ1RPUl9TSVpFCisjZW5kaWYKKworI2lmIEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMgPiBCT09TVF9NUExfTElNSVRfVkVDVE9SX1NJWkUKKyMgZXJyb3IgQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9GRUFUVVJFUyBjYW5ub3QgYmUgbGFyZ2VyIHRoYW4gQk9PU1RfTVBMX0xJTUlUX1ZFQ1RPUl9TSVpFCisjZW5kaWYKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0FSR1MKKyAgLy8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdGhhdCBtYXkgYmUgc3BlY2lmaWVkIHRvIGFuIGFjY3VtdWxhdG9yX3NldCdzCisgIC8vLyBhY2N1bXVsYXRpb24gZnVuY3Rpb24uIERlZmF1bHRzIHRvIDE1LgorIyBkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9BUkdTIDE1CisjZW5kaWYKKworI2lmIEJPT1NUX1dPUktBUk9VTkQoX19HTlVDX18sID09IDMpIFwKKyB8fCBCT09TVF9XT1JLQVJPVU5EKF9fRURHX1ZFUlNJT05fXywgQk9PU1RfVEVTVEVEX0FUKDMwNikpCisjIGRlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfQlJPS0VOX0NPTlNUX09WRVJMT0FEUworI2VuZGlmCisKKyNpZmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfQlJPS0VOX0NPTlNUX09WRVJMT0FEUworIyBpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjIGluY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2NvbnN0LmhwcD4KKyMgZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19QUk9UT19ESVNBQkxFX0lGX0lTX0NPTlNUKFQpXAorICAgICwgdHlwZW5hbWUgYm9vc3Q6OmRpc2FibGVfaWY8Ym9vc3Q6OmlzX2NvbnN0PFQ+ID46OnR5cGUgKiA9IDAKKyNlbHNlCisjIGRlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfUFJPVE9fRElTQUJMRV9JRl9JU19DT05TVChUKQorI2VuZGlmCisKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0dDQ19WRVJTSU9OICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgIChfX0dOVUNfXyAqIDEwMDAwICsgX19HTlVDX01JTk9SX18gKiAxMDAgKyBfX0dOVUNfUEFUQ0hMRVZFTF9fKQorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIE5hbWVkIHBhcmFtZXRlcnMgdGFncworLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgc2FtcGxlOworICAgIHN0cnVjdCB3ZWlnaHQ7CisgICAgc3RydWN0IGFjY3VtdWxhdG9yOworICAgIHN0cnVjdCB3ZWlnaHRzOworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBVc2VyLWxldmVsIGZlYXR1cmVzCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB2YWx1ZTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3QgdmFsdWVfdGFnOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmVmZXJlbnQsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3QgcmVmZXJlbmNlOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCByZWZlcmVuY2VfdGFnOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVHlwZSwgdHlwZW5hbWUgVGFnID0gdm9pZCwgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQgPSB2b2lkPgorICAgIHN0cnVjdCBleHRlcm5hbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgc3RydWN0IGRyb3BwYWJsZTsKK30KKwordGVtcGxhdGU8dHlwZW5hbWUgQWNjdW11bGF0b3I+CitzdHJ1Y3QgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2U7CisKK3RlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yPgorc3RydWN0IGRyb3BwYWJsZV9hY2N1bXVsYXRvcjsKKwordGVtcGxhdGU8dHlwZW5hbWUgQWNjdW11bGF0b3I+CitzdHJ1Y3Qgd2l0aF9jYWNoZWRfcmVzdWx0OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIEZlYXR1cmVzLCB0eXBlbmFtZSBXZWlnaHQgPSB2b2lkPgorc3RydWN0IGFjY3VtdWxhdG9yX3NldDsKKwordGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KK3N0cnVjdCBleHRyYWN0b3I7CisKK3RlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CitzdHJ1Y3QgZmVhdHVyZV9vZjsKKwordGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KK3N0cnVjdCBhc19mZWF0dXJlOworCit0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU7CisKK3RlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TX1dJVEhfQV9ERUZBVUxUKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIHR5cGVuYW1lIEZlYXR1cmUsIG1wbDo6bmEpPgorc3RydWN0IGRlcGVuZHNfb247CisKK3RlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TX1dJVEhfQV9ERUZBVUxUKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIHR5cGVuYW1lIEZlYXR1cmUsIG1wbDo6bmEpPgorc3RydWN0IGZlYXR1cmVzOworCit0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBBY2N1bXVsYXRvclNldD4KK3R5cGVuYW1lIG1wbDo6YXBwbHk8QWNjdW11bGF0b3JTZXQsIEZlYXR1cmU+Ojp0eXBlIGNvbnN0ICYKK2ZpbmRfYWNjdW11bGF0b3IoQWNjdW11bGF0b3JTZXQgY29uc3QgJmFjYyk7CisKK3RlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmUsIHR5cGVuYW1lIEFjY3VtdWxhdG9yU2V0PgordHlwZW5hbWUgbXBsOjphcHBseTxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGU6OnJlc3VsdF90eXBlCitleHRyYWN0X3Jlc3VsdChBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjKTsKKwordGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZSwgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQsIHR5cGVuYW1lIEExPgordHlwZW5hbWUgbXBsOjphcHBseTxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGU6OnJlc3VsdF90eXBlCitleHRyYWN0X3Jlc3VsdChBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjLCBBMSBjb25zdCAmYTEpOworCisvLyAuLi4gb3RoZXIgb3ZlcmxvYWRzIGdlbmVyYXRlZCBieSBCb29zdC5QcmVwcm9jZXNzb3I6CisKKy8vLyBJTlRFUk5BTCBPTkxZCisvLy8KKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0VYVFJBQ1RfUkVTVUxUX0ZXRCh6LCBuLCBfKSAgICAgICAgICAgICAgICAgICAgICBcCisgICAgdGVtcGxhdGU8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0eXBlbmFtZSBGZWF0dXJlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICwgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIEJPT1NUX1BQX0VOVU1fVFJBSUxJTkdfUEFSQU1TX1ooeiwgbiwgdHlwZW5hbWUgQSkgICAgICAgICAgICAgICAgICAgXAorICAgID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0eXBlbmFtZSBtcGw6OmFwcGx5PEFjY3VtdWxhdG9yU2V0LCBGZWF0dXJlPjo6dHlwZTo6cmVzdWx0X3R5cGUgICAgICAgICBcCisgICAgZXh0cmFjdF9yZXN1bHQoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19CSU5BUllfUEFSQU1TX1ooeiwgbiwgQSwgY29uc3QgJmEpICAgICAgICAgICBcCisgICAgKTsKKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworQk9PU1RfUFBfUkVQRUFUX0ZST01fVE8oCisgICAgMgorICAsIEJPT1NUX1BQX0lOQyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0FSR1MpCisgICwgQk9PU1RfQUNDVU1VTEFUT1JTX0VYVFJBQ1RfUkVTVUxUX0ZXRAorICAsIF8KKykKKworI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKK3RlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmUsIHR5cGVuYW1lIEFjY3VtdWxhdG9yU2V0LCB0eXBlbmFtZSBBMSwgdHlwZW5hbWUgQTIgLi4uPgordHlwZW5hbWUgbXBsOjphcHBseTxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGU6OnJlc3VsdF90eXBlCitleHRyYWN0X3Jlc3VsdChBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjLCBBMSBjb25zdCAmYTEsIEEyIGNvbnN0ICZhMiAuLi4pOworI2VuZGlmCisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgdXNpbmcgbmFtZXNwYWNlIG51bWVyaWM6Om9wZXJhdG9yczsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yLCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IGV4dGVybmFsX2ltcGw7Cit9CisKK25hbWVzcGFjZSBkZXRhaWwKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICBzdHJ1Y3QgZmVhdHVyZV90YWc7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3QgdG9fYWNjdW11bGF0b3I7CisKKyAgICBzdHJ1Y3QgYWNjdW11bGF0b3Jfc2V0X2Jhc2U7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIHN0cnVjdCBpc19hY2N1bXVsYXRvcl9zZXQ7CisKKyAgICBpbmxpbmUgdm9pZCBpZ25vcmVfdmFyaWFibGUodm9pZCBjb25zdCAqKSB7fQorCisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKFgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIGRldGFpbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBCT09TVF9QUF9DQVQoaWdub3JlXywgWCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB2b2lkIGlnbm9yZSgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFjY3VtdWxhdG9yczo6ZGV0YWlsOjppZ25vcmVfdmFyaWFibGUoJlgpOyAgICAgICBcCisgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgLyoqLworfQorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisvLyBGb3IgZGVmaW5pbmcgYm9vc3Q6OnBhcmFtZXRlciBrZXl3b3JkcyB0aGF0IGNhbiBiZSBpbmhlcml0ZWQgZnJvbSB0bworLy8gZ2V0IGEgbmVzdGVkLCBjbGFzcy1zY29wZWQga2V5d29yZCB3aXRoIHRoZSByZXF1ZXN0ZWQgYWxpYXMKKyNkZWZpbmUgQk9PU1RfUEFSQU1FVEVSX05FU1RFRF9LRVlXT1JEKHRhZ19uYW1lc3BhY2UsIG5hbWUsIGFsaWFzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIHRhZ19uYW1lc3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8aW50IER1bW15ID0gMD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBuYW1lICMjIF8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHN0YXRpYyBjaGFyIGNvbnN0KiBrZXl3b3JkX25hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIHJldHVybiAjbmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBzdGF0aWMgOjpib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPG5hbWUgIyMgXzxEdW1teT4gPiAmYWxpYXM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8aW50IER1bW15PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIDo6Ym9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDxuYW1lICMjIF88RHVtbXk+ID4gJm5hbWUgIyMgXzxEdW1teT46OmFsaWFzID0gICAgICAgICAgICAgICAgICAgXAorICAgICAgICA6OmJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8bmFtZSAjIyBfPER1bW15PiA+OjpnZXQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdHlwZWRlZiBuYW1lICMjIF8gPD4gbmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIG5hbWVzcGFjZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIDo6Ym9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDx0YWdfbmFtZXNwYWNlOjpuYW1lPiAmbmFtZSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICA6OmJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8dGFnX25hbWVzcGFjZTo6bmFtZT46OmdldCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB9CisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHAKQEAgLTAsMCArMSw2NSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gYWNjdW11bGF0b3JfYmFzZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19CQVNFX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19CQVNFX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2pvaW50X3ZpZXcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9zaW5nbGVfdmlldy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2ZvbGQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9jb250YWlucy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2VtcHR5X3NlcXVlbmNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2NvbmNlcHQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBkZXRhaWwKK3sKKyAgICB0eXBlZGVmIHZvaWQgdm9pZF87Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGRvbnRfY2FyZQorLy8KK3N0cnVjdCBkb250X2NhcmUKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgIGRvbnRfY2FyZShBcmdzIGNvbnN0ICYpCisgICAgeworICAgIH0KK307CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGFjY3VtdWxhdG9yX2Jhc2UKKy8vCitzdHJ1Y3QgYWNjdW11bGF0b3JfYmFzZQoreworICAgIC8vIGhpZGRlbiBpZiBkZWZpbmVkIGluIGRlcml2ZWQgY2xhc3NlcworICAgIGRldGFpbDo6dm9pZF8gb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgIHsKKyAgICB9CisKKyAgICB0eXBlZGVmIG1wbDo6ZmFsc2VfIGlzX2Ryb3BwYWJsZTsKKworICAgIGRldGFpbDo6dm9pZF8gYWRkX3JlZihkb250X2NhcmUpCisgICAgeworICAgIH0KKworICAgIGRldGFpbDo6dm9pZF8gZHJvcChkb250X2NhcmUpCisgICAgeworICAgIH0KKworICAgIGRldGFpbDo6dm9pZF8gb25fZHJvcChkb250X2NhcmUpCisgICAgeworICAgIH0KK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfY29uY2VwdC5ocHAKQEAgLTAsMCArMSwyOSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gYWNjdW11bGF0b3JfY29uY2VwdC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SX0NPTkNFUFRfSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfQUNDVU1VTEFUT1JfQ09OQ0VQVF9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L2NvbmNlcHRfY2hlY2suaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK3RlbXBsYXRlPHR5cGVuYW1lIFN0YXQ+CitzdHJ1Y3QgYWNjdW11bGF0b3JfY29uY2VwdAoreworICAgIHZvaWQgY29uc3RyYWludHMoKQorICAgIHsKKyAgICAgICAgLy8gVE9ETzogZGVmaW5lIHRoZSBzdGF0IGNvbmNlcHQKKyAgICB9CisKKyAgICBTdGF0IHN0YXQ7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX3NldC5ocHAKQEAgLTAsMCArMSw0MDEgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGFjY3VtdWxhdG9yX3NldC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SX1NFVF9IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19BQ0NVTVVMQVRPUl9TRVRfSFBQX0VBTl8yOF8xMF8yMDA1CisKKyNpbmNsdWRlIDxib29zdC92ZXJzaW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvYXBwbHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wcm90ZWN0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvaWRlbnRpdHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pc19zZXF1ZW5jZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfYmFzZV9hbmRfZGVyaXZlZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL3BhcmFtZXRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL3JlcGVhdF9mcm9tX3RvLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvcmVwZXRpdGlvbi9lbnVtX2JpbmFyeV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfY29uY2VwdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL2FjY3VtdWxhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9ycy9leHRlcm5hbF9hY2N1bXVsYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcnMvZHJvcHBhYmxlX2FjY3VtdWxhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdXNpb24vaW5jbHVkZS9hbnkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Z1c2lvbi9pbmNsdWRlL2ZpbmRfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Z1c2lvbi9pbmNsdWRlL2Zvcl9lYWNoLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdXNpb24vaW5jbHVkZS9maWx0ZXJfdmlldy5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGRldGFpbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBhY2N1bXVsYXRvcl92aXNpdG9yCisgICAgLy8gICB3cmFwIGEgYm9vc3Q6OnBhcmFtZXRlciBhcmd1bWVudCBwYWNrIGluIGEgRnVzaW9uIGV4dHJhY3RvciBvYmplY3QKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgIHN0cnVjdCBhY2N1bXVsYXRvcl92aXNpdG9yCisgICAgeworICAgICAgICBleHBsaWNpdCBhY2N1bXVsYXRvcl92aXNpdG9yKEFyZ3MgY29uc3QgJmEpCisgICAgICAgICAgOiBhcmdzKGEpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFjY3VtdWxhdG9yICZhY2N1bXVsYXRvcikgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgYWNjdW11bGF0b3IodGhpcy0+YXJncyk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIGFjY3VtdWxhdG9yX3Zpc2l0b3IgJm9wZXJhdG9yID0oYWNjdW11bGF0b3JfdmlzaXRvciBjb25zdCAmKTsKKyAgICAgICAgQXJncyBjb25zdCAmYXJnczsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICBpbmxpbmUgYWNjdW11bGF0b3JfdmlzaXRvcjxBcmdzPiBjb25zdCBtYWtlX2FjY3VtdWxhdG9yX3Zpc2l0b3IoQXJncyBjb25zdCAmYXJncykKKyAgICB7CisgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcl92aXNpdG9yPEFyZ3M+KGFyZ3MpOworICAgIH0KKworICAgIHR5cGVkZWYKKyAgICAgICAgcGFyYW1ldGVyOjpwYXJhbWV0ZXJzPAorICAgICAgICAgICAgcGFyYW1ldGVyOjpyZXF1aXJlZDx0YWc6OmFjY3VtdWxhdG9yPgorICAgICAgICAgICwgcGFyYW1ldGVyOjpvcHRpb25hbDx0YWc6OnNhbXBsZT4KKyAgICAgICAgICAvLyAuLi4gYW5kIG90aGVycyB3aGljaCBhcmUgbm90IHNwZWNpZmllZCBoZXJlLi4uCisgICAgICAgID4KKyAgICBhY2N1bXVsYXRvcl9wYXJhbXM7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gYWNjdW11bGF0b3Jfc2V0X2Jhc2UKKyAgICBzdHJ1Y3QgYWNjdW11bGF0b3Jfc2V0X2Jhc2UKKyAgICB7CisgICAgfTsKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBpc19hY2N1bXVsYXRvcl9zZXQKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIHN0cnVjdCBpc19hY2N1bXVsYXRvcl9zZXQKKyAgICAgIDogaXNfYmFzZV9hbmRfZGVyaXZlZDxhY2N1bXVsYXRvcl9zZXRfYmFzZSwgVD4KKyAgICB7CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisKKyNpZmRlZiBfTVNDX1ZFUgorI3ByYWdtYSB3YXJuaW5nKHB1c2gpCisjcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTogNDM1NSkgLy8gd2FybmluZyBDNDM1NTogJ3RoaXMnIDogdXNlZCBpbiBiYXNlIG1lbWJlciBpbml0aWFsaXplciBsaXN0CisjZW5kaWYKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8vIFxicmllZiBBIHNldCBvZiBhY2N1bXVsYXRvcnMuCisvLy8KKy8vLyBhY2N1bXVsYXRvcl9zZXQgcmVzb2x2ZXMgdGhlIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGZlYXR1cmVzIGFuZCBlbnN1cmVzIHRoYXQKKy8vLyB0aGUgYWNjdW11bGF0b3JzIGluIHRoZSBzZXQgYXJlIHVwZGF0ZWQgaW4gdGhlIHByb3BlciBvcmRlci4KKy8vLworLy8vIGFjY2N1bXVsYXRvcl9zZXQgcHJvdmlkZXMgYSBnZW5lcmFsIG1lY2hhbmlzbSB0byB2aXNpdCB0aGUgYWNjdW11bGF0b3JzCisvLy8gaW4gdGhlIHNldCBpbiBvcmRlciwgd2l0aCBvciB3aXRob3V0IGEgZmlsdGVyLiBZb3UgY2FuIGFsc28gZmV0Y2ggYSByZWZlcmVuY2UKKy8vLyB0byBhbiBhY2N1bXVsYXRvciB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZmVhdHVyZS4KKy8vLwordGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBGZWF0dXJlcywgdHlwZW5hbWUgV2VpZ2h0Pgorc3RydWN0IGFjY3VtdWxhdG9yX3NldAorICA6IGRldGFpbDo6YWNjdW11bGF0b3Jfc2V0X2Jhc2UKK3sKKyAgICB0eXBlZGVmIFNhbXBsZSBzYW1wbGVfdHlwZTsgICAgIC8vLzwgVGhlIHR5cGUgb2YgdGhlIHNhbXBsZXMgdGhhdCB3aWxsIGJlIGFjY3VtdWxhdGVkCisgICAgdHlwZWRlZiBGZWF0dXJlcyBmZWF0dXJlc190eXBlOyAvLy88IEFuIE1QTCBzZXF1ZW5jZSBvZiB0aGUgZmVhdHVyZXMgdGhhdCBzaG91bGQgYmUgYWNjdW11bGF0ZWQuCisgICAgdHlwZWRlZiBXZWlnaHQgd2VpZ2h0X3R5cGU7ICAgICAvLy88IFRoZSB0eXBlIG9mIHRoZSB3ZWlnaHQgcGFyYW1ldGVyLiBNdXN0IGJlIGEgc2NhbGFyLiBEZWZhdWx0cyB0byB2b2lkLgorCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICB0eXBlZGVmCisgICAgICAgIHR5cGVuYW1lIGRldGFpbDo6bWFrZV9hY2N1bXVsYXRvcl90dXBsZTwKKyAgICAgICAgICAgIEZlYXR1cmVzCisgICAgICAgICAgLCBTYW1wbGUKKyAgICAgICAgICAsIFdlaWdodAorICAgICAgICA+Ojp0eXBlCisgICAgYWNjdW11bGF0b3JzX21wbF92ZWN0b3I7CisKKyAgICAvLyBnZW5lcmF0ZSBhIGZ1c2lvbjo6bGlzdCBvZiBhY2N1bXVsYXRvcnMKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHR5cGVkZWYKKyAgICAgICAgdHlwZW5hbWUgZGV0YWlsOjptZXRhOjptYWtlX2FjY19saXN0PAorICAgICAgICAgICAgYWNjdW11bGF0b3JzX21wbF92ZWN0b3IKKyAgICAgICAgPjo6dHlwZQorICAgIGFjY3VtdWxhdG9yc190eXBlOworCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICAvL0JPT1NUX01QTF9BU1NFUlQoKG1wbDo6aXNfc2VxdWVuY2U8YWNjdW11bGF0b3JzX3R5cGU+KSk7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8vIGRlZmF1bHQtY29uc3RydWN0IGFsbCBjb250YWluZWQgYWNjdW11bGF0b3JzCisgICAgYWNjdW11bGF0b3Jfc2V0KCkKKyAgICAgIDogYWNjdW11bGF0b3JzKAorICAgICAgICAgICAgZGV0YWlsOjptYWtlX2FjY19saXN0KAorICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yc19tcGxfdmVjdG9yKCkKKyAgICAgICAgICAgICAgLCBkZXRhaWw6OmFjY3VtdWxhdG9yX3BhcmFtcygpKCp0aGlzKQorICAgICAgICAgICAgKQorICAgICAgICApCisgICAgeworICAgICAgICAvLyBBZGQtcmVmIHRoZSBGZWF0dXJlcyB0aGF0IHRoZSB1c2VyIGhhcyBzcGVjaWZpZWQKKyAgICAgICAgdGhpcy0+dGVtcGxhdGUgdmlzaXRfaWY8ZGV0YWlsOjpjb250YWluc19mZWF0dXJlX29mXzxGZWF0dXJlcz4gPigKKyAgICAgICAgICAgIGRldGFpbDo6bWFrZV9hZGRfcmVmX3Zpc2l0b3IoZGV0YWlsOjphY2N1bXVsYXRvcl9wYXJhbXMoKSgqdGhpcykpCisgICAgICAgICk7CisgICAgfQorCisgICAgLy8vIFxvdmVybG9hZAorICAgIC8vLworICAgIC8vLyBccGFyYW0gYTEgT3B0aW9uYWwgbmFtZWQgcGFyYW1ldGVyIHRvIGJlIHBhc3NlZCB0byBhbGwgdGhlIGFjY3VtdWxhdG9ycworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEExPgorICAgIGV4cGxpY2l0IGFjY3VtdWxhdG9yX3NldChBMSBjb25zdCAmYTEpCisgICAgICA6IGFjY3VtdWxhdG9ycygKKyAgICAgICAgICAgIGRldGFpbDo6bWFrZV9hY2NfbGlzdCgKKyAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcnNfbXBsX3ZlY3RvcigpCisgICAgICAgICAgICAgICwgZGV0YWlsOjphY2N1bXVsYXRvcl9wYXJhbXMoKSgqdGhpcywgYTEpCisgICAgICAgICAgICApCisgICAgICAgICkKKyAgICB7CisgICAgICAgIC8vIEFkZC1yZWYgdGhlIEZlYXR1cmVzIHRoYXQgdGhlIHVzZXIgaGFzIHNwZWNpZmllZAorICAgICAgICB0aGlzLT50ZW1wbGF0ZSB2aXNpdF9pZjxkZXRhaWw6OmNvbnRhaW5zX2ZlYXR1cmVfb2ZfPEZlYXR1cmVzPiA+KAorICAgICAgICAgICAgZGV0YWlsOjptYWtlX2FkZF9yZWZfdmlzaXRvcihkZXRhaWw6OmFjY3VtdWxhdG9yX3BhcmFtcygpKCp0aGlzKSkKKyAgICAgICAgKTsKKyAgICB9CisKKyAgICAvLyAuLi4gb3RoZXIgb3ZlcmxvYWRzIGdlbmVyYXRlZCBieSBCb29zdC5QcmVwcm9jZXNzb3I6CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfQUNDVU1VTEFUT1JfU0VUX0NUT1IoeiwgbiwgXykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0ZW1wbGF0ZTxCT09TVF9QUF9FTlVNX1BBUkFNU19aKHosIG4sIHR5cGVuYW1lIEEpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgYWNjdW11bGF0b3Jfc2V0KEJPT1NUX1BQX0VOVU1fQklOQVJZX1BBUkFNU19aKHosIG4sIEEsIGNvbnN0ICZhKSkgICAgICAgICAgICAgICAgICAgXAorICAgICAgOiBhY2N1bXVsYXRvcnMoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIGRldGFpbDo6bWFrZV9hY2NfbGlzdCggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgYWNjdW11bGF0b3JzX21wbF92ZWN0b3IoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIGRldGFpbDo6YWNjdW11bGF0b3JfcGFyYW1zKCkoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgKnRoaXMgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVNfWih6LCBuLCBhKSAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAvKiBBZGQtcmVmIHRoZSBGZWF0dXJlcyB0aGF0IHRoZSB1c2VyIGhhcyBzcGVjaWZpZWQgKi8gICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGhpcy0+dGVtcGxhdGUgdmlzaXRfaWY8ZGV0YWlsOjpjb250YWluc19mZWF0dXJlX29mXzxGZWF0dXJlcz4gPiggICAgICAgICAgICAgICBcCisgICAgICAgICAgICBkZXRhaWw6Om1ha2VfYWRkX3JlZl92aXNpdG9yKGRldGFpbDo6YWNjdW11bGF0b3JfcGFyYW1zKCkoKnRoaXMpKSAgICAgICAgICAgXAorICAgICAgICApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB9CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIEJPT1NUX1BQX1JFUEVBVF9GUk9NX1RPKAorICAgICAgICAyCisgICAgICAsIEJPT1NUX1BQX0lOQyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0FSR1MpCisgICAgICAsIEJPT1NUX0FDQ1VNVUxBVE9SU19BQ0NVTVVMQVRPUl9TRVRfQ1RPUgorICAgICAgLCBfCisgICAgKQorCisgICAgI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKKyAgICAvLy8gXG92ZXJsb2FkCisgICAgLy8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQTEsIHR5cGVuYW1lIEEyLCAuLi4+CisgICAgYWNjdW11bGF0b3Jfc2V0KEExIGNvbnN0ICZhMSwgQTIgY29uc3QgJmEyLCAuLi4pOworICAgICNlbmRpZgorCisgICAgLy8gLi4uIG90aGVyIG92ZXJsb2FkcyBnZW5lcmF0ZWQgYnkgQm9vc3QuUHJlcHJvY2Vzc29yIGJlbG93IC4uLgorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vLyBWaXNpdGF0aW9uCisgICAgLy8vIFxwYXJhbSBmdW5jIFVuYXJ5RnVuY3Rpb24gd2hpY2ggaXMgaW52b2tlZCB3aXRoIGVhY2ggYWNjdW11bGF0b3IgaW4gdHVybi4KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBVbmFyeUZ1bmN0aW9uPgorICAgIHZvaWQgdmlzaXQoVW5hcnlGdW5jdGlvbiBjb25zdCAmZnVuYykKKyAgICB7CisgICAgICAgIGZ1c2lvbjo6Zm9yX2VhY2godGhpcy0+YWNjdW11bGF0b3JzLCBmdW5jKTsKKyAgICB9CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8vIENvbmRpdGlvbmFsIHZpc2l0YXRpb24KKyAgICAvLy8gXHBhcmFtIGZ1bmMgVW5hcnlGdW5jdGlvbiB3aGljaCBpcyBpbnZva2VkIHdpdGggZWFjaCBhY2N1bXVsYXRvciBpbiB0dXJuLAorICAgIC8vLyAgICAgcHJvdmlkZWQgdGhlIGFjY3VtdWxhdG9yIHNhdGlzZmllcyB0aGUgTVBMIHByZWRpY2F0ZSBGaWx0ZXJQcmVkLgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbHRlclByZWQsIHR5cGVuYW1lIFVuYXJ5RnVuY3Rpb24+CisgICAgdm9pZCB2aXNpdF9pZihVbmFyeUZ1bmN0aW9uIGNvbnN0ICZmdW5jKQorICAgIHsKKyAgICAgICAgZnVzaW9uOjpmaWx0ZXJfdmlldzxhY2N1bXVsYXRvcnNfdHlwZSwgRmlsdGVyUHJlZD4gZmlsdGVyZWRfYWNjcyh0aGlzLT5hY2N1bXVsYXRvcnMpOworICAgICAgICBmdXNpb246OmZvcl9lYWNoKGZpbHRlcmVkX2FjY3MsIGZ1bmMpOworICAgIH0KKyAgICAKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8vIFRoZSByZXR1cm4gdHlwZSBvZiB0aGUgb3BlcmF0b3IoKSBvdmVybG9hZHMgaXMgdm9pZC4KKyAgICB0eXBlZGVmIHZvaWQgcmVzdWx0X3R5cGU7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8vIEFjY3VtdWxhdGlvbgorICAgIC8vLyBccGFyYW0gYTEgT3B0aW9uYWwgbmFtZWQgcGFyYW1ldGVyIHRvIGJlIHBhc3NlZCB0byBhbGwgdGhlIGFjY3VtdWxhdG9ycworICAgIHZvaWQgb3BlcmF0b3IgKCkoKQorICAgIHsKKyAgICAgICAgdGhpcy0+dmlzaXQoCisgICAgICAgICAgICBkZXRhaWw6Om1ha2VfYWNjdW11bGF0b3JfdmlzaXRvcigKKyAgICAgICAgICAgICAgICBkZXRhaWw6OmFjY3VtdWxhdG9yX3BhcmFtcygpKCp0aGlzKQorICAgICAgICAgICAgKQorICAgICAgICApOworICAgIH0KKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEExPgorICAgIHZvaWQgb3BlcmF0b3IgKCkoQTEgY29uc3QgJmExKQorICAgIHsKKyAgICAgICAgdGhpcy0+dmlzaXQoCisgICAgICAgICAgICBkZXRhaWw6Om1ha2VfYWNjdW11bGF0b3JfdmlzaXRvcigKKyAgICAgICAgICAgICAgICBkZXRhaWw6OmFjY3VtdWxhdG9yX3BhcmFtcygpKCp0aGlzLCBhMSkKKyAgICAgICAgICAgICkKKyAgICAgICAgKTsKKyAgICB9CisKKyAgICAvLyAuLi4gb3RoZXIgb3ZlcmxvYWRzIGdlbmVyYXRlZCBieSBCb29zdC5QcmVwcm9jZXNzb3I6CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfQUNDVU1VTEFUT1JfU0VUX0ZVTl9PUCh6LCBuLCBfKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0ZW1wbGF0ZTxCT09TVF9QUF9FTlVNX1BBUkFNU19aKHosIG4sIHR5cGVuYW1lIEEpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgdm9pZCBvcGVyYXRvciAoKShCT09TVF9QUF9FTlVNX0JJTkFSWV9QQVJBTVNfWih6LCBuLCBBLCBjb25zdCAmYSkpICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGhpcy0+dmlzaXQoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBkZXRhaWw6Om1ha2VfYWNjdW11bGF0b3JfdmlzaXRvciggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIGRldGFpbDo6YWNjdW11bGF0b3JfcGFyYW1zKCkoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgKnRoaXMgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVNfWih6LCBuLCBhKSAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfQorCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICBCT09TVF9QUF9SRVBFQVRfRlJPTV9UTygKKyAgICAgICAgMgorICAgICAgLCBCT09TVF9QUF9JTkMoQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9BUkdTKQorICAgICAgLCBCT09TVF9BQ0NVTVVMQVRPUlNfQUNDVU1VTEFUT1JfU0VUX0ZVTl9PUAorICAgICAgLCBfCisgICAgKQorCisgICAgI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKKyAgICAvLy8gXG92ZXJsb2FkCisgICAgLy8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQTEsIHR5cGVuYW1lIEEyLCAuLi4+CisgICAgdm9pZCBvcGVyYXRvciAoKShBMSBjb25zdCAmYTEsIEEyIGNvbnN0ICZhMiwgLi4uKTsKKyAgICAjZW5kaWYKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLy8gRXh0cmFjdGlvbgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgc3RydWN0IGFwcGx5CisgICAgICA6IGZ1c2lvbjo6cmVzdWx0X29mOjp2YWx1ZV9vZjwKKyAgICAgICAgICAgIHR5cGVuYW1lIGZ1c2lvbjo6cmVzdWx0X29mOjpmaW5kX2lmPAorICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yc190eXBlCisgICAgICAgICAgICAgICwgZGV0YWlsOjptYXRjaGVzX2ZlYXR1cmU8RmVhdHVyZT4KKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgPgorICAgIHsKKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vLyBFeHRyYWN0aW9uCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICB0eXBlbmFtZSBhcHBseTxGZWF0dXJlPjo6dHlwZSAmZXh0cmFjdCgpCisgICAgeworICAgICAgICByZXR1cm4gKmZ1c2lvbjo6ZmluZF9pZjxkZXRhaWw6Om1hdGNoZXNfZmVhdHVyZTxGZWF0dXJlPiA+KHRoaXMtPmFjY3VtdWxhdG9ycyk7CisgICAgfQorCisgICAgLy8vIFxvdmVybG9hZAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgdHlwZW5hbWUgYXBwbHk8RmVhdHVyZT46OnR5cGUgY29uc3QgJmV4dHJhY3QoKSBjb25zdAorICAgIHsKKyAgICAgICAgcmV0dXJuICpmdXNpb246OmZpbmRfaWY8ZGV0YWlsOjptYXRjaGVzX2ZlYXR1cmU8RmVhdHVyZT4gPih0aGlzLT5hY2N1bXVsYXRvcnMpOworICAgIH0KKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLy8gRHJvcAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgdm9pZCBkcm9wKCkKKyAgICB7CisgICAgICAgIC8vIFlvdSBjYW4gb25seSBkcm9wIHRoZSBmZWF0dXJlcyB0aGF0IHlvdSBoYXZlIHNwZWNpZmllZCBleHBsaWNpdGx5CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXBwbHk8RmVhdHVyZT46OnR5cGUgdGhlX2FjY3VtdWxhdG9yOworICAgICAgICBCT09TVF9NUExfQVNTRVJUKChkZXRhaWw6OmNvbnRhaW5zX2ZlYXR1cmVfb2Y8RmVhdHVyZXMsIHRoZV9hY2N1bXVsYXRvcj4pKTsKKworICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICB0eXBlbmFtZSBmZWF0dXJlX29mPHR5cGVuYW1lIGFzX2ZlYXR1cmU8RmVhdHVyZT46OnR5cGU+Ojp0eXBlCisgICAgICAgIHRoZV9mZWF0dXJlOworCisgICAgICAgICgqZnVzaW9uOjpmaW5kX2lmPGRldGFpbDo6bWF0Y2hlc19mZWF0dXJlPEZlYXR1cmU+ID4odGhpcy0+YWNjdW11bGF0b3JzKSkKKyAgICAgICAgICAgIC5kcm9wKGRldGFpbDo6YWNjdW11bGF0b3JfcGFyYW1zKCkoKnRoaXMpKTsKKworICAgICAgICAvLyBBbHNvIGRyb3AgYWNjdW11bGF0b3JzIHRoYXQgdGhpcyBmZWF0dXJlIGRlcGVuZHMgb24KKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSB0aGVfZmVhdHVyZTo6ZGVwZW5kZW5jaWVzIGRlcGVuZGVuY2llczsKKyAgICAgICAgdGhpcy0+dGVtcGxhdGUgdmlzaXRfaWY8ZGV0YWlsOjpjb250YWluc19mZWF0dXJlX29mXzxkZXBlbmRlbmNpZXM+ID4oCisgICAgICAgICAgICBkZXRhaWw6Om1ha2VfZHJvcF92aXNpdG9yKGRldGFpbDo6YWNjdW11bGF0b3JfcGFyYW1zKCkoKnRoaXMpKQorICAgICAgICApOworICAgIH0KKworcHJpdmF0ZToKKworICAgIGFjY3VtdWxhdG9yc190eXBlIGFjY3VtdWxhdG9yczsKK307CisKKyNpZmRlZiBfTVNDX1ZFUgorI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBmaW5kX2FjY3VtdWxhdG9yCisvLyAgIGZpbmQgYW4gYWNjdW11bGF0b3IgaW4gYW4gYWNjdW11bGF0b3Jfc2V0IGNvcnJlc3BvbmRpbmcgdG8gYSBmZWF0dXJlCit0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBBY2N1bXVsYXRvclNldD4KK3R5cGVuYW1lIG1wbDo6YXBwbHk8QWNjdW11bGF0b3JTZXQsIEZlYXR1cmU+Ojp0eXBlICYKK2ZpbmRfYWNjdW11bGF0b3IoQWNjdW11bGF0b3JTZXQgJmFjYyBCT09TVF9BQ0NVTVVMQVRPUlNfUFJPVE9fRElTQUJMRV9JRl9JU19DT05TVChBY2N1bXVsYXRvclNldCkpCit7CisgICAgcmV0dXJuIGFjYy50ZW1wbGF0ZSBleHRyYWN0PEZlYXR1cmU+KCk7Cit9CisKKy8vLyBcb3ZlcmxvYWQKK3RlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmUsIHR5cGVuYW1lIEFjY3VtdWxhdG9yU2V0PgordHlwZW5hbWUgbXBsOjphcHBseTxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGUgY29uc3QgJgorZmluZF9hY2N1bXVsYXRvcihBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjKQoreworICAgIHJldHVybiBhY2MudGVtcGxhdGUgZXh0cmFjdDxGZWF0dXJlPigpOworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0X3Jlc3VsdAorLy8gICBleHRyYWN0IGEgcmVzdWx0IGZyb20gYW4gYWNjdW11bGF0b3Igc2V0CisvLy8gSU5URVJOQUwgT05MWQorLy8vCisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19FWFRSQUNUX1JFU1VMVF9GVU4oeiwgbiwgXykgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHRlbXBsYXRlPCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdHlwZW5hbWUgRmVhdHVyZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsIHR5cGVuYW1lIEFjY3VtdWxhdG9yU2V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBCT09TVF9QUF9FTlVNX1RSQUlMSU5HX1BBUkFNU19aKHosIG4sIHR5cGVuYW1lIEEpICAgICAgICAgICAgICAgICAgIFwKKyAgICA+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgdHlwZW5hbWUgbXBsOjphcHBseTxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGU6OnJlc3VsdF90eXBlICAgICAgICAgXAorICAgIGV4dHJhY3RfcmVzdWx0KCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQWNjdW11bGF0b3JTZXQgY29uc3QgJmFjYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIEJPT1NUX1BQX0VOVU1fVFJBSUxJTkdfQklOQVJZX1BBUkFNU19aKHosIG4sIEEsIGNvbnN0ICZhKSAgICAgICAgICAgXAorICAgICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHJldHVybiBmaW5kX2FjY3VtdWxhdG9yPEZlYXR1cmU+KGFjYykucmVzdWx0KCAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgZGV0YWlsOjphY2N1bXVsYXRvcl9wYXJhbXMoKSggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICBhY2MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVNfWih6LCBuLCBhKSAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfQorCitCT09TVF9QUF9SRVBFQVQoCisgICAgQk9PU1RfUFBfSU5DKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfQVJHUykKKyAgLCBCT09TVF9BQ0NVTVVMQVRPUlNfRVhUUkFDVF9SRVNVTFRfRlVOCisgICwgXworKQorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9ycy9kcm9wcGFibGVfYWNjdW11bGF0b3IuaHBwCkBAIC0wLDAgKzEsMzI4IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBkcm9wcGFibGVfYWNjdW11bGF0b3IuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19BQ0NVTVVMQVRPUlNfRFJPUFBBQkxFX0FDQ1VNVUxBVE9SX0hQUF9FQU5fMTNfMTJfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19EUk9QUEFCTEVfQUNDVU1VTEFUT1JfSFBQX0VBTl8xM18xMl8yMDA1CisKKyNpbmNsdWRlIDxuZXc+CisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvYXBwbHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduZWRfc3RvcmFnZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4gLy8gZm9yIGZlYXR1cmVfb2YKKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvYWNjdW11bGF0b3IuaHBwPiAvLyBmb3IgYWNjdW11bGF0b3IKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQWNjdW11bGF0b3I+CisgICAgc3RydWN0IGRyb3BwYWJsZV9hY2N1bXVsYXRvcjsKKworICAgIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB7CisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gYWRkX3JlZl92aXNpdG9yCisgICAgICAgIC8vICAgYSBmdXNpb24gZnVuY3Rpb24gb2JqZWN0IGZvciBhZGRfcmVmJ2luZyBhY2N1bXVsYXRvcnMKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgc3RydWN0IGFkZF9yZWZfdmlzaXRvcgorICAgICAgICB7CisgICAgICAgICAgICBleHBsaWNpdCBhZGRfcmVmX3Zpc2l0b3IoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICAgICAgOiBhcmdzXyhhcmdzKQorICAgICAgICAgICAgeworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQWNjdW11bGF0b3IgJmFjYykgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIEFjY3VtdWxhdG9yOjpmZWF0dXJlX3RhZzo6ZGVwZW5kZW5jaWVzIGRlcGVuZGVuY2llczsKKworICAgICAgICAgICAgICAgIGFjYy5hZGRfcmVmKHRoaXMtPmFyZ3NfKTsKKworICAgICAgICAgICAgICAgIC8vIEFsc28gYWRkX3JlZiBhY2N1bXVsYXRvcnMgdGhhdCB0aGlzIGZlYXR1cmUgZGVwZW5kcyBvbgorICAgICAgICAgICAgICAgIHRoaXMtPmFyZ3NfW2FjY3VtdWxhdG9yXS50ZW1wbGF0ZQorICAgICAgICAgICAgICAgICAgICB2aXNpdF9pZjxkZXRhaWw6OmNvbnRhaW5zX2ZlYXR1cmVfb2ZfPGRlcGVuZGVuY2llcz4gPigKKyAgICAgICAgICAgICAgICAgICAgICAgICp0aGlzCisgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgYWRkX3JlZl92aXNpdG9yICZvcGVyYXRvciA9KGFkZF9yZWZfdmlzaXRvciBjb25zdCAmKTsKKyAgICAgICAgICAgIEFyZ3MgY29uc3QgJmFyZ3NfOworICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIGFkZF9yZWZfdmlzaXRvcjxBcmdzPiBtYWtlX2FkZF9yZWZfdmlzaXRvcihBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gYWRkX3JlZl92aXNpdG9yPEFyZ3M+KGFyZ3MpOworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBkcm9wX3Zpc2l0b3IKKyAgICAgICAgLy8gICBhIGZ1c2lvbiBmdW5jdGlvbiBvYmplY3QgZm9yIGRyb3BwaW5nIGFjY3VtdWxhdG9ycworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBzdHJ1Y3QgZHJvcF92aXNpdG9yCisgICAgICAgIHsKKyAgICAgICAgICAgIGV4cGxpY2l0IGRyb3BfdmlzaXRvcihBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgICAgICA6IGFyZ3NfKGFyZ3MpCisgICAgICAgICAgICB7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yPgorICAgICAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBY2N1bXVsYXRvciAmYWNjKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKHR5cGVuYW1lIEFjY3VtdWxhdG9yOjppc19kcm9wcGFibGUoKSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgQWNjdW11bGF0b3I6OmZlYXR1cmVfdGFnOjpkZXBlbmRlbmNpZXMgZGVwZW5kZW5jaWVzOworCisgICAgICAgICAgICAgICAgICAgIGFjYy5kcm9wKHRoaXMtPmFyZ3NfKTsKKyAgICAgICAgICAgICAgICAgICAgLy8gQWxzbyBkcm9wIGFjY3VtdWxhdG9ycyB0aGF0IHRoaXMgZmVhdHVyZSBkZXBlbmRzIG9uCisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFyZ3NfW2FjY3VtdWxhdG9yXS50ZW1wbGF0ZQorICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRfaWY8ZGV0YWlsOjpjb250YWluc19mZWF0dXJlX29mXzxkZXBlbmRlbmNpZXM+ID4oCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgKnRoaXMKKyAgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgIGRyb3BfdmlzaXRvciAmb3BlcmF0b3IgPShkcm9wX3Zpc2l0b3IgY29uc3QgJik7CisgICAgICAgICAgICBBcmdzIGNvbnN0ICZhcmdzXzsKKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBkcm9wX3Zpc2l0b3I8QXJncz4gbWFrZV9kcm9wX3Zpc2l0b3IoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRyb3BfdmlzaXRvcjxBcmdzPihhcmdzKTsKKyAgICAgICAgfQorICAgIH0KKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICBzdHJ1Y3QgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UKKyAgICAgIDogQWNjdW11bGF0b3IKKyAgICB7CisgICAgICAgIHR5cGVkZWYgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UgYmFzZTsKKyAgICAgICAgdHlwZWRlZiBtcGw6OnRydWVfIGlzX2Ryb3BwYWJsZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBBY2N1bXVsYXRvcjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IEFjY3VtdWxhdG9yKGFyZ3MpCisgICAgICAgICAgLCByZWZfY291bnRfKDApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIGRyb3BwYWJsZV9hY2N1bXVsYXRvcl9iYXNlKGRyb3BwYWJsZV9hY2N1bXVsYXRvcl9iYXNlIGNvbnN0ICZ0aGF0KQorICAgICAgICAgIDogQWNjdW11bGF0b3IoKnN0YXRpY19jYXN0PEFjY3VtdWxhdG9yIGNvbnN0ICo+KCZ0aGF0KSkKKyAgICAgICAgICAsIHJlZl9jb3VudF8odGhhdC5yZWZfY291bnRfKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIGlmKCF0aGlzLT5pc19kcm9wcGVkKCkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+QWNjdW11bGF0b3I6Om9wZXJhdG9yICgpKGFyZ3MpOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBhZGRfcmVmKEFyZ3MgY29uc3QgJikKKyAgICAgICAgeworICAgICAgICAgICAgKyt0aGlzLT5yZWZfY291bnRfOworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBkcm9wKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIEJPT1NUX0FTU0VSVCgwIDwgdGhpcy0+cmVmX2NvdW50Xyk7CisgICAgICAgICAgICBpZigxID09IHRoaXMtPnJlZl9jb3VudF8pCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgc3RhdGljX2Nhc3Q8ZHJvcHBhYmxlX2FjY3VtdWxhdG9yPEFjY3VtdWxhdG9yPiAqPih0aGlzKS0+b25fZHJvcChhcmdzKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIC0tdGhpcy0+cmVmX2NvdW50XzsKKyAgICAgICAgfQorCisgICAgICAgIGJvb2wgaXNfZHJvcHBlZCgpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAwID09IHRoaXMtPnJlZl9jb3VudF87CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIGludCByZWZfY291bnRfOworICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGRyb3BwYWJsZV9hY2N1bXVsYXRvcgorICAgIC8vICAgdGhpcyBjYW4gYmUgc3BlY2lhbGl6ZWQgZm9yIGFueSB0eXBlIHRoYXQgbmVlZHMgc3BlY2lhbCBoYW5kbGluZworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yPgorICAgIHN0cnVjdCBkcm9wcGFibGVfYWNjdW11bGF0b3IKKyAgICAgIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2U8QWNjdW11bGF0b3I+CisgICAgeworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBkcm9wcGFibGVfYWNjdW11bGF0b3IoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IGRyb3BwYWJsZV9hY2N1bXVsYXRvcjo6YmFzZShhcmdzKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICBkcm9wcGFibGVfYWNjdW11bGF0b3IoZHJvcHBhYmxlX2FjY3VtdWxhdG9yIGNvbnN0ICZ0aGF0KQorICAgICAgICAgIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yOjpiYXNlKCpzdGF0aWNfY2FzdDx0eXBlbmFtZSBkcm9wcGFibGVfYWNjdW11bGF0b3I6OmJhc2UgY29uc3QgKj4oJnRoYXQpKQorICAgICAgICB7CisgICAgICAgIH0KKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3aXRoX2NhY2hlZF9yZXN1bHQKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICBzdHJ1Y3Qgd2l0aF9jYWNoZWRfcmVzdWx0CisgICAgICA6IEFjY3VtdWxhdG9yCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIEFjY3VtdWxhdG9yOjpyZXN1bHRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB3aXRoX2NhY2hlZF9yZXN1bHQoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IEFjY3VtdWxhdG9yKGFyZ3MpCisgICAgICAgICAgLCBjYWNoZSgpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHdpdGhfY2FjaGVkX3Jlc3VsdCh3aXRoX2NhY2hlZF9yZXN1bHQgY29uc3QgJnRoYXQpCisgICAgICAgICAgOiBBY2N1bXVsYXRvcigqc3RhdGljX2Nhc3Q8QWNjdW11bGF0b3IgY29uc3QgKj4oJnRoYXQpKQorICAgICAgICAgICwgY2FjaGUoKQorICAgICAgICB7CisgICAgICAgICAgICBpZih0aGF0Lmhhc19yZXN1bHQoKSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5zZXQodGhhdC5nZXQoKSk7CisgICAgICAgICAgICB9CisgICAgICAgIH0KKworICAgICAgICB+d2l0aF9jYWNoZWRfcmVzdWx0KCkKKyAgICAgICAgeworICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBhIGJhc2UgY2xhc3Mgb2YgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UsCisgICAgICAgICAgICAvLyB0aGlzIGRlc3RydWN0b3IgaXMgY2FsbGVkIGJlZm9yZSBhbnkgb2YgZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2UncworICAgICAgICAgICAgLy8gbWVtYmVycyBnZXQgY2xlYW5lZCB1cCwgaW5jbHVkaW5nIGlzX2Ryb3BwZWQsIHNvIHRoZSBmb2xsb3dpbmcKKyAgICAgICAgICAgIC8vIGNhbGwgdG8gaGFzX3Jlc3VsdCgpIGlzIHZhbGlkLgorICAgICAgICAgICAgaWYodGhpcy0+aGFzX3Jlc3VsdCgpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmdldCgpLn5yZXN1bHRfdHlwZSgpOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvbl9kcm9wKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIGNhY2hlIHRoZSByZXN1bHQgYXQgdGhlIHBvaW50IHRoaXMgY2FsY3VsYXRpb24gd2FzIGRyb3BwZWQKKyAgICAgICAgICAgIEJPT1NUX0FTU0VSVCghdGhpcy0+aGFzX3Jlc3VsdCgpKTsKKyAgICAgICAgICAgIHRoaXMtPnNldCh0aGlzLT5BY2N1bXVsYXRvcjo6cmVzdWx0KGFyZ3MpKTsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+aGFzX3Jlc3VsdCgpID8gdGhpcy0+Z2V0KCkgOiB0aGlzLT5BY2N1bXVsYXRvcjo6cmVzdWx0KGFyZ3MpOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICB3aXRoX2NhY2hlZF9yZXN1bHQgJm9wZXJhdG9yID0od2l0aF9jYWNoZWRfcmVzdWx0IGNvbnN0ICYpOworCisgICAgICAgIHZvaWQgc2V0KHJlc3VsdF90eXBlIGNvbnN0ICZyKQorICAgICAgICB7CisgICAgICAgICAgICA6Om5ldyh0aGlzLT5jYWNoZS5hZGRyZXNzKCkpIHJlc3VsdF90eXBlKHIpOworICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgY29uc3QgJmdldCgpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAqc3RhdGljX2Nhc3Q8cmVzdWx0X3R5cGUgY29uc3QgKj4odGhpcy0+Y2FjaGUuYWRkcmVzcygpKTsKKyAgICAgICAgfQorCisgICAgICAgIGJvb2wgaGFzX3Jlc3VsdCgpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgd2l0aF9jYWNoZWRfcmVzdWx0PEFjY3VtdWxhdG9yPiB0aGlzX3R5cGU7CisgICAgICAgICAgICB0eXBlZGVmIGRyb3BwYWJsZV9hY2N1bXVsYXRvcl9iYXNlPHRoaXNfdHlwZT4gZGVyaXZlZF90eXBlOworICAgICAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PGRlcml2ZWRfdHlwZSBjb25zdCAqPih0aGlzKS0+aXNfZHJvcHBlZCgpOworICAgICAgICB9CisKKyAgICAgICAgYWxpZ25lZF9zdG9yYWdlPHNpemVvZihyZXN1bHRfdHlwZSk+IGNhY2hlOworICAgIH07CisKKyAgICBuYW1lc3BhY2UgdGFnCisgICAgeworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgICAgICBzdHJ1Y3QgYXNfZHJvcHBhYmxlCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgZHJvcHBhYmxlPEZlYXR1cmU+IHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICAgICAgc3RydWN0IGFzX2Ryb3BwYWJsZTxkcm9wcGFibGU8RmVhdHVyZT4gPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIGRyb3BwYWJsZTxGZWF0dXJlPiB0eXBlOworICAgICAgICB9OworCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGRyb3BwYWJsZQorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgICAgICBzdHJ1Y3QgZHJvcHBhYmxlCisgICAgICAgICAgOiBhc19mZWF0dXJlPEZlYXR1cmU+Ojp0eXBlCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXNfZmVhdHVyZTxGZWF0dXJlPjo6dHlwZSBmZWF0dXJlX3R5cGU7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZlYXR1cmVfdHlwZTo6ZGVwZW5kZW5jaWVzIHRtcF9kZXBlbmRlbmNpZXNfOworCisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjp0cmFuc2Zvcm08CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIGZlYXR1cmVfdHlwZTo6ZGVwZW5kZW5jaWVzCisgICAgICAgICAgICAgICAgICAsIGFzX2Ryb3BwYWJsZTxtcGw6Ol8xPgorICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgIGRlcGVuZGVuY2llczsKKworICAgICAgICAgICAgc3RydWN0IGltcGwKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICAgICAgICAgICAgICBzdHJ1Y3QgYXBwbHkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZV9hY2N1bXVsYXRvcjwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmFwcGx5Mjx0eXBlbmFtZSBmZWF0dXJlX3R5cGU6OmltcGwsIFNhbXBsZSwgV2VpZ2h0Pjo6dHlwZQorICAgICAgICAgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgICAgICAgICB0eXBlOworICAgICAgICAgICAgICAgIH07CisgICAgICAgICAgICB9OworICAgICAgICB9OworICAgIH0KKworICAgIC8vIG1ha2UgZHJvcHBhYmxlPHRhZzo6ZmVhdHVyZShtb2RpZmllcik+IHdvcmsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBhc19mZWF0dXJlPHRhZzo6ZHJvcHBhYmxlPEZlYXR1cmU+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgdGFnOjpkcm9wcGFibGU8dHlwZW5hbWUgYXNfZmVhdHVyZTxGZWF0dXJlPjo6dHlwZT4gdHlwZTsKKyAgICB9OworCisgICAgLy8gbWFrZSBkcm9wcGFibGU8dGFnOjptZWFuPiB3b3JrIHdpdGggbm9uLXZvaWQgd2VpZ2h0cyAoc2hvdWxkIGJlY29tZQorICAgIC8vIGRyb3BwYWJsZTx0YWc6OndlaWdodGVkX21lYW4+CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmRyb3BwYWJsZTxGZWF0dXJlPiA+CisgICAgeworICAgICAgICB0eXBlZGVmIHRhZzo6ZHJvcHBhYmxlPHR5cGVuYW1lIGFzX3dlaWdodGVkX2ZlYXR1cmU8RmVhdHVyZT46OnR5cGU+IHR5cGU7CisgICAgfTsKKworICAgIC8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisgICAgLy8gZHJvcHBhYmxlPEZvbz4gcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyBGb28KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBmZWF0dXJlX29mPHRhZzo6ZHJvcHBhYmxlPEZlYXR1cmU+ID4KKyAgICAgIDogZmVhdHVyZV9vZjxGZWF0dXJlPgorICAgIHsKKyAgICB9OworCisgICAgLy8gTm90ZTogVXN1YWxseSwgdGhlIGV4dHJhY3RvciBpcyBwdWxsZWQgaW50byB0aGUgYWNjdW11bGF0b3JzIG5hbWVzcGFjZSB3aXRoCisgICAgLy8gYSB1c2luZyBkaXJlY3RpdmUsIG5vdCB0aGUgdGFnLiBCdXQgdGhlIGRyb3BwYWJsZTw+IGZlYXR1cmUgZG9lc24ndCBoYXZlIGFuCisgICAgLy8gZXh0cmFjdG9yLCBzbyB3ZSBjYW4gcHV0IHRoZSBkcm9wcGFibGUgdGFnIGluIHRoZSBhY2N1bXVsYXRvcnMgbmFtZXNwYWNlCisgICAgLy8gd2l0aG91dCBmZWFyIG9mIGEgbmFtZSBjb25mbGljdC4KKyAgICB1c2luZyB0YWc6OmRyb3BwYWJsZTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcnMvZXh0ZXJuYWxfYWNjdW11bGF0b3IuaHBwCkBAIC0wLDAgKzEsMTA4IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRlcm5hbF9hY2N1bXVsYXRvci5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19FWFRFUk5BTF9BQ0NVTVVMQVRPUl9IUFBfRUFOXzAxXzEyXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19BQ0NVTVVMQVRPUlNfRVhURVJOQUxfQUNDVU1VTEFUT1JfSFBQX0VBTl8wMV8xMl8yMDA1CisKKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+IC8vIGZvciBmZWF0dXJlX3RhZworI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcnMvcmVmZXJlbmNlX2FjY3VtdWxhdG9yLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycyB7IG5hbWVzcGFjZSBpbXBsCit7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGV4dGVybmFsX2ltcGwKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yLCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IGV4dGVybmFsX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBBY2N1bXVsYXRvcjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZGV0YWlsOjpmZWF0dXJlX3RhZzxBY2N1bXVsYXRvcj46OnR5cGUgZmVhdHVyZV90YWc7CisKKyAgICAgICAgZXh0ZXJuYWxfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5leHRyYWN0XyhhcmdzLCBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKSB8IDBdKTsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBzdGF0aWMgcmVzdWx0X3R5cGUgZXh0cmFjdF8oQXJncyBjb25zdCAmYXJncywgaW50KQorICAgICAgICB7CisgICAgICAgICAgICAvLyBObyBuYW1lZCBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBleHRyYWN0b3IuIE1heWJlIHRoZSBleHRlcm5hbAorICAgICAgICAgICAgLy8gZmVhdHVyZSBpcyBoZWxkIGJ5IHJlZmVyZW5jZTw+LgorICAgICAgICAgICAgZXh0cmFjdG9yPGZlYXR1cmVfdGFnPiBleHRyYWN0OworICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3QoYWNjdW11bGF0b3JzOjpyZWZlcmVuY2VfdGFnPFRhZz4oYXJncykpOworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncywgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQ+CisgICAgICAgIHN0YXRpYyByZXN1bHRfdHlwZSBleHRyYWN0XyhBcmdzIGNvbnN0ICYsIEFjY3VtdWxhdG9yU2V0IGNvbnN0ICZhY2MpCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIE9LLCBhIG5hbWVkIHBhcmFtZXRlciBmb3IgdGhpcyBleHRlcm5hbCBmZWF0dXJlIHdhcyBwYXNzZWQgdG8gdGhlCisgICAgICAgICAgICAvLyBleHRyYWN0b3IsIHNvIHVzZSB0aGF0LgorICAgICAgICAgICAgZXh0cmFjdG9yPGZlYXR1cmVfdGFnPiBleHRyYWN0OworICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3QoYWNjKTsKKyAgICAgICAgfQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworbmFtZXNwYWNlIHRhZworeworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZXh0ZXJuYWwKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBUYWcsIHR5cGVuYW1lIEFjY3VtdWxhdG9yU2V0PgorICAgIHN0cnVjdCBleHRlcm5hbAorICAgICAgOiBkZXBlbmRzX29uPHJlZmVyZW5jZTxBY2N1bXVsYXRvclNldCwgVGFnPiA+CisgICAgeworICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICBhY2N1bXVsYXRvcnM6OmltcGw6OmV4dGVybmFsX2ltcGw8CisgICAgICAgICAgICAgICAgZGV0YWlsOjp0b19hY2N1bXVsYXRvcjxGZWF0dXJlLCBtcGw6Ol8xLCBtcGw6Ol8yPgorICAgICAgICAgICAgICAsIFRhZworICAgICAgICAgICAgPgorICAgICAgICBpbXBsOworICAgIH07CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IGV4dGVybmFsPEZlYXR1cmUsIFRhZywgdm9pZD4KKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICBhY2N1bXVsYXRvcnM6OmltcGw6OmV4dGVybmFsX2ltcGw8CisgICAgICAgICAgICAgICAgZGV0YWlsOjp0b19hY2N1bXVsYXRvcjxGZWF0dXJlLCBtcGw6Ol8xLCBtcGw6Ol8yPgorICAgICAgICAgICAgICAsIFRhZworICAgICAgICAgICAgPgorICAgICAgICBpbXBsOworICAgIH07Cit9CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBleHRlcm5hbF9hY2N1bXVsYXRvcjxGZWF0dXJlLCBUYWc+IHByb3ZpZGVzIHRoZSBzYW1lIGZlYXR1cmUgYXMgRmVhdHVyZQordGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZSwgdHlwZW5hbWUgVGFnLCB0eXBlbmFtZSBBY2N1bXVsYXRvclNldD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6ZXh0ZXJuYWw8RmVhdHVyZSwgVGFnLCBBY2N1bXVsYXRvclNldD4gPgorICA6IGZlYXR1cmVfb2Y8RmVhdHVyZT4KK3sKK307CisKKy8vIE5vdGU6IFVzdWFsbHksIHRoZSBleHRyYWN0b3IgaXMgcHVsbGVkIGludG8gdGhlIGFjY3VtdWxhdG9ycyBuYW1lc3BhY2Ugd2l0aAorLy8gYSB1c2luZyBkaXJlY3RpdmUsIG5vdCB0aGUgdGFnLiBCdXQgdGhlIGV4dGVybmFsPD4gZmVhdHVyZSBkb2Vzbid0IGhhdmUgYW4KKy8vIGV4dHJhY3Rvciwgc28gd2UgY2FuIHB1dCB0aGUgZXh0ZXJuYWwgdGFnIGluIHRoZSBhY2N1bXVsYXRvcnMgbmFtZXNwYWNlCisvLyB3aXRob3V0IGZlYXIgb2YgYSBuYW1lIGNvbmZsaWN0LgordXNpbmcgdGFnOjpleHRlcm5hbDsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcnMvcmVmZXJlbmNlX2FjY3VtdWxhdG9yLmhwcApAQCAtMCwwICsxLDg5IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyByZWZlcmVuY2VfYWNjdW11bGF0b3IuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19BQ0NVTVVMQVRPUlNfUkVGRVJFTkNFX0FDQ1VNVUxBVE9SX0hQUF9FQU5fMDNfMjNfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19SRUZFUkVOQ0VfQUNDVU1VTEFUT1JfSFBQX0VBTl8wM18yM18yMDA2CisKKyNpbmNsdWRlIDxib29zdC9yZWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hbHdheXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPiAvLyBmb3IgZmVhdHVyZV90YWcKKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcmVmZXJlbmNlX2FjY3VtdWxhdG9yX2ltcGwKKyAgICAvLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJlZmVyZW50LCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHJlZmVyZW5jZV9hY2N1bXVsYXRvcl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgUmVmZXJlbnQgJnJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlZmVyZW5jZV9hY2N1bXVsYXRvcl9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiByZWYoYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCldKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+cmVmOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICByZWZlcmVuY2Vfd3JhcHBlcjxSZWZlcmVudD4gcmVmOworICAgIH07Cit9IC8vIG5hbWVzcGFjZSBpbXBsCisKK25hbWVzcGFjZSB0YWcKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHJlZmVyZW5jZV90YWcKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHJlZmVyZW5jZV90YWcKKyAgICB7CisgICAgfTsKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcmVmZXJlbmNlCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmVmZXJlbnQsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3QgcmVmZXJlbmNlCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgbXBsOjphbHdheXM8YWNjdW11bGF0b3JzOjppbXBsOjpyZWZlcmVuY2VfYWNjdW11bGF0b3JfaW1wbDxSZWZlcmVudCwgVGFnPiA+IGltcGw7CisgICAgfTsKK30KKworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfREVGSU5FX0VYVFJBQ1RPUih0YWcsIHJlZmVyZW5jZSwgKHR5cGVuYW1lKSh0eXBlbmFtZSkpCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCByZWZlcmVuY2VfdGFnLCAodHlwZW5hbWUpKQorfQorCit1c2luZyBleHRyYWN0OjpyZWZlcmVuY2U7Cit1c2luZyBleHRyYWN0OjpyZWZlcmVuY2VfdGFnOworCisvLyBNYXAgYWxsIHJlZmVyZW5jZTxWLFQ+IGZlYXR1cmVzIHRvIHJlZmVyZW5jZV90YWc8VD4gc28KKy8vIHRoYXQgcmVmZXJlbmNlcyBjYW4gYmUgZXh0cmFjdGVkIHVzaW5nIHJlZmVyZW5jZV90YWc8VD4KKy8vIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgcmVmZXJlbnQgdHlwZS4KK3RlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZSwgdHlwZW5hbWUgVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpyZWZlcmVuY2U8VmFsdWVUeXBlLCBUYWc+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cmVmZXJlbmNlX3RhZzxUYWc+ID4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL3ZhbHVlX2FjY3VtdWxhdG9yLmhwcApAQCAtMCwwICsxLDg5IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB2YWx1ZV9hY2N1bXVsYXRvci5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLCBEYW5pZWwgRWdsb2ZmLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0FDQ1VNVUxBVE9SU19WQUxVRV9BQ0NVTVVMQVRPUl9IUFBfRUFOXzAzXzIzXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19BQ0NVTVVMQVRPUlNfVkFMVUVfQUNDVU1VTEFUT1JfSFBQX0VBTl8wM18yM18yMDA2CisKKyNpbmNsdWRlIDxib29zdC9tcGwvYWx3YXlzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4gLy8gZm9yIGZlYXR1cmVfdGFnCisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gdmFsdWVfYWNjdW11bGF0b3JfaW1wbAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB2YWx1ZV9hY2N1bXVsYXRvcl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgVmFsdWVUeXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZhbHVlX2FjY3VtdWxhdG9yX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHZhbChhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKV0pCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT52YWw7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIFZhbHVlVHlwZSB2YWw7CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCituYW1lc3BhY2UgdGFnCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB2YWx1ZV90YWcKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHZhbHVlX3RhZworICAgIHsKKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB2YWx1ZQorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB2YWx1ZQorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIG1wbDo6YWx3YXlzPGFjY3VtdWxhdG9yczo6aW1wbDo6dmFsdWVfYWNjdW11bGF0b3JfaW1wbDxWYWx1ZVR5cGUsIFRhZz4gPiBpbXBsOworICAgIH07Cit9CisKK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCB2YWx1ZSwgKHR5cGVuYW1lKSh0eXBlbmFtZSkpCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCB2YWx1ZV90YWcsICh0eXBlbmFtZSkpCit9CisKK3VzaW5nIGV4dHJhY3Q6OnZhbHVlOwordXNpbmcgZXh0cmFjdDo6dmFsdWVfdGFnOworCisvLyBNYXAgYWxsIHZhbHVlPFYsVD4gZmVhdHVyZXMgdG8gdmFsdWVfdGFnPFQ+IHNvCisvLyB0aGF0IHZhbHVlcyBjYW4gYmUgZXh0cmFjdGVkIHVzaW5nIHZhbHVlX3RhZzxUPgorLy8gd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSB2YWx1ZSB0eXBlLgordGVtcGxhdGU8dHlwZW5hbWUgVmFsdWVUeXBlLCB0eXBlbmFtZSBUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OnZhbHVlPFZhbHVlVHlwZSwgVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OnZhbHVlX3RhZzxUYWc+ID4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHAKQEAgLTAsMCArMSw0NDggQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGRlcGVuZHNfb24uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19ERVBFTkRTX09OX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0RFUEVORFNfT05fSFBQX0VBTl8yOF8xMF8yMDA1CisKKyNpbmNsdWRlIDxib29zdC92ZXJzaW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvbWFwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvc2V0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvY29weS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2ZvbGQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9zaXplLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvc29ydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2luc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3JlbW92ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3ZlY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2luaGVyaXQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZGVudGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2VxdWFsX3RvLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvY29udGFpbnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC90cmFuc2Zvcm0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pc19zZXF1ZW5jZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2luc2VydF9yYW5nZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2JhY2tfaW5zZXJ0ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC90cmFuc2Zvcm1fdmlldy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2luaGVyaXRfbGluZWFybHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2Jhc2VfYW5kX2Rlcml2ZWQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL3JlcGVhdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9mYWNpbGl0aWVzL2ludGVyY2VwdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2FjY3VtdWxhdG9yc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Z1c2lvbi9pbmNsdWRlL25leHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Z1c2lvbi9pbmNsdWRlL2VxdWFsX3RvLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdXNpb24vaW5jbHVkZS92YWx1ZV9vZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvZnVzaW9uL2luY2x1ZGUvbXBsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdXNpb24vaW5jbHVkZS9lbmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Z1c2lvbi9pbmNsdWRlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdXNpb24vaW5jbHVkZS9jb25zLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFzX2ZlYXR1cmUKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBhc19mZWF0dXJlCisgICAgeworICAgICAgICB0eXBlZGVmIEZlYXR1cmUgdHlwZTsKKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfZmVhdHVyZQorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmUKKyAgICB7CisgICAgICAgIHR5cGVkZWYgRmVhdHVyZSB0eXBlOworICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBmZWF0dXJlX29mCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgZmVhdHVyZV9vZgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBGZWF0dXJlIHR5cGU7CisgICAgfTsKKworICAgIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB7CisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBmZWF0dXJlX3RhZworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICAgICAgc3RydWN0IGZlYXR1cmVfdGFnCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgQWNjdW11bGF0b3I6OmZlYXR1cmVfdGFnIHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICAgICAgc3RydWN0IHVuZHJvcHBhYmxlCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgRmVhdHVyZSB0eXBlOworICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgICAgIHN0cnVjdCB1bmRyb3BwYWJsZTx0YWc6OmRyb3BwYWJsZTxGZWF0dXJlPiA+CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgRmVhdHVyZSB0eXBlOworICAgICAgICB9OworCisgICAgICAgIC8vIEZvciB0aGUgcHVycG9zZSBvZiBkZXRlcm1pbmluZyB3aGV0aGVyIG9uZSBmZWF0dXJlIGRlcGVuZHMgb24gYW5vdGhlciwKKyAgICAgICAgLy8gZGlzcmVnYXJkIHdoZXRoZXIgdGhlIGZlYXR1cmUgaXMgZHJvcHBhYmxlIG9yIG5vdC4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQSwgdHlwZW5hbWUgQj4KKyAgICAgICAgc3RydWN0IGlzX2RlcGVuZGVudF9vbgorICAgICAgICAgIDogaXNfYmFzZV9hbmRfZGVyaXZlZDwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBmZWF0dXJlX29mPHR5cGVuYW1lIHVuZHJvcHBhYmxlPEI+Ojp0eXBlPjo6dHlwZQorICAgICAgICAgICAgICAsIHR5cGVuYW1lIHVuZHJvcHBhYmxlPEE+Ojp0eXBlCisgICAgICAgICAgICA+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgICAgIHN0cnVjdCBkZXBlbmRlbmNpZXNfb2YKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBGZWF0dXJlOjpkZXBlbmRlbmNpZXMgdHlwZTsKKyAgICAgICAgfTsKKworICAgICAgICAvLyBTaG91bGQgdXNlIG1wbDo6aW5zZXJ0X3JhbmdlLCBidXQgZG9lc24ndCBzZWVtIHRvIHdvcmsgd2l0aCBtcGwgc2V0cworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXQsIHR5cGVuYW1lIFJhbmdlPgorICAgICAgICBzdHJ1Y3Qgc2V0X2luc2VydF9yYW5nZQorICAgICAgICAgIDogbXBsOjpmb2xkPAorICAgICAgICAgICAgICAgIFJhbmdlCisgICAgICAgICAgICAgICwgU2V0CisgICAgICAgICAgICAgICwgbXBsOjppbnNlcnQ8bXBsOjpfMSwgbXBsOjpfMj4KKyAgICAgICAgICAgID4KKyAgICAgICAge307CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZXM+CisgICAgICAgIHN0cnVjdCBjb2xsZWN0X2Fic3RyYWN0X2ZlYXR1cmVzCisgICAgICAgICAgOiBtcGw6OmZvbGQ8CisgICAgICAgICAgICAgICAgRmVhdHVyZXMKKyAgICAgICAgICAgICAgLCBtcGw6OnNldDA8PgorICAgICAgICAgICAgICAsIHNldF9pbnNlcnRfcmFuZ2U8CisgICAgICAgICAgICAgICAgICAgIG1wbDo6aW5zZXJ0PG1wbDo6XzEsIGZlYXR1cmVfb2Y8bXBsOjpfMj4gPgorICAgICAgICAgICAgICAgICAgLCBjb2xsZWN0X2Fic3RyYWN0X2ZlYXR1cmVzPGRlcGVuZGVuY2llc19vZjxtcGw6Ol8yPiA+CisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgPgorICAgICAgICB7fTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlcz4KKyAgICAgICAgc3RydWN0IGRlcGVuZHNfb25fYmFzZQorICAgICAgICAgIDogbXBsOjppbmhlcml0X2xpbmVhcmx5PAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6c29ydDwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjpjb3B5PAorICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgY29sbGVjdF9hYnN0cmFjdF9mZWF0dXJlczxGZWF0dXJlcz46OnR5cGUKKyAgICAgICAgICAgICAgICAgICAgICAsIG1wbDo6YmFja19pbnNlcnRlcjxtcGw6OnZlY3RvcjA8PiA+CisgICAgICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgICAgICAgICwgaXNfZGVwZW5kZW50X29uPG1wbDo6XzEsIG1wbDo6XzI+CisgICAgICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICAgICAgICAgIC8vIERvbid0IGluaGVyaXQgbXVsdGlwbHkgZnJvbSBhIGZlYXR1cmUKKyAgICAgICAgICAgICAgLCBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICAgICAgaXNfZGVwZW5kZW50X29uPG1wbDo6XzEsIG1wbDo6XzI+CisgICAgICAgICAgICAgICAgICAsIG1wbDo6XzEKKyAgICAgICAgICAgICAgICAgICwgbXBsOjppbmhlcml0PG1wbDo6XzEsIG1wbDo6XzI+CisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICB7CisgICAgICAgIH07CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8vIGRlcGVuZHNfb24KKyAgICB0ZW1wbGF0ZTxCT09TVF9QUF9FTlVNX1BBUkFNUyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0ZFQVRVUkVTLCB0eXBlbmFtZSBGZWF0dXJlKT4KKyAgICBzdHJ1Y3QgZGVwZW5kc19vbgorICAgICAgOiBkZXRhaWw6OmRlcGVuZHNfb25fYmFzZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6dHJhbnNmb3JtPAorICAgICAgICAgICAgICAgIG1wbDo6dmVjdG9yPEJPT1NUX1BQX0VOVU1fUEFSQU1TKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIEZlYXR1cmUpPgorICAgICAgICAgICAgICAsIGFzX2ZlYXR1cmU8bXBsOjpfMT4KKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBtcGw6OmZhbHNlXyBpc193ZWlnaHRfYWNjdW11bGF0b3I7CisgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6dHJhbnNmb3JtPAorICAgICAgICAgICAgICAgIG1wbDo6dmVjdG9yPEJPT1NUX1BQX0VOVU1fUEFSQU1TKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIEZlYXR1cmUpPgorICAgICAgICAgICAgICAsIGFzX2ZlYXR1cmU8bXBsOjpfMT4KKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgZGVwZW5kZW5jaWVzOworICAgIH07CisKKyAgICBuYW1lc3BhY2UgZGV0YWlsCisgICAgeworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgICAgICBzdHJ1Y3QgbWF0Y2hlc19mZWF0dXJlCisgICAgICAgIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yPgorICAgICAgICAgICAgc3RydWN0IGFwcGx5CisgICAgICAgICAgICAgIDogaXNfc2FtZTwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgZmVhdHVyZV9vZjx0eXBlbmFtZSBhc19mZWF0dXJlPEZlYXR1cmU+Ojp0eXBlPjo6dHlwZQorICAgICAgICAgICAgICAgICAgLCB0eXBlbmFtZSBmZWF0dXJlX29mPHR5cGVuYW1lIGFzX2ZlYXR1cmU8dHlwZW5hbWUgZmVhdHVyZV90YWc8QWNjdW11bGF0b3I+Ojp0eXBlPjo6dHlwZT46OnR5cGUKKyAgICAgICAgICAgICAgICA+CisgICAgICAgICAgICB7fTsKKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlcywgdHlwZW5hbWUgQWNjdW11bGF0b3I+CisgICAgICAgIHN0cnVjdCBjb250YWluc19mZWF0dXJlX29mCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICBtcGw6OnRyYW5zZm9ybV92aWV3PEZlYXR1cmVzLCBmZWF0dXJlX29mPGFzX2ZlYXR1cmU8bXBsOjpfPiA+ID4KKyAgICAgICAgICAgIGZlYXR1cmVzX2xpc3Q7CisKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBmZWF0dXJlX29mPHR5cGVuYW1lIGZlYXR1cmVfdGFnPEFjY3VtdWxhdG9yPjo6dHlwZT46OnR5cGUKKyAgICAgICAgICAgIHRoZV9mZWF0dXJlOworCisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjpjb250YWluczxmZWF0dXJlc19saXN0LCB0aGVfZmVhdHVyZT46OnR5cGUKKyAgICAgICAgICAgIHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpbiBlYXJseSB2ZXJzaW9ucyBvZiBGdXNpb24gd2hpY2ggY2F1c2VkCisgICAgICAgIC8vIGEgY29tcGlsZSBlcnJvciBpZiBjb250YWluc19mZWF0dXJlX29mPExpc3QsIG1wbDo6Xz4gaXMgdXNlZCBhcyBhCisgICAgICAgIC8vIHByZWRpY2F0ZSB0byBmdXNpb246OmZpbmRfaWYKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZXM+CisgICAgICAgIHN0cnVjdCBjb250YWluc19mZWF0dXJlX29mXworICAgICAgICB7CisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvcj4KKyAgICAgICAgICAgIHN0cnVjdCBhcHBseQorICAgICAgICAgICAgICA6IGNvbnRhaW5zX2ZlYXR1cmVfb2Y8RmVhdHVyZXMsIEFjY3VtdWxhdG9yPgorICAgICAgICAgICAge307CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBGaXJzdAorICAgICAgICAgICwgdHlwZW5hbWUgTGFzdAorICAgICAgICAgICwgYm9vbCBpc19lbXB0eSA9IGZ1c2lvbjo6cmVzdWx0X29mOjplcXVhbF90bzxGaXJzdCwgTGFzdD46OnZhbHVlCisgICAgICAgID4KKyAgICAgICAgc3RydWN0IGJ1aWxkX2FjY19saXN0OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpcnN0LCB0eXBlbmFtZSBMYXN0PgorICAgICAgICBzdHJ1Y3QgYnVpbGRfYWNjX2xpc3Q8Rmlyc3QsIExhc3QsIHRydWU+CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgZnVzaW9uOjpuaWxfIHR5cGU7CisKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgICAgICBzdGF0aWMgZnVzaW9uOjpuaWxfCisgICAgICAgICAgICBjYWxsKEFyZ3MgY29uc3QgJiwgRmlyc3QgY29uc3QmLCBMYXN0IGNvbnN0JikKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gZnVzaW9uOjpuaWxfKCk7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmlyc3QsIHR5cGVuYW1lIExhc3Q+CisgICAgICAgIHN0cnVjdCBidWlsZF9hY2NfbGlzdDxGaXJzdCwgTGFzdCwgZmFsc2U+CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICBidWlsZF9hY2NfbGlzdDx0eXBlbmFtZSBmdXNpb246OnJlc3VsdF9vZjo6bmV4dDxGaXJzdD46OnR5cGUsIExhc3Q+CisgICAgICAgICAgICBuZXh0X2J1aWxkX2FjY19saXN0OworCisgICAgICAgICAgICB0eXBlZGVmIGZ1c2lvbjo6Y29uczwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBmdXNpb246OnJlc3VsdF9vZjo6dmFsdWVfb2Y8Rmlyc3Q+Ojp0eXBlCisgICAgICAgICAgICAgICwgdHlwZW5hbWUgbmV4dF9idWlsZF9hY2NfbGlzdDo6dHlwZT4KKyAgICAgICAgICAgIHR5cGU7CisKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgICAgICBzdGF0aWMgdHlwZQorICAgICAgICAgICAgY2FsbChBcmdzIGNvbnN0ICZhcmdzLCBGaXJzdCBjb25zdCYgZiwgTGFzdCBjb25zdCYgbCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gdHlwZShhcmdzLCBuZXh0X2J1aWxkX2FjY19saXN0OjpjYWxsKGFyZ3MsIGZ1c2lvbjo6bmV4dChmKSwgbCkpOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIG5hbWVzcGFjZSBtZXRhCisgICAgICAgIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlPgorICAgICAgICAgICAgc3RydWN0IG1ha2VfYWNjX2xpc3QKKyAgICAgICAgICAgICAgOiBidWlsZF9hY2NfbGlzdDwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgZnVzaW9uOjpyZXN1bHRfb2Y6OmJlZ2luPFNlcXVlbmNlPjo6dHlwZQorICAgICAgICAgICAgICAgICAgLCB0eXBlbmFtZSBmdXNpb246OnJlc3VsdF9vZjo6ZW5kPFNlcXVlbmNlPjo6dHlwZQorICAgICAgICAgICAgICAgID4KKyAgICAgICAgICAgIHt9OworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2UsIHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHR5cGVuYW1lIG1ldGE6Om1ha2VfYWNjX2xpc3Q8U2VxdWVuY2U+Ojp0eXBlCisgICAgICAgIG1ha2VfYWNjX2xpc3QoU2VxdWVuY2UgY29uc3QgJnNlcSwgQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIG1ldGE6Om1ha2VfYWNjX2xpc3Q8U2VxdWVuY2U+OjpjYWxsKGFyZ3MsIGZ1c2lvbjo6YmVnaW4oc2VxKSwgZnVzaW9uOjplbmQoc2VxKSk7CisgICAgICAgIH0KKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gY2hlY2tlZF9hc193ZWlnaHRlZF9mZWF0dXJlCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgICAgIHN0cnVjdCBjaGVja2VkX2FzX3dlaWdodGVkX2ZlYXR1cmUKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBhc19mZWF0dXJlPEZlYXR1cmU+Ojp0eXBlIGZlYXR1cmVfdHlwZTsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXNfd2VpZ2h0ZWRfZmVhdHVyZTxmZWF0dXJlX3R5cGU+Ojp0eXBlIHR5cGU7CisgICAgICAgICAgICAvLyB3ZWlnaHRlZCBhbmQgbm9uLXdlaWdodGVkIGZsYXZvcnMgc2hvdWxkIHByb3ZpZGUgdGhlIHNhbWUgZmVhdHVyZS4KKyAgICAgICAgICAgIEJPT1NUX01QTF9BU1NFUlQoKAorICAgICAgICAgICAgICAgIGlzX3NhbWU8CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIGZlYXR1cmVfb2Y8ZmVhdHVyZV90eXBlPjo6dHlwZQorICAgICAgICAgICAgICAgICAgLCB0eXBlbmFtZSBmZWF0dXJlX29mPHR5cGU+Ojp0eXBlCisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgKSk7CisgICAgICAgIH07CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGFzX2ZlYXR1cmVfbGlzdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlcywgdHlwZW5hbWUgV2VpZ2h0PgorICAgICAgICBzdHJ1Y3QgYXNfZmVhdHVyZV9saXN0CisgICAgICAgICAgOiBtcGw6OnRyYW5zZm9ybV92aWV3PEZlYXR1cmVzLCBjaGVja2VkX2FzX3dlaWdodGVkX2ZlYXR1cmU8bXBsOjpfMT4gPgorICAgICAgICB7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZXM+CisgICAgICAgIHN0cnVjdCBhc19mZWF0dXJlX2xpc3Q8RmVhdHVyZXMsIHZvaWQ+CisgICAgICAgICAgOiBtcGw6OnRyYW5zZm9ybV92aWV3PEZlYXR1cmVzLCBhc19mZWF0dXJlPG1wbDo6XzE+ID4KKyAgICAgICAgeworICAgICAgICB9OworCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBhY2N1bXVsYXRvcl93cmFwcGVyCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFjY3VtdWxhdG9yLCB0eXBlbmFtZSBGZWF0dXJlPgorICAgICAgICBzdHJ1Y3QgYWNjdW11bGF0b3Jfd3JhcHBlcgorICAgICAgICAgIDogQWNjdW11bGF0b3IKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiBGZWF0dXJlIGZlYXR1cmVfdGFnOworCisgICAgICAgICAgICBhY2N1bXVsYXRvcl93cmFwcGVyKGFjY3VtdWxhdG9yX3dyYXBwZXIgY29uc3QgJnRoYXQpCisgICAgICAgICAgICAgIDogQWNjdW11bGF0b3IoKnN0YXRpY19jYXN0PEFjY3VtdWxhdG9yIGNvbnN0ICo+KCZ0aGF0KSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgICAgIGFjY3VtdWxhdG9yX3dyYXBwZXIoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICAgICAgOiBBY2N1bXVsYXRvcihhcmdzKQorICAgICAgICAgICAgeworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyB0b19hY2N1bXVsYXRvcgorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlLCB0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICAgICAgc3RydWN0IHRvX2FjY3VtdWxhdG9yCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcl93cmFwcGVyPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmFwcGx5Mjx0eXBlbmFtZSBGZWF0dXJlOjppbXBsLCBTYW1wbGUsIFdlaWdodD46OnR5cGUKKyAgICAgICAgICAgICAgICAgICwgRmVhdHVyZQorICAgICAgICAgICAgICAgID4KKyAgICAgICAgICAgIHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZSwgdHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIFRhZywgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQ+CisgICAgICAgIHN0cnVjdCB0b19hY2N1bXVsYXRvcjxGZWF0dXJlLCBTYW1wbGUsIHRhZzo6ZXh0ZXJuYWw8V2VpZ2h0LCBUYWcsIEFjY3VtdWxhdG9yU2V0PiA+CisgICAgICAgIHsKKyAgICAgICAgICAgIEJPT1NUX01QTF9BU1NFUlQoKGlzX3NhbWU8VGFnLCB2b2lkPikpOworICAgICAgICAgICAgQk9PU1RfTVBMX0FTU0VSVCgoaXNfc2FtZTxBY2N1bXVsYXRvclNldCwgdm9pZD4pKTsKKworICAgICAgICAgICAgdHlwZWRlZgorICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yX3dyYXBwZXI8CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6YXBwbHkyPHR5cGVuYW1lIEZlYXR1cmU6OmltcGwsIFNhbXBsZSwgV2VpZ2h0Pjo6dHlwZQorICAgICAgICAgICAgICAgICAgLCBGZWF0dXJlCisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgYWNjdW11bGF0b3JfdHlwZTsKKworICAgICAgICAgICAgdHlwZWRlZgorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6aWZfPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBGZWF0dXJlOjppc193ZWlnaHRfYWNjdW11bGF0b3IKKyAgICAgICAgICAgICAgICAgICwgYWNjdW11bGF0b3Jfd3JhcHBlcjxpbXBsOjpleHRlcm5hbF9pbXBsPGFjY3VtdWxhdG9yX3R5cGUsIHRhZzo6d2VpZ2h0cz4sIEZlYXR1cmU+CisgICAgICAgICAgICAgICAgICAsIGFjY3VtdWxhdG9yX3R5cGUKKyAgICAgICAgICAgICAgICA+Ojp0eXBlCisgICAgICAgICAgICB0eXBlOworICAgICAgICB9OworCisgICAgICAgIC8vIEJVR0JVRyB3b3JrIGFyb3VuZCBhbiBNUEwgYnVnIHdydCBtYXAgaW5zZXJ0aW9uCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmVNYXAsIHR5cGVuYW1lIEZlYXR1cmU+CisgICAgICAgIHN0cnVjdCBpbnNlcnRfZmVhdHVyZQorICAgICAgICAgIDogbXBsOjpldmFsX2lmPAorICAgICAgICAgICAgICAgIG1wbDo6aGFzX2tleTxGZWF0dXJlTWFwLCB0eXBlbmFtZSBmZWF0dXJlX29mPEZlYXR1cmU+Ojp0eXBlPgorICAgICAgICAgICAgICAsIG1wbDo6aWRlbnRpdHk8RmVhdHVyZU1hcD4KKyAgICAgICAgICAgICAgLCBtcGw6Omluc2VydDxGZWF0dXJlTWFwLCBtcGw6OnBhaXI8dHlwZW5hbWUgZmVhdHVyZV9vZjxGZWF0dXJlPjo6dHlwZSwgRmVhdHVyZT4gPgorICAgICAgICAgICAgPgorICAgICAgICB7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZU1hcCwgdHlwZW5hbWUgRmVhdHVyZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgICAgICBzdHJ1Y3QgaW5zZXJ0X2RlcGVuZGVuY2llcworICAgICAgICAgIDogbXBsOjpmb2xkPAorICAgICAgICAgICAgICAgIGFzX2ZlYXR1cmVfbGlzdDx0eXBlbmFtZSBGZWF0dXJlOjpkZXBlbmRlbmNpZXMsIFdlaWdodD4KKyAgICAgICAgICAgICAgLCBGZWF0dXJlTWFwCisgICAgICAgICAgICAgICwgaW5zZXJ0X2RlcGVuZGVuY2llczwKKyAgICAgICAgICAgICAgICAgICAgaW5zZXJ0X2ZlYXR1cmU8bXBsOjpfMSwgbXBsOjpfMj4KKyAgICAgICAgICAgICAgICAgICwgbXBsOjpfMgorICAgICAgICAgICAgICAgICAgLCBXZWlnaHQKKyAgICAgICAgICAgICAgICA+CisgICAgICAgICAgICA+CisgICAgICAgIHsKKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlTWFwLCB0eXBlbmFtZSBGZWF0dXJlcywgdHlwZW5hbWUgV2VpZ2h0PgorICAgICAgICBzdHJ1Y3QgaW5zZXJ0X3NlcXVlbmNlCisgICAgICAgICAgOiBtcGw6OmZvbGQ8IC8vIEJVR0JVRyBzaG91bGQgdXNlIGluc2VydF9yYW5nZSwgYnV0IGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGZvciBtYXBzCisgICAgICAgICAgICAgICAgYXNfZmVhdHVyZV9saXN0PEZlYXR1cmVzLCBXZWlnaHQ+CisgICAgICAgICAgICAgICwgRmVhdHVyZU1hcAorICAgICAgICAgICAgICAsIGluc2VydF9mZWF0dXJlPG1wbDo6XzEsIG1wbDo6XzI+CisgICAgICAgICAgICA+CisgICAgICAgIHsKKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlcywgdHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgICAgIHN0cnVjdCBtYWtlX2FjY3VtdWxhdG9yX3R1cGxlCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmZvbGQ8CisgICAgICAgICAgICAgICAgICAgIGFzX2ZlYXR1cmVfbGlzdDxGZWF0dXJlcywgV2VpZ2h0PgorICAgICAgICAgICAgICAgICAgLCBtcGw6Om1hcDA8PgorICAgICAgICAgICAgICAgICAgLCBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICAgICAgICAgIG1wbDo6aXNfc2VxdWVuY2U8bXBsOjpfMj4KKyAgICAgICAgICAgICAgICAgICAgICAsIGluc2VydF9zZXF1ZW5jZTxtcGw6Ol8xLCBtcGw6Ol8yLCBXZWlnaHQ+CisgICAgICAgICAgICAgICAgICAgICAgLCBpbnNlcnRfZmVhdHVyZTxtcGw6Ol8xLCBtcGw6Ol8yPgorICAgICAgICAgICAgICAgICAgICA+CisgICAgICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICAgICAgZmVhdHVyZV9tYXA7CisKKyAgICAgICAgICAgIC8vIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG1hcCwgYWRkIGl0cyBkZXBlbmRlbmNpZXMgYWxzbworICAgICAgICAgICAgdHlwZWRlZgorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6Zm9sZDwKKyAgICAgICAgICAgICAgICAgICAgZmVhdHVyZV9tYXAKKyAgICAgICAgICAgICAgICAgICwgZmVhdHVyZV9tYXAKKyAgICAgICAgICAgICAgICAgICwgaW5zZXJ0X2RlcGVuZGVuY2llczxtcGw6Ol8xLCBtcGw6OnNlY29uZDxtcGw6Ol8yPiwgV2VpZ2h0PgorICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgIGZlYXR1cmVfbWFwX3dpdGhfZGVwZW5kZW5jaWVzOworCisgICAgICAgICAgICAvLyB0dXJuIHRoZSBtYXAgaW50byBhIHZlY3RvciBzbyB3ZSBjYW4gc29ydCBpdAorICAgICAgICAgICAgdHlwZWRlZgorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6aW5zZXJ0X3JhbmdlPAorICAgICAgICAgICAgICAgICAgICBtcGw6OnZlY3Rvcjw+CisgICAgICAgICAgICAgICAgICAsIG1wbDo6ZW5kPG1wbDo6dmVjdG9yPD4gPjo6dHlwZQorICAgICAgICAgICAgICAgICAgLCBtcGw6OnRyYW5zZm9ybV92aWV3PGZlYXR1cmVfbWFwX3dpdGhfZGVwZW5kZW5jaWVzLCBtcGw6OnNlY29uZDxtcGw6Ol8xPiA+CisgICAgICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICAgICAgZmVhdHVyZV92ZWN0b3Jfd2l0aF9kZXBlbmRlbmNpZXM7CisKKyAgICAgICAgICAgIC8vIHNvcnQgdGhlIGZlYXR1cmVzIGFjY29yZGluZyB0byB3aGljaCBpcyBkZXJpdmVkIGZyb20gd2hpY2gKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OnNvcnQ8CisgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVfdmVjdG9yX3dpdGhfZGVwZW5kZW5jaWVzCisgICAgICAgICAgICAgICAgICAsIGlzX2RlcGVuZGVudF9vbjxtcGw6Ol8yLCBtcGw6Ol8xPgorICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgIHNvcnRlZF9mZWF0dXJlX3ZlY3RvcjsKKworICAgICAgICAgICAgLy8gRnJvbSB0aGUgdmVjdG9yIG9mIGZlYXR1cmVzLCBjb25zdHJ1Y3QgYSB2ZWN0b3Igb2YgYWNjdW11bGF0b3JzCisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjp0cmFuc2Zvcm08CisgICAgICAgICAgICAgICAgICAgIHNvcnRlZF9mZWF0dXJlX3ZlY3RvcgorICAgICAgICAgICAgICAgICAgLCB0b19hY2N1bXVsYXRvcjxtcGw6Ol8xLCBTYW1wbGUsIFdlaWdodD4KKyAgICAgICAgICAgICAgICA+Ojp0eXBlCisgICAgICAgICAgICB0eXBlOworICAgICAgICB9OworCisgICAgfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0ZXJuYWwuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dGVybmFsLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfRVhURVJOQUxfSFBQX0VBTl8wMV8xMl8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfRVhURVJOQUxfSFBQX0VBTl8wMV8xMl8yMDA1CisKKyNpbmNsdWRlIDxib29zdC9tcGwvYXBwbHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL2V4dGVybmFsX2FjY3VtdWxhdG9yLmhwcD4KKworLy9uYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCisvL3sKKy8vCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vLy8gZXh0ZXJuYWwKKy8vLy8KKy8vdGVtcGxhdGU8dHlwZW5hbWUgVHlwZT4KKy8vc3RydWN0IGV4dGVybmFsCisvL3sKKy8vfTsKKy8vCisvL319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcApAQCAtMCwwICsxLDIyOSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdG9yLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfRVhUUkFDVE9SX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX0VYVFJBQ1RPUl9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci90dXBsZS9yZW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9hcnJheS9zaXplLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvYXJyYXkvZGF0YS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL2FycmF5L2VsZW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9zZXEvdG9fYXJyYXkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9zZXEvdHJhbnNmb3JtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvcmVwZXRpdGlvbi9lbnVtX3BhcmFtcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV90cmFpbGluZ19wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL2VudW1fdHJhaWxpbmdfYmluYXJ5X3BhcmFtcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2JpbmRpbmcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hcHBseS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9yZWZlcmVuY2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvYWNjdW11bGF0b3IuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBkZXRhaWwKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvclNldCwgdHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgYWNjdW11bGF0b3Jfc2V0X3Jlc3VsdAorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBhc19mZWF0dXJlPEZlYXR1cmU+Ojp0eXBlIGZlYXR1cmVfdHlwZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBtcGw6OmFwcGx5PEFjY3VtdWxhdG9yU2V0LCBmZWF0dXJlX3R5cGU+Ojp0eXBlOjpyZXN1bHRfdHlwZSB0eXBlOworICAgIH07CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzLCB0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBhcmd1bWVudF9wYWNrX3Jlc3VsdAorICAgICAgOiBhY2N1bXVsYXRvcl9zZXRfcmVzdWx0PAorICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX3JlZmVyZW5jZTwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBwYXJhbWV0ZXI6OmJpbmRpbmc8QXJncywgdGFnOjphY2N1bXVsYXRvcj46OnR5cGUKKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAsIEZlYXR1cmUKKyAgICAgICAgPgorICAgIHsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQSwgdHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgZXh0cmFjdG9yX3Jlc3VsdAorICAgICAgOiBtcGw6OmV2YWxfaWY8CisgICAgICAgICAgICBkZXRhaWw6OmlzX2FjY3VtdWxhdG9yX3NldDxBPgorICAgICAgICAgICwgYWNjdW11bGF0b3Jfc2V0X3Jlc3VsdDxBLCBGZWF0dXJlPgorICAgICAgICAgICwgYXJndW1lbnRfcGFja19yZXN1bHQ8QSwgRmVhdHVyZT4KKyAgICAgICAgPgorICAgIHsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZSwgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQ+CisgICAgdHlwZW5hbWUgZXh0cmFjdG9yX3Jlc3VsdDxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGUKKyAgICBkb19leHRyYWN0KEFjY3VtdWxhdG9yU2V0IGNvbnN0ICZhY2MsIG1wbDo6dHJ1ZV8pCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGFzX2ZlYXR1cmU8RmVhdHVyZT46OnR5cGUgZmVhdHVyZV90eXBlOworICAgICAgICByZXR1cm4gZXh0cmFjdF9yZXN1bHQ8ZmVhdHVyZV90eXBlPihhY2MpOworICAgIH0KKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmUsIHR5cGVuYW1lIEFyZ3M+CisgICAgdHlwZW5hbWUgZXh0cmFjdG9yX3Jlc3VsdDxBcmdzLCBGZWF0dXJlPjo6dHlwZQorICAgIGRvX2V4dHJhY3QoQXJncyBjb25zdCAmYXJncywgbXBsOjpmYWxzZV8pCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGFzX2ZlYXR1cmU8RmVhdHVyZT46OnR5cGUgZmVhdHVyZV90eXBlOworICAgICAgICByZXR1cm4gZmluZF9hY2N1bXVsYXRvcjxmZWF0dXJlX3R5cGU+KGFyZ3NbYWNjdW11bGF0b3JdKS5yZXN1bHQoYXJncyk7CisgICAgfQorCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBhc3NvY2lhdGVkIHdpdGggRmVhdHVyZSBmcm9tIHRoZSBzcGVjaWZpZWQgYWNjdW11bGF0b3Jfc2V0LgordGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KK3N0cnVjdCBleHRyYWN0b3IKK3sKKyAgICB0eXBlZGVmIGV4dHJhY3RvcjxGZWF0dXJlPiB0aGlzX3R5cGU7CisKKyAgICAvLy8gVGhlIHJlc3VsdCBtZXRhLWZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGV4dHJhY3RvcgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEY+CisgICAgc3RydWN0IHJlc3VsdDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEExPgorICAgIHN0cnVjdCByZXN1bHQ8dGhpc190eXBlKEExKT4KKyAgICAgIDogZGV0YWlsOjpleHRyYWN0b3JfcmVzdWx0PEExLCBGZWF0dXJlPgorICAgIHsKKyAgICB9OworCisgICAgLy8vIEV4dHJhY3QgdGhlIHJlc3VsdCBhc3NvY2lhdGVkIHdpdGggRmVhdHVyZSBmcm9tIHRoZSBhY2N1bXVsYXRvciBzZXQKKyAgICAvLy8gXHBhcmFtIGFjYyBUaGUgYWNjdW11bGF0b3Igc2V0IG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHJlc3VsdAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZzE+CisgICAgdHlwZW5hbWUgZGV0YWlsOjpleHRyYWN0b3JfcmVzdWx0PEFyZzEsIEZlYXR1cmU+Ojp0eXBlCisgICAgb3BlcmF0b3IgKCkoQXJnMSBjb25zdCAmYXJnMSkgY29uc3QKKyAgICB7CisgICAgICAgIC8vIEFyZzEgY291bGQgYmUgYW4gYWNjdW11bGF0b3Jfc2V0IG9yIGFuIGFyZ3VtZW50IHBhY2sgY29udGFpbmluZworICAgICAgICAvLyBhbiBhY2N1bXVsYXRvcl9zZXQuIERpc3BhdGNoIGFjY29yZGluZ2x5LgorICAgICAgICByZXR1cm4gZGV0YWlsOjpkb19leHRyYWN0PEZlYXR1cmU+KGFyZzEsIGRldGFpbDo6aXNfYWNjdW11bGF0b3Jfc2V0PEFyZzE+KCkpOworICAgIH0KKworICAgIC8vLyBcb3ZlcmxvYWQKKyAgICAvLy8KKyAgICAvLy8gXHBhcmFtIGExIE9wdGlvbmFsIG5hbWVkIHBhcmFtZXRlciB0byBiZSBwYXNzZWQgdG8gdGhlIGFjY3VtdWxhdG9yJ3MgcmVzdWx0KCkgZnVuY3Rpb24uCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQWNjdW11bGF0b3JTZXQsIHR5cGVuYW1lIEExPgorICAgIHR5cGVuYW1lIGRldGFpbDo6ZXh0cmFjdG9yX3Jlc3VsdDxBY2N1bXVsYXRvclNldCwgRmVhdHVyZT46OnR5cGUKKyAgICBvcGVyYXRvciAoKShBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjLCBBMSBjb25zdCAmYTEpIGNvbnN0CisgICAgeworICAgICAgICBCT09TVF9NUExfQVNTRVJUKChkZXRhaWw6OmlzX2FjY3VtdWxhdG9yX3NldDxBY2N1bXVsYXRvclNldD4pKTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBhc19mZWF0dXJlPEZlYXR1cmU+Ojp0eXBlIGZlYXR1cmVfdHlwZTsKKyAgICAgICAgcmV0dXJuIGV4dHJhY3RfcmVzdWx0PGZlYXR1cmVfdHlwZT4oYWNjLCBhMSk7CisgICAgfQorCisgICAgLy8gLi4uIG90aGVyIG92ZXJsb2FkcyBnZW5lcmF0ZWQgYnkgQm9vc3QuUHJlcHJvY2Vzc29yOgorCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0VYVFJBQ1RPUl9GVU5fT1AoeiwgbiwgXykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgdGVtcGxhdGU8Qk9PU1RfUFBfRU5VTV9QQVJBTVNfWih6LCBuLCB0eXBlbmFtZSBBKT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHN0cnVjdCByZXN1bHQ8dGhpc190eXBlKEJPT1NUX1BQX0VOVU1fUEFSQU1TX1ooeiwgbiwgQSkpPiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgIDogZGV0YWlsOjpleHRyYWN0b3JfcmVzdWx0PEExLCBGZWF0dXJlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAge307ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHRlbXBsYXRlPCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdHlwZW5hbWUgQWNjdW11bGF0b3JTZXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIEJPT1NUX1BQX0VOVU1fVFJBSUxJTkdfUEFSQU1TX1ooeiwgbiwgdHlwZW5hbWUgQSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0eXBlbmFtZSBkZXRhaWw6OmV4dHJhY3Rvcl9yZXN1bHQ8QWNjdW11bGF0b3JTZXQsIEZlYXR1cmU+Ojp0eXBlICAgICAgICAgICAgICAgICAgICBcCisgICAgb3BlcmF0b3IgKCkoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBBY2N1bXVsYXRvclNldCBjb25zdCAmYWNjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19CSU5BUllfUEFSQU1TX1ooeiwgbiwgQSwgY29uc3QgJmEpICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgKSBjb25zdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfTVBMX0FTU0VSVCgoZGV0YWlsOjppc19hY2N1bXVsYXRvcl9zZXQ8QWNjdW11bGF0b3JTZXQ+KSk7ICAgICAgICAgICAgICAgICBcCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXNfZmVhdHVyZTxGZWF0dXJlPjo6dHlwZSBmZWF0dXJlX3R5cGU7ICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICByZXR1cm4gZXh0cmFjdF9yZXN1bHQ8ZmVhdHVyZV90eXBlPihhY2MgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVNfWih6LCBuLCBhKSk7XAorICAgIH0KKworICAgIEJPT1NUX1BQX1JFUEVBVF9GUk9NX1RPKAorICAgICAgICAyCisgICAgICAsIEJPT1NUX1BQX0lOQyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0FSR1MpCisgICAgICAsIEJPT1NUX0FDQ1VNVUxBVE9SU19FWFRSQUNUT1JfRlVOX09QCisgICAgICAsIF8KKyAgICApCisKKyAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgIC8vLyBcb3ZlcmxvYWQKKyAgICAvLy8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBY2N1bXVsYXRvclNldCwgdHlwZW5hbWUgQTEsIHR5cGVuYW1lIEEyLCAuLi4+CisgICAgdHlwZW5hbWUgZGV0YWlsOjpleHRyYWN0b3JfcmVzdWx0PEFjY3VtdWxhdG9yU2V0LCBGZWF0dXJlPjo6dHlwZQorICAgIG9wZXJhdG9yICgpKEFjY3VtdWxhdG9yU2V0IGNvbnN0ICZhY2MsIEExIGNvbnN0ICZhMSwgQTIgY29uc3QgJmEyLCAuLi4pOworICAgICNlbmRpZgorfTsKKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfQVJSQVlfUkVNKEFycmF5KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBCT09TVF9QUF9UVVBMRV9SRU1fQ1RPUihCT09TVF9QUF9BUlJBWV9TSVpFKEFycmF5KSwgQk9PU1RfUFBfQVJSQVlfREFUQShBcnJheSkpCisKKy8vLyBJTlRFUk5BTCBPTkxZCisvLy8KKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NFUV9SRU0oU2VxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0FSUkFZX1JFTShCT09TVF9QUF9TRVFfVE9fQVJSQVkoU2VxKSkKKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfQVJHU19PUChzLCBkYXRhLCBlbGVtKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBUICMjIHMKKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfUEFSQU1TX09QKHMsIGRhdGEsIGVsZW0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBlbGVtIFQgIyMgcworCisvLy8gSU5URVJOQUwgT05MWQorLy8vCisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19NQUtFX0ZFQVRVUkUoVGFnLCBGZWF0dXJlLCBQYXJhbXNTZXEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIFRhZzo6RmVhdHVyZTwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfQUNDVU1VTEFUT1JTX1NFUV9SRU0oICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBCT09TVF9QUF9TRVFfVFJBTlNGT1JNKEJPT1NUX0FDQ1VNVUxBVE9SU19BUkdTX09QLCB+LCBQYXJhbXNTZXEpICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICA+CisKKy8vLyBJTlRFUk5BTCBPTkxZCisvLy8KKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1JfRlVOX0lNUEwoeiwgbiwgVGFnLCBGZWF0dXJlLCBQYXJhbXNTZXEpICAgICAgICAgICAgICAgICBcCisgICAgdGVtcGxhdGU8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfU0VRX1JFTSggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIEJPT1NUX1BQX1NFUV9UUkFOU0ZPUk0oQk9PU1RfQUNDVU1VTEFUT1JTX1BBUkFNU19PUCwgfiwgUGFyYW1zU2VxKSAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCB0eXBlbmFtZSBBcmcxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVNfWih6LCBuLCB0eXBlbmFtZSBBKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHR5cGVuYW1lIGJvb3N0OjphY2N1bXVsYXRvcnM6OmRldGFpbDo6ZXh0cmFjdG9yX3Jlc3VsdDwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQXJnMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsIEJPT1NUX0FDQ1VNVUxBVE9SU19NQUtFX0ZFQVRVUkUoVGFnLCBGZWF0dXJlLCBQYXJhbXNTZXEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgID46OnR5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBGZWF0dXJlKEFyZzEgY29uc3QgJmFyZzEgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19CSU5BUllfUEFSQU1TX1ooeiwgbiwgQSwgY29uc3QgJmEpICkgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0eXBlZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19NQUtFX0ZFQVRVUkUoVGFnLCBGZWF0dXJlLCBQYXJhbXNTZXEpIGZlYXR1cmVfdHlwZTsgICAgICAgICAgICAgIFwKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphY2N1bXVsYXRvcnM6OmV4dHJhY3RvcjxmZWF0dXJlX3R5cGU+KCkoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBhcmcxIEJPT1NUX1BQX0VOVU1fVFJBSUxJTkdfUEFSQU1TX1ooeiwgbiwgYSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIH0KKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfREVGSU5FX0VYVFJBQ1RPUl9GVU4oeiwgbiwgXykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfREVGSU5FX0VYVFJBQ1RPUl9GVU5fSU1QTCggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCBuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICwgQk9PU1RfUFBfQVJSQVlfRUxFTSgwLCBfKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsIEJPT1NUX1BQX0FSUkFZX0VMRU0oMSwgXykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCBCT09TVF9QUF9BUlJBWV9FTEVNKDIsIF8pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICApCisKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IoVGFnLCBGZWF0dXJlLCBQYXJhbVNlcSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgQk9PU1RfUFBfUkVQRUFUKCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBCT09TVF9QUF9JTkMoQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9BUkdTKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICwgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1JfRlVOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsICgzLCAoVGFnLCBGZWF0dXJlLCBQYXJhbVNlcSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICkKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9mZWF0dXJlcy5ocHAKQEAgLTAsMCArMSwyOSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZmVhdHVyZXMuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfU1RBVFNfSFBQX0VBTl8wOF8xMl8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1NUQVRTX0hQUF9FQU5fMDhfMTJfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC92ZWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBmZWF0dXJlcworLy8KK3RlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIHR5cGVuYW1lIEZlYXR1cmUpPgorc3RydWN0IGZlYXR1cmVzCisgIDogbXBsOjp2ZWN0b3I8Qk9PU1RfUFBfRU5VTV9QQVJBTVMoQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9GRUFUVVJFUywgRmVhdHVyZSk+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvYWNjdW11bGF0b3IuaHBwCkBAIC0wLDAgKzEsMjIgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGFjY3VtdWxhdG9yLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfUEFSQU1FVEVSU19BQ0NVTVVMQVRPUl9IUFBfRUFOXzMxXzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19QQVJBTUVURVJTX0FDQ1VNVUxBVE9SX0hQUF9FQU5fMzFfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIGFjY3VtdWxhdG9yKQorQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoYWNjdW11bGF0b3IpCisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwCkBAIC0wLDAgKzEsMjIgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHNhbXBsZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX1BBUkFNRVRFUlNfU0FNUExFX0hQUF9FQU5fMzFfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfRlJBTUVXT1JLX1BBUkFNRVRFUlNfU0FNUExFX0hQUF9FQU5fMzFfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIHNhbXBsZSkKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHNhbXBsZSkKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3dlaWdodC5ocHAKQEAgLTAsMCArMSwyMyBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2VpZ2h0LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfUEFSQU1FVEVSU19XRUlHSFRfSFBQX0VBTl8zMV8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfUEFSQU1FVEVSU19XRUlHSFRfSFBQX0VBTl8zMV8xMF8yMDA1CisKKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2FjY3VtdWxhdG9yc19md2QuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKKy8vIFRoZSB3ZWlnaHQgb2YgYSBzaW5nbGUgc2FtcGxlCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIHdlaWdodCkKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdlaWdodCkKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3dlaWdodHMuaHBwCkBAIC0wLDAgKzEsMjMgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodHMuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0ZSQU1FV09SS19QQVJBTUVURVJTX1dFSUdIVFNfSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19GUkFNRVdPUktfUEFSQU1FVEVSU19XRUlHSFRTX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCisvLyBUaGUgd2VpZ2h0IGFjY3VtdWxhdG9yCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIHdlaWdodHMpCitCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRzKQorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb24xLmhwcApAQCAtMCwwICsxLDc1IEBACisvLyBDb3B5cmlnaHQgRGF2aWQgQWJyYWhhbXMgMjAwNi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKy8vIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorI2lmbmRlZiBCT09TVF9ERVRBSUxfRlVOQ1RJT04xX0RXQTIwMDY1NV9IUFAKKyMgZGVmaW5lIEJPT1NUX0RFVEFJTF9GVU5DVElPTjFfRFdBMjAwNjU1X0hQUAorCisjIGluY2x1ZGUgPGJvb3N0L2NvbmNlcHRfY2hlY2suaHBwPgorIyBpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9yZW1vdmVfcmVmZXJlbmNlLmhwcD4KKyMgaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvYWRkX2NvbnN0LmhwcD4KKyMgaW5jbHVkZSA8Ym9vc3QvbXBsL2FwcGx5LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vIEEgdXRpbGl0eSBmb3IgY3JlYXRpbmcgdW5hcnkgZnVuY3Rpb24gb2JqZWN0cyB0aGF0IHBsYXkgbmljZWx5IHdpdGgKKy8vIGJvb3N0OjpyZXN1bHRfb2YgYW5kIHRoYXQgaGFuZGxlIHRoZSBmb3J3YXJkaW5nIHByb2JsZW0uCisvLworLy8gbXBsOjphcHBseTxGLCBBMD46OnR5cGUgaXMgZXhwZWN0ZWQgdG8gYmUgYSBzdGF0ZWxlc3MgZnVuY3Rpb24KKy8vIG9iamVjdCB0aGF0IGFjY2VwdHMgYW4gYXJndW1lbnQgb2YgdHlwZSBBMCYuICBJdCBpcyBhbHNvIGV4cGVjdGVkCisvLyB0byBoYXZlIGEgbmVzdGVkIDo6cmVzdWx0X3R5cGUgaWRlbnRpY2FsIHRvIGl0cyByZXR1cm4gdHlwZS4KK3RlbXBsYXRlPHR5cGVuYW1lIEY+CitzdHJ1Y3QgZnVuY3Rpb24xCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2lnbmF0dXJlPgorICAgIHN0cnVjdCByZXN1bHQKKyAgICB7fTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRoaXMsIHR5cGVuYW1lIEEwPgorICAgIHN0cnVjdCByZXN1bHQ8VGhpcyhBMCk+CisgICAgeworICAgICAgICAvLyBIb3cgYWRkaW5nIGNvbnN0IHRvIGFyZ3VtZW50cyBoYW5kbGVzIHJ2YWx1ZXMuCisgICAgICAgIC8vCisgICAgICAgIC8vIGlmIEEwIGlzICAgICBhcmcwIGlzICAgICAgIHJlcHJlc2VudHMgYWN0dWFsIGFyZ3VtZW50CisgICAgICAgIC8vIC0tLS0tLS0tICAgICAtLS0tLS0tICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCisgICAgICAgIC8vIFQgY29uc3QgJiAgICBUIGNvbnN0ICAgICAgIGNvbnN0IFQgbHZhbHVlCisgICAgICAgIC8vIFQgJiAgICAgICAgICBUICAgICAgICAgICAgIG5vbi1jb25zdCBUIGx2YWx1ZQorICAgICAgICAvLyBUIGNvbnN0ICAgICAgVCBjb25zdCAgICAgICBjb25zdCBUIHJ2YWx1ZQorICAgICAgICAvLyBUICAgICAgICAgICAgVCBjb25zdCAgICAgICBub24tY29uc3QgVCBydmFsdWUKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByZW1vdmVfcmVmZXJlbmNlPAorICAgICAgICAgICAgdHlwZW5hbWUgYWRkX2NvbnN0PCBBMCA+Ojp0eXBlCisgICAgICAgID46OnR5cGUgYXJnMDsKKworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG1wbDo6YXBwbHkxPEYsIGFyZzA+Ojp0eXBlIGltcGw7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgaW1wbDo6cmVzdWx0X3R5cGUgdHlwZTsKKyAgICB9OworCisgICAgLy8gSGFuZGxlcyBtdXRhYmxlIGx2YWx1ZXMKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBMD4KKyAgICB0eXBlbmFtZSByZXN1bHQ8ZnVuY3Rpb24xKEEwICYpPjo6dHlwZQorICAgIG9wZXJhdG9yICgpKEEwICZhMCkgY29uc3QKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmVzdWx0PGZ1bmN0aW9uMShBMCAmKT46OmltcGwgaW1wbDsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByZXN1bHQ8ZnVuY3Rpb24xKEEwICYpPjo6dHlwZSB0eXBlOworICAgICAgICB0eXBlZGVmIEEwICZhcmcwOworICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoVW5hcnlGdW5jdGlvbjxpbXBsLCB0eXBlLCBhcmcwPikpOworICAgICAgICAvL2Jvb3N0OjpmdW5jdGlvbl9yZXF1aXJlczxVbmFyeUZ1bmN0aW9uQ29uY2VwdDxpbXBsLCB0eXBlLCBhcmcwPiA+KCk7CisgICAgICAgIHJldHVybiBpbXBsKCkoYTApOworICAgIH0KKworICAgIC8vIEhhbmRsZXMgY29uc3QgbHZhbHVlcyBhbmQgYWxsIHJ2YWx1ZXMKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBMD4KKyAgICB0eXBlbmFtZSByZXN1bHQ8ZnVuY3Rpb24xKEEwIGNvbnN0ICYpPjo6dHlwZQorICAgIG9wZXJhdG9yICgpKEEwIGNvbnN0ICZhMCkgY29uc3QKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmVzdWx0PGZ1bmN0aW9uMShBMCBjb25zdCAmKT46OmltcGwgaW1wbDsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByZXN1bHQ8ZnVuY3Rpb24xKEEwIGNvbnN0ICYpPjo6dHlwZSB0eXBlOworICAgICAgICB0eXBlZGVmIEEwIGNvbnN0ICZhcmcwOworICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoVW5hcnlGdW5jdGlvbjxpbXBsLCB0eXBlLCBhcmcwPikpOworICAgICAgICAvL2Jvb3N0OjpmdW5jdGlvbl9yZXF1aXJlczxVbmFyeUZ1bmN0aW9uQ29uY2VwdDxpbXBsLCB0eXBlLCBhcmcwPiA+KCk7CisgICAgICAgIHJldHVybiBpbXBsKCkoYTApOworICAgIH0KK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6ZGV0YWlsCisKKyNlbmRpZiAvLyBCT09TVF9ERVRBSUxfRlVOQ1RJT04xX0RXQTIwMDY1NV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb24yLmhwcApAQCAtMCwwICsxLDEwIEBACisvLyBDb3B5cmlnaHQgRGF2aWQgQWJyYWhhbXMgMjAwNi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKy8vIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorI2lmbmRlZiBCT09TVF9ERVRBSUxfRlVOQ1RJT04yX0RXQTIwMDY1NV9IUFAKKyMgZGVmaW5lIEJPT1NUX0RFVEFJTF9GVU5DVElPTjJfRFdBMjAwNjU1X0hQUAorCisjIGRlZmluZSBhcmdzICgyKQorIyBpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb25fbi5ocHA+CisKKyNlbmRpZiAvLyBCT09TVF9ERVRBSUxfRlVOQ1RJT04yX0RXQTIwMDY1NV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb24zLmhwcApAQCAtMCwwICsxLDEwIEBACisvLyBDb3B5cmlnaHQgRGF2aWQgQWJyYWhhbXMgMjAwNi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKy8vIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorI2lmbmRlZiBCT09TVF9ERVRBSUxfRlVOQ1RJT04zX0RXQTIwMDY1MTRfSFBQCisjIGRlZmluZSBCT09TVF9ERVRBSUxfRlVOQ1RJT04zX0RXQTIwMDY1MTRfSFBQCisKKyMgZGVmaW5lIGFyZ3MgKDMpCisjIGluY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2RldGFpbC9mdW5jdGlvbl9uLmhwcD4KKworI2VuZGlmIC8vIEJPT1NUX0RFVEFJTF9GVU5DVElPTjNfRFdBMjAwNjUxNF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb240LmhwcApAQCAtMCwwICsxLDEwIEBACisvLyBDb3B5cmlnaHQgRGF2aWQgQWJyYWhhbXMgMjAwNi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKy8vIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorI2lmbmRlZiBCT09TVF9ERVRBSUxfRlVOQ1RJT040X0RXQTIwMDY1MTRfSFBQCisjIGRlZmluZSBCT09TVF9ERVRBSUxfRlVOQ1RJT040X0RXQTIwMDY1MTRfSFBQCisKKyMgZGVmaW5lIGFyZ3MgKDQpCisjIGluY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2RldGFpbC9mdW5jdGlvbl9uLmhwcD4KKworI2VuZGlmIC8vIEJPT1NUX0RFVEFJTF9GVU5DVElPTjRfRFdBMjAwNjUxNF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvZnVuY3Rpb25fbi5ocHAKQEAgLTAsMCArMSwxNDggQEAKKy8vIENvcHlyaWdodCBEYXZpZCBBYnJhaGFtcyAyMDA2LiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworLy8gZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisvLworLy8gI2luY2x1ZGUgZ3VhcmRzIGludGVudGlvbmFsbHkgZGlzYWJsZWQuCisvLyAjaWZuZGVmIEJPT1NUX0RFVEFJTF9GVU5DVElPTl9OX0RXQTIwMDY1MTRfSFBQCisvLyAjIGRlZmluZSBCT09TVF9ERVRBSUxfRlVOQ1RJT05fTl9EV0EyMDA2NTE0X0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL3ZvaWQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hcHBseS5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvY29udHJvbC9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL2NhdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3B1bmN0dWF0aW9uL2NvbW1hX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvcmVwZXRpdGlvbi9lbnVtX3BhcmFtcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV90cmFpbGluZ19wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL3JlcGVhdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3NlcS9mb2xkX2xlZnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9zZXEvc2VxLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3Ivc2VxL2Zvcl9lYWNoLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3Ivc2VxL2Zvcl9lYWNoX2kuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9zZXEvZm9yX2VhY2hfcHJvZHVjdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3NlcS9zaXplLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9hZGRfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9yZWZlcmVuY2UuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgZGV0YWlsIHsKKworIyBkZWZpbmUgQk9PU1RfREVUQUlMX2RlZmF1bHRfYXJnKHosIG4sIF8pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgdHlwZWRlZiBtcGw6OnZvaWRfIEJPT1NUX1BQX0NBVChhcmcsIG4pOworCisjIGRlZmluZSBCT09TVF9ERVRBSUxfZnVuY3Rpb25fYXJnKHosIG4sIF8pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0eXBlZGVmIHR5cGVuYW1lIHJlbW92ZV9yZWZlcmVuY2U8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0eXBlbmFtZSBhZGRfY29uc3Q8IEJPT1NUX1BQX0NBVChBLCBuKSA+Ojp0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgPjo6dHlwZSBCT09TVF9QUF9DQVQoYXJnLCBuKTsKKworI2RlZmluZSBCT09TVF9ERVRBSUxfY2F0X2FyZ19jb3VudHMocywgc3RhdGUsIG4pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgQk9PU1RfUFBfSUYoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCBCT09TVF9QUF9DQVQoc3RhdGUsIEJPT1NUX1BQX0NBVChfLCBuKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsIHN0YXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIC8qKi8KKworI2RlZmluZSBmdW5jdGlvbl9uYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgQk9PU1RfUFBfU0VRX0ZPTERfTEVGVCggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgQk9PU1RfREVUQUlMX2NhdF9hcmdfY291bnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCBCT09TVF9QUF9DQVQoZnVuY3Rpb24sIEJPT1NUX1BQX1NFUV9IRUFEKGFyZ3MpKSAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAsIEJPT1NUX1BQX1NFUV9UQUlMKGFyZ3MpKDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIC8qKi8KKwordGVtcGxhdGU8dHlwZW5hbWUgRj4KK3N0cnVjdCBmdW5jdGlvbl9uYW1lCit7CisgICAgQk9PU1RfUFBfUkVQRUFUKAorICAgICAgICBCT09TVF9NUExfTElNSVRfTUVUQUZVTkNUSU9OX0FSSVRZCisgICAgICAsIEJPT1NUX0RFVEFJTF9kZWZhdWx0X2FyZworICAgICAgLCB+CisgICAgKQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2lnbmF0dXJlPgorICAgIHN0cnVjdCByZXN1bHQge307CisKKyNkZWZpbmUgQk9PU1RfREVUQUlMX2Z1bmN0aW9uX3Jlc3VsdChyLCBfLCBuKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRoaXMgQk9PU1RfUFBfRU5VTV9UUkFJTElOR19QQVJBTVMobiwgdHlwZW5hbWUgQSk+ICAgICAgICBcCisgICAgc3RydWN0IHJlc3VsdDxUaGlzKEJPT1NUX1BQX0VOVU1fUEFSQU1TKG4sIEEpKT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBCT09TVF9QUF9SRVBFQVQobiwgQk9PU1RfREVUQUlMX2Z1bmN0aW9uX2FyZywgfikgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHR5cGVkZWYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHR5cGVuYW1lIEJPT1NUX1BQX0NBVChtcGw6OmFwcGx5LCBCT09TVF9NUExfTElNSVRfTUVUQUZVTkNUSU9OX0FSSVRZKTxcCisgICAgICAgICAgICAgICAgRiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICBCT09TVF9QUF9FTlVNX1RSQUlMSU5HX1BBUkFNUyggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgICAgICBCT09TVF9NUExfTElNSVRfTUVUQUZVTkNUSU9OX0FSSVRZICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgICAsIGFyZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgPjo6dHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIGltcGw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBpbXBsOjpyZXN1bHRfdHlwZSB0eXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgLyoqLworCisgICAgQk9PU1RfUFBfU0VRX0ZPUl9FQUNIKEJPT1NUX0RFVEFJTF9mdW5jdGlvbl9yZXN1bHQsIF8sIGFyZ3MpCisKKyMgZGVmaW5lIGFyZ190eXBlKHIsIF8sIGksIGlzX2NvbnN0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIEJPT1NUX1BQX0NPTU1BX0lGKGkpIEJPT1NUX1BQX0NBVChBLCBpKSBCT09TVF9QUF9DQVQoY29uc3RfaWYsIGlzX2NvbnN0KSAmCisKKyMgZGVmaW5lIHJlc3VsdF8ociwgbiwgY29uc3RuZXNzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHR5cGVuYW1lIHJlc3VsdDwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIGZ1bmN0aW9uX25hbWUoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIEJPT1NUX1BQX1NFUV9GT1JfRUFDSF9JX1IociwgYXJnX3R5cGUsIH4sIGNvbnN0bmVzcykgICAgICAgICAgICAgICAgXAorICAgICAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAvKiovCisKKyMgZGVmaW5lIHBhcmFtKHIsIF8sIGksIGlzX2NvbnN0KSBCT09TVF9QUF9DT01NQV9JRihpKSAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIEJPT1NUX1BQX0NBVChBLCBpKSBCT09TVF9QUF9DQVQoY29uc3RfaWYsIGlzX2NvbnN0KSAmIEJPT1NUX1BQX0NBVCh4LCBpKQorCisjIGRlZmluZSBwYXJhbV9saXN0KHIsIG4sIGNvbnN0bmVzcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBCT09TVF9QUF9TRVFfRk9SX0VBQ0hfSV9SKHIsIHBhcmFtLCB+LCBjb25zdG5lc3MpCisKKyMgZGVmaW5lIGNhbGxfb3BlcmF0b3IociwgY29uc3RuZXNzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHRlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TKEJPT1NUX1BQX1NFUV9TSVpFKGNvbnN0bmVzcyksIHR5cGVuYW1lIEEpPiAgICBcCisgICAgICAgIHJlc3VsdF8ociwgQk9PU1RfUFBfU0VRX1NJWkUoY29uc3RuZXNzKSwgY29uc3RuZXNzKTo6dHlwZSAgICAgICAgICAgICAgIFwKKyAgICBvcGVyYXRvciAoKSggcGFyYW1fbGlzdChyLCBCT09TVF9QUF9TRVFfU0laRShjb25zdG5lc3MpLCBjb25zdG5lc3MpICkgY29uc3QgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHR5cGVkZWYgcmVzdWx0XyhyLCBCT09TVF9QUF9TRVFfU0laRShjb25zdG5lc3MpLCBjb25zdG5lc3MpOjppbXBsIGltcGw7IFwKKyAgICAgICAgcmV0dXJuIGltcGwoKShCT09TVF9QUF9FTlVNX1BBUkFNUyhCT09TVF9QUF9TRVFfU0laRShjb25zdG5lc3MpLCB4KSk7ICAgXAorICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgLyoqLworCisjIGRlZmluZSBjb25zdF9pZjAKKyMgZGVmaW5lIGNvbnN0X2lmMSBjb25zdAorCisjIGRlZmluZSBiaXRzKHosIG4sIF8pICgoMCkoMSkpCisKKyMgZGVmaW5lIGdlbl9vcGVyYXRvcihyLCBfLCBuKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIEJPT1NUX1BQX1NFUV9GT1JfRUFDSF9QUk9EVUNUX1IoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICwgY2FsbF9vcGVyYXRvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgLCBCT09TVF9QUF9SRVBFQVQobiwgYml0cywgfikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAvKiovCisKKyAgICBCT09TVF9QUF9TRVFfRk9SX0VBQ0goCisgICAgICAgIGdlbl9vcGVyYXRvcgorICAgICAgLCB+CisgICAgICAsIGFyZ3MKKyAgICApCisKKyMgdW5kZWYgYml0cworIyB1bmRlZiBjb25zdF9pZjEKKyMgdW5kZWYgY29uc3RfaWYwCisjIHVuZGVmIGNhbGxfb3BlcmF0b3IKKyMgdW5kZWYgcGFyYW1fbGlzdAorIyB1bmRlZiBwYXJhbQorIyB1bmRlZiByZXN1bHRfCisjIHVuZGVmIGRlZmF1bHRfCisjIHVuZGVmIGFyZ190eXBlCisjIHVuZGVmIGdlbl9vcGVyYXRvcgorIyB1bmRlZiBmdW5jdGlvbl9uYW1lCisKKyMgdW5kZWYgYXJncworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpkZXRhaWwKKworLy8jZW5kaWYgLy8gQk9PU1RfREVUQUlMX0ZVTkNUSU9OX05fRFdBMjAwNjUxNF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9kZXRhaWwvcG9kX3NpbmdsZXRvbi5ocHAKQEAgLTAsMCArMSwyMCBAQAorLy8gQ29weXJpZ2h0IERhdmlkIEFicmFoYW1zIDIwMDYuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisvLyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKyNpZm5kZWYgQk9PU1RfREVUQUlMX1BPRF9TSU5HTEVUT05fRFdBMjAwNjU1X0hQUAorIyBkZWZpbmUgQk9PU1RfREVUQUlMX1BPRF9TSU5HTEVUT05fRFdBMjAwNjU1X0hQUAorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8dHlwZW5hbWUgVD4KK3N0cnVjdCBwb2Rfc2luZ2xldG9uCit7CisgICAgc3RhdGljIFQgaW5zdGFuY2U7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorVCBwb2Rfc2luZ2xldG9uPFQ+OjppbnN0YW5jZTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpkZXRhaWwKKworI2VuZGlmIC8vIEJPT1NUX0RFVEFJTF9QT0RfU0lOR0xFVE9OX0RXQTIwMDY1NV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcApAQCAtMCwwICsxLDUyMSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8vIFxmaWxlIGZ1bmN0aW9uYWwuaHBwCisvLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9IUFBfRUFOXzA4XzEyXzIwMDUKKyNkZWZpbmUgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0hQUF9FQU5fMDhfMTJfMjAwNQorCisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3Qvc3RhdGljX2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvYW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9yZW1vdmVfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2FkZF9yZWZlcmVuY2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2VtcHR5LmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19pbnRlZ3JhbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZmxvYXRpbmdfcG9pbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlb2YvdHlwZW9mLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvYWNjdW11bGF0b3JzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbF9md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2RldGFpbC9mdW5jdGlvbjEuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2RldGFpbC9mdW5jdGlvbjIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2RldGFpbC9wb2Rfc2luZ2xldG9uLmhwcD4KKworI2lmZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9TVERfVkVDVE9SX1NVUFBPUlQKKyMgaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC92ZWN0b3IuaHBwPgorI2VuZGlmCisKKyNpZmRlZiBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfU1REX1ZBTEFSUkFZX1NVUFBPUlQKKyMgaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC92YWxhcnJheS5ocHA+CisjZW5kaWYKKworI2lmZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9TVERfQ09NUExFWF9TVVBQT1JUCisjIGluY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwvY29tcGxleC5ocHA+CisjZW5kaWYKKworLy8vIElOVEVSTkFMIE9OTFkKKy8vLworI2RlZmluZSBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfSFBQX0lOQ0xVREVECisKKyNpZmRlZiBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfRE9YWUdFTl9JTlZPS0VECisvLyBIYWNrIHRvIG1ha2UgRG94eWdlbiBzaG93IHRoZSBpbmhlcml0YW5jZSByZWxhdGlvbnNoaXBzCisvLy8gSU5URVJOQUwgT05MWQorLy8vCituYW1lc3BhY2Ugc3RkCit7CisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmcsIGNsYXNzIFJldD4gc3RydWN0IHVuYXJ5X2Z1bmN0aW9uIHt9OworICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisgICAgdGVtcGxhdGU8Y2xhc3MgTGVmdCwgY2xhc3MgUmlnaHQsIGNsYXNzIFJldD4gc3RydWN0IGJpbmFyeV9mdW5jdGlvbiB7fTsKK30KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgbnVtZXJpYworeworICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQTAsIHR5cGVuYW1lIEExPgorICAgICAgICBzdHJ1Y3QgYXJlX2ludGVncmFsCisgICAgICAgICAgOiBtcGw6OmFuZF88aXNfaW50ZWdyYWw8QTA+LCBpc19pbnRlZ3JhbDxBMT4gPgorICAgICAgICB7fTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodD4KKyAgICAgICAgc3RydWN0IGxlZnRfcmVmCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgTGVmdCAmdHlwZTsKKyAgICAgICAgfTsKKworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsCisgICAgICAgIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgICAgICBUICZsdmFsdWVfb2YoKTsKKyAgICAgICAgfQorICAgIH0KKworICAgIC8vIFRPRE86IGhhbmRsZSBjb21wbGV4IHdlaWdodCwgdmFsYXJyYXksIE1UTCB2ZWN0b3JzCisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworI2RlZmluZSBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1VOQVJZX09QKE5hbWUsIE9wKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBzdHJ1Y3QgcmVzdWx0X29mXyAjIyBOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgQk9PU1RfVFlQRU9GX05FU1RFRF9UWVBFREVGX1RQTCggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIG5lc3RlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIE9wIGJvb3N0OjpudW1lcmljOjpmdW5jdGlvbmFsOjpkZXRhaWw6Omx2YWx1ZV9vZjxBcmc+KCkgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBuZXN0ZWQ6OnR5cGUgdHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIEVuYWJsZUlmPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBzdHJ1Y3QgTmFtZSAjIyBfYmFzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIHR5cGVuYW1lIHJlc3VsdF9vZl8gIyMgTmFtZTxBcmc+Ojp0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgdHlwZW5hbWUgcmVzdWx0X29mXyAjIyBOYW1lPEFyZz46OnR5cGUgb3BlcmF0b3IgKCkoQXJnICZhcmcpIGNvbnN0ICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIHJldHVybiBPcCBhcmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIEFyZ1RhZz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBzdHJ1Y3QgTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgIDogTmFtZSAjIyBfYmFzZTxBcmcsIHZvaWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB7fTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIG5hbWVzcGFjZSBvcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBzdHJ1Y3QgTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgIDogYm9vc3Q6OmRldGFpbDo6ZnVuY3Rpb24xPGZ1bmN0aW9uYWw6Ok5hbWU8XywgZnVuY3Rpb25hbDo6dGFnPF8+ID4gPiAgICAgICAgICAgICAgICAgXAorICAgICAgICB7fTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIG5hbWVzcGFjZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBvcDo6TmFtZSBjb25zdCAmTmFtZSA9IGJvb3N0OjpkZXRhaWw6OnBvZF9zaW5nbGV0b248b3A6Ok5hbWU+OjppbnN0YW5jZTsgICAgICAgICAgICAgICAgXAorICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIC8qKi8KKworICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisjZGVmaW5lIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKE5hbWUsIE9wLCBSZXRUeXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIGZ1bmN0aW9uYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCByZXN1bHRfb2ZfICMjIE5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBSZXRUeXBlKExlZnQsIE9wLCBSaWdodCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lICMjIF9iYXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgOiBzdGQ6OmJpbmFyeV9mdW5jdGlvbjwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PExlZnQ+Ojp0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICwgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFJpZ2h0Pjo6dHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICwgdHlwZW5hbWUgcmVzdWx0X29mXyAjIyBOYW1lPExlZnQsIFJpZ2h0Pjo6dHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICA+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB0eXBlbmFtZSByZXN1bHRfb2ZfICMjIE5hbWU8TGVmdCwgUmlnaHQ+Ojp0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICBvcGVyYXRvciAoKShMZWZ0ICZsZWZ0LCBSaWdodCAmcmlnaHQpIGNvbnN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgT3AgcmlnaHQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBMZWZ0VGFnLCB0eXBlbmFtZSBSaWdodFRhZz4gICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgOiBOYW1lICMjIF9iYXNlPExlZnQsIFJpZ2h0LCB2b2lkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIG9wICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgZnVuY3Rpb25hbDo6TmFtZTxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiAgICAgICAgICAgICBcCisgICAgICAgICAgICA+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIG9wOjpOYW1lIGNvbnN0ICZOYW1lID0gYm9vc3Q6OmRldGFpbDo6cG9kX3NpbmdsZXRvbjxvcDo6TmFtZT46Omluc3RhbmNlOyAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoTmFtZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgLyoqLworCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyNkZWZpbmUgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQoTGVmdCwgT3AsIFJpZ2h0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBCT09TVF9UWVBFT0ZfTkVTVEVEX1RZUEVERUZfVFBMKCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgbmVzdGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICwgYm9vc3Q6Om51bWVyaWM6OmZ1bmN0aW9uYWw6OmRldGFpbDo6bHZhbHVlX29mPExlZnQ+KCkgT3AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgYm9vc3Q6Om51bWVyaWM6OmZ1bmN0aW9uYWw6OmRldGFpbDo6bHZhbHVlX29mPFJpZ2h0PigpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB0eXBlZGVmIHR5cGVuYW1lIG5lc3RlZDo6dHlwZSB0eXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAvKiovCisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworI2RlZmluZSBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfTEVGVChMZWZ0LCBPcCwgUmlnaHQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHR5cGVkZWYgTGVmdCAmdHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIC8qKi8KKworICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKHBsdXMsICssIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERURVQ0VEKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKG1pbnVzLCAtLCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVEVUNFRCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChtdWx0aXBsaWVzLCAqLCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVEVUNFRCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChkaXZpZGVzLCAvLCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVEVUNFRCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChtb2R1bHVzLCAlLCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVEVUNFRCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChncmVhdGVyLCA+LCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVEVUNFRCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChncmVhdGVyX2VxdWFsLCA+PSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1AobGVzcywgPCwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1AobGVzc19lcXVhbCwgPD0sIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERURVQ0VEKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKGVxdWFsX3RvLCA9PSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1Aobm90X2VxdWFsX3RvLCAhPSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQpCisKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChhc3NpZ24sID0sIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9MRUZUKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKHBsdXNfYXNzaWduLCArPSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0xFRlQpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1AobWludXNfYXNzaWduLCAtPSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0xFRlQpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1AobXVsdGlwbGllc19hc3NpZ24sICo9LCBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfTEVGVCkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX0JJTkFSWV9PUChkaXZpZGVzX2Fzc2lnbiwgLz0sIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9MRUZUKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfQklOQVJZX09QKG1vZHVsdXNfYXNzaWduLCAlPSwgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0xFRlQpCisKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1VOQVJZX09QKHVuYXJ5X3BsdXMsICspCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9VTkFSWV9PUCh1bmFyeV9taW51cywgLSkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1VOQVJZX09QKGNvbXBsZW1lbnQsIH4pCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9VTkFSWV9PUChsb2dpY2FsX25vdCwgISkKKworI3VuZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9MRUZUCisjdW5kZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRFVDRUQKKyN1bmRlZiBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1VOQVJZX09QCisjdW5kZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9CSU5BUllfT1AKKworICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodCwgdHlwZW5hbWUgRW5hYmxlSWY+CisgICAgICAgIHN0cnVjdCBtaW5fYXNzaWduX2Jhc2UKKyAgICAgICAgICA6IHN0ZDo6YmluYXJ5X2Z1bmN0aW9uPExlZnQsIFJpZ2h0LCB2b2lkPgorICAgICAgICB7CisgICAgICAgICAgICB2b2lkIG9wZXJhdG9yICgpKExlZnQgJmxlZnQsIFJpZ2h0ICZyaWdodCkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZihudW1lcmljOjpsZXNzKHJpZ2h0LCBsZWZ0KSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGxlZnQgPSByaWdodDsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIEVuYWJsZUlmPgorICAgICAgICBzdHJ1Y3QgbWF4X2Fzc2lnbl9iYXNlCisgICAgICAgICAgOiBzdGQ6OmJpbmFyeV9mdW5jdGlvbjxMZWZ0LCBSaWdodCwgdm9pZD4KKyAgICAgICAgeworICAgICAgICAgICAgdm9pZCBvcGVyYXRvciAoKShMZWZ0ICZsZWZ0LCBSaWdodCAmcmlnaHQpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYobnVtZXJpYzo6Z3JlYXRlcihyaWdodCwgbGVmdCkpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gcmlnaHQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZj4KKyAgICAgICAgc3RydWN0IGZkaXZfYmFzZQorICAgICAgICAgIDogZnVuY3Rpb25hbDo6ZGl2aWRlczxMZWZ0LCBSaWdodD4KKyAgICAgICAge307CisKKyAgICAgICAgLy8gcGFydGlhbCBzcGVjaWFsaXphdGlvbiB0aGF0IHByb21vdGVzIHRoZSBhcmd1bWVudHMgdG8gZG91YmxlIGZvcgorICAgICAgICAvLyBpbnRlZ3JhbCBkaXZpc2lvbi4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHN0cnVjdCBmZGl2X2Jhc2U8TGVmdCwgUmlnaHQsIHR5cGVuYW1lIGVuYWJsZV9pZjxhcmVfaW50ZWdyYWw8TGVmdCwgUmlnaHQ+ID46OnR5cGU+CisgICAgICAgICAgOiBmdW5jdGlvbmFsOjpkaXZpZGVzPGRvdWJsZSBjb25zdCwgZG91YmxlIGNvbnN0PgorICAgICAgICB7fTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUbywgdHlwZW5hbWUgRnJvbSwgdHlwZW5hbWUgRW5hYmxlSWY+CisgICAgICAgIHN0cnVjdCBwcm9tb3RlX2Jhc2UKKyAgICAgICAgICA6IHN0ZDo6dW5hcnlfZnVuY3Rpb248RnJvbSwgVG8+CisgICAgICAgIHsKKyAgICAgICAgICAgIFRvIG9wZXJhdG9yICgpKEZyb20gJmZyb20pIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIGZyb207CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG9Gcm9tPgorICAgICAgICBzdHJ1Y3QgcHJvbW90ZV9iYXNlPFRvRnJvbSwgVG9Gcm9tLCB2b2lkPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxUb0Zyb20sIFRvRnJvbT4KKyAgICAgICAgeworICAgICAgICAgICAgVG9Gcm9tICZvcGVyYXRvciAoKShUb0Zyb20gJnRvZnJvbSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gdG9mcm9tOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWY+CisgICAgICAgIHN0cnVjdCBhc19taW5fYmFzZQorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxBcmcsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlPgorICAgICAgICB7CisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQVNTRVJUKHN0ZDo6bnVtZXJpY19saW1pdHM8dHlwZW5hbWUgcmVtb3ZlX2NvbnN0PEFyZz46OnR5cGU+Ojppc19zcGVjaWFsaXplZCk7CisKKyAgICAgICAgICAgIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlIG9wZXJhdG9yICgpKEFyZyAmKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJldHVybiAoc3RkOjpudW1lcmljX2xpbWl0czx0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZT46Om1pbikoKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmc+CisgICAgICAgIHN0cnVjdCBhc19taW5fYmFzZTxBcmcsIHR5cGVuYW1lIGVuYWJsZV9pZjxpc19mbG9hdGluZ19wb2ludDxBcmc+ID46OnR5cGU+CisgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPEFyZywgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PEFyZz46OnR5cGU+CisgICAgICAgIHsKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc3RkOjpudW1lcmljX2xpbWl0czx0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZT46OmlzX3NwZWNpYWxpemVkKTsKKworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PEFyZz46OnR5cGUgb3BlcmF0b3IgKCkoQXJnICYpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIC0oc3RkOjpudW1lcmljX2xpbWl0czx0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZT46Om1heCkoKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIEVuYWJsZUlmPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4X2Jhc2UKKyAgICAgICAgICA6IHN0ZDo6dW5hcnlfZnVuY3Rpb248QXJnLCB0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgQk9PU1RfU1RBVElDX0FTU0VSVChzdGQ6Om51bWVyaWNfbGltaXRzPHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlPjo6aXNfc3BlY2lhbGl6ZWQpOworCisgICAgICAgICAgICB0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZSBvcGVyYXRvciAoKShBcmcgJikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gKHN0ZDo6bnVtZXJpY19saW1pdHM8dHlwZW5hbWUgcmVtb3ZlX2NvbnN0PEFyZz46OnR5cGU+OjptYXgpKCk7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJnLCB0eXBlbmFtZSBFbmFibGVJZj4KKyAgICAgICAgc3RydWN0IGFzX3plcm9fYmFzZQorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxBcmcsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZSBvcGVyYXRvciAoKShBcmcgJikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpYzo6emVybzx0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZT46OnZhbHVlOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWY+CisgICAgICAgIHN0cnVjdCBhc19vbmVfYmFzZQorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxBcmcsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlbmFtZSByZW1vdmVfY29uc3Q8QXJnPjo6dHlwZSBvcGVyYXRvciAoKShBcmcgJikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpYzo6b25lPHR5cGVuYW1lIHJlbW92ZV9jb25zdDxBcmc+Ojp0eXBlPjo6dmFsdWU7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG8sIHR5cGVuYW1lIEZyb20sIHR5cGVuYW1lIFRvVGFnLCB0eXBlbmFtZSBGcm9tVGFnPgorICAgICAgICBzdHJ1Y3QgcHJvbW90ZQorICAgICAgICAgIDogcHJvbW90ZV9iYXNlPFRvLCBGcm9tLCB2b2lkPgorICAgICAgICB7fTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodCwgdHlwZW5hbWUgTGVmdFRhZywgdHlwZW5hbWUgUmlnaHRUYWc+CisgICAgICAgIHN0cnVjdCBtaW5fYXNzaWduCisgICAgICAgICAgOiBtaW5fYXNzaWduX2Jhc2U8TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBMZWZ0VGFnLCB0eXBlbmFtZSBSaWdodFRhZz4KKyAgICAgICAgc3RydWN0IG1heF9hc3NpZ24KKyAgICAgICAgICA6IG1heF9hc3NpZ25fYmFzZTxMZWZ0LCBSaWdodCwgdm9pZD4KKyAgICAgICAge307CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIExlZnRUYWcsIHR5cGVuYW1lIFJpZ2h0VGFnPgorICAgICAgICBzdHJ1Y3QgZmRpdgorICAgICAgICAgIDogZmRpdl9iYXNlPExlZnQsIFJpZ2h0LCB2b2lkPgorICAgICAgICB7fTsKKworICAgICAgICAvLy8gSU5URVJOQUwgT05MWSAKKyAgICAgICAgLy8vIEZvciBiYWNrLWNvbXBhdCBvbmx5LiBVc2UgZmRpdi4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIExlZnRUYWcsIHR5cGVuYW1lIFJpZ2h0VGFnPgorICAgICAgICBzdHJ1Y3QgYXZlcmFnZQorICAgICAgICAgIDogZmRpdjxMZWZ0LCBSaWdodCwgTGVmdFRhZywgUmlnaHRUYWc+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgVGFnPgorICAgICAgICBzdHJ1Y3QgYXNfbWluCisgICAgICAgICAgOiBhc19taW5fYmFzZTxBcmcsIHZvaWQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgVGFnPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4CisgICAgICAgICAgOiBhc19tYXhfYmFzZTxBcmcsIHZvaWQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgVGFnPgorICAgICAgICBzdHJ1Y3QgYXNfemVybworICAgICAgICAgIDogYXNfemVyb19iYXNlPEFyZywgdm9pZD4KKyAgICAgICAge307CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJnLCB0eXBlbmFtZSBUYWc+CisgICAgICAgIHN0cnVjdCBhc19vbmUKKyAgICAgICAgICA6IGFzX29uZV9iYXNlPEFyZywgdm9pZD4KKyAgICAgICAge307CisgICAgfQorCisgICAgbmFtZXNwYWNlIG9wCisgICAgeworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUbz4KKyAgICAgICAgc3RydWN0IHByb21vdGUKKyAgICAgICAgICA6IGJvb3N0OjpkZXRhaWw6OmZ1bmN0aW9uMTxmdW5jdGlvbmFsOjpwcm9tb3RlPFRvLCBfLCB0eXBlbmFtZSBmdW5jdGlvbmFsOjp0YWc8VG8+Ojp0eXBlLCBmdW5jdGlvbmFsOjp0YWc8Xz4gPiA+CisgICAgICAgIHt9OworCisgICAgICAgIHN0cnVjdCBtaW5fYXNzaWduCisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ZnVuY3Rpb25hbDo6bWluX2Fzc2lnbjxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiA+CisgICAgICAgIHt9OworCisgICAgICAgIHN0cnVjdCBtYXhfYXNzaWduCisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ZnVuY3Rpb25hbDo6bWF4X2Fzc2lnbjxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiA+CisgICAgICAgIHt9OworCisgICAgICAgIHN0cnVjdCBmZGl2CisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ZnVuY3Rpb25hbDo6ZmRpdjxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiA+CisgICAgICAgIHt9OworCisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIHN0cnVjdCBhdmVyYWdlCisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ZnVuY3Rpb25hbDo6ZmRpdjxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiA+CisgICAgICAgIHt9OworCisgICAgICAgIHN0cnVjdCBhc19taW4KKyAgICAgICAgICA6IGJvb3N0OjpkZXRhaWw6OmZ1bmN0aW9uMTxmdW5jdGlvbmFsOjphc19taW48XywgZnVuY3Rpb25hbDo6dGFnPF8+ID4gPgorICAgICAgICB7fTsKKworICAgICAgICBzdHJ1Y3QgYXNfbWF4CisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjE8ZnVuY3Rpb25hbDo6YXNfbWF4PF8sIGZ1bmN0aW9uYWw6OnRhZzxfPiA+ID4KKyAgICAgICAge307CisKKyAgICAgICAgc3RydWN0IGFzX3plcm8KKyAgICAgICAgICA6IGJvb3N0OjpkZXRhaWw6OmZ1bmN0aW9uMTxmdW5jdGlvbmFsOjphc196ZXJvPF8sIGZ1bmN0aW9uYWw6OnRhZzxfPiA+ID4KKyAgICAgICAge307CisKKyAgICAgICAgc3RydWN0IGFzX29uZQorICAgICAgICAgIDogYm9vc3Q6OmRldGFpbDo6ZnVuY3Rpb24xPGZ1bmN0aW9uYWw6OmFzX29uZTxfLCBmdW5jdGlvbmFsOjp0YWc8Xz4gPiA+CisgICAgICAgIHt9OworICAgIH0KKworICAgIG5hbWVzcGFjZQorICAgIHsKKyAgICAgICAgb3A6Om1pbl9hc3NpZ24gY29uc3QgJm1pbl9hc3NpZ24gPSBib29zdDo6ZGV0YWlsOjpwb2Rfc2luZ2xldG9uPG9wOjptaW5fYXNzaWduPjo6aW5zdGFuY2U7CisgICAgICAgIG9wOjptYXhfYXNzaWduIGNvbnN0ICZtYXhfYXNzaWduID0gYm9vc3Q6OmRldGFpbDo6cG9kX3NpbmdsZXRvbjxvcDo6bWF4X2Fzc2lnbj46Omluc3RhbmNlOworICAgICAgICBvcDo6ZmRpdiBjb25zdCAmZmRpdiA9IGJvb3N0OjpkZXRhaWw6OnBvZF9zaW5nbGV0b248b3A6OmZkaXY+OjppbnN0YW5jZTsKKyAgICAgICAgb3A6OmZkaXYgY29uc3QgJmF2ZXJhZ2UgPSBib29zdDo6ZGV0YWlsOjpwb2Rfc2luZ2xldG9uPG9wOjpmZGl2Pjo6aW5zdGFuY2U7IC8vLzwgSU5URVJOQUwgT05MWQorICAgICAgICBvcDo6YXNfbWluIGNvbnN0ICZhc19taW4gPSBib29zdDo6ZGV0YWlsOjpwb2Rfc2luZ2xldG9uPG9wOjphc19taW4+OjppbnN0YW5jZTsKKyAgICAgICAgb3A6OmFzX21heCBjb25zdCAmYXNfbWF4ID0gYm9vc3Q6OmRldGFpbDo6cG9kX3NpbmdsZXRvbjxvcDo6YXNfbWF4Pjo6aW5zdGFuY2U7CisgICAgICAgIG9wOjphc196ZXJvIGNvbnN0ICZhc196ZXJvID0gYm9vc3Q6OmRldGFpbDo6cG9kX3NpbmdsZXRvbjxvcDo6YXNfemVybz46Omluc3RhbmNlOworICAgICAgICBvcDo6YXNfb25lIGNvbnN0ICZhc19vbmUgPSBib29zdDo6ZGV0YWlsOjpwb2Rfc2luZ2xldG9uPG9wOjphc19vbmU+OjppbnN0YW5jZTsKKworICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChtaW5fYXNzaWduKQorICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChtYXhfYXNzaWduKQorICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChmZGl2KQorICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChhdmVyYWdlKQorICAgICAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChhc19taW4pCisgICAgICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGFzX21heCkKKyAgICAgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoYXNfemVybykKKyAgICAgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoYXNfb25lKQorICAgIH0KKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBwcm9tb3RlCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG8sIHR5cGVuYW1lIEZyb20+CisgICAgdHlwZW5hbWUgbGF6eV9kaXNhYmxlX2lmPGlzX2NvbnN0PEZyb20+LCBtcGw6OmlmXzxpc19zYW1lPFRvLCBGcm9tPiwgVG8gJiwgVG8+ID46OnR5cGUKKyAgICBwcm9tb3RlKEZyb20gJmZyb20pCisgICAgeworICAgICAgICByZXR1cm4gZnVuY3Rpb25hbDo6cHJvbW90ZTxUbywgRnJvbT4oKShmcm9tKTsKKyAgICB9CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUbywgdHlwZW5hbWUgRnJvbT4KKyAgICB0eXBlbmFtZSBtcGw6OmlmXzxpc19zYW1lPFRvIGNvbnN0LCBGcm9tIGNvbnN0PiwgVG8gY29uc3QgJiwgVG8gY29uc3Q+Ojp0eXBlCisgICAgcHJvbW90ZShGcm9tIGNvbnN0ICZmcm9tKQorICAgIHsKKyAgICAgICAgcmV0dXJuIGZ1bmN0aW9uYWw6OnByb21vdGU8VG8gY29uc3QsIEZyb20gY29uc3Q+KCkoZnJvbSk7CisgICAgfQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICBzdHJ1Y3QgZGVmYXVsdF8KKyAgICB7CisgICAgICAgIHR5cGVkZWYgZGVmYXVsdF8gdHlwZTsKKyAgICAgICAgdHlwZWRlZiBUIHZhbHVlX3R5cGU7CisgICAgICAgIHN0YXRpYyBUIGNvbnN0IHZhbHVlOworCisgICAgICAgIG9wZXJhdG9yIFQgY29uc3QgJiAoKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGVmYXVsdF86OnZhbHVlOworICAgICAgICB9CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgVCBjb25zdCBkZWZhdWx0XzxUPjo6dmFsdWUgPSBUKCk7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIHN0cnVjdCBvbmUKKyAgICB7CisgICAgICAgIHR5cGVkZWYgb25lIHR5cGU7CisgICAgICAgIHR5cGVkZWYgVCB2YWx1ZV90eXBlOworICAgICAgICBzdGF0aWMgVCBjb25zdCB2YWx1ZTsKKworICAgICAgICBvcGVyYXRvciBUIGNvbnN0ICYgKCkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIG9uZTo6dmFsdWU7CisgICAgICAgIH0KKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICBUIGNvbnN0IG9uZTxUPjo6dmFsdWUgPSBUKDEpOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICBzdHJ1Y3QgemVybworICAgIHsKKyAgICAgICAgdHlwZWRlZiB6ZXJvIHR5cGU7CisgICAgICAgIHR5cGVkZWYgVCB2YWx1ZV90eXBlOworICAgICAgICBzdGF0aWMgVCBjb25zdCB2YWx1ZTsKKworICAgICAgICBvcGVyYXRvciBUIGNvbnN0ICYgKCkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHplcm86OnZhbHVlOworICAgICAgICB9CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgVCBjb25zdCB6ZXJvPFQ+Ojp2YWx1ZSA9IFQoKTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IG9uZV9vcl9kZWZhdWx0CisgICAgICA6IG1wbDo6aWZfPGlzX2VtcHR5PFQ+LCBkZWZhdWx0XzxUPiwgb25lPFQ+ID46OnR5cGUKKyAgICB7fTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IHplcm9fb3JfZGVmYXVsdAorICAgICAgOiBtcGw6OmlmXzxpc19lbXB0eTxUPiwgZGVmYXVsdF88VD4sIHplcm88VD4gPjo6dHlwZQorICAgIHt9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6Om51bWVyaWMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC9jb21wbGV4LmhwcApAQCAtMCwwICsxLDgyIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gXGZpbGUgY29tcGxleC5ocHAKKy8vLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0NPTVBMRVhfSFBQX0VBTl8wMV8xN18yMDA2CisjZGVmaW5lIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9DT01QTEVYX0hQUF9FQU5fMDFfMTdfMjAwNgorCisjaWZkZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0hQUF9JTkNMVURFRAorIyBlcnJvciBJbmNsdWRlIHRoaXMgZmlsZSBiZWZvcmUgYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHAKKyNlbmRpZgorCisjaW5jbHVkZSA8Y29tcGxleD4KKyNpbmNsdWRlIDxib29zdC9tcGwvb3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlb2Yvc3RkL2NvbXBsZXguaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWxfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIG51bWVyaWMgeyBuYW1lc3BhY2Ugb3BlcmF0b3JzCit7CisgICAgLy8gU28gdGhhdCB0aGUgc3RhdHMgY29tcGlsZSB3aGVuIFNhbXBsZSB0eXBlIGlzIHN0ZDo6Y29tcGxleAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIFU+CisgICAgdHlwZW5hbWUKKyAgICAgICAgZGlzYWJsZV9pZjwKKyAgICAgICAgICAgIG1wbDo6b3JfPGlzX3NhbWU8VCwgVT4sIGlzX3NhbWU8c3RkOjpjb21wbGV4PFQ+LCBVPiA+CisgICAgICAgICAgLCBzdGQ6OmNvbXBsZXg8VD4KKyAgICAgICAgPjo6dHlwZQorICAgIG9wZXJhdG9yICooc3RkOjpjb21wbGV4PFQ+IHJpLCBVIGNvbnN0ICZ1KQorICAgIHsKKyAgICAgICAgLy8gQlVHQlVHIHByb21vdGUgcmVzdWx0IHRvIHR5cGVvZihUKCkqdSkgPworICAgICAgICByZXR1cm4gcmkgKj0gc3RhdGljX2Nhc3Q8VD4odSk7CisgICAgfQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVCwgdHlwZW5hbWUgVT4KKyAgICB0eXBlbmFtZQorICAgICAgICBkaXNhYmxlX2lmPAorICAgICAgICAgICAgbXBsOjpvcl88aXNfc2FtZTxULCBVPiwgaXNfc2FtZTxzdGQ6OmNvbXBsZXg8VD4sIFU+ID4KKyAgICAgICAgICAsIHN0ZDo6Y29tcGxleDxUPgorICAgICAgICA+Ojp0eXBlCisgICAgb3BlcmF0b3IgLyhzdGQ6OmNvbXBsZXg8VD4gcmksIFUgY29uc3QgJnUpCisgICAgeworICAgICAgICAvLyBCVUdCVUcgcHJvbW90ZSByZXN1bHQgdG8gdHlwZW9mKFQoKSp1KSA/CisgICAgICAgIHJldHVybiByaSAvPSBzdGF0aWNfY2FzdDxUPih1KTsKKyAgICB9CisKK319fSAvLyBuYW1lc3BhY2UgYm9vc3Q6Om51bWVyaWM6Om9wZXJhdG9ycworCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgbnVtZXJpYworeworICAgIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCBvbmVfY29tcGxleAorICAgICAgICB7CisgICAgICAgICAgICBzdGF0aWMgc3RkOjpjb21wbGV4PFQ+IGNvbnN0IHZhbHVlOworICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0ZDo6Y29tcGxleDxUPiBjb25zdCBvbmVfY29tcGxleDxUPjo6dmFsdWUKKyAgICAgICAgICA9IHN0ZDo6Y29tcGxleDxUPihudW1lcmljOjpvbmU8VD46OnZhbHVlLCBudW1lcmljOjpvbmU8VD46OnZhbHVlKTsKKyAgICB9CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IG9uZTxzdGQ6OmNvbXBsZXg8VD4gPgorICAgICAgOiBkZXRhaWw6Om9uZV9jb21wbGV4PFQ+CisgICAgeworICAgICAgICB0eXBlZGVmIG9uZSB0eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6Y29tcGxleDxUPiB2YWx1ZV90eXBlOworICAgICAgICBvcGVyYXRvciB2YWx1ZV90eXBlIGNvbnN0ICYgKCkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6b25lX2NvbXBsZXg8VD46OnZhbHVlOworICAgICAgICB9CisgICAgfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpudW1lcmljCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwvdmFsYXJyYXkuaHBwCkBAIC0wLDAgKzEsMzYwIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gXGZpbGUgdmFsYXJyYXkuaHBwCisvLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9WQUxBUlJBWV9IUFBfRUFOXzEyXzEyXzIwMDUKKyNkZWZpbmUgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX1ZBTEFSUkFZX0hQUF9FQU5fMTJfMTJfMjAwNQorCisjaWZkZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0hQUF9JTkNMVURFRAorIyBlcnJvciBJbmNsdWRlIHRoaXMgZmlsZSBiZWZvcmUgYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHAKKyNlbmRpZgorCisjaW5jbHVkZSA8dmFsYXJyYXk+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hbmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ub3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zYW1lLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zY2FsYXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZW9mL3N0ZC92YWxhcnJheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbF9md2QuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgbnVtZXJpYworeworICAgIG5hbWVzcGFjZSBvcGVyYXRvcnMKKyAgICB7CisgICAgICAgIG5hbWVzcGFjZSBhY2NfZGV0YWlsCisgICAgICAgIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZ1bj4KKyAgICAgICAgICAgIHN0cnVjdCBtYWtlX3ZhbGFycmF5CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBzdGQ6OnZhbGFycmF5PHR5cGVuYW1lIEZ1bjo6cmVzdWx0X3R5cGU+IHR5cGU7CisgICAgICAgICAgICB9OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgdmFsYXJyYXk8TGVmdD4gLyBSaWdodCB3aGVyZSBSaWdodCBpcyBhIHNjYWxhciBhbmQgUmlnaHQgIT0gTGVmdC4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHR5cGVuYW1lIGxhenlfZW5hYmxlX2lmPAorICAgICAgICAgICAgbXBsOjphbmRfPGlzX3NjYWxhcjxSaWdodD4sIG1wbDo6bm90Xzxpc19zYW1lPExlZnQsIFJpZ2h0PiA+ID4KKyAgICAgICAgICAsIGFjY19kZXRhaWw6Om1ha2VfdmFsYXJyYXk8ZnVuY3Rpb25hbDo6ZGl2aWRlczxMZWZ0LCBSaWdodD4gPgorICAgICAgICA+Ojp0eXBlCisgICAgICAgIG9wZXJhdG9yIC8oc3RkOjp2YWxhcnJheTxMZWZ0PiBjb25zdCAmbGVmdCwgUmlnaHQgY29uc3QgJnJpZ2h0KQorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZ1bmN0aW9uYWw6OmRpdmlkZXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2YWxhcnJheTx2YWx1ZV90eXBlPiByZXN1bHQobGVmdC5zaXplKCkpOworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gcmVzdWx0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbnVtZXJpYzo6ZGl2aWRlcyhsZWZ0W2ldLCByaWdodCk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgdmFsYXJyYXk8TGVmdD4gKiBSaWdodCB3aGVyZSBSaWdodCBpcyBhIHNjYWxhciBhbmQgUmlnaHQgIT0gTGVmdC4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHR5cGVuYW1lIGxhenlfZW5hYmxlX2lmPAorICAgICAgICAgICAgbXBsOjphbmRfPGlzX3NjYWxhcjxSaWdodD4sIG1wbDo6bm90Xzxpc19zYW1lPExlZnQsIFJpZ2h0PiA+ID4KKyAgICAgICAgICAsIGFjY19kZXRhaWw6Om1ha2VfdmFsYXJyYXk8ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxMZWZ0LCBSaWdodD4gPgorICAgICAgICA+Ojp0eXBlCisgICAgICAgIG9wZXJhdG9yICooc3RkOjp2YWxhcnJheTxMZWZ0PiBjb25zdCAmbGVmdCwgUmlnaHQgY29uc3QgJnJpZ2h0KQorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2YWxhcnJheTx2YWx1ZV90eXBlPiByZXN1bHQobGVmdC5zaXplKCkpOworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gcmVzdWx0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbnVtZXJpYzo6bXVsdGlwbGllcyhsZWZ0W2ldLCByaWdodCk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgdmFsYXJyYXk8TGVmdD4gKyB2YWxhcnJheTxSaWdodD4gd2hlcmUgUmlnaHQgIT0gTGVmdC4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHR5cGVuYW1lIGxhenlfZGlzYWJsZV9pZjwKKyAgICAgICAgICAgIGlzX3NhbWU8TGVmdCwgUmlnaHQ+CisgICAgICAgICAgLCBhY2NfZGV0YWlsOjptYWtlX3ZhbGFycmF5PGZ1bmN0aW9uYWw6OnBsdXM8TGVmdCwgUmlnaHQ+ID4KKyAgICAgICAgPjo6dHlwZQorICAgICAgICBvcGVyYXRvciArKHN0ZDo6dmFsYXJyYXk8TGVmdD4gY29uc3QgJmxlZnQsIHN0ZDo6dmFsYXJyYXk8UmlnaHQ+IGNvbnN0ICZyaWdodCkKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBmdW5jdGlvbmFsOjpwbHVzPExlZnQsIFJpZ2h0Pjo6cmVzdWx0X3R5cGUgdmFsdWVfdHlwZTsKKyAgICAgICAgICAgIHN0ZDo6dmFsYXJyYXk8dmFsdWVfdHlwZT4gcmVzdWx0KGxlZnQuc2l6ZSgpKTsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IHJlc3VsdC5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG51bWVyaWM6OnBsdXMobGVmdFtpXSwgcmlnaHRbaV0pOworICAgICAgICAgICAgfQorICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKKyAgICAgICAgfQorICAgIH0KKworICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICBzdHJ1Y3Qgc3RkX3ZhbGFycmF5X3RhZzsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICBzdHJ1Y3QgdGFnPHN0ZDo6dmFsYXJyYXk8VD4gPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHN0ZF92YWxhcnJheV90YWcgdHlwZTsKKyAgICAgICAgfTsKKworICAgICNpZmRlZiBfX0dMSUJDWFhfXworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBVPgorICAgICAgICBzdHJ1Y3QgdGFnPHN0ZDo6X0V4cHI8VCwgVT4gPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHN0ZF92YWxhcnJheV90YWcgdHlwZTsKKyAgICAgICAgfTsKKyAgICAjZW5kaWYKKworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgR0NDIHN0ZGxpYiB1c2VzIGV4cHJlc3Npb24gdGVtcGxhdGVzLCBhbmQKKyAgICAgICAgLy8gdHlwZW9mKHNvbS12YWxhcnJheS1leHByZXNzaW9uKSBpcyBub3QgYW4gaW5zdGFuY2Ugb2Ygc3RkOjp2YWxhcnJheQorICAgICNkZWZpbmUgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFRklORV9WQUxBUlJBWV9CSU5fT1AoTmFtZSwgT3ApICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lPExlZnQsIFJpZ2h0LCBzdGRfdmFsYXJyYXlfdGFnLCBzdGRfdmFsYXJyYXlfdGFnPiAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICBMZWZ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICwgUmlnaHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIHN0ZDo6dmFsYXJyYXk8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgTmFtZTwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBMZWZ0Ojp2YWx1ZV90eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgICAgICAgICwgdHlwZW5hbWUgUmlnaHQ6OnZhbHVlX3R5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgPjo6cmVzdWx0X3R5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIExlZnQ6OnZhbHVlX3R5cGUgbGVmdF92YWx1ZV90eXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBSaWdodDo6dmFsdWVfdHlwZSByaWdodF92YWx1ZV90eXBlOyAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHR5cGVkZWYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgc3RkOjp2YWxhcnJheTwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBOYW1lPGxlZnRfdmFsdWVfdHlwZSwgcmlnaHRfdmFsdWVfdHlwZT46OnJlc3VsdF90eXBlICAgICAgIFwKKyAgICAgICAgICAgICAgICA+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICByZXN1bHRfdHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgcmVzdWx0X3R5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIG9wZXJhdG9yICgpKExlZnQgJmxlZnQsIFJpZ2h0ICZyaWdodCkgY29uc3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpwcm9tb3RlPHN0ZDo6dmFsYXJyYXk8bGVmdF92YWx1ZV90eXBlPiA+KGxlZnQpICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgT3AgbnVtZXJpYzo6cHJvbW90ZTxzdGQ6OnZhbGFycmF5PHJpZ2h0X3ZhbHVlX3R5cGU+ID4ocmlnaHQpOyAgICAgICBcCisgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lPExlZnQsIFJpZ2h0LCBzdGRfdmFsYXJyYXlfdGFnLCB2b2lkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICBMZWZ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICwgUmlnaHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIHN0ZDo6dmFsYXJyYXk8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgTmFtZTx0eXBlbmFtZSBMZWZ0Ojp2YWx1ZV90eXBlLCBSaWdodD46OnJlc3VsdF90eXBlICAgICAgICBcCisgICAgICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIExlZnQ6OnZhbHVlX3R5cGUgbGVmdF92YWx1ZV90eXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgdHlwZWRlZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICBzdGQ6OnZhbGFycmF5PCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIE5hbWU8bGVmdF92YWx1ZV90eXBlLCBSaWdodD46OnJlc3VsdF90eXBlICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHJlc3VsdF90eXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICByZXN1bHRfdHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgb3BlcmF0b3IgKCkoTGVmdCAmbGVmdCwgUmlnaHQgJnJpZ2h0KSBjb25zdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgcmV0dXJuIG51bWVyaWM6OnByb21vdGU8c3RkOjp2YWxhcnJheTxsZWZ0X3ZhbHVlX3R5cGU+ID4obGVmdCkgT3AgcmlnaHQ7XAorICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBzdHJ1Y3QgTmFtZTxMZWZ0LCBSaWdodCwgdm9pZCwgc3RkX3ZhbGFycmF5X3RhZz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICA6IHN0ZDo6YmluYXJ5X2Z1bmN0aW9uPCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgTGVmdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAsIFJpZ2h0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgLCBzdGQ6OnZhbGFycmF5PCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIE5hbWU8TGVmdCwgdHlwZW5hbWUgUmlnaHQ6OnZhbHVlX3R5cGU+OjpyZXN1bHRfdHlwZSAgICAgICAgXAorICAgICAgICAgICAgICAgID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBSaWdodDo6dmFsdWVfdHlwZSByaWdodF92YWx1ZV90eXBlOyAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHR5cGVkZWYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICAgICAgc3RkOjp2YWxhcnJheTwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBOYW1lPExlZnQsIHJpZ2h0X3ZhbHVlX3R5cGU+OjpyZXN1bHRfdHlwZSAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgICAgICA+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICByZXN1bHRfdHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgcmVzdWx0X3R5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIG9wZXJhdG9yICgpKExlZnQgJmxlZnQsIFJpZ2h0ICZyaWdodCkgY29uc3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0IE9wIG51bWVyaWM6OnByb21vdGU8c3RkOjp2YWxhcnJheTxyaWdodF92YWx1ZV90eXBlPiA+KHJpZ2h0KTtcCisgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICB9OworCisgICAgICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfVkFMQVJSQVlfQklOX09QKHBsdXMsICspCisgICAgICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfVkFMQVJSQVlfQklOX09QKG1pbnVzLCAtKQorICAgICAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1ZBTEFSUkFZX0JJTl9PUChtdWx0aXBsaWVzLCAqKQorICAgICAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1ZBTEFSUkFZX0JJTl9PUChkaXZpZGVzLCAvKQorICAgICAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVGSU5FX1ZBTEFSUkFZX0JJTl9PUChtb2R1bHVzLCAlKQorCisgICAgI3VuZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUZJTkVfVkFMQVJSQVlfQklOX09QCisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBlbGVtZW50LXdpc2UgbWluIG9mIHN0ZDo6dmFsYXJyYXkKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHN0cnVjdCBtaW5fYXNzaWduPExlZnQsIFJpZ2h0LCBzdGRfdmFsYXJyYXlfdGFnLCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHsKKyAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoTGVmdCAmbGVmdCwgUmlnaHQgJnJpZ2h0KSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIEJPT1NUX0FTU0VSVChsZWZ0LnNpemUoKSA9PSByaWdodC5zaXplKCkpOworICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IGxlZnQuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG51bWVyaWM6Omxlc3MocmlnaHRbaV0sIGxlZnRbaV0pKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0W2ldID0gcmlnaHRbaV07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBlbGVtZW50LXdpc2UgbWF4IG9mIHN0ZDo6dmFsYXJyYXkKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHN0cnVjdCBtYXhfYXNzaWduPExlZnQsIFJpZ2h0LCBzdGRfdmFsYXJyYXlfdGFnLCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHsKKyAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoTGVmdCAmbGVmdCwgUmlnaHQgJnJpZ2h0KSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIEJPT1NUX0FTU0VSVChsZWZ0LnNpemUoKSA9PSByaWdodC5zaXplKCkpOworICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IGxlZnQuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG51bWVyaWM6OmdyZWF0ZXIocmlnaHRbaV0sIGxlZnRbaV0pKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0W2ldID0gcmlnaHRbaV07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgLy8gcGFydGlhbCBzcGVjaWFsaXphdGlvbiBvZiBudW1lcmljOjpmZGl2PD4gZm9yIHN0ZDo6dmFsYXJyYXkuCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBSaWdodFRhZz4KKyAgICAgICAgc3RydWN0IGZkaXY8TGVmdCwgUmlnaHQsIHN0ZF92YWxhcnJheV90YWcsIFJpZ2h0VGFnPgorICAgICAgICAgIDogbXBsOjppZl88CisgICAgICAgICAgICAgICAgYXJlX2ludGVncmFsPHR5cGVuYW1lIExlZnQ6OnZhbHVlX3R5cGUsIFJpZ2h0PgorICAgICAgICAgICAgICAsIGRpdmlkZXM8TGVmdCwgZG91YmxlIGNvbnN0PgorICAgICAgICAgICAgICAsIGRpdmlkZXM8TGVmdCwgUmlnaHQ+CisgICAgICAgICAgICA+Ojp0eXBlCisgICAgICAgIHt9OworCisgICAgICAgIC8vIHByb21vdGUKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG8sIHR5cGVuYW1lIEZyb20+CisgICAgICAgIHN0cnVjdCBwcm9tb3RlPFRvLCBGcm9tLCBzdGRfdmFsYXJyYXlfdGFnLCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxGcm9tLCBUbz4KKyAgICAgICAgeworICAgICAgICAgICAgVG8gb3BlcmF0b3IgKCkoRnJvbSAmYXJyKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUbz46OnR5cGUgcmVzKGFyci5zaXplKCkpOworICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IGFyci5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmVzW2ldID0gbnVtZXJpYzo6cHJvbW90ZTx0eXBlbmFtZSBUbzo6dmFsdWVfdHlwZT4oYXJyW2ldKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgcmV0dXJuIHJlczsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUb0Zyb20+CisgICAgICAgIHN0cnVjdCBwcm9tb3RlPFRvRnJvbSwgVG9Gcm9tLCBzdGRfdmFsYXJyYXlfdGFnLCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxUb0Zyb20sIFRvRnJvbT4KKyAgICAgICAgeworICAgICAgICAgICAgVG9Gcm9tICZvcGVyYXRvciAoKShUb0Zyb20gJnRvZnJvbSkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gdG9mcm9tOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIC8vIGZvciAicHJvbW90aW5nIiBhIHN0ZDo6dmFsYXJyYXk8Ym9vbD4gdG8gYSBib29sLCB1c2VmdWwgZm9yCisgICAgICAgIC8vIGNvbXBhcmluZyAyIHZhbGFycmF5cyBmb3IgZXF1YWxpdHk6CisgICAgICAgIC8vICAgaWYobnVtZXJpYzo6cHJvbW90ZTxib29sPihhID09IGIpKQorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGcm9tPgorICAgICAgICBzdHJ1Y3QgcHJvbW90ZTxib29sLCBGcm9tLCB2b2lkLCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxGcm9tLCBib29sPgorICAgICAgICB7CisgICAgICAgICAgICBib29sIG9wZXJhdG9yICgpKEZyb20gJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBCT09TVF9NUExfQVNTRVJUKChpc19zYW1lPGJvb2wsIHR5cGVuYW1lIEZyb206OnZhbHVlX3R5cGU+KSk7CisgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gYXJyLnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpZighYXJyW2ldKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRnJvbT4KKyAgICAgICAgc3RydWN0IHByb21vdGU8Ym9vbCBjb25zdCwgRnJvbSwgdm9pZCwgc3RkX3ZhbGFycmF5X3RhZz4KKyAgICAgICAgICA6IHByb21vdGU8Ym9vbCwgRnJvbSwgdm9pZCwgc3RkX3ZhbGFycmF5X3RhZz4KKyAgICAgICAge307CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBmdW5jdGlvbmFsOjphc19taW4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICAgICAgc3RydWN0IGFzX21pbjxULCBzdGRfdmFsYXJyYXlfdGFnPgorICAgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPFQsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlIG9wZXJhdG9yICgpKFQgJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gMCA9PSBhcnIuc2l6ZSgpCisgICAgICAgICAgICAgICAgICA/IFQoKQorICAgICAgICAgICAgICAgICAgOiBUKG51bWVyaWM6OmFzX21pbihhcnJbMF0pLCBhcnIuc2l6ZSgpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGZ1bmN0aW9uYWw6OmFzX21heAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4PFQsIHN0ZF92YWxhcnJheV90YWc+CisgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPFQsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlIG9wZXJhdG9yICgpKFQgJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gMCA9PSBhcnIuc2l6ZSgpCisgICAgICAgICAgICAgICAgICA/IFQoKQorICAgICAgICAgICAgICAgICAgOiBUKG51bWVyaWM6OmFzX21heChhcnJbMF0pLCBhcnIuc2l6ZSgpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGZ1bmN0aW9uYWw6OmFzX3plcm8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICAgICAgc3RydWN0IGFzX3plcm88VCwgc3RkX3ZhbGFycmF5X3RhZz4KKyAgICAgICAgICA6IHN0ZDo6dW5hcnlfZnVuY3Rpb248VCwgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlbmFtZSByZW1vdmVfY29uc3Q8VD46OnR5cGUgb3BlcmF0b3IgKCkoVCAmYXJyKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJldHVybiAwID09IGFyci5zaXplKCkKKyAgICAgICAgICAgICAgICAgID8gVCgpCisgICAgICAgICAgICAgICAgICA6IFQobnVtZXJpYzo6YXNfemVybyhhcnJbMF0pLCBhcnIuc2l6ZSgpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGZ1bmN0aW9uYWw6OmFzX29uZQorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICBzdHJ1Y3QgYXNfb25lPFQsIHN0ZF92YWxhcnJheV90YWc+CisgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPFQsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlIG9wZXJhdG9yICgpKFQgJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gMCA9PSBhcnIuc2l6ZSgpCisgICAgICAgICAgICAgICAgICA/IFQoKQorICAgICAgICAgICAgICAgICAgOiBUKG51bWVyaWM6OmFzX29uZShhcnJbMF0pLCBhcnIuc2l6ZSgpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgIH0gLy8gbmFtZXNwYWNlIGZ1bmN0aW9uYWwKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpudW1lcmljCisKKyNlbmRpZgorCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC92ZWN0b3IuaHBwCkBAIC0wLDAgKzEsMzI5IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gXGZpbGUgdmVjdG9yLmhwcAorLy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfVkVDVE9SX0hQUF9FQU5fMTJfMTJfMjAwNQorI2RlZmluZSBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfVkVDVE9SX0hQUF9FQU5fMTJfMTJfMjAwNQorCisjaWZkZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0hQUF9JTkNMVURFRAorIyBlcnJvciBJbmNsdWRlIHRoaXMgZmlsZSBiZWZvcmUgYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHAKKyNlbmRpZgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvYW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvbm90LmhwcD4KKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2NhbGFyLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9yZW1vdmVfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVvZi9zdGQvdmVjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsX2Z3ZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBudW1lcmljCit7CisgICAgbmFtZXNwYWNlIG9wZXJhdG9ycworICAgIHsKKyAgICAgICAgbmFtZXNwYWNlIGFjY19kZXRhaWwKKyAgICAgICAgeworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRnVuPgorICAgICAgICAgICAgc3RydWN0IG1ha2VfdmVjdG9yCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3Rvcjx0eXBlbmFtZSBGdW46OnJlc3VsdF90eXBlPiB0eXBlOworICAgICAgICAgICAgfTsKKyAgICAgICAgfQorCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gSGFuZGxlIHZlY3RvcjxMZWZ0PiAvIFJpZ2h0IHdoZXJlIFJpZ2h0IGlzIGEgc2NhbGFyLgorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodD4KKyAgICAgICAgdHlwZW5hbWUgbGF6eV9lbmFibGVfaWY8CisgICAgICAgICAgICBpc19zY2FsYXI8UmlnaHQ+CisgICAgICAgICAgLCBhY2NfZGV0YWlsOjptYWtlX3ZlY3RvcjxmdW5jdGlvbmFsOjpkaXZpZGVzPExlZnQsIFJpZ2h0PiA+CisgICAgICAgID46OnR5cGUKKyAgICAgICAgb3BlcmF0b3IgLyhzdGQ6OnZlY3RvcjxMZWZ0PiBjb25zdCAmbGVmdCwgUmlnaHQgY29uc3QgJnJpZ2h0KQorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZ1bmN0aW9uYWw6OmRpdmlkZXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2ZWN0b3I8dmFsdWVfdHlwZT4gcmVzdWx0KGxlZnQuc2l6ZSgpKTsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IHJlc3VsdC5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG51bWVyaWM6OmRpdmlkZXMobGVmdFtpXSwgcmlnaHQpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKKyAgICAgICAgfQorCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gSGFuZGxlIHZlY3RvcjxMZWZ0PiAvIHZlY3RvcjxSaWdodD4uCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdGQ6OnZlY3Rvcjx0eXBlbmFtZSBmdW5jdGlvbmFsOjpkaXZpZGVzPExlZnQsIFJpZ2h0Pjo6cmVzdWx0X3R5cGU+CisgICAgICAgIG9wZXJhdG9yIC8oc3RkOjp2ZWN0b3I8TGVmdD4gY29uc3QgJmxlZnQsIHN0ZDo6dmVjdG9yPFJpZ2h0PiBjb25zdCAmcmlnaHQpCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZnVuY3Rpb25hbDo6ZGl2aWRlczxMZWZ0LCBSaWdodD46OnJlc3VsdF90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx2YWx1ZV90eXBlPiByZXN1bHQobGVmdC5zaXplKCkpOworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gcmVzdWx0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbnVtZXJpYzo6ZGl2aWRlcyhsZWZ0W2ldLCByaWdodFtpXSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgdmVjdG9yPExlZnQ+ICogUmlnaHQgd2hlcmUgUmlnaHQgaXMgYSBzY2FsYXIuCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICB0eXBlbmFtZSBsYXp5X2VuYWJsZV9pZjwKKyAgICAgICAgICAgIGlzX3NjYWxhcjxSaWdodD4KKyAgICAgICAgICAsIGFjY19kZXRhaWw6Om1ha2VfdmVjdG9yPGZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8TGVmdCwgUmlnaHQ+ID4KKyAgICAgICAgPjo6dHlwZQorICAgICAgICBvcGVyYXRvciAqKHN0ZDo6dmVjdG9yPExlZnQ+IGNvbnN0ICZsZWZ0LCBSaWdodCBjb25zdCAmcmlnaHQpCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZnVuY3Rpb25hbDo6bXVsdGlwbGllczxMZWZ0LCBSaWdodD46OnJlc3VsdF90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx2YWx1ZV90eXBlPiByZXN1bHQobGVmdC5zaXplKCkpOworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gcmVzdWx0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbnVtZXJpYzo6bXVsdGlwbGllcyhsZWZ0W2ldLCByaWdodCk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgTGVmdCAqIHZlY3RvcjxSaWdodD4gd2hlcmUgTGVmdCBpcyBhIHNjYWxhci4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHR5cGVuYW1lIGxhenlfZW5hYmxlX2lmPAorICAgICAgICAgICAgaXNfc2NhbGFyPExlZnQ+CisgICAgICAgICAgLCBhY2NfZGV0YWlsOjptYWtlX3ZlY3RvcjxmdW5jdGlvbmFsOjptdWx0aXBsaWVzPExlZnQsIFJpZ2h0PiA+CisgICAgICAgID46OnR5cGUKKyAgICAgICAgb3BlcmF0b3IgKihMZWZ0IGNvbnN0ICZsZWZ0LCBzdGQ6OnZlY3RvcjxSaWdodD4gY29uc3QgJnJpZ2h0KQorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2ZWN0b3I8dmFsdWVfdHlwZT4gcmVzdWx0KHJpZ2h0LnNpemUoKSk7CisgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IDAsIHNpemUgPSByZXN1bHQuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBudW1lcmljOjptdWx0aXBsaWVzKGxlZnQsIHJpZ2h0W2ldKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CisgICAgICAgIH0KKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIEhhbmRsZSB2ZWN0b3I8TGVmdD4gKiB2ZWN0b3I8UmlnaHQ+CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdGQ6OnZlY3Rvcjx0eXBlbmFtZSBmdW5jdGlvbmFsOjptdWx0aXBsaWVzPExlZnQsIFJpZ2h0Pjo6cmVzdWx0X3R5cGU+CisgICAgICAgIG9wZXJhdG9yICooc3RkOjp2ZWN0b3I8TGVmdD4gY29uc3QgJmxlZnQsIHN0ZDo6dmVjdG9yPFJpZ2h0PiBjb25zdCAmcmlnaHQpCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZnVuY3Rpb25hbDo6bXVsdGlwbGllczxMZWZ0LCBSaWdodD46OnJlc3VsdF90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx2YWx1ZV90eXBlPiByZXN1bHQobGVmdC5zaXplKCkpOworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwLCBzaXplID0gcmVzdWx0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbnVtZXJpYzo6bXVsdGlwbGllcyhsZWZ0W2ldLCByaWdodFtpXSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBIYW5kbGUgdmVjdG9yPExlZnQ+ICsgdmVjdG9yPFJpZ2h0PgorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodD4KKyAgICAgICAgc3RkOjp2ZWN0b3I8dHlwZW5hbWUgZnVuY3Rpb25hbDo6cGx1czxMZWZ0LCBSaWdodD46OnJlc3VsdF90eXBlPgorICAgICAgICBvcGVyYXRvciArKHN0ZDo6dmVjdG9yPExlZnQ+IGNvbnN0ICZsZWZ0LCBzdGQ6OnZlY3RvcjxSaWdodD4gY29uc3QgJnJpZ2h0KQorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGZ1bmN0aW9uYWw6OnBsdXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2ZWN0b3I8dmFsdWVfdHlwZT4gcmVzdWx0KGxlZnQuc2l6ZSgpKTsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IHJlc3VsdC5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG51bWVyaWM6OnBsdXMobGVmdFtpXSwgcmlnaHRbaV0pOworICAgICAgICAgICAgfQorICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKKyAgICAgICAgfQorCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gSGFuZGxlIHZlY3RvcjxMZWZ0PiAtIHZlY3RvcjxSaWdodD4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQ+CisgICAgICAgIHN0ZDo6dmVjdG9yPHR5cGVuYW1lIGZ1bmN0aW9uYWw6Om1pbnVzPExlZnQsIFJpZ2h0Pjo6cmVzdWx0X3R5cGU+CisgICAgICAgIG9wZXJhdG9yIC0oc3RkOjp2ZWN0b3I8TGVmdD4gY29uc3QgJmxlZnQsIHN0ZDo6dmVjdG9yPFJpZ2h0PiBjb25zdCAmcmlnaHQpCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZnVuY3Rpb25hbDo6bWludXM8TGVmdCwgUmlnaHQ+OjpyZXN1bHRfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICAgICAgc3RkOjp2ZWN0b3I8dmFsdWVfdHlwZT4gcmVzdWx0KGxlZnQuc2l6ZSgpKTsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IHJlc3VsdC5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG51bWVyaWM6Om1pbnVzKGxlZnRbaV0sIHJpZ2h0W2ldKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CisgICAgICAgIH0KKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIEhhbmRsZSB2ZWN0b3I8TGVmdD4gKz0gdmVjdG9yPExlZnQ+CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQ+CisgICAgICAgIHN0ZDo6dmVjdG9yPExlZnQ+ICYKKyAgICAgICAgb3BlcmF0b3IgKz0oc3RkOjp2ZWN0b3I8TGVmdD4gJmxlZnQsIHN0ZDo6dmVjdG9yPExlZnQ+IGNvbnN0ICZyaWdodCkKKyAgICAgICAgeworICAgICAgICAgICAgQk9PU1RfQVNTRVJUKGxlZnQuc2l6ZSgpID09IHJpZ2h0LnNpemUoKSk7CisgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IDAsIHNpemUgPSBsZWZ0LnNpemUoKTsgaSAhPSBzaXplOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgbnVtZXJpYzo6cGx1c19hc3NpZ24obGVmdFtpXSwgcmlnaHRbaV0pOworICAgICAgICAgICAgfQorICAgICAgICAgICAgcmV0dXJuIGxlZnQ7CisgICAgICAgIH0KKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIEhhbmRsZSAtdmVjdG9yPEFyZz4KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJnPgorICAgICAgICBzdGQ6OnZlY3Rvcjx0eXBlbmFtZSBmdW5jdGlvbmFsOjp1bmFyeV9taW51czxBcmc+OjpyZXN1bHRfdHlwZT4KKyAgICAgICAgb3BlcmF0b3IgLShzdGQ6OnZlY3RvcjxBcmc+IGNvbnN0ICZhcmcpCisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgZnVuY3Rpb25hbDo6dW5hcnlfbWludXM8QXJnPjo6cmVzdWx0X3R5cGUgdmFsdWVfdHlwZTsKKyAgICAgICAgICAgIHN0ZDo6dmVjdG9yPHZhbHVlX3R5cGU+IHJlc3VsdChhcmcuc2l6ZSgpKTsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IHJlc3VsdC5zaXplKCk7IGkgIT0gc2l6ZTsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IG51bWVyaWM6OnVuYXJ5X21pbnVzKGFyZ1tpXSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0OworICAgICAgICB9CisgICAgfQorCisgICAgbmFtZXNwYWNlIGZ1bmN0aW9uYWwKKyAgICB7CisgICAgICAgIHN0cnVjdCBzdGRfdmVjdG9yX3RhZzsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBBbD4KKyAgICAgICAgc3RydWN0IHRhZzxzdGQ6OnZlY3RvcjxULCBBbD4gPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmIHN0ZF92ZWN0b3JfdGFnIHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBlbGVtZW50LXdpc2UgbWluIG9mIHN0ZDo6dmVjdG9yCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdHJ1Y3QgbWluX2Fzc2lnbjxMZWZ0LCBSaWdodCwgc3RkX3ZlY3Rvcl90YWcsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHsKKyAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoTGVmdCAmbGVmdCwgUmlnaHQgJnJpZ2h0KSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIEJPT1NUX0FTU0VSVChsZWZ0LnNpemUoKSA9PSByaWdodC5zaXplKCkpOworICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IGxlZnQuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG51bWVyaWM6Omxlc3MocmlnaHRbaV0sIGxlZnRbaV0pKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0W2ldID0gcmlnaHRbaV07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBlbGVtZW50LXdpc2UgbWF4IG9mIHN0ZDo6dmVjdG9yCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdHJ1Y3QgbWF4X2Fzc2lnbjxMZWZ0LCBSaWdodCwgc3RkX3ZlY3Rvcl90YWcsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHsKKyAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoTGVmdCAmbGVmdCwgUmlnaHQgJnJpZ2h0KSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIEJPT1NUX0FTU0VSVChsZWZ0LnNpemUoKSA9PSByaWdodC5zaXplKCkpOworICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMCwgc2l6ZSA9IGxlZnQuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG51bWVyaWM6OmdyZWF0ZXIocmlnaHRbaV0sIGxlZnRbaV0pKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0W2ldID0gcmlnaHRbaV07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgLy8gcGFydGlhbCBzcGVjaWFsaXphdGlvbiBmb3Igc3RkOjp2ZWN0b3IuCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdHJ1Y3QgZmRpdjxMZWZ0LCBSaWdodCwgc3RkX3ZlY3Rvcl90YWcsIHZvaWQ+CisgICAgICAgICAgOiBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICBhcmVfaW50ZWdyYWw8dHlwZW5hbWUgTGVmdDo6dmFsdWVfdHlwZSwgUmlnaHQ+CisgICAgICAgICAgICAgICwgZGl2aWRlczxMZWZ0LCBkb3VibGUgY29uc3Q+CisgICAgICAgICAgICAgICwgZGl2aWRlczxMZWZ0LCBSaWdodD4KKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAge307CisKKyAgICAgICAgLy8gcHJvbW90ZQorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUbywgdHlwZW5hbWUgRnJvbT4KKyAgICAgICAgc3RydWN0IHByb21vdGU8VG8sIEZyb20sIHN0ZF92ZWN0b3JfdGFnLCBzdGRfdmVjdG9yX3RhZz4KKyAgICAgICAgICA6IHN0ZDo6dW5hcnlfZnVuY3Rpb248RnJvbSwgVG8+CisgICAgICAgIHsKKyAgICAgICAgICAgIFRvIG9wZXJhdG9yICgpKEZyb20gJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSByZW1vdmVfY29uc3Q8VG8+Ojp0eXBlIHJlcyhhcnIuc2l6ZSgpKTsKKyAgICAgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IDAsIHNpemUgPSBhcnIuc2l6ZSgpOyBpICE9IHNpemU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJlc1tpXSA9IG51bWVyaWM6OnByb21vdGU8dHlwZW5hbWUgVG86OnZhbHVlX3R5cGU+KGFycltpXSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIHJldHVybiByZXM7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG9Gcm9tPgorICAgICAgICBzdHJ1Y3QgcHJvbW90ZTxUb0Zyb20sIFRvRnJvbSwgc3RkX3ZlY3Rvcl90YWcsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxUb0Zyb20sIFRvRnJvbT4KKyAgICAgICAgeworICAgICAgICAgICAgVG9Gcm9tICZvcGVyYXRvciAoKShUb0Zyb20gJnRvZnJvbSkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gdG9mcm9tOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gZnVuY3Rpb25hbDo6YXNfbWluCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCBhc19taW48VCwgc3RkX3ZlY3Rvcl90YWc+CisgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPFQsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlIG9wZXJhdG9yICgpKFQgJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gMCA9PSBhcnIuc2l6ZSgpCisgICAgICAgICAgICAgICAgICA/IFQoKQorICAgICAgICAgICAgICAgICAgOiBUKGFyci5zaXplKCksIG51bWVyaWM6OmFzX21pbihhcnJbMF0pKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIGZ1bmN0aW9uYWw6OmFzX21heAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4PFQsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxULCB0eXBlbmFtZSByZW1vdmVfY29uc3Q8VD46OnR5cGU+CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZSBvcGVyYXRvciAoKShUICZhcnIpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIDAgPT0gYXJyLnNpemUoKQorICAgICAgICAgICAgICAgICAgPyBUKCkKKyAgICAgICAgICAgICAgICAgIDogVChhcnIuc2l6ZSgpLCBudW1lcmljOjphc19tYXgoYXJyWzBdKSk7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBmdW5jdGlvbmFsOjphc196ZXJvCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCBhc196ZXJvPFQsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjp1bmFyeV9mdW5jdGlvbjxULCB0eXBlbmFtZSByZW1vdmVfY29uc3Q8VD46OnR5cGU+CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZSBvcGVyYXRvciAoKShUICZhcnIpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIDAgPT0gYXJyLnNpemUoKQorICAgICAgICAgICAgICAgICAgPyBUKCkKKyAgICAgICAgICAgICAgICAgIDogVChhcnIuc2l6ZSgpLCBudW1lcmljOjphc196ZXJvKGFyclswXSkpOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAgICAgLy8gZnVuY3Rpb25hbDo6YXNfb25lCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCBhc19vbmU8VCwgc3RkX3ZlY3Rvcl90YWc+CisgICAgICAgICAgOiBzdGQ6OnVuYXJ5X2Z1bmN0aW9uPFQsIHR5cGVuYW1lIHJlbW92ZV9jb25zdDxUPjo6dHlwZT4KKyAgICAgICAgeworICAgICAgICAgICAgdHlwZW5hbWUgcmVtb3ZlX2NvbnN0PFQ+Ojp0eXBlIG9wZXJhdG9yICgpKFQgJmFycikgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gMCA9PSBhcnIuc2l6ZSgpCisgICAgICAgICAgICAgICAgICA/IFQoKQorICAgICAgICAgICAgICAgICAgOiBUKGFyci5zaXplKCksIG51bWVyaWM6OmFzX29uZShhcnJbMF0pKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworICAgIH0gLy8gbmFtZXNwYWNlIGZ1bmN0aW9uYWwKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpudW1lcmljCisKKyNlbmRpZgorCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbF9md2QuaHBwCkBAIC0wLDAgKzEsMjIxIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gXGZpbGUgZnVuY3Rpb25hbF9md2QuaHBwCisvLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9GV0RfSFBQX0VBTl8wOF8xMl8yMDA1CisjZGVmaW5lIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9GV0RfSFBQX0VBTl8wOF8xMl8yMDA1CisKKyNpbmNsdWRlIDxib29zdC9tcGwvaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zYW1lLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19jb25zdC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBudW1lcmljCit7CisgICAgLy8gRm9yIHVzaW5nIGRpcmVjdGl2ZXMgLS0gdGhpcyBuYW1lc3BhY2UgbWF5IGJlIHJlLW9wZW5lZCBlbHNld2hlcmUKKyAgICBuYW1lc3BhY2Ugb3BlcmF0b3JzCisgICAge30KKworICAgIG5hbWVzcGFjZSBvcAorICAgIHsKKyAgICAgICAgdXNpbmcgbXBsOjpfOworICAgICAgICB1c2luZyBtcGw6Ol8xOworICAgICAgICB1c2luZyBtcGw6Ol8yOworICAgIH0KKworICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICB1c2luZyBuYW1lc3BhY2Ugb3BlcmF0b3JzOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCB0YWcKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiB2b2lkIHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICAgICAgc3RydWN0IHRhZzxUIGNvbnN0PgorICAgICAgICAgIDogdGFnPFQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHN0cnVjdCB0YWc8VCB2b2xhdGlsZT4KKyAgICAgICAgICA6IHRhZzxUPgorICAgICAgICB7fTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICBzdHJ1Y3QgdGFnPFQgY29uc3Qgdm9sYXRpbGU+CisgICAgICAgICAgOiB0YWc8VD4KKyAgICAgICAge307CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KKyAgICAgICAgc3RydWN0IHN0YXRpY187CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQTAsIHR5cGVuYW1lIEExPgorICAgICAgICBzdHJ1Y3QgYXJlX2ludGVncmFsOworICAgIH0KKworICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisjZGVmaW5lIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUNMQVJFX1VOQVJZX09QKE5hbWUsIE9wKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIGZ1bmN0aW9uYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWYgPSB2b2lkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lICMjIF9iYXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgQXJnVGFnID0gdHlwZW5hbWUgdGFnPEFyZz46OnR5cGU+ICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlIG9wICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIHN0cnVjdCBOYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgbmFtZXNwYWNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgICAgIGV4dGVybiBvcDo6TmFtZSBjb25zdCAmTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCisgICAgfQorCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyNkZWZpbmUgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKE5hbWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBuYW1lc3BhY2UgZnVuY3Rpb25hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIEVuYWJsZUlmID0gdm9pZD4gICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgc3RydWN0IHJlc3VsdF9vZl8gIyMgTmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIEVuYWJsZUlmID0gdm9pZD4gICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgc3RydWN0IE5hbWUgIyMgX2Jhc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgdGVtcGxhdGU8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAgIHR5cGVuYW1lIExlZnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAsIHR5cGVuYW1lIFJpZ2h0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAsIHR5cGVuYW1lIExlZnRUYWcgPSB0eXBlbmFtZSB0YWc8TGVmdD46OnR5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgICAsIHR5cGVuYW1lIFJpZ2h0VGFnID0gdHlwZW5hbWUgdGFnPFJpZ2h0Pjo6dHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgc3RydWN0IE5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBuYW1lc3BhY2Ugb3AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgc3RydWN0IE5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICBuYW1lc3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICAgICAgZXh0ZXJuIG9wOjpOYW1lIGNvbnN0ICZOYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKKyAgICB9CisKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AocGx1cykKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AobWludXMpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKG11bHRpcGxpZXMpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGRpdmlkZXMpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKG1vZHVsdXMpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGdyZWF0ZXIpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGdyZWF0ZXJfZXF1YWwpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGxlc3MpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGxlc3NfZXF1YWwpCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKGVxdWFsX3RvKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUNMQVJFX0JJTkFSWV9PUChub3RfZXF1YWxfdG8pCisKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AoYXNzaWduKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUNMQVJFX0JJTkFSWV9PUChwbHVzX2Fzc2lnbikKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AobWludXNfYXNzaWduKQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUNMQVJFX0JJTkFSWV9PUChtdWx0aXBsaWVzX2Fzc2lnbikKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AoZGl2aWRlc19hc3NpZ24pCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfQklOQVJZX09QKG1vZHVsdXNfYXNzaWduKQorCisgICAgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfVU5BUllfT1AodW5hcnlfcGx1cywgKykKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9VTkFSWV9PUCh1bmFyeV9taW51cywgLSkKKyAgICBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9VTkFSWV9PUChjb21wbGVtZW50LCB+KQorICAgIEJPT1NUX05VTUVSSUNfRlVOQ1RJT05BTF9ERUNMQVJFX1VOQVJZX09QKGxvZ2ljYWxfbm90LCAhKQorCisjdW5kZWYgQk9PU1RfTlVNRVJJQ19GVU5DVElPTkFMX0RFQ0xBUkVfVU5BUllfT1AKKyN1bmRlZiBCT09TVF9OVU1FUklDX0ZVTkNUSU9OQUxfREVDTEFSRV9CSU5BUllfT1AKKworCisgICAgbmFtZXNwYWNlIGZ1bmN0aW9uYWwKKyAgICB7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRvLCB0eXBlbmFtZSBGcm9tLCB0eXBlbmFtZSBFbmFibGVJZiA9IHZvaWQ+CisgICAgICAgIHN0cnVjdCBwcm9tb3RlX2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZiA9IHZvaWQ+CisgICAgICAgIHN0cnVjdCBtaW5fYXNzaWduX2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZiA9IHZvaWQ+CisgICAgICAgIHN0cnVjdCBtYXhfYXNzaWduX2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZiA9IHZvaWQ+CisgICAgICAgIHN0cnVjdCBmZGl2X2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWYgPSB2b2lkPgorICAgICAgICBzdHJ1Y3QgYXNfbWluX2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWYgPSB2b2lkPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4X2Jhc2U7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZywgdHlwZW5hbWUgRW5hYmxlSWYgPSB2b2lkPgorICAgICAgICBzdHJ1Y3QgYXNfemVyb19iYXNlOworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIEVuYWJsZUlmID0gdm9pZD4KKyAgICAgICAgc3RydWN0IGFzX29uZV9iYXNlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRvLCB0eXBlbmFtZSBGcm9tLCB0eXBlbmFtZSBUb1RhZyA9IHR5cGVuYW1lIHRhZzxUbz46OnR5cGUsIHR5cGVuYW1lIEZyb21UYWcgPSB0eXBlbmFtZSB0YWc8RnJvbT46OnR5cGU+CisgICAgICAgIHN0cnVjdCBwcm9tb3RlOworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0LCB0eXBlbmFtZSBSaWdodCwgdHlwZW5hbWUgTGVmdFRhZyA9IHR5cGVuYW1lIHRhZzxMZWZ0Pjo6dHlwZSwgdHlwZW5hbWUgUmlnaHRUYWcgPSB0eXBlbmFtZSB0YWc8UmlnaHQ+Ojp0eXBlPgorICAgICAgICBzdHJ1Y3QgbWluX2Fzc2lnbjsKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdCwgdHlwZW5hbWUgUmlnaHQsIHR5cGVuYW1lIExlZnRUYWcgPSB0eXBlbmFtZSB0YWc8TGVmdD46OnR5cGUsIHR5cGVuYW1lIFJpZ2h0VGFnID0gdHlwZW5hbWUgdGFnPFJpZ2h0Pjo6dHlwZT4KKyAgICAgICAgc3RydWN0IG1heF9hc3NpZ247CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBMZWZ0VGFnID0gdHlwZW5hbWUgdGFnPExlZnQ+Ojp0eXBlLCB0eXBlbmFtZSBSaWdodFRhZyA9IHR5cGVuYW1lIHRhZzxSaWdodD46OnR5cGU+CisgICAgICAgIHN0cnVjdCBmZGl2OworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIFRhZyA9IHR5cGVuYW1lIHRhZzxBcmc+Ojp0eXBlPgorICAgICAgICBzdHJ1Y3QgYXNfbWluOworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIFRhZyA9IHR5cGVuYW1lIHRhZzxBcmc+Ojp0eXBlPgorICAgICAgICBzdHJ1Y3QgYXNfbWF4OworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmcsIHR5cGVuYW1lIFRhZyA9IHR5cGVuYW1lIHRhZzxBcmc+Ojp0eXBlPgorICAgICAgICBzdHJ1Y3QgYXNfemVybzsKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJnLCB0eXBlbmFtZSBUYWcgPSB0eXBlbmFtZSB0YWc8QXJnPjo6dHlwZT4KKyAgICAgICAgc3RydWN0IGFzX29uZTsKKyAgICB9CisKKyAgICBuYW1lc3BhY2Ugb3AKKyAgICB7CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRvPgorICAgICAgICBzdHJ1Y3QgcHJvbW90ZTsKKyAgICAgICAgc3RydWN0IG1pbl9hc3NpZ247CisgICAgICAgIHN0cnVjdCBtYXhfYXNzaWduOworICAgICAgICBzdHJ1Y3QgZmRpdjsKKyAgICAgICAgc3RydWN0IGFzX21pbjsKKyAgICAgICAgc3RydWN0IGFzX21heDsKKyAgICAgICAgc3RydWN0IGFzX3plcm87CisgICAgICAgIHN0cnVjdCBhc19vbmU7CisgICAgfQorCisgICAgbmFtZXNwYWNlCisgICAgeworICAgICAgICBleHRlcm4gb3A6Om1pbl9hc3NpZ24gY29uc3QgJm1pbl9hc3NpZ247CisgICAgICAgIGV4dGVybiBvcDo6bWF4X2Fzc2lnbiBjb25zdCAmbWF4X2Fzc2lnbjsKKyAgICAgICAgZXh0ZXJuIG9wOjpmZGl2IGNvbnN0ICZmZGl2OworICAgICAgICBleHRlcm4gb3A6OmFzX21pbiBjb25zdCAmYXNfbWluOworICAgICAgICBleHRlcm4gb3A6OmFzX21heCBjb25zdCAmYXNfbWF4OworICAgICAgICBleHRlcm4gb3A6OmFzX3plcm8gY29uc3QgJmFzX3plcm87CisgICAgICAgIGV4dGVybiBvcDo6YXNfb25lIGNvbnN0ICZhc19vbmU7CisgICAgfQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG8sIHR5cGVuYW1lIEZyb20+CisgICAgdHlwZW5hbWUgbGF6eV9kaXNhYmxlX2lmPGlzX2NvbnN0PEZyb20+LCBtcGw6OmlmXzxpc19zYW1lPFRvLCBGcm9tPiwgVG8gJiwgVG8+ID46OnR5cGUKKyAgICBwcm9tb3RlKEZyb20gJmZyb20pOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVG8sIHR5cGVuYW1lIEZyb20+CisgICAgdHlwZW5hbWUgbXBsOjppZl88aXNfc2FtZTxUbyBjb25zdCwgRnJvbSBjb25zdD4sIFRvIGNvbnN0ICYsIFRvIGNvbnN0Pjo6dHlwZQorICAgIHByb21vdGUoRnJvbSBjb25zdCAmZnJvbSk7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIHN0cnVjdCBkZWZhdWx0XzsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IG9uZTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IHplcm87CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIHN0cnVjdCBvbmVfb3JfZGVmYXVsdDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgc3RydWN0IHplcm9fb3JfZGVmYXVsdDsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjpudW1lcmljCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzLmhwcApAQCAtMCwwICsxLDYxIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8gXGZpbGUgc3RhdGlzdGljcy5ocHAKKy8vLyBJbmNsdWRlcyBhbGwgb2YgdGhlIFN0YXRpc3RpY2FsIEFjY3VtdWxhdG9ycyBMaWJyYXJ5CisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfSFBQX0VBTl8wMV8xN18yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0hQUF9FQU5fMDFfMTdfMjAwNgorCisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdmFyaWFuY2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2RlbnNpdHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2Vycm9yX29mLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9lcnJvcl9vZl9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9leHRlbmRlZF9wX3NxdWFyZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2t1cnRvc2lzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tYXguaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21lYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21lZGlhbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbWluLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tb21lbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BlYWtzX292ZXJfdGhyZXNob2xkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wb3RfdGFpbF9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wb3RfcXVhbnRpbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX3F1YW50aWxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9za2V3bmVzcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3RhdHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtX2thaGFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX3F1YW50aWxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX21lYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWxfdmFyaWF0ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbF92YXJpYXRlX21lYW5zLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy92YXJpYW5jZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfY292YXJpYW5jZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfZGVuc2l0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfa3VydG9zaXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9tZWRpYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX21vbWVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9za2V3bmVzcy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfc3VtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9zdW1fa2FoYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3RhaWxfcXVhbnRpbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3RhaWxfbWVhbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF92YXJpYW5jZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2l0aF9lcnJvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcGFyYW1ldGVycy9xdWFudGlsZV9wcm9iYWJpbGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdmFyaWF0ZXMvY292YXJpYXRlLmhwcD4KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwCkBAIC0wLDAgKzEsODAgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGNvdW50LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0NPVU5UX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19DT1VOVF9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9hbHdheXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGNvdW50X2ltcGwKKyAgICBzdHJ1Y3QgY291bnRfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHN0ZDo6c2l6ZV90IHJlc3VsdF90eXBlOworCisgICAgICAgIGNvdW50X2ltcGwoZG9udF9jYXJlKQorICAgICAgICAgIDogY250KDApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICArK3RoaXMtPmNudDsKKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5jbnQ7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHN0ZDo6c2l6ZV90IGNudDsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6Y291bnQKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IGNvdW50CisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgbXBsOjphbHdheXM8YWNjdW11bGF0b3JzOjppbXBsOjpjb3VudF9pbXBsPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OmNvdW50CisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpjb3VudD4gY29uc3QgY291bnQgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGNvdW50KQorfQorCit1c2luZyBleHRyYWN0Ojpjb3VudDsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY292YXJpYW5jZS5ocHAKQEAgLTAsMCArMSwyMjAgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGNvdmFyaWFuY2UuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfQ09WQVJJQU5DRV9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19DT1ZBUklBTkNFX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPG51bWVyaWM+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxjb21wbGV4PgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L251bWVyaWMvdWJsYXMvaW8uaHBwPgorI2luY2x1ZGUgPGJvb3N0L251bWVyaWMvdWJsYXMvbWF0cml4LmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zY2FsYXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21lYW4uaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgbnVtZXJpYworeworICAgIG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICBzdHJ1Y3Qgc3RkX3ZlY3Rvcl90YWc7CisKKyAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAvLyBmdW5jdGlvbmFsOjpvdXRlcl9wcm9kdWN0CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBFbmFibGVJZiA9IHZvaWQ+CisgICAgICAgIHN0cnVjdCBvdXRlcl9wcm9kdWN0X2Jhc2UKKyAgICAgICAgICA6IGZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8TGVmdCwgUmlnaHQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0LCB0eXBlbmFtZSBMZWZ0VGFnID0gdHlwZW5hbWUgdGFnPExlZnQ+Ojp0eXBlLCB0eXBlbmFtZSBSaWdodFRhZyA9IHR5cGVuYW1lIHRhZzxSaWdodD46OnR5cGU+CisgICAgICAgIHN0cnVjdCBvdXRlcl9wcm9kdWN0CisgICAgICAgICAgOiBvdXRlcl9wcm9kdWN0X2Jhc2U8TGVmdCwgUmlnaHQsIHZvaWQ+CisgICAgICAgIHt9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnQsIHR5cGVuYW1lIFJpZ2h0PgorICAgICAgICBzdHJ1Y3Qgb3V0ZXJfcHJvZHVjdDxMZWZ0LCBSaWdodCwgc3RkX3ZlY3Rvcl90YWcsIHN0ZF92ZWN0b3JfdGFnPgorICAgICAgICAgIDogc3RkOjpiaW5hcnlfZnVuY3Rpb248CisgICAgICAgICAgICAgICAgTGVmdAorICAgICAgICAgICAgICAsIFJpZ2h0CisgICAgICAgICAgICAgICwgdWJsYXM6Om1hdHJpeDwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgZnVuY3Rpb25hbDo6bXVsdGlwbGllczwKKyAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIExlZnQ6OnZhbHVlX3R5cGUKKyAgICAgICAgICAgICAgICAgICAgICAsIHR5cGVuYW1lIFJpZ2h0Ojp2YWx1ZV90eXBlCisgICAgICAgICAgICAgICAgICAgID46OnJlc3VsdF90eXBlCisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgPgorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdWJsYXM6Om1hdHJpeDwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgZnVuY3Rpb25hbDo6bXVsdGlwbGllczwKKyAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIExlZnQ6OnZhbHVlX3R5cGUKKyAgICAgICAgICAgICAgICAgICAgICAsIHR5cGVuYW1lIFJpZ2h0Ojp2YWx1ZV90eXBlCisgICAgICAgICAgICAgICAgICAgID46OnJlc3VsdF90eXBlCisgICAgICAgICAgICAgICAgPgorICAgICAgICAgICAgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgIHJlc3VsdF90eXBlCisgICAgICAgICAgICBvcGVyYXRvciAoKShMZWZ0ICYgbGVmdCwgUmlnaHQgJiByaWdodCkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBsZWZ0X3NpemUgPSBsZWZ0LnNpemUoKTsKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCByaWdodF9zaXplID0gcmlnaHQuc2l6ZSgpOworICAgICAgICAgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChsZWZ0X3NpemUsIHJpZ2h0X3NpemUpOworICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDA7IGkgPCBsZWZ0X3NpemU7ICsraSkKKyAgICAgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBqID0gMDsgaiA8IHJpZ2h0X3NpemU7ICsraikKKyAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdChpLGopID0gbnVtZXJpYzo6bXVsdGlwbGllcyhsZWZ0W2ldLCByaWdodFtqXSk7CisgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICB9CisKKyAgICBuYW1lc3BhY2Ugb3AKKyAgICB7CisgICAgICAgIHN0cnVjdCBvdXRlcl9wcm9kdWN0CisgICAgICAgICAgOiBib29zdDo6ZGV0YWlsOjpmdW5jdGlvbjI8ZnVuY3Rpb25hbDo6b3V0ZXJfcHJvZHVjdDxfMSwgXzIsIGZ1bmN0aW9uYWw6OnRhZzxfMT4sIGZ1bmN0aW9uYWw6OnRhZzxfMj4gPiA+CisgICAgICAgIHt9OworICAgIH0KKworICAgIG5hbWVzcGFjZQorICAgIHsKKyAgICAgICAgb3A6Om91dGVyX3Byb2R1Y3QgY29uc3QgJm91dGVyX3Byb2R1Y3QgPSBib29zdDo6ZGV0YWlsOjpwb2Rfc2luZ2xldG9uPG9wOjpvdXRlcl9wcm9kdWN0Pjo6aW5zdGFuY2U7CisgICAgfQorCit9fQorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGNvdmFyaWFuY2VfaW1wbAorICAgIC8vCisgICAgLyoqCisgICAgICAgIEBicmllZiBDb3ZhcmlhbmNlIEVzdGltYXRvcgorCisgICAgICAgIEFuIGl0ZXJhdGl2ZSBNb250ZSBDYXJsbyBlc3RpbWF0b3IgZm9yIHRoZSBjb3ZhcmlhbmNlIFxmJFxtYXRocm17Q292fShYLFgnKVxmJCwgd2hlcmUgXGYkWFxmJCBpcyBhIHNhbXBsZQorICAgICAgICBhbmQgXGYkWCdcZiQgaXMgYSB2YXJpYXRlLCBpcyBnaXZlbiBieToKKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFxoYXR7Y31fbiA9IFxmcmFje24tMX17bn0gXGhhdHtjfV97bi0xfSArIFxmcmFjezF9e24tMX0oWF9uIC0gXGhhdHtcbXV9X24pKFhfbicgLSBcaGF0e1xtdX1fbicpLFxxdWFkIG5cZ2UyLFxxdWFkXGhhdHtjfV8xID0gMCwKKyAgICAgICAgXGZdCisKKyAgICAgICAgXGYkXGhhdHtcbXV9X25cZiQgYW5kIFxmJFxoYXR7XG11fV9uJ1xmJCBiZWluZyB0aGUgbWVhbnMgb2YgdGhlIHNhbXBsZXMgYW5kIHZhcmlhdGVzLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgY292YXJpYW5jZV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgc2FtcGxlX3R5cGU7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxWYXJpYXRlVHlwZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSB2YXJpYXRlX3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6b3V0ZXJfcHJvZHVjdDxzYW1wbGVfdHlwZSwgdmFyaWF0ZV90eXBlPjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgY292YXJpYW5jZV9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBjb3ZfKAorICAgICAgICAgICAgICAgIG51bWVyaWM6Om91dGVyX3Byb2R1Y3QoCisgICAgICAgICAgICAgICAgICAgIG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKQorICAgICAgICAgICAgICAgICAgLCBudW1lcmljOjpmZGl2KGFyZ3NbcGFyYW1ldGVyOjprZXl3b3JkPFZhcmlhdGVUYWc+OjpnZXQoKSB8IFZhcmlhdGVUeXBlKCldLCAoc3RkOjpzaXplX3QpMSkKKyAgICAgICAgICAgICAgICApCisgICAgICAgICAgICApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisKKyAgICAgICAgICAgIGlmIChjbnQgPiAxKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGV4dHJhY3Rvcjx0YWc6Om1lYW5fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4gY29uc3Qgc29tZV9tZWFuX29mX3ZhcmlhdGVzID0ge307CisKKyAgICAgICAgICAgICAgICB0aGlzLT5jb3ZfID0gdGhpcy0+Y292XyooY250LTEuKS9jbnQKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbnVtZXJpYzo6b3V0ZXJfcHJvZHVjdCgKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvbWVfbWVhbl9vZl92YXJpYXRlcyhhcmdzKSAtIGFyZ3NbcGFyYW1ldGVyOjprZXl3b3JkPFZhcmlhdGVUYWc+OjpnZXQoKV0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIG1lYW4oYXJncykgLSBhcmdzW3NhbXBsZV0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAvIChjbnQtMS4pOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmNvdl87CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHJlc3VsdF90eXBlIGNvdl87CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmNvdmFyaWFuY2UKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IGNvdmFyaWFuY2UKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgbWVhbiwgbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmNvdmFyaWFuY2VfaW1wbDxtcGw6Ol8xLCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gaW1wbDsKKyAgICB9OworCisgICAgc3RydWN0IGFic3RyYWN0X2NvdmFyaWFuY2UKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OmNvdmFyaWFuY2UKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X2NvdmFyaWFuY2U+IGNvbnN0IGNvdmFyaWFuY2UgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGNvdmFyaWFuY2UpCit9CisKK3VzaW5nIGV4dHJhY3Q6OmNvdmFyaWFuY2U7CisKK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpjb3ZhcmlhbmNlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X2NvdmFyaWFuY2U+Cit7Cit9OworCisvLyBTbyB0aGF0IGNvdmFyaWFuY2UgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfY292YXJpYW5jZSB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmNvdmFyaWFuY2U8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfY292YXJpYW5jZTxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9jb3ZhcmlhbmNlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmNvdmFyaWFuY2U8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KK3t9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9kZW5zaXR5LmhwcApAQCAtMCwwICsxLDI1MCBAQAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBkZW5zaXR5LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBEYW5pZWwgRWdsb2ZmLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0RFTlNJVFlfSFBQX0RFXzAxXzAxXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfREVOU0lUWV9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2FjY3VtdWxhdG9yc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbWF4LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9taW4uaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGNhY2hlX3NpemUgYW5kIG51bV9iaW5zIG5hbWVkIHBhcmFtZXRlcnMKKy8vCitCT09TVF9QQVJBTUVURVJfTkVTVEVEX0tFWVdPUkQodGFnLCBkZW5zaXR5X2NhY2hlX3NpemUsIGNhY2hlX3NpemUpCitCT09TVF9QQVJBTUVURVJfTkVTVEVEX0tFWVdPUkQodGFnLCBkZW5zaXR5X251bV9iaW5zLCBudW1fYmlucykKKworQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoZGVuc2l0eV9jYWNoZV9zaXplKQorQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoZGVuc2l0eV9udW1fYmlucykKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZGVuc2l0eV9pbXBsCisgICAgLy8gIGRlbnNpdHkgaGlzdG9ncmFtCisgICAgLyoqCisgICAgICAgIEBicmllZiBIaXN0b2dyYW0gZGVuc2l0eSBlc3RpbWF0b3IKKworICAgICAgICBUaGUgaGlzdG9ncmFtIGRlbnNpdHkgZXN0aW1hdG9yIHJldHVybnMgYSBoaXN0b2dyYW0gb2YgdGhlIHNhbXBsZSBkaXN0cmlidXRpb24uIFRoZSBwb3NpdGlvbnMgYW5kIHNpemVzIG9mIHRoZSBiaW5zCisgICAgICAgIGFyZSBkZXRlcm1pbmVkIHVzaW5nIGEgc3BlY2lmaWFibGUgbnVtYmVyIG9mIGNhY2hlZCBzYW1wbGVzIChjYWNoZV9zaXplKS4gVGhlIHJhbmdlIGJldHdlZW4gdGhlIG1pbmltdW0gYW5kIHRoZQorICAgICAgICBtYXhpbXVtIG9mIHRoZSBjYWNoZWQgc2FtcGxlcyBpcyBzdWJkaXZpZGVkIGludG8gYSBzcGVjaWZpYWJsZSBudW1iZXIgb2YgYmlucyAobnVtX2JpbnMpIG9mIHNhbWUgc2l6ZS4gQWRkaXRpb25hbGx5LAorICAgICAgICBhbiB1bmRlci0gYW5kIGFuIG92ZXJmbG93IGJpbiBpcyBhZGRlZCB0byBjYXB0dXJlIGZ1dHVyZSB1bmRlci0gYW5kIG92ZXJmbG93IHNhbXBsZXMuIE9uY2UgdGhlIGJpbnMgYXJlIGRldGVybWluZWQsCisgICAgICAgIHRoZSBjYWNoZWQgc2FtcGxlcyBhbmQgYWxsIHN1YnNlcXVlbnQgc2FtcGxlcyBhcmUgYWRkZWQgdG8gdGhlIGNvcnJlY3QgYmlucy4gQXQgdGhlIGVuZCwgYSByYW5nZSBvZiBzdGQ6OnBhaXIgaXMKKyAgICAgICAgcmV0dXJuLCB3aGVyZSBlYWNoIHBhaXIgY29udGFpbnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBiaW4gKGxvd2VyIGJvdW5kKSBhbmQgdGhlIHNhbXBsZXMgY291bnQgKG5vcm1hbGl6ZWQgd2l0aCB0aGUKKyAgICAgICAgdG90YWwgbnVtYmVyIG9mIHNhbXBsZXMpLgorCisgICAgICAgIEBwYXJhbSAgZGVuc2l0eV9jYWNoZV9zaXplIE51bWJlciBvZiBmaXJzdCBzYW1wbGVzIHVzZWQgdG8gZGV0ZXJtaW5lIG1pbiBhbmQgbWF4LgorICAgICAgICBAcGFyYW0gIGRlbnNpdHlfbnVtX2JpbnMgTnVtYmVyIG9mIGJpbnMgKHR3byBhZGRpdGlvbmFsIGJpbnMgY29sbGVjdCB1bmRlci0gYW5kIG92ZXJmbG93IHNhbXBsZXMpLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBkZW5zaXR5X2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxmbG9hdF90eXBlLCBmbG9hdF90eXBlPiA+IGhpc3RvZ3JhbV90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGZsb2F0X3R5cGU+IGFycmF5X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8dHlwZW5hbWUgaGlzdG9ncmFtX3R5cGU6Oml0ZXJhdG9yPiByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBkZW5zaXR5X2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICAgIDogY2FjaGVfc2l6ZShhcmdzW2RlbnNpdHlfY2FjaGVfc2l6ZV0pCisgICAgICAgICAgICAsIGNhY2hlKGNhY2hlX3NpemUpCisgICAgICAgICAgICAsIG51bV9iaW5zKGFyZ3NbZGVuc2l0eV9udW1fYmluc10pCisgICAgICAgICAgICAsIHNhbXBsZXNfaW5fYmluKG51bV9iaW5zICsgMiwgMC4pCisgICAgICAgICAgICAsIGJpbl9wb3NpdGlvbnMobnVtX2JpbnMgKyAyKQorICAgICAgICAgICAgLCBoaXN0b2dyYW0oCisgICAgICAgICAgICAgICAgbnVtX2JpbnMgKyAyCisgICAgICAgICAgICAgICwgc3RkOjptYWtlX3BhaXIoCisgICAgICAgICAgICAgICAgICAgIG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sKHN0ZDo6c2l6ZV90KTEpCisgICAgICAgICAgICAgICAgICAsIG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sKHN0ZDo6c2l6ZV90KTEpCisgICAgICAgICAgICAgICAgKQorICAgICAgICAgICAgICApCisgICAgICAgICAgICAsIGlzX2RpcnR5KHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgdGhpcy0+aXNfZGlydHkgPSB0cnVlOworCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgLy8gRmlsbCB1cCBjYWNoZSB3aXRoIGNhY2hlX3NpemUgZmlyc3Qgc2FtcGxlcworICAgICAgICAgICAgaWYgKGNudCA8PSB0aGlzLT5jYWNoZV9zaXplKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmNhY2hlW2NudCAtIDFdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICAvLyBPbmNlIGNhY2hlX3NpemUgc2FtcGxlcyBoYXZlIGJlZW4gYWNjdW11bGF0ZWQsIGNyZWF0ZSBudW1fYmlucyBiaW5zIG9mIHNhbWUgc2l6ZSBiZXR3ZWVuCisgICAgICAgICAgICAvLyB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBvZiB0aGUgY2FjaGVkIHNhbXBsZXMgYXMgd2VsbCBhcyB1bmRlciBhbmQgb3ZlcmZsb3cgYmlucy4KKyAgICAgICAgICAgIC8vIFN0b3JlIHRoZWlyIGxvd2VyIGJvdW5kcyAoYmluX3Bvc2l0aW9ucykgYW5kIGZpbGwgdGhlIGJpbnMgd2l0aCB0aGUgY2FjaGVkIHNhbXBsZXMgKHNhbXBsZXNfaW5fYmluKS4KKyAgICAgICAgICAgIGlmIChjbnQgPT0gdGhpcy0+Y2FjaGVfc2l6ZSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIG1pbmltdW0gPSBudW1lcmljOjpmZGl2KChtaW4pKGFyZ3MpLCAoc3RkOjpzaXplX3QpMSk7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBtYXhpbXVtID0gbnVtZXJpYzo6ZmRpdigobWF4KShhcmdzKSwgKHN0ZDo6c2l6ZV90KTEpOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYmluX3NpemUgPSBudW1lcmljOjpmZGl2KG1heGltdW0gLSBtaW5pbXVtLCB0aGlzLT5udW1fYmlucyApOworCisgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGJpbiBwb3NpdGlvbnMgKHRoZWlyIGxvd2VyIGJvdW5kcykKKyAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgdGhpcy0+bnVtX2JpbnMgKyAyOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5iaW5fcG9zaXRpb25zW2ldID0gbWluaW11bSArIChpIC0gMS4pICogYmluX3NpemU7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgZm9yICh0eXBlbmFtZSBhcnJheV90eXBlOjpjb25zdF9pdGVyYXRvciBpdGVyID0gdGhpcy0+Y2FjaGUuYmVnaW4oKTsgaXRlciAhPSB0aGlzLT5jYWNoZS5lbmQoKTsgKytpdGVyKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKCppdGVyIDwgdGhpcy0+YmluX3Bvc2l0aW9uc1sxXSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgKysodGhpcy0+c2FtcGxlc19pbl9iaW5bMF0pOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCppdGVyID49IHRoaXMtPmJpbl9wb3NpdGlvbnNbdGhpcy0+bnVtX2JpbnMgKyAxXSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgKysodGhpcy0+c2FtcGxlc19pbl9iaW5bdGhpcy0+bnVtX2JpbnMgKyAxXSk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBhcnJheV90eXBlOjppdGVyYXRvciBpdCA9IHN0ZDo6dXBwZXJfYm91bmQoCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+YmluX3Bvc2l0aW9ucy5iZWdpbigpCisgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+YmluX3Bvc2l0aW9ucy5lbmQoKQorICAgICAgICAgICAgICAgICAgICAgICAgICAsICppdGVyCisgICAgICAgICAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBkID0gc3RkOjpkaXN0YW5jZSh0aGlzLT5iaW5fcG9zaXRpb25zLmJlZ2luKCksIGl0KTsKKyAgICAgICAgICAgICAgICAgICAgICAgICsrKHRoaXMtPnNhbXBsZXNfaW5fYmluW2QgLSAxXSk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgICAgICAvLyBBZGQgZWFjaCBzdWJzZXF1ZW50IHNhbXBsZSB0byB0aGUgY29ycmVjdCBiaW4KKyAgICAgICAgICAgIGVsc2UgaWYgKGNudCA+IHRoaXMtPmNhY2hlX3NpemUpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYgKGFyZ3Nbc2FtcGxlXSA8IHRoaXMtPmJpbl9wb3NpdGlvbnNbMV0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICArKyh0aGlzLT5zYW1wbGVzX2luX2JpblswXSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3Nbc2FtcGxlXSA+PSB0aGlzLT5iaW5fcG9zaXRpb25zW3RoaXMtPm51bV9iaW5zICsgMV0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICArKyh0aGlzLT5zYW1wbGVzX2luX2Jpblt0aGlzLT5udW1fYmlucyArIDFdKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXQgPSBzdGQ6OnVwcGVyX2JvdW5kKAorICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+YmluX3Bvc2l0aW9ucy5iZWdpbigpCisgICAgICAgICAgICAgICAgICAgICAgLCB0aGlzLT5iaW5fcG9zaXRpb25zLmVuZCgpCisgICAgICAgICAgICAgICAgICAgICAgLCBhcmdzW3NhbXBsZV0KKyAgICAgICAgICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBkID0gc3RkOjpkaXN0YW5jZSh0aGlzLT5iaW5fcG9zaXRpb25zLmJlZ2luKCksIGl0KTsKKyAgICAgICAgICAgICAgICAgICAgKysodGhpcy0+c2FtcGxlc19pbl9iaW5bZCAtIDFdKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH0KKworICAgICAgICAvKioKKyAgICAgICAgICAgIEBwcmUgVGhlIG51bWJlciBvZiBzYW1wbGVzIG11c3QgbWVldCBvciBleGNlZWQgdGhlIGNhY2hlIHNpemUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IGZhbHNlOworCisgICAgICAgICAgICAgICAgLy8gY3JlYXRlcyBhIHZlY3RvciBvZiBzdGQ6OnBhaXIgd2hlcmUgZWFjaCBwYWlyIGkgaG9sZHMKKyAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWVzIGJpbl9wb3NpdGlvbnNbaV0gKHgtYXhpcyBvZiBoaXN0b2dyYW0pIGFuZAorICAgICAgICAgICAgICAgIC8vIHNhbXBsZXNfaW5fYmluW2ldIC8gY250ICh5LWF4aXMgb2YgaGlzdG9ncmFtKS4KKworICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDA7IGkgPCB0aGlzLT5udW1fYmlucyArIDI7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhpc3RvZ3JhbVtpXSA9IHN0ZDo6bWFrZV9wYWlyKHRoaXMtPmJpbl9wb3NpdGlvbnNbaV0sIG51bWVyaWM6OmZkaXYodGhpcy0+c2FtcGxlc19pbl9iaW5baV0sIGNvdW50KGFyZ3MpKSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICAgICAgLy8gcmV0dXJucyBhIHJhbmdlIG9mIHBhaXJzCisgICAgICAgICAgICByZXR1cm4gbWFrZV9pdGVyYXRvcl9yYW5nZSh0aGlzLT5oaXN0b2dyYW0pOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBzdGQ6OnNpemVfdCAgICAgICAgICAgIGNhY2hlX3NpemU7ICAgICAgLy8gbnVtYmVyIG9mIGNhY2hlZCBzYW1wbGVzCisgICAgICAgIGFycmF5X3R5cGUgICAgICAgICAgICAgY2FjaGU7ICAgICAgICAgICAvLyBjYWNoZSB0byBzdG9yZSB0aGUgZmlyc3QgY2FjaGVfc2l6ZSBzYW1wbGVzCisgICAgICAgIHN0ZDo6c2l6ZV90ICAgICAgICAgICAgbnVtX2JpbnM7ICAgICAgICAvLyBudW1iZXIgb2YgYmlucworICAgICAgICBhcnJheV90eXBlICAgICAgICAgICAgIHNhbXBsZXNfaW5fYmluOyAgLy8gbnVtYmVyIG9mIHNhbXBsZXMgaW4gZWFjaCBiaW4KKyAgICAgICAgYXJyYXlfdHlwZSAgICAgICAgICAgICBiaW5fcG9zaXRpb25zOyAgIC8vIGxvd2VyIGJvdW5kcyBvZiBiaW5zCisgICAgICAgIG11dGFibGUgaGlzdG9ncmFtX3R5cGUgaGlzdG9ncmFtOyAgICAgICAvLyBoaXN0b2dyYW0KKyAgICAgICAgbXV0YWJsZSBib29sIGlzX2RpcnR5OworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpkZW5zaXR5CisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBkZW5zaXR5CisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIG1pbiwgbWF4PgorICAgICAgLCBkZW5zaXR5X2NhY2hlX3NpemUKKyAgICAgICwgZGVuc2l0eV9udW1fYmlucworICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpkZW5zaXR5X2ltcGw8bXBsOjpfMT4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICAvLy8gdGFnOjpkZW5zaXR5OjpjYWNoZV9zaXplIG5hbWVkIHBhcmFtZXRlcgorICAgICAgICAvLy8gdGFnOjpkZW5zaXR5OjpudW1fYmlucyBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgc3RhdGljIGJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8ZGVuc2l0eV9jYWNoZV9zaXplPiBjb25zdCBjYWNoZV9zaXplOworICAgICAgICBzdGF0aWMgYm9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDxkZW5zaXR5X251bV9iaW5zPiBjb25zdCBudW1fYmluczsKKyAgICAgICAgI2VuZGlmCisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6ZGVuc2l0eQorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6ZGVuc2l0eT4gY29uc3QgZGVuc2l0eSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoZGVuc2l0eSkKK30KKwordXNpbmcgZXh0cmFjdDo6ZGVuc2l0eTsKKworLy8gU28gdGhhdCBkZW5zaXR5IGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkCisvLyB3aXRoIHdlaWdodGVkX2RlbnNpdHkgd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZC4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6ZGVuc2l0eT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfZGVuc2l0eSB0eXBlOworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9kZW5zaXR5PgorICA6IGZlYXR1cmVfb2Y8dGFnOjpkZW5zaXR5PgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXJyb3Jfb2YuaHBwCkBAIC0wLDAgKzEsOTkgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGVycm9yX29mLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0VSUk9SX09GX0hQUF9FQU5fMjlfMTFfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19FUlJPUl9PRl9IUFBfRUFOXzI5XzExXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgdGhpc19mZWF0dXJlX2hhc19ub19lcnJvcl9jYWxjdWxhdGlvbgorICAgICAgOiBtcGw6OmZhbHNlXworICAgIHsKKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGVycm9yX29mX2ltcGwKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgRmVhdHVyZT4KKyAgICBzdHJ1Y3QgZXJyb3Jfb2ZfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBUT0RPOiBzcGVjaWFsaXplIHRoaXMgb24gdGhlIHNwZWNpZmljIGZlYXR1cmVzIHRoYXQgaGF2ZSBlcnJvcnMgd2UncmUKKyAgICAgICAgLy8gaW50ZXJlc3RlZCBpbi4KKyAgICAgICAgQk9PU1RfTVBMX0FTU0VSVCgodGhpc19mZWF0dXJlX2hhc19ub19lcnJvcl9jYWxjdWxhdGlvbjxGZWF0dXJlPikpOworCisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgaW50IHJlc3VsdF90eXBlOworCisgICAgICAgIGVycm9yX29mX2ltcGwoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gMDsKKyAgICAgICAgfQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjplcnJvcl9vZgorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBlcnJvcl9vZgorICAgICAgOiBkZXBlbmRzX29uPEZlYXR1cmU+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmVycm9yX29mX2ltcGw8bXBsOjpfMSwgRmVhdHVyZT4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0OjplcnJvcl9vZgorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCBlcnJvcl9vZiwgKHR5cGVuYW1lKSkKK30KKwordXNpbmcgZXh0cmFjdDo6ZXJyb3Jfb2Y7CisKKy8vIG1ha2UgdGFnOjplcnJvcl9vZjx0YWc6OmZlYXR1cmUobW9kaWZpZXIpPiB3b3JrCit0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjplcnJvcl9vZjxGZWF0dXJlPiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OmVycm9yX29mPHR5cGVuYW1lIGFzX2ZlYXR1cmU8RmVhdHVyZT46OnR5cGU+IHR5cGU7Cit9OworCisvLyBtYWtlIGVycm9yX29mPHRhZzo6bWVhbj4gd29yayB3aXRoIG5vbi12b2lkIHdlaWdodHMgKHNob3VsZCBiZWNvbWUKKy8vIGVycm9yX29mPHRhZzo6d2VpZ2h0ZWRfbWVhbj4KK3RlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmVycm9yX29mPEZlYXR1cmU+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6ZXJyb3Jfb2Y8dHlwZW5hbWUgYXNfd2VpZ2h0ZWRfZmVhdHVyZTxGZWF0dXJlPjo6dHlwZT4gdHlwZTsKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2Vycm9yX29mX21lYW4uaHBwCkBAIC0wLDAgKzEsNzMgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGVycm9yX29mLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0VSUk9SX09GX01FQU5fSFBQX0VBTl8yN18wM18yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0VSUk9SX09GX01FQU5fSFBQX0VBTl8yN18wM18yMDA2CisKKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXJyb3Jfb2YuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3ZhcmlhbmNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZXJyb3Jfb2ZfbWVhbl9pbXBsCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBWYXJpYW5jZT4KKyAgICBzdHJ1Y3QgZXJyb3Jfb2ZfbWVhbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgZXJyb3Jfb2ZfbWVhbl9pbXBsKGRvbnRfY2FyZSkge30KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgdXNpbmcgbmFtZXNwYWNlIHN0ZDsKKyAgICAgICAgICAgIGV4dHJhY3RvcjxWYXJpYW5jZT4gY29uc3QgdmFyaWFuY2UgPSB7fTsKKyAgICAgICAgICAgIHJldHVybiBzcXJ0KG51bWVyaWM6OmZkaXYodmFyaWFuY2UoYXJncyksIGNvdW50KGFyZ3MpIC0gMSkpOworICAgICAgICB9CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmVycm9yX29mCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPD4KKyAgICBzdHJ1Y3QgZXJyb3Jfb2Y8bWVhbj4KKyAgICAgIDogZGVwZW5kc19vbjxsYXp5X3ZhcmlhbmNlLCBjb3VudD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6ZXJyb3Jfb2ZfbWVhbl9pbXBsPG1wbDo6XzEsIGxhenlfdmFyaWFuY2U+IGltcGw7CisgICAgfTsKKworICAgIHRlbXBsYXRlPD4KKyAgICBzdHJ1Y3QgZXJyb3Jfb2Y8aW1tZWRpYXRlX21lYW4+CisgICAgICA6IGRlcGVuZHNfb248dmFyaWFuY2UsIGNvdW50PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjplcnJvcl9vZl9tZWFuX2ltcGw8bXBsOjpfMSwgdmFyaWFuY2U+IGltcGw7CisgICAgfTsKK30KKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXh0ZW5kZWRfcF9zcXVhcmUuaHBwCkBAIC0wLDAgKzEsMjk1IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRlbmRlZF9wX3NxdWFyZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRGFuaWVsIEVnbG9mZi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfRVhURU5ERURfU0lOR0xFX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX0VYVEVOREVEX1NJTkdMRV9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3RyYW5zZm9ybV9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvY291bnRpbmdfaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3Blcm11dGF0aW9uX2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2FjY3VtdWxhdG9yc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RpbWVzMl9pdGVyYXRvci5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHByb2JhYmlsaXRpZXMgbmFtZWQgcGFyYW1ldGVyCisvLworQk9PU1RfUEFSQU1FVEVSX05FU1RFRF9LRVlXT1JEKHRhZywgZXh0ZW5kZWRfcF9zcXVhcmVfcHJvYmFiaWxpdGllcywgcHJvYmFiaWxpdGllcykKKworQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoZXh0ZW5kZWRfcF9zcXVhcmVfcHJvYmFiaWxpdGllcykKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZXh0ZW5kZWRfcF9zcXVhcmVfaW1wbAorICAgIC8vICBtdWx0aXBsZSBxdWFudGlsZSBlc3RpbWF0aW9uCisgICAgLyoqCisgICAgICAgIEBicmllZiBNdWx0aXBsZSBxdWFudGlsZSBlc3RpbWF0aW9uIHdpdGggdGhlIGV4dGVuZGVkIFxmJFBeMlxmJCBhbGdvcml0aG0KKworICAgICAgICBFeHRlbmRlZCBcZiRQXjJcZiQgYWxnb3JpdGhtIGZvciBlc3RpbWF0aW9uIG9mIHNldmVyYWwgcXVhbnRpbGVzIHdpdGhvdXQgc3RvcmluZyBzYW1wbGVzLgorICAgICAgICBBc3N1bWUgdGhhdCBcZiRtXGYkIHF1YW50aWxlcyBcZiRceGlfe3BfMX0sIFxsZG90cywgXHhpX3twX219XGYkIGFyZSB0byBiZSBlc3RpbWF0ZWQuCisgICAgICAgIEluc3RlYWQgb2Ygc3RvcmluZyB0aGUgd2hvbGUgc2FtcGxlIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uLCB0aGUgYWxnb3JpdGhtIG1haW50YWlucyBvbmx5CisgICAgICAgIFxmJG0rMlxmJCBwcmluY2lwYWwgbWFya2VycyBhbmQgXGYkbSsxXGYkIG1pZGRsZSBtYXJrZXJzLCB3aG9zZSBwb3NpdGlvbnMgYXJlIHVwZGF0ZWQKKyAgICAgICAgd2l0aCBlYWNoIHNhbXBsZSBhbmQgd2hvc2UgaGVpZ2h0cyBhcmUgYWRqdXN0ZWQgKGlmIG5lY2Vzc2FyeSkgdXNpbmcgYSBwaWVjZXdpc2UtcGFyYWJsaWMKKyAgICAgICAgZm9ybXVsYS4gVGhlIGhlaWdodHMgb2YgdGhlc2UgY2VudHJhbCBtYXJrZXJzIGFyZSB0aGUgY3VycmVudCBlc3RpbWF0ZXMgb2YgdGhlIHF1YW50aWxlcworICAgICAgICBhbmQgcmV0dXJuZWQgYXMgYW4gaXRlcmF0b3IgcmFuZ2UuCisKKyAgICAgICAgRm9yIGZ1cnRoZXIgZGV0YWlscywgc2VlCisKKyAgICAgICAgSy4gRS4gRS4gUmFhdGlrYWluZW4sIFNpbXVsdGFuZW91cyBlc3RpbWF0aW9uIG9mIHNldmVyYWwgcXVhbnRpbGVzLCBTaW11bGF0aW9uLCBWb2x1bWUgNDksCisgICAgICAgIE51bWJlciA0IChPY3RvYmVyKSwgMTk4NiwgcC4gMTU5LTE2NC4KKworICAgICAgICBUaGUgZXh0ZW5kZWQgXGYkIFBeMiBcZiQgYWxnb3JpdGhtIGdlbmVyYWxpemVzIHRoZSBcZiQgUF4yIFxmJCBhbGdvcml0aG0gb2YKKworICAgICAgICBSLiBKYWluIGFuZCBJLiBDaGxhbXRhYywgVGhlIFBeMiBhbGdvcml0aG0gZm9yIGR5bmFtaWMgY2FsY3VsYXRpb24gb2YgcXVhbnRpbGVzIGFuZAorICAgICAgICBoaXN0b2dyYW1zIHdpdGhvdXQgc3RvcmluZyBvYnNlcnZhdGlvbnMsIENvbW11bmljYXRpb25zIG9mIHRoZSBBQ00sCisgICAgICAgIFZvbHVtZSAyOCAoT2N0b2JlciksIE51bWJlciAxMCwgMTk4NSwgcC4gMTA3Ni0xMDg1LgorCisgICAgICAgIEBwYXJhbSBleHRlbmRlZF9wX3NxdWFyZV9wcm9iYWJpbGl0aWVzIEEgdmVjdG9yIG9mIHF1YW50aWxlIHByb2JhYmlsaXRpZXMuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IGV4dGVuZGVkX3Bfc3F1YXJlX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGZsb2F0X3R5cGU+IGFycmF5X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8CisgICAgICAgICAgICBkZXRhaWw6Omx2YWx1ZV9pbmRleF9pdGVyYXRvcjwKKyAgICAgICAgICAgICAgICBwZXJtdXRhdGlvbl9pdGVyYXRvcjwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgYXJyYXlfdHlwZTo6Y29uc3RfaXRlcmF0b3IKKyAgICAgICAgICAgICAgICAgICwgZGV0YWlsOjp0aW1lczJfaXRlcmF0b3IKKyAgICAgICAgICAgICAgICA+CisgICAgICAgICAgICA+CisgICAgICAgID4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgZXh0ZW5kZWRfcF9zcXVhcmVfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogcHJvYmFiaWxpdGllcygKKyAgICAgICAgICAgICAgICBib29zdDo6YmVnaW4oYXJnc1tleHRlbmRlZF9wX3NxdWFyZV9wcm9iYWJpbGl0aWVzXSkKKyAgICAgICAgICAgICAgLCBib29zdDo6ZW5kKGFyZ3NbZXh0ZW5kZWRfcF9zcXVhcmVfcHJvYmFiaWxpdGllc10pCisgICAgICAgICAgICApCisgICAgICAgICAgLCBoZWlnaHRzKDIgKiBwcm9iYWJpbGl0aWVzLnNpemUoKSArIDMpCisgICAgICAgICAgLCBhY3R1YWxfcG9zaXRpb25zKGhlaWdodHMuc2l6ZSgpKQorICAgICAgICAgICwgZGVzaXJlZF9wb3NpdGlvbnMoaGVpZ2h0cy5zaXplKCkpCisgICAgICAgICAgLCBwb3NpdGlvbnNfaW5jcmVtZW50cyhoZWlnaHRzLnNpemUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX3F1YW50aWxlcyA9IHRoaXMtPnByb2JhYmlsaXRpZXMuc2l6ZSgpOworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX21hcmtlcnMgPSB0aGlzLT5oZWlnaHRzLnNpemUoKTsKKworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbnVtX21hcmtlcnM7ICsraSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldID0gaSArIDE7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzWzBdID0gMC47CisgICAgICAgICAgICB0aGlzLT5wb3NpdGlvbnNfaW5jcmVtZW50c1tudW1fbWFya2VycyAtIDFdID0gMS47CisKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMDsgaSA8IG51bV9xdWFudGlsZXM7ICsraSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5wb3NpdGlvbnNfaW5jcmVtZW50c1syICogaSArIDJdID0gcHJvYmFiaWxpdGllc1tpXTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDw9IG51bV9xdWFudGlsZXM7ICsraSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5wb3NpdGlvbnNfaW5jcmVtZW50c1syICogaSArIDFdID0KKyAgICAgICAgICAgICAgICAgICAgMC41ICogKHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzWzIgKiBpXSArIHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzWzIgKiBpICsgMl0pOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IDA7IGkgPCBudW1fbWFya2VyczsgKytpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldID0gMS4gKyAyLiAqIChudW1fcXVhbnRpbGVzICsgMS4pICogdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbaV07CisgICAgICAgICAgICB9CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworCisgICAgICAgICAgICAvLyBtKzIgcHJpbmNpcGFsIG1hcmtlcnMgYW5kIG0rMSBtaWRkbGUgbWFya2VycworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX21hcmtlcnMgPSAyICogdGhpcy0+cHJvYmFiaWxpdGllcy5zaXplKCkgKyAzOworCisgICAgICAgICAgICAvLyBmaXJzdCBhY2N1bXVsYXRlIG51bV9tYXJrZXJzIHNhbXBsZXMKKyAgICAgICAgICAgIGlmKGNudCA8PSBudW1fbWFya2VycykKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2NudCAtIDFdID0gYXJnc1tzYW1wbGVdOworCisgICAgICAgICAgICAgICAgLy8gY29tcGxldGUgdGhlIGluaXRpYWxpemF0aW9uIG9mIGhlaWdodHMgYnkgc29ydGluZworICAgICAgICAgICAgICAgIGlmKGNudCA9PSBudW1fbWFya2VycykKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHN0ZDo6c29ydCh0aGlzLT5oZWlnaHRzLmJlZ2luKCksIHRoaXMtPmhlaWdodHMuZW5kKCkpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBzYW1wbGVfY2VsbCA9IDE7CisKKyAgICAgICAgICAgICAgICAvLyBmaW5kIGNlbGwgayA9IHNhbXBsZV9jZWxsIHN1Y2ggdGhhdCBoZWlnaHRzW2stMV0gPD0gc2FtcGxlIDwgaGVpZ2h0c1trXQorICAgICAgICAgICAgICAgIGlmKGFyZ3Nbc2FtcGxlXSA8IHRoaXMtPmhlaWdodHNbMF0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzWzBdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgICAgICBzYW1wbGVfY2VsbCA9IDE7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UgaWYoYXJnc1tzYW1wbGVdID49IHRoaXMtPmhlaWdodHNbbnVtX21hcmtlcnMgLSAxXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbbnVtX21hcmtlcnMgLSAxXSA9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSBudW1fbWFya2VycyAtIDE7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXRlcmF0b3I7CisgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yIGl0ID0gc3RkOjp1cHBlcl9ib3VuZCgKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHMuYmVnaW4oKQorICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+aGVpZ2h0cy5lbmQoKQorICAgICAgICAgICAgICAgICAgICAgICwgYXJnc1tzYW1wbGVdCisgICAgICAgICAgICAgICAgICAgICk7CisKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBhY3R1YWwgcG9zaXRpb25zIG9mIGFsbCBtYXJrZXJzIGFib3ZlIHNhbXBsZV9jZWxsIGluZGV4CisgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSBzYW1wbGVfY2VsbDsgaSA8IG51bV9tYXJrZXJzOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICArK3RoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGRlc2lyZWQgcG9zaXRpb25zIG9mIGFsbCBtYXJrZXJzCisgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbnVtX21hcmtlcnM7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldICs9IHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzW2ldOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGFkanVzdCBoZWlnaHRzIGFuZCBhY3R1YWwgcG9zaXRpb25zIG9mIG1hcmtlcnMgMSB0byBudW1fbWFya2Vycy0yIGlmIG5lY2Vzc2FyeQorICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMTsgaSA8PSBudW1fbWFya2VycyAtIDI7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBkZXNpcmVkIHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZCA9IHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gbmV4dCBwb3NpdGlvbgorICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGRwID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpKzFdIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gcHJldmlvdXMgcG9zaXRpb24KKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBkbSA9IHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaS0xXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0IGRzCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaHAgPSAodGhpcy0+aGVpZ2h0c1tpKzFdIC0gdGhpcy0+aGVpZ2h0c1tpXSkgLyBkcDsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBobSA9ICh0aGlzLT5oZWlnaHRzW2ktMV0gLSB0aGlzLT5oZWlnaHRzW2ldKSAvIGRtOworCisgICAgICAgICAgICAgICAgICAgIGlmKChkID49IDEgJiYgZHAgPiAxKSB8fCAoZCA8PSAtMSAmJiBkbSA8IC0xKSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnQgc2lnbl9kID0gc3RhdGljX2Nhc3Q8c2hvcnQ+KGQgLyBzdGQ6OmFicyhkKSk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaCA9IHRoaXMtPmhlaWdodHNbaV0gKyBzaWduX2QgLyAoZHAgLSBkbSkgKiAoKHNpZ25fZCAtIGRtKSpocAorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGRwIC0gc2lnbl9kKSAqIGhtKTsKKworICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IGFkanVzdGluZyBoZWlnaHRzW2ldIHVzaW5nIHAtc3F1YXJlZCBmb3JtdWxhCisgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLT5oZWlnaHRzW2kgLSAxXSA8IGggJiYgaCA8IHRoaXMtPmhlaWdodHNbaSArIDFdKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gPSBoOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBsaW5lYXIgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGQgPiAwKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSArPSBocDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZCA8IDApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldIC09IGhtOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gc2lnbl9kOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgLy8gZm9yIGkgaW4gWzEscHJvYmFiaWxpdGllcy5zaXplKCldLCByZXR1cm4gaGVpZ2h0c1tpICogMl0KKyAgICAgICAgICAgIGRldGFpbDo6dGltZXMyX2l0ZXJhdG9yIGlkeF9iZWdpbiA9IGRldGFpbDo6bWFrZV90aW1lczJfaXRlcmF0b3IoMSk7CisgICAgICAgICAgICBkZXRhaWw6OnRpbWVzMl9pdGVyYXRvciBpZHhfZW5kID0gZGV0YWlsOjptYWtlX3RpbWVzMl9pdGVyYXRvcih0aGlzLT5wcm9iYWJpbGl0aWVzLnNpemUoKSArIDEpOworCisgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoCisgICAgICAgICAgICAgICAgbWFrZV9wZXJtdXRhdGlvbl9pdGVyYXRvcih0aGlzLT5oZWlnaHRzLmJlZ2luKCksIGlkeF9iZWdpbikKKyAgICAgICAgICAgICAgLCBtYWtlX3Blcm11dGF0aW9uX2l0ZXJhdG9yKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaWR4X2VuZCkKKyAgICAgICAgICAgICk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIGFycmF5X3R5cGUgcHJvYmFiaWxpdGllczsgICAgICAgICAvLyB0aGUgcXVhbnRpbGUgcHJvYmFiaWxpdGllcworICAgICAgICBhcnJheV90eXBlIGhlaWdodHM7ICAgICAgICAgICAgICAgLy8gcV9pCisgICAgICAgIGFycmF5X3R5cGUgYWN0dWFsX3Bvc2l0aW9uczsgICAgICAvLyBuX2kKKyAgICAgICAgYXJyYXlfdHlwZSBkZXNpcmVkX3Bvc2l0aW9uczsgICAgIC8vIGRfaQorICAgICAgICBhcnJheV90eXBlIHBvc2l0aW9uc19pbmNyZW1lbnRzOyAgLy8gZl9pCisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBleHRlbmRlZF9wX3NxdWFyZQorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgICAgLCBleHRlbmRlZF9wX3NxdWFyZV9wcm9iYWJpbGl0aWVzCisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6ZXh0ZW5kZWRfcF9zcXVhcmVfaW1wbDxtcGw6Ol8xPiBpbXBsOworCisgICAgICAgICNpZmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRE9YWUdFTl9JTlZPS0VECisgICAgICAgIC8vLyB0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlOjpwcm9iYWJpbGl0aWVzIG5hbWVkIHBhcmFtZXRlcgorICAgICAgICBzdGF0aWMgYm9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDx0YWc6OnByb2JhYmlsaXRpZXM+IGNvbnN0IHByb2JhYmlsaXRpZXM7CisgICAgICAgICNlbmRpZgorICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OmV4dGVuZGVkX3Bfc3F1YXJlCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpleHRlbmRlZF9wX3NxdWFyZT4gY29uc3QgZXh0ZW5kZWRfcF9zcXVhcmUgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGV4dGVuZGVkX3Bfc3F1YXJlKQorfQorCit1c2luZyBleHRyYWN0OjpleHRlbmRlZF9wX3NxdWFyZTsKKworLy8gU28gdGhhdCBleHRlbmRlZF9wX3NxdWFyZSBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZSB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZSB0eXBlOworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZT4KKyAgOiBmZWF0dXJlX29mPHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmU+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZS5ocHAKQEAgLTAsMCArMSwzMjAgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBEYW5pZWwgRWdsb2ZmLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19FWFRFTkRFRF9TSU5HTEVfUVVBTlRJTEVfSFBQX0RFXzAxXzAxXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfRVhURU5ERURfU0lOR0xFX1FVQU5USUxFX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxib29zdC90aHJvd19leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9pdGVyYXRvci90cmFuc2Zvcm1faXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL2NvdW50aW5nX2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9pdGVyYXRvci9wZXJtdXRhdGlvbl9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcGFyYW1ldGVycy9xdWFudGlsZV9wcm9iYWJpbGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXh0ZW5kZWRfcF9zcXVhcmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90aW1lczJfaXRlcmF0b3IuaHBwPgorCisjaWZkZWYgX01TQ19WRVIKKyMgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTogNDEyNykgLy8gY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBpcyBjb25zdGFudAorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbAorICAgIC8vICBzaW5nbGUgcXVhbnRpbGUgZXN0aW1hdGlvbgorICAgIC8qKgorICAgICAgICBAYnJpZWYgUXVhbnRpbGUgZXN0aW1hdGlvbiB1c2luZyB0aGUgZXh0ZW5kZWQgXGYkUF4yXGYkIGFsZ29yaXRobSBmb3Igd2VpZ2h0ZWQgYW5kIHVud2VpZ2h0ZWQgc2FtcGxlcworCisgICAgICAgIFVzZXMgdGhlIHF1YW50aWxlIGVzdGltYXRlcyBjYWxjdWxhdGVkIGJ5IHRoZSBleHRlbmRlZCBcZiRQXjJcZiQgYWxnb3JpdGhtIHRvIGNvbXB1dGUKKyAgICAgICAgaW50ZXJtZWRpYXRlIHF1YW50aWxlIGVzdGltYXRlcyBieSBtZWFucyBvZiBxdWFkcmF0aWMgaW50ZXJwb2xhdGlvbi4KKworICAgICAgICBAcGFyYW0gcXVhbnRpbGVfcHJvYmFiaWxpdHkgVGhlIHByb2JhYmlsaXR5IG9mIHRoZSBxdWFudGlsZSB0byBiZSBlc3RpbWF0ZWQuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIEltcGwxLCB0eXBlbmFtZSBJbXBsMj4gLy8gSW1wbDE6IHdlaWdodGVkL3Vud2VpZ2h0ZWQgLy8gSW1wbDI6IGxpbmVhci9xdWFkcmF0aWMKKyAgICBzdHJ1Y3QgZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIHR5cGVkZWYgc3RkOjp2ZWN0b3I8ZmxvYXRfdHlwZT4gYXJyYXlfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgIGRldGFpbDo6bHZhbHVlX2luZGV4X2l0ZXJhdG9yPAorICAgICAgICAgICAgICAgIHBlcm11dGF0aW9uX2l0ZXJhdG9yPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBhcnJheV90eXBlOjpjb25zdF9pdGVyYXRvcgorICAgICAgICAgICAgICAgICAgLCBkZXRhaWw6OnRpbWVzMl9pdGVyYXRvcgorICAgICAgICAgICAgICAgID4KKyAgICAgICAgICAgID4KKyAgICAgICAgPiByYW5nZV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGZsb2F0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogcHJvYmFiaWxpdGllcygKKyAgICAgICAgICAgICAgICBib29zdDo6YmVnaW4oYXJnc1tleHRlbmRlZF9wX3NxdWFyZV9wcm9iYWJpbGl0aWVzXSkKKyAgICAgICAgICAgICAgLCBib29zdDo6ZW5kKGFyZ3NbZXh0ZW5kZWRfcF9zcXVhcmVfcHJvYmFiaWxpdGllc10pCisgICAgICAgICAgICApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjppZl88CisgICAgICAgICAgICAgICAgICAgIGlzX3NhbWU8SW1wbDEsIHdlaWdodGVkPgorICAgICAgICAgICAgICAgICAgLCB0YWc6OndlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlCisgICAgICAgICAgICAgICAgICAsIHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmUKKyAgICAgICAgICAgICAgICA+Ojp0eXBlCisgICAgICAgICAgICBleHRlbmRlZF9wX3NxdWFyZV90YWc7CisKKyAgICAgICAgICAgIGV4dHJhY3RvcjxleHRlbmRlZF9wX3NxdWFyZV90YWc+IGNvbnN0IHNvbWVfZXh0ZW5kZWRfcF9zcXVhcmUgPSB7fTsKKworICAgICAgICAgICAgYXJyYXlfdHlwZSBoZWlnaHRzKHNvbWVfZXh0ZW5kZWRfcF9zcXVhcmUoYXJncykuc2l6ZSgpKTsKKyAgICAgICAgICAgIHN0ZDo6Y29weShzb21lX2V4dGVuZGVkX3Bfc3F1YXJlKGFyZ3MpLmJlZ2luKCksIHNvbWVfZXh0ZW5kZWRfcF9zcXVhcmUoYXJncykuZW5kKCksIGhlaWdodHMuYmVnaW4oKSk7CisKKyAgICAgICAgICAgIHRoaXMtPnByb2JhYmlsaXR5ID0gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV07CisKKyAgICAgICAgICAgIHR5cGVuYW1lIGFycmF5X3R5cGU6OmNvbnN0X2l0ZXJhdG9yIGl0ZXJfcHJvYnMgPSBzdGQ6Omxvd2VyX2JvdW5kKHRoaXMtPnByb2JhYmlsaXRpZXMuYmVnaW4oKSwgdGhpcy0+cHJvYmFiaWxpdGllcy5lbmQoKSwgdGhpcy0+cHJvYmFiaWxpdHkpOworICAgICAgICAgICAgc3RkOjpzaXplX3QgZGlzdCA9IHN0ZDo6ZGlzdGFuY2UodGhpcy0+cHJvYmFiaWxpdGllcy5iZWdpbigpLCBpdGVyX3Byb2JzKTsKKyAgICAgICAgICAgIHR5cGVuYW1lIGFycmF5X3R5cGU6OmNvbnN0X2l0ZXJhdG9yIGl0ZXJfaGVpZ2h0cyA9IGhlaWdodHMuYmVnaW4oKSArIGRpc3Q7CisKKyAgICAgICAgICAgIC8vIElmIHRoaXMtPnByb2JhYmlsaXR5IGlzIG5vdCBpbiBhIHZhbGlkIHJhbmdlIHJldHVybiBOYU4gb3IgdGhyb3cgZXhjZXB0aW9uCisgICAgICAgICAgICBpZiAodGhpcy0+cHJvYmFiaWxpdHkgPCAqdGhpcy0+cHJvYmFiaWxpdGllcy5iZWdpbigpIHx8IHRoaXMtPnByb2JhYmlsaXR5ID4gKih0aGlzLT5wcm9iYWJpbGl0aWVzLmVuZCgpIC0gMSkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYgKHN0ZDo6bnVtZXJpY19saW1pdHM8cmVzdWx0X3R5cGU+OjpoYXNfcXVpZXRfTmFOKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bnVtZXJpY19saW1pdHM8cmVzdWx0X3R5cGU+OjpxdWlldF9OYU4oKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgc3RkOjpvc3RyaW5nc3RyZWFtIG1zZzsKKyAgICAgICAgICAgICAgICAgICAgbXNnIDw8ICJwcm9iYWJpbGl0eSA9ICIgPDwgdGhpcy0+cHJvYmFiaWxpdHkgPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgKCI7CisgICAgICAgICAgICAgICAgICAgIG1zZyA8PCAqdGhpcy0+cHJvYmFiaWxpdGllcy5iZWdpbigpIDw8ICIsICIgPDwgKih0aGlzLT5wcm9iYWJpbGl0aWVzLmVuZCgpIC0gMSkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNhbXBsZSgwKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgaWYgKCppdGVyX3Byb2JzID09IHRoaXMtPnByb2JhYmlsaXR5KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHRzW2Rpc3RdOworICAgICAgICAgICAgfQorICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlc3VsdF90eXBlIHJlczsKKworICAgICAgICAgICAgICAgIGlmIChpc19zYW1lPEltcGwyLCBsaW5lYXI+Ojp2YWx1ZSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAgICAgICAgICAgICAvLyBMSU5FQVIgSU5URVJQT0xBVElPTgorICAgICAgICAgICAgICAgICAgICAvLworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHAxID0gKml0ZXJfcHJvYnM7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgcDAgPSAqKGl0ZXJfcHJvYnMgLSAxKTsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBoMSA9ICppdGVyX2hlaWdodHM7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaDAgPSAqKGl0ZXJfaGVpZ2h0cyAtIDEpOworCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYSA9IG51bWVyaWM6OmZkaXYoaDEgLSBoMCwgcDEgLSBwMCk7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYiA9IGgxIC0gcDEgKiBhOworCisgICAgICAgICAgICAgICAgICAgIHJlcyA9IGEgKiB0aGlzLT5wcm9iYWJpbGl0eSArIGI7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgICAgICAgICAgICAgICAvLyBRVUFEUkFUSUMgSU5URVJQT0xBVElPTgorICAgICAgICAgICAgICAgICAgICAvLworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHAwLCBwMSwgcDI7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaDAsIGgxLCBoMjsKKworICAgICAgICAgICAgICAgICAgICBpZiAoIChkaXN0ID09IDEgfHwgKml0ZXJfcHJvYnMgLSB0aGlzLT5wcm9iYWJpbGl0eSA8PSB0aGlzLT5wcm9iYWJpbGl0eSAtICooaXRlcl9wcm9icyAtIDEpICkgJiYgZGlzdCAhPSB0aGlzLT5wcm9iYWJpbGl0aWVzLnNpemUoKSAtIDEgKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBwMCA9ICooaXRlcl9wcm9icyAtIDEpOworICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSAqaXRlcl9wcm9iczsKKyAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gKihpdGVyX3Byb2JzICsgMSk7CisgICAgICAgICAgICAgICAgICAgICAgICBoMCA9ICooaXRlcl9oZWlnaHRzIC0gMSk7CisgICAgICAgICAgICAgICAgICAgICAgICBoMSA9ICppdGVyX2hlaWdodHM7CisgICAgICAgICAgICAgICAgICAgICAgICBoMiA9ICooaXRlcl9oZWlnaHRzICsgMSk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBwMCA9ICooaXRlcl9wcm9icyAtIDIpOworICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSAqKGl0ZXJfcHJvYnMgLSAxKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gKml0ZXJfcHJvYnM7CisgICAgICAgICAgICAgICAgICAgICAgICBoMCA9ICooaXRlcl9oZWlnaHRzIC0gMik7CisgICAgICAgICAgICAgICAgICAgICAgICBoMSA9ICooaXRlcl9oZWlnaHRzIC0gMSk7CisgICAgICAgICAgICAgICAgICAgICAgICBoMiA9ICppdGVyX2hlaWdodHM7CisgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhwMjEgPSBudW1lcmljOjpmZGl2KGgyIC0gaDEsIHAyIC0gcDEpOworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhwMTAgPSBudW1lcmljOjpmZGl2KGgxIC0gaDAsIHAxIC0gcDApOworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHAyMSAgPSBudW1lcmljOjpmZGl2KHAyICogcDIgLSBwMSAqIHAxLCBwMiAtIHAxKTsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBwMTAgID0gbnVtZXJpYzo6ZmRpdihwMSAqIHAxIC0gcDAgKiBwMCwgcDEgLSBwMCk7CisKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBhID0gbnVtZXJpYzo6ZmRpdihocDIxIC0gaHAxMCwgcDIxIC0gcDEwKTsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBiID0gaHAyMSAtIGEgKiBwMjE7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYyA9IGgyIC0gYSAqIHAyICogcDIgLSBiICogcDI7CisKKyAgICAgICAgICAgICAgICAgICAgcmVzID0gYSAqIHRoaXMtPnByb2JhYmlsaXR5ICogdGhpcy0+IHByb2JhYmlsaXR5ICsgYiAqIHRoaXMtPnByb2JhYmlsaXR5ICsgYzsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICByZXR1cm4gcmVzOworICAgICAgICAgICAgfQorCisgICAgICAgIH0KKyAgICBwcml2YXRlOgorCisgICAgICAgIGFycmF5X3R5cGUgcHJvYmFiaWxpdGllczsKKyAgICAgICAgbXV0YWJsZSBmbG9hdF90eXBlIHByb2JhYmlsaXR5OworCisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBleHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZQorICAgICAgOiBkZXBlbmRzX29uPGV4dGVuZGVkX3Bfc3F1YXJlPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgdW53ZWlnaHRlZCwgbGluZWFyPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYworICAgICAgOiBkZXBlbmRzX29uPGV4dGVuZGVkX3Bfc3F1YXJlPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgdW53ZWlnaHRlZCwgcXVhZHJhdGljPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlCisgICAgICA6IGRlcGVuZHNfb248d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmU+CisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbDxtcGw6Ol8xLCB3ZWlnaHRlZCwgbGluZWFyPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYworICAgICAgOiBkZXBlbmRzX29uPHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgd2VpZ2h0ZWQsIHF1YWRyYXRpYz4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0OjpleHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZQorLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlPiBjb25zdCBleHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZSA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYz4gY29uc3QgZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljID0ge307CisgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGU+IGNvbnN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlID0ge307CisgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljPiBjb25zdCB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWMgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYykKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZSkKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWMpCit9CisKK3VzaW5nIGV4dHJhY3Q6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlOwordXNpbmcgZXh0cmFjdDo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljOwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGU7Cit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWM7CisKKy8vIGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlKGxpbmVhcikgLT4gZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUobGluZWFyKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUgdHlwZTsKK307CisKKy8vIGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlKHF1YWRyYXRpYykgLT4gZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlKHF1YWRyYXRpYyk+Cit7CisgICAgdHlwZWRlZiB0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYyB0eXBlOworfTsKKworLy8gd2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUobGluZWFyKSAtPiB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZQordGVtcGxhdGU8Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZShsaW5lYXIpPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZSB0eXBlOworfTsKKworLy8gd2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUocXVhZHJhdGljKSAtPiB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWMKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUocXVhZHJhdGljKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljIHR5cGU7Cit9OworCisvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorLy8gZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGUgYW5kIHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlCisvLyBwcm92aWRlIHRoZSBzYW1lIGZlYXR1cmUgYXMgcXVhbnRpbGUKK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGU+CisgIDogZmVhdHVyZV9vZjx0YWc6OnF1YW50aWxlPgoreworfTsKK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpxdWFudGlsZT4KK3sKK307CisvLyBTbyB0aGF0IGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkIHdpdGgKKy8vIHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6ZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGU+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpleHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZT4KK3sKK307CisKKy8vIFNvIHRoYXQgZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkIHdpdGgKKy8vIHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYyB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYz4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljIHR5cGU7Cit9OwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWM+CisgIDogZmVhdHVyZV9vZjx0YWc6OmV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX3F1YWRyYXRpYz4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNpZmRlZiBfTVNDX1ZFUgorIyBwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mva3VydG9zaXMuaHBwCkBAIC0wLDAgKzEsMTEyIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBrdXJ0b3Npcy5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgT2xpdmllciBHeWdpLCBEYW5pZWwgRWdsb2ZmLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19LVVJUT1NJU19IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfS1VSVE9TSVNfSFBQX0VBTl8yOF8xMF8yMDA1CisKKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tb21lbnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGt1cnRvc2lzX2ltcGwKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIEt1cnRvc2lzIGVzdGltYXRpb24KKworICAgICAgICBUaGUga3VydG9zaXMgb2YgYSBzYW1wbGUgZGlzdHJpYnV0aW9uIGlzIGRlZmluZWQgYXMgdGhlIHJhdGlvIG9mIHRoZSA0dGggY2VudHJhbCBtb21lbnQgYW5kIHRoZSBzcXVhcmUgb2YgdGhlIDJuZCBjZW50cmFsCisgICAgICAgIG1vbWVudCAodGhlIHZhcmlhbmNlKSBvZiB0aGUgc2FtcGxlcywgbWludXMgMy4gVGhlIHRlcm0gXGYkIC0zIFxmJCBpcyBhZGRlZCBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCB0aGUgbm9ybWFsIGRpc3RyaWJ1dGlvbgorICAgICAgICBoYXMgemVybyBrdXJ0b3Npcy4gVGhlIGt1cnRvc2lzIGNhbiBhbHNvIGJlIGV4cHJlc3NlZCBieSB0aGUgc2ltcGxlIG1vbWVudHM6CisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcaGF0e2d9XzIgPQorICAgICAgICAgICAgICAgIFxmcmFjCisgICAgICAgICAgICAgICAge1x3aWRlaGF0e219X25eeyg0KX0tNFx3aWRlaGF0e219X25eeygzKX1caGF0e1xtdX1fbis2XHdpZGVoYXR7bX1fbl57KDIpfVxoYXR7XG11fV9uXjItM1xoYXR7XG11fV9uXjR9CisgICAgICAgICAgICAgICAge1xsZWZ0KFx3aWRlaGF0e219X25eeygyKX0gLSBcaGF0e1xtdX1fbl57Mn1ccmlnaHQpXjJ9IC0gMywKKyAgICAgICAgXGZdCisKKyAgICAgICAgd2hlcmUgXGYkIFx3aWRlaGF0e219X25eeyhpKX0gXGYkIGFyZSB0aGUgXGYkIGkgXGYkLXRoIG1vbWVudCBhbmQgXGYkIFxoYXR7XG11fV9uIFxmJCB0aGUgbWVhbiAoZmlyc3QgbW9tZW50KSBvZiB0aGUKKyAgICAgICAgXGYkIG4gXGYkIHNhbXBsZXMuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IGt1cnRvc2lzX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgU2FtcGxlPjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAga3VydG9zaXNfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KAorICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3JzOjptb21lbnQ8ND4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgIC0gNC4gKiBhY2N1bXVsYXRvcnM6Om1vbWVudDwzPihhcmdzKSAqIG1lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgICsgNi4gKiBhY2N1bXVsYXRvcnM6Om1vbWVudDwyPihhcmdzKSAqIG1lYW4oYXJncykgKiBtZWFuKGFyZ3MpCisgICAgICAgICAgICAgICAgICAgICAgICAtIDMuICogbWVhbihhcmdzKSAqIG1lYW4oYXJncykgKiBtZWFuKGFyZ3MpICogbWVhbihhcmdzKQorICAgICAgICAgICAgICAgICAgICAgICwgKCBhY2N1bXVsYXRvcnM6Om1vbWVudDwyPihhcmdzKSAtIG1lYW4oYXJncykgKiBtZWFuKGFyZ3MpICkKKyAgICAgICAgICAgICAgICAgICAgICAgICogKCBhY2N1bXVsYXRvcnM6Om1vbWVudDwyPihhcmdzKSAtIG1lYW4oYXJncykgKiBtZWFuKGFyZ3MpICkKKyAgICAgICAgICAgICAgICAgICAgKSAtIDMuOworICAgICAgICB9CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6Omt1cnRvc2lzCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBrdXJ0b3NpcworICAgICAgOiBkZXBlbmRzX29uPG1lYW4sIG1vbWVudDwyPiwgbW9tZW50PDM+LCBtb21lbnQ8ND4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjprdXJ0b3Npc19pbXBsPG1wbDo6XzE+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6a3VydG9zaXMKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6Omt1cnRvc2lzPiBjb25zdCBrdXJ0b3NpcyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoa3VydG9zaXMpCit9CisKK3VzaW5nIGV4dHJhY3Q6Omt1cnRvc2lzOworCisvLyBTbyB0aGF0IGt1cnRvc2lzIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkIHdpdGgKKy8vIHdlaWdodGVkX2t1cnRvc2lzIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6a3VydG9zaXM+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX2t1cnRvc2lzIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX2t1cnRvc2lzPgorICA6IGZlYXR1cmVfb2Y8dGFnOjprdXJ0b3Npcz4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21heC5ocHAKQEAgLTAsMCArMSw4NSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gbWF4LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX01BWF9IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfTUFYX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBtYXhfaW1wbAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgbWF4X2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBTYW1wbGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgbWF4X2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IG1heF8obnVtZXJpYzo6YXNfbWluKGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldKSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBudW1lcmljOjptYXhfYXNzaWduKHRoaXMtPm1heF8sIGFyZ3Nbc2FtcGxlXSk7CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+bWF4XzsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgU2FtcGxlIG1heF87CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6Om1heAorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3QgbWF4CisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjptYXhfaW1wbDxtcGw6Ol8xPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6Om1heAorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6bWF4PiBjb25zdCBtYXggPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKG1heCkKK30KKwordXNpbmcgZXh0cmFjdDo6bWF4OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tZWFuLmhwcApAQCAtMCwwICsxLDI5OCBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gbWVhbi5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19NRUFOX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19NRUFOX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9zdW0uaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIG1lYW5faW1wbAorICAgIC8vICAgICAgbGF6eSwgYnkgZGVmYXVsdAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgU3VtRmVhdHVyZT4KKyAgICBzdHJ1Y3QgbWVhbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgbWVhbl9pbXBsKGRvbnRfY2FyZSkge30KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgZXh0cmFjdG9yPFN1bUZlYXR1cmU+IHN1bTsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KHN1bShhcmdzKSwgY291bnQoYXJncykpOworICAgICAgICB9CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCBpbW1lZGlhdGVfbWVhbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgaW1tZWRpYXRlX21lYW5faW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogbWVhbihudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCBudW1lcmljOjpvbmU8c3RkOjpzaXplX3Q+Ojp2YWx1ZSkpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisgICAgICAgICAgICB0aGlzLT5tZWFuID0gbnVtZXJpYzo6ZmRpdigKKyAgICAgICAgICAgICAgICAodGhpcy0+bWVhbiAqIChjbnQgLSAxKSkgKyBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKV0KKyAgICAgICAgICAgICAgLCBjbnQKKyAgICAgICAgICAgICk7CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+bWVhbjsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgcmVzdWx0X3R5cGUgbWVhbjsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6bWVhbgorLy8gdGFnOjppbW1lZGlhdGVfbWVhbgorLy8gdGFnOjptZWFuX29mX3dlaWdodHMKKy8vIHRhZzo6aW1tZWRpYXRlX21lYW5fb2Zfd2VpZ2h0cworLy8gdGFnOjptZWFuX29mX3ZhcmlhdGVzCisvLyB0YWc6OmltbWVkaWF0ZV9tZWFuX29mX3ZhcmlhdGVzCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBtZWFuCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIHN1bT4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6bWVhbl9pbXBsPG1wbDo6XzEsIHN1bT4gaW1wbDsKKyAgICB9OworICAgIHN0cnVjdCBpbW1lZGlhdGVfbWVhbgorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjppbW1lZGlhdGVfbWVhbl9pbXBsPG1wbDo6XzEsIHRhZzo6c2FtcGxlPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IG1lYW5fb2Zfd2VpZ2h0cworICAgICAgOiBkZXBlbmRzX29uPGNvdW50LCBzdW1fb2Zfd2VpZ2h0cz4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgbXBsOjp0cnVlXyBpc193ZWlnaHRfYWNjdW11bGF0b3I7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6bWVhbl9pbXBsPG1wbDo6XzIsIHN1bV9vZl93ZWlnaHRzPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IGltbWVkaWF0ZV9tZWFuX29mX3dlaWdodHMKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudD4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgbXBsOjp0cnVlXyBpc193ZWlnaHRfYWNjdW11bGF0b3I7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6aW1tZWRpYXRlX21lYW5faW1wbDxtcGw6Ol8yLCB0YWc6OndlaWdodD4gaW1wbDsKKyAgICB9OworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCBtZWFuX29mX3ZhcmlhdGVzCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIHN1bV9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgbXBsOjphbHdheXM8YWNjdW11bGF0b3JzOjppbXBsOjptZWFuX2ltcGw8VmFyaWF0ZVR5cGUsIHN1bV9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPiA+IGltcGw7CisgICAgfTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgaW1tZWRpYXRlX21lYW5fb2ZfdmFyaWF0ZXMKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIG1wbDo6YWx3YXlzPGFjY3VtdWxhdG9yczo6aW1wbDo6aW1tZWRpYXRlX21lYW5faW1wbDxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6Om1lYW4KKy8vIGV4dHJhY3Q6Om1lYW5fb2Zfd2VpZ2h0cworLy8gZXh0cmFjdDo6bWVhbl9vZl92YXJpYXRlcworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6bWVhbj4gY29uc3QgbWVhbiA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6Om1lYW5fb2Zfd2VpZ2h0cz4gY29uc3QgbWVhbl9vZl93ZWlnaHRzID0ge307CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCBtZWFuX29mX3ZhcmlhdGVzLCAodHlwZW5hbWUpKHR5cGVuYW1lKSkKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKG1lYW4pCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwobWVhbl9vZl93ZWlnaHRzKQorfQorCit1c2luZyBleHRyYWN0OjptZWFuOwordXNpbmcgZXh0cmFjdDo6bWVhbl9vZl93ZWlnaHRzOwordXNpbmcgZXh0cmFjdDo6bWVhbl9vZl92YXJpYXRlczsKKworLy8gbWVhbihsYXp5KSAtPiBtZWFuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6Om1lYW4obGF6eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6Om1lYW4gdHlwZTsKK307CisKKy8vIG1lYW4oaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfbWVhbgordGVtcGxhdGU8Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjptZWFuKGltbWVkaWF0ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OmltbWVkaWF0ZV9tZWFuIHR5cGU7Cit9OworCisvLyBtZWFuX29mX3dlaWdodHMobGF6eSkgLT4gbWVhbl9vZl93ZWlnaHRzCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6Om1lYW5fb2Zfd2VpZ2h0cyhsYXp5KT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6bWVhbl9vZl93ZWlnaHRzIHR5cGU7Cit9OworCisvLyBtZWFuX29mX3dlaWdodHMoaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfbWVhbl9vZl93ZWlnaHRzCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6Om1lYW5fb2Zfd2VpZ2h0cyhpbW1lZGlhdGUpPgoreworICAgIHR5cGVkZWYgdGFnOjppbW1lZGlhdGVfbWVhbl9vZl93ZWlnaHRzIHR5cGU7Cit9OworCisvLyBtZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihsYXp5KSAtPiBtZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPgordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6Om1lYW5fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+KGxhenkpPgoreworICAgIHR5cGVkZWYgdGFnOjptZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKworLy8gbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4oaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4KK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjptZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihpbW1lZGlhdGUpPgoreworICAgIHR5cGVkZWYgdGFnOjppbW1lZGlhdGVfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gdHlwZTsKK307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBpbW1lZGlhdGVfbWVhbiBwcm92aWRlcyB0aGUgc2FtZSBmZWF0dXJlIGFzIG1lYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6aW1tZWRpYXRlX21lYW4+CisgIDogZmVhdHVyZV9vZjx0YWc6Om1lYW4+Cit7Cit9OworCisvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorLy8gaW1tZWRpYXRlX21lYW4gcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyBtZWFuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OmltbWVkaWF0ZV9tZWFuX29mX3dlaWdodHM+CisgIDogZmVhdHVyZV9vZjx0YWc6Om1lYW5fb2Zfd2VpZ2h0cz4KK3sKK307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBpbW1lZGlhdGVfbWVhbiBwcm92aWRlcyB0aGUgc2FtZSBmZWF0dXJlIGFzIG1lYW4KK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjppbW1lZGlhdGVfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjptZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+Cit7Cit9OworCisvLyBTbyB0aGF0IG1lYW4gY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfbWVhbiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjptZWFuPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9tZWFuIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX21lYW4+CisgIDogZmVhdHVyZV9vZjx0YWc6Om1lYW4+Cit7fTsKKworLy8gU28gdGhhdCBpbW1lZGlhdGVfbWVhbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyBpbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjppbW1lZGlhdGVfbWVhbj4KK3sKKyAgICB0eXBlZGVmIHRhZzo6aW1tZWRpYXRlX3dlaWdodGVkX21lYW4gdHlwZTsKK307CisKK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6aW1tZWRpYXRlX3dlaWdodGVkX21lYW4+CisgIDogZmVhdHVyZV9vZjx0YWc6OmltbWVkaWF0ZV9tZWFuPgore307CisKKy8vIFNvIHRoYXQgbWVhbl9vZl93ZWlnaHRzPD4gY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczw+IHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6bWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6bWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgoreworfTsKKworLy8gU28gdGhhdCBpbW1lZGlhdGVfbWVhbl9vZl93ZWlnaHRzPD4gY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gaW1tZWRpYXRlX3dlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXM8PiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OmltbWVkaWF0ZV9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmltbWVkaWF0ZV9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+Cit7Cit9OworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8vIGRyb3BwYWJsZV9hY2N1bXVsYXRvcjxtZWFuX2ltcGw+CisvLy8vICBuZWVkIHRvIHNwZWNpYWxpemUgZHJvcHBhYmxlIGxhenkgbWVhbiB0byBjYWNoZSB0aGUgcmVzdWx0IGF0IHRoZQorLy8vLyAgcG9pbnQgdGhlIGFjY3VtdWxhdG9yIGlzIGRyb3BwZWQuCisvLy8vLyBJTlRFUk5BTCBPTkxZCisvLy8vLworLy90ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFN1bUZlYXR1cmU+CisvL3N0cnVjdCBkcm9wcGFibGVfYWNjdW11bGF0b3I8aW1wbDo6bWVhbl9pbXBsPFNhbXBsZSwgU3VtRmVhdHVyZT4gPgorLy8gIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2U8CisvLyAgICAgICAgd2l0aF9jYWNoZWRfcmVzdWx0PGltcGw6Om1lYW5faW1wbDxTYW1wbGUsIFN1bUZlYXR1cmU+ID4KKy8vICAgID4KKy8veworLy8gICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKy8vICAgIGRyb3BwYWJsZV9hY2N1bXVsYXRvcihBcmdzIGNvbnN0ICZhcmdzKQorLy8gICAgICA6IGRyb3BwYWJsZV9hY2N1bXVsYXRvcjo6YmFzZShhcmdzKQorLy8gICAgeworLy8gICAgfQorLy99OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tZWRpYW4uaHBwCkBAIC0wLDAgKzEsMzAxIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBtZWRpYW4uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IEVyaWMgTmllYmxlciwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19NRURJQU5fSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX01FRElBTl9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX3F1YW50aWxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9kZW5zaXR5LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wX3NxdWFyZV9jdW11bF9kaXN0LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBtZWRpYW5faW1wbAorICAgIC8vCisgICAgLyoqCisgICAgICAgIEBicmllZiBNZWRpYW4gZXN0aW1hdGlvbiBiYXNlZCBvbiB0aGUgXGYkUF4yXGYkIHF1YW50aWxlIGVzdGltYXRvcgorCisgICAgICAgIFRoZSBcZiRQXjJcZiQgYWxnb3JpdGhtIGlzIGludm9rZWQgd2l0aCBhIHF1YW50aWxlIHByb2JhYmlsaXR5IG9mIDAuNS4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgbWVkaWFuX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICBtZWRpYW5faW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBwX3NxdWFyZV9xdWFudGlsZV9mb3JfbWVkaWFuKGFyZ3MpOworICAgICAgICB9CisgICAgfTsKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2l0aF9kZW5zaXR5X21lZGlhbl9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIE1lZGlhbiBlc3RpbWF0aW9uIGJhc2VkIG9uIHRoZSBkZW5zaXR5IGVzdGltYXRvcgorCisgICAgICAgIFRoZSBhbGdvcml0aG0gZGV0ZXJtaW5lcyB0aGUgYmluIGluIHdoaWNoIHRoZSBcZiQwLjUqY250XGYkLXRoIHNhbXBsZSBsaWVzLCBcZiRjbnRcZiQgYmVpbmcKKyAgICAgICAgdGhlIHRvdGFsIG51bWJlciBvZiBzYW1wbGVzLiBJdCByZXR1cm5zIHRoZSBhcHByb3hpbWF0ZSBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoaXMgc2FtcGxlLAorICAgICAgICBiYXNlZCBvbiBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYmluLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCB3aXRoX2RlbnNpdHlfbWVkaWFuX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxmbG9hdF90eXBlLCBmbG9hdF90eXBlPiA+IGhpc3RvZ3JhbV90eXBlOworICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGhpc3RvZ3JhbV90eXBlOjppdGVyYXRvcj4gcmFuZ2VfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBmbG9hdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHdpdGhfZGVuc2l0eV9tZWRpYW5faW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogc3VtKG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKSkKKyAgICAgICAgICAsIGlzX2RpcnR5KHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IHRydWU7CisgICAgICAgIH0KKworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICBpZiAodGhpcy0+aXNfZGlydHkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHkgPSBmYWxzZTsKKworICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworICAgICAgICAgICAgICAgIHJhbmdlX3R5cGUgaGlzdG9ncmFtID0gZGVuc2l0eShhcmdzKTsKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSByYW5nZV90eXBlOjppdGVyYXRvciBpdCA9IGhpc3RvZ3JhbS5iZWdpbigpOworICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLT5zdW0gPCAwLjUgKiBjbnQpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5zdW0gKz0gaXQtPnNlY29uZCAqIGNudDsKKyAgICAgICAgICAgICAgICAgICAgKytpdDsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgLS1pdDsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIG92ZXIgPSBudW1lcmljOjpmZGl2KHRoaXMtPnN1bSAtIDAuNSAqIGNudCwgaXQtPnNlY29uZCAqIGNudCk7CisgICAgICAgICAgICAgICAgdGhpcy0+bWVkaWFuID0gaXQtPmZpcnN0ICogb3ZlciArIChpdCArIDEpLT5maXJzdCAqICgxLiAtIG92ZXIpOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gdGhpcy0+bWVkaWFuOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgc3VtOworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHk7CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBtZWRpYW47CisgICAgfTsKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbl9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIE1lZGlhbiBlc3RpbWF0aW9uIGJhc2VkIG9uIHRoZSBcZiRQXjJcZiQgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gZXN0aW1hdG9yCisKKyAgICAgICAgVGhlIGFsZ29yaXRobSBkZXRlcm1pbmVzIHRoZSBmaXJzdCAobGVmdG1vc3QpIGJpbiB3aXRoIGEgaGVpZ2h0IGV4Y2VlZGluZyAwLjUuIEl0CisgICAgICAgIHJldHVybnMgdGhlIGFwcHJveGltYXRlIGhvcml6b250YWwgcG9zaXRpb24gb2Ygd2hlcmUgdGhlIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uCisgICAgICAgIGVxdWFscyAwLjUsIGJhc2VkIG9uIGEgbGluZWFyIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBiaW4uCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxmbG9hdF90eXBlLCBmbG9hdF90eXBlPiA+IGhpc3RvZ3JhbV90eXBlOworICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGhpc3RvZ3JhbV90eXBlOjppdGVyYXRvcj4gcmFuZ2VfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBmbG9hdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuX2ltcGwoZG9udF9jYXJlKQorICAgICAgICAgIDogaXNfZGlydHkodHJ1ZSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShkb250X2NhcmUpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5ID0gdHJ1ZTsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICBpZiAodGhpcy0+aXNfZGlydHkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHkgPSBmYWxzZTsKKworICAgICAgICAgICAgICAgIHJhbmdlX3R5cGUgaGlzdG9ncmFtID0gcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24oYXJncyk7CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgcmFuZ2VfdHlwZTo6aXRlcmF0b3IgaXQgPSBoaXN0b2dyYW0uYmVnaW4oKTsKKyAgICAgICAgICAgICAgICB3aGlsZSAoaXQtPnNlY29uZCA8IDAuNSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICsraXQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgb3ZlciA9IG51bWVyaWM6OmZkaXYoaXQtPnNlY29uZCAtIDAuNSwgaXQtPnNlY29uZCAtIChpdCAtIDEpLT5zZWNvbmQpOworICAgICAgICAgICAgICAgIHRoaXMtPm1lZGlhbiA9IGl0LT5maXJzdCAqIG92ZXIgKyAoaXQgKyAxKS0+Zmlyc3QgKiAoIDEuIC0gb3ZlciApOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gdGhpcy0+bWVkaWFuOworICAgICAgICB9CisgICAgcHJpdmF0ZToKKworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHk7CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBtZWRpYW47CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6Om1lZGlhbgorLy8gdGFnOjp3aXRoX2RlbnNpc3R5X21lZGlhbgorLy8gdGFnOjp3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbgorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3QgbWVkaWFuCisgICAgICA6IGRlcGVuZHNfb248cF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbj4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6bWVkaWFuX2ltcGw8bXBsOjpfMT4gaW1wbDsKKyAgICB9OworICAgIHN0cnVjdCB3aXRoX2RlbnNpdHlfbWVkaWFuCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIGRlbnNpdHk+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndpdGhfZGVuc2l0eV9tZWRpYW5faW1wbDxtcGw6Ol8xPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuCisgICAgICA6IGRlcGVuZHNfb248cF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuX2ltcGw8bXBsOjpfMT4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0OjptZWRpYW4KKy8vIGV4dHJhY3Q6OndpdGhfZGVuc2l0eV9tZWRpYW4KKy8vIGV4dHJhY3Q6OndpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjptZWRpYW4+IGNvbnN0IG1lZGlhbiA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OndpdGhfZGVuc2l0eV9tZWRpYW4+IGNvbnN0IHdpdGhfZGVuc2l0eV9tZWRpYW4gPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjp3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbj4gY29uc3Qgd2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9tZWRpYW4gPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKG1lZGlhbikKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3aXRoX2RlbnNpdHlfbWVkaWFuKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuKQorfQorCit1c2luZyBleHRyYWN0OjptZWRpYW47Cit1c2luZyBleHRyYWN0Ojp3aXRoX2RlbnNpdHlfbWVkaWFuOwordXNpbmcgZXh0cmFjdDo6d2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9tZWRpYW47CisKKy8vIG1lZGlhbih3aXRoX3Bfc3F1YXJlX3F1YW50aWxlKSAtPiBtZWRpYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6bWVkaWFuKHdpdGhfcF9zcXVhcmVfcXVhbnRpbGUpPgoreworICAgIHR5cGVkZWYgdGFnOjptZWRpYW4gdHlwZTsKK307CisKKy8vIG1lZGlhbih3aXRoX2RlbnNpdHkpIC0+IHdpdGhfZGVuc2l0eV9tZWRpYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6bWVkaWFuKHdpdGhfZGVuc2l0eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndpdGhfZGVuc2l0eV9tZWRpYW4gdHlwZTsKK307CisKKy8vIG1lZGlhbih3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uKSAtPiB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbgordGVtcGxhdGU8Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjptZWRpYW4od2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbik+Cit7CisgICAgdHlwZWRlZiB0YWc6OndpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuIHR5cGU7Cit9OworCisvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorLy8gd2l0aF9kZW5zaXR5X21lZGlhbiBhbmQgd2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9tZWRpYW4KKy8vIHByb3ZpZGUgdGhlIHNhbWUgZmVhdHVyZSBhcyBtZWRpYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2l0aF9kZW5zaXR5X21lZGlhbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6bWVkaWFuPgoreworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6bWVkaWFuPgoreworfTsKKworLy8gU28gdGhhdCBtZWRpYW4gY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfbWVkaWFuIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6Om1lZGlhbj4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfbWVkaWFuIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX21lZGlhbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6bWVkaWFuPgoreworfTsKKworLy8gU28gdGhhdCB3aXRoX2RlbnNpdHlfbWVkaWFuIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkIHdpdGgKKy8vIHdpdGhfZGVuc2l0eV93ZWlnaHRlZF9tZWRpYW4gd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZC4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6d2l0aF9kZW5zaXR5X21lZGlhbj4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2l0aF9kZW5zaXR5X3dlaWdodGVkX21lZGlhbiB0eXBlOworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3aXRoX2RlbnNpdHlfd2VpZ2h0ZWRfbWVkaWFuPgorICA6IGZlYXR1cmVfb2Y8dGFnOjp3aXRoX2RlbnNpdHlfbWVkaWFuPgoreworfTsKKworLy8gU28gdGhhdCB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjp3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbj4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl93ZWlnaHRlZF9tZWRpYW4gdHlwZTsKK307CisKK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl93ZWlnaHRlZF9tZWRpYW4+CisgIDogZmVhdHVyZV9vZjx0YWc6OndpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuPgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbWluLmhwcApAQCAtMCwwICsxLDg1IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBtaW4uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfTUlOX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19NSU5fSFBQX0VBTl8yOF8xMF8yMDA1CisKKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIG1pbl9pbXBsCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBtaW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIFNhbXBsZSByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBtaW5faW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogbWluXyhudW1lcmljOjphc19tYXgoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0pKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIG51bWVyaWM6Om1pbl9hc3NpZ24odGhpcy0+bWluXywgYXJnc1tzYW1wbGVdKTsKKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5taW5fOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBTYW1wbGUgbWluXzsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6bWluCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBtaW4KKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6Om1pbl9pbXBsPG1wbDo6XzE+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6bWluCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjptaW4+IGNvbnN0IG1pbiA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwobWluKQorfQorCit1c2luZyBleHRyYWN0OjptaW47CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21vbWVudC5ocHAKQEAgLTAsMCArMSwxMjUgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIG1vbWVudC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19NT01FTlRfSFBQX0VBTl8xNV8xMV8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX01PTUVOVF9IUFBfRUFOXzE1XzExXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy9ub190cjEvY21hdGguaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBudW1lcmljCit7CisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgIFQgY29uc3QgJnBvdyhUIGNvbnN0ICZ4LCBtcGw6OmludF88MT4pCisgICAgeworICAgICAgICByZXR1cm4geDsKKyAgICB9CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIGludCBOPgorICAgIFQgcG93KFQgY29uc3QgJngsIG1wbDo6aW50XzxOPikKKyAgICB7CisgICAgICAgIHVzaW5nIG5hbWVzcGFjZSBvcGVyYXRvcnM7CisgICAgICAgIFQgeSA9IG51bWVyaWM6OnBvdyh4LCBtcGw6OmludF88Ti8yPigpKTsKKyAgICAgICAgVCB6ID0geSAqIHk7CisgICAgICAgIHJldHVybiAoTiAlIDIpID8gKHogKiB4KSA6IHo7CisgICAgfQorfX0KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBtb21lbnRfaW1wbAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIE4sIHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgbW9tZW50X2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZSAvLyBUT0RPOiBhbHNvIGRlcGVuZHNfb24gc3VtIG9mIHBvd2VycworICAgIHsKKyAgICAgICAgQk9PU1RfTVBMX0FTU0VSVF9SRUxBVElPTihOOjp2YWx1ZSwgPiwgMCk7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgbW9tZW50X2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHN1bShhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5zdW0gKz0gbnVtZXJpYzo6cG93KGFyZ3Nbc2FtcGxlXSwgTigpKTsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gbnVtZXJpYzo6ZmRpdih0aGlzLT5zdW0sIGNvdW50KGFyZ3MpKTsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgU2FtcGxlIHN1bTsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6bW9tZW50CisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPGludCBOPgorICAgIHN0cnVjdCBtb21lbnQKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6bW9tZW50X2ltcGw8bXBsOjppbnRfPE4+LCBtcGw6Ol8xPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6Om1vbWVudAorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCBtb21lbnQsIChpbnQpKQorfQorCit1c2luZyBleHRyYWN0Ojptb21lbnQ7CisKKy8vIFNvIHRoYXQgbW9tZW50PE4+IGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkIHdpdGgKKy8vIHdlaWdodGVkX21vbWVudDxOPiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkCit0ZW1wbGF0ZTxpbnQgTj4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6bW9tZW50PE4+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfbW9tZW50PE4+IHR5cGU7Cit9OworCit0ZW1wbGF0ZTxpbnQgTj4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfbW9tZW50PE4+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6bW9tZW50PE4+ID4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwCkBAIC0wLDAgKzEsMjYzIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbi5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRGFuaWVsIEVnbG9mZiwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QX1NRVUFSRV9DVU1VTF9ESVNUX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1BfU1FVQVJFX0NVTVVMX0RJU1RfSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2FjY3VtdWxhdG9yc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBudW1fY2VsbHMgbmFtZWQgcGFyYW1ldGVyCisvLworQk9PU1RfUEFSQU1FVEVSX05FU1RFRF9LRVlXT1JEKHRhZywgcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbnVtX2NlbGxzLCBudW1fY2VsbHMpCisKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX251bV9jZWxscykKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25faW1wbAorICAgIC8vICBjdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbiBjYWxjdWxhdGlvbiAoYXMgaGlzdG9ncmFtKQorICAgIC8qKgorICAgICAgICBAYnJpZWYgSGlzdG9ncmFtIGNhbGN1bGF0aW9uIG9mIHRoZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiB3aXRoIHRoZSBcZiRQXjJcZiQgYWxnb3JpdGhtCisKKyAgICAgICAgQSBoaXN0b2dyYW0gb2YgdGhlIHNhbXBsZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiBpcyBjb21wdXRlZCBkeW5hbWljYWxseSB3aXRob3V0IHN0b3Jpbmcgc2FtcGxlcworICAgICAgICBiYXNlZCBvbiB0aGUgXGYkIFBeMiBcZiQgYWxnb3JpdGhtLiBUaGUgcmV0dXJuZWQgaGlzdG9ncmFtIGhhcyBhIHNwZWNpZmlhYmxlIGFtb3VudCAobnVtX2NlbGxzKQorICAgICAgICBlcXVpcHJvYmFibGUgKGFuZCBub3QgZXF1YWwtc2l6ZWQpIGNlbGxzLgorCisgICAgICAgIEZvciBmdXJ0aGVyIGRldGFpbHMsIHNlZQorCisgICAgICAgIFIuIEphaW4gYW5kIEkuIENobGFtdGFjLCBUaGUgUF4yIGFsZ29yaXRobSBmb3IgZHluYW1pYyBjYWxjdWxhdGlvbiBvZiBxdWFudGlsZXMgYW5kCisgICAgICAgIGhpc3RvZ3JhbXMgd2l0aG91dCBzdG9yaW5nIG9ic2VydmF0aW9ucywgQ29tbXVuaWNhdGlvbnMgb2YgdGhlIEFDTSwKKyAgICAgICAgVm9sdW1lIDI4IChPY3RvYmVyKSwgTnVtYmVyIDEwLCAxOTg1LCBwLiAxMDc2LTEwODUuCisKKyAgICAgICAgQHBhcmFtIHBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX251bV9jZWxscy4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIHR5cGVkZWYgc3RkOjp2ZWN0b3I8ZmxvYXRfdHlwZT4gYXJyYXlfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3RvcjxzdGQ6OnBhaXI8ZmxvYXRfdHlwZSwgZmxvYXRfdHlwZT4gPiBoaXN0b2dyYW1fdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTx0eXBlbmFtZSBoaXN0b2dyYW1fdHlwZTo6aXRlcmF0b3I+IHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IG51bV9jZWxscyhhcmdzW3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX251bV9jZWxsc10pCisgICAgICAgICAgLCBoZWlnaHRzKG51bV9jZWxscyArIDEpCisgICAgICAgICAgLCBhY3R1YWxfcG9zaXRpb25zKG51bV9jZWxscyArIDEpCisgICAgICAgICAgLCBkZXNpcmVkX3Bvc2l0aW9ucyhudW1fY2VsbHMgKyAxKQorICAgICAgICAgICwgcG9zaXRpb25zX2luY3JlbWVudHMobnVtX2NlbGxzICsgMSkKKyAgICAgICAgICAsIGhpc3RvZ3JhbShudW1fY2VsbHMgKyAxKQorICAgICAgICAgICwgaXNfZGlydHkodHJ1ZSkKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgYiA9IHRoaXMtPm51bV9jZWxsczsKKworICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMDsgaSA8IGIgKyAxOyArK2kpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXSA9IGkgKyAxLjsKKyAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1tpXSA9IGkgKyAxLjsKKyAgICAgICAgICAgICAgICB0aGlzLT5wb3NpdGlvbnNfaW5jcmVtZW50c1tpXSA9IG51bWVyaWM6OmZkaXYoaSwgYik7CisgICAgICAgICAgICB9CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5ID0gdHJ1ZTsKKworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBzYW1wbGVfY2VsbCA9IDE7IC8vIGsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGIgPSB0aGlzLT5udW1fY2VsbHM7CisKKyAgICAgICAgICAgIC8vIGFjY3VtdWxhdGUgbnVtX2NlbGxzICsgMSBmaXJzdCBzYW1wbGVzCisgICAgICAgICAgICBpZiAoY250IDw9IGIgKyAxKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbY250IC0gMV0gPSBhcmdzW3NhbXBsZV07CisKKyAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZSB0aGUgaW5pdGlhbGl6YXRpb24gb2YgaGVpZ2h0cyBieSBzb3J0aW5nCisgICAgICAgICAgICAgICAgaWYgKGNudCA9PSBiICsgMSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHN0ZDo6c29ydCh0aGlzLT5oZWlnaHRzLmJlZ2luKCksIHRoaXMtPmhlaWdodHMuZW5kKCkpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBmaW5kIGNlbGwgayBzdWNoIHRoYXQgaGVpZ2h0c1trLTFdIDw9IGFyZ3Nbc2FtcGxlXSA8IGhlaWdodHNba10gYW5kIGFkanVzdCBleHRyZW1lIHZhbHVlcworICAgICAgICAgICAgICAgIGlmIChhcmdzW3NhbXBsZV0gPCB0aGlzLT5oZWlnaHRzWzBdKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1swXSA9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSAxOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLT5oZWlnaHRzW2JdIDw9IGFyZ3Nbc2FtcGxlXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbYl0gPSBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gYjsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXQ7CisgICAgICAgICAgICAgICAgICAgIGl0ID0gc3RkOjp1cHBlcl9ib3VuZCgKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHMuYmVnaW4oKQorICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+aGVpZ2h0cy5lbmQoKQorICAgICAgICAgICAgICAgICAgICAgICwgYXJnc1tzYW1wbGVdCisgICAgICAgICAgICAgICAgICAgICk7CisKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGluY3JlbWVudCBwb3NpdGlvbnMgb2YgbWFya2VycyBhYm92ZSBzYW1wbGVfY2VsbAorICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IHNhbXBsZV9jZWxsOyBpIDwgYiArIDE7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICsrdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZGVzaXJlZCBwb3NpdGlvbiBvZiBtYXJrZXJzIDIgdG8gbnVtX2NlbGxzICsgMQorICAgICAgICAgICAgICAgIC8vIChkZXNpcmVkIHBvc2l0aW9uIG9mIGZpcnN0IG1hcmtlciBpcyBhbHdheXMgMSkKKyAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAxOyBpIDwgYiArIDE7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldICs9IHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzW2ldOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGFkanVzdCBoZWlnaHRzIG9mIG1hcmtlcnMgMiB0byBudW1fY2VsbHMgaWYgbmVjZXNzYXJ5CisgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IGI7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBkZXNpcmUgcG9zaXRpb24KKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBkID0gdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbaV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBuZXh0IHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZHAgPSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2kgKyAxXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvIHByZXZpb3VzIHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZG0gPSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2kgLSAxXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0IGRzCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaHAgPSAodGhpcy0+aGVpZ2h0c1tpICsgMV0gLSB0aGlzLT5oZWlnaHRzW2ldKSAvIGRwOworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhtID0gKHRoaXMtPmhlaWdodHNbaSAtIDFdIC0gdGhpcy0+aGVpZ2h0c1tpXSkgLyBkbTsKKworICAgICAgICAgICAgICAgICAgICBpZiAoICggZCA+PSAxLiAmJiBkcCA+IDEuICkgfHwgKCBkIDw9IC0xLiAmJiBkbSA8IC0xLiApICkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnQgc2lnbl9kID0gc3RhdGljX2Nhc3Q8c2hvcnQ+KGQgLyBzdGQ6OmFicyhkKSk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSBhZGp1c3RpbmcgaGVpZ2h0c1tpXSB1c2luZyBwLXNxdWFyZWQgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBoID0gdGhpcy0+aGVpZ2h0c1tpXSArIHNpZ25fZCAvIChkcCAtIGRtKSAqICggKHNpZ25fZCAtIGRtKSAqIGhwICsgKGRwIC0gc2lnbl9kKSAqIGhtICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy0+aGVpZ2h0c1tpIC0gMV0gPCBoICYmIGggPCB0aGlzLT5oZWlnaHRzW2kgKyAxXSApCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSA9IGg7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGxpbmVhciBmb3JtdWxhCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQ+MCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gKz0gaHA7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkPDApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldIC09IGhtOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gc2lnbl9kOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IGZhbHNlOworCisgICAgICAgICAgICAgICAgLy8gY3JlYXRlcyBhIHZlY3RvciBvZiBzdGQ6OnBhaXIgd2hlcmUgZWFjaCBwYWlyIGkgaG9sZHMKKyAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWVzIGhlaWdodHNbaV0gKHgtYXhpcyBvZiBoaXN0b2dyYW0pIGFuZAorICAgICAgICAgICAgICAgIC8vIGFjdHVhbF9wb3NpdGlvbnNbaV0gLyBjbnQgKHktYXhpcyBvZiBoaXN0b2dyYW0pCisKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDA7IGkgPCB0aGlzLT5oaXN0b2dyYW0uc2l6ZSgpOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oaXN0b2dyYW1baV0gPSBzdGQ6Om1ha2VfcGFpcih0aGlzLT5oZWlnaHRzW2ldLCBudW1lcmljOjpmZGl2KHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0sIGNudCkpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIC8vcmV0dXJuIGhpc3RvZ3JhbTsKKyAgICAgICAgICAgIHJldHVybiBtYWtlX2l0ZXJhdG9yX3JhbmdlKHRoaXMtPmhpc3RvZ3JhbSk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHN0ZDo6c2l6ZV90IG51bV9jZWxsczsgICAgICAgICAgICAvLyBudW1iZXIgb2YgY2VsbHMgYgorICAgICAgICBhcnJheV90eXBlICBoZWlnaHRzOyAgICAgICAgICAgICAgLy8gcV9pCisgICAgICAgIGFycmF5X3R5cGUgIGFjdHVhbF9wb3NpdGlvbnM7ICAgICAvLyBuX2kKKyAgICAgICAgYXJyYXlfdHlwZSAgZGVzaXJlZF9wb3NpdGlvbnM7ICAgIC8vIG4nX2kKKyAgICAgICAgYXJyYXlfdHlwZSAgcG9zaXRpb25zX2luY3JlbWVudHM7IC8vIGRuJ19pCisgICAgICAgIG11dGFibGUgaGlzdG9ncmFtX3R5cGUgaGlzdG9ncmFtOyAvLyBoaXN0b2dyYW0KKyAgICAgICAgbXV0YWJsZSBib29sIGlzX2RpcnR5OworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbgorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgICAgLCBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9udW1fY2VsbHMKKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6cF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25faW1wbDxtcGw6Ol8xPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OnBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbj4gY29uc3QgcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24gPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uKQorfQorCit1c2luZyBleHRyYWN0OjpwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbjsKKworLy8gU28gdGhhdCBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyB3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbiB0eXBlOworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbi5ocHAKQEAgLTAsMCArMSwxOSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDEyIEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUF9TUVVBUkVfQ1VNVUxBVElWRV9ESVNUUklCVVRJT05fSFBQXzAzXzE5XzIwMTIKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUF9TUVVBUkVfQ1VNVUxBVElWRV9ESVNUUklCVVRJT05fSFBQXzAzXzE5XzIwMTIKKworI2lmIGRlZmluZWQoX01TQ19WRVIpIHx8IGRlZmluZWQoX19CT1JMQU5EQ19fKSB8fCBkZWZpbmVkKF9fRE1DX18pCisjICBwcmFnbWEgbWVzc2FnZSAoIldhcm5pbmc6IFRoaXMgaGVhZGVyIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2U6IGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwIikKKyNlbGlmIGRlZmluZWQoX19HTlVDX18pIHx8IGRlZmluZWQoX19IUF9hQ0MpIHx8IGRlZmluZWQoX19TVU5QUk9fQ0MpIHx8IGRlZmluZWQoX19JQk1DUFBfXykKKyMgIHdhcm5pbmcgIlRoaXMgaGVhZGVyIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2U6IGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwIgorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wX3NxdWFyZV9jdW11bF9kaXN0LmhwcD4KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcF9zcXVhcmVfcXVhbnRpbGUuaHBwCkBAIC0wLDAgKzEsMjU3IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBwX3NxdWFyZV9xdWFudGlsZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRGFuaWVsIEVnbG9mZi4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUF9TUVVBUkVfUVVBTlRJTEVfSFBQX0RFXzAxXzAxXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUF9TUVVBUkVfUVVBTlRJTEVfSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPGNtYXRoPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvYXJyYXkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHBfc3F1YXJlX3F1YW50aWxlX2ltcGwKKyAgICAvLyAgc2luZ2xlIHF1YW50aWxlIGVzdGltYXRpb24KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIFNpbmdsZSBxdWFudGlsZSBlc3RpbWF0aW9uIHdpdGggdGhlIFxmJFBeMlxmJCBhbGdvcml0aG0KKworICAgICAgICBUaGUgXGYkUF4yXGYkIGFsZ29yaXRobSBlc3RpbWF0ZXMgYSBxdWFudGlsZSBkeW5hbWljYWxseSB3aXRob3V0IHN0b3Jpbmcgc2FtcGxlcy4gSW5zdGVhZCBvZgorICAgICAgICBzdG9yaW5nIHRoZSB3aG9sZSBzYW1wbGUgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24sIG9ubHkgZml2ZSBwb2ludHMgKG1hcmtlcnMpIGFyZSBzdG9yZWQuIFRoZSBoZWlnaHRzCisgICAgICAgIG9mIHRoZXNlIG1hcmtlcnMgYXJlIHRoZSBtaW5pbXVtIGFuZCB0aGUgbWF4aW11bSBvZiB0aGUgc2FtcGxlcyBhbmQgdGhlIGN1cnJlbnQgZXN0aW1hdGVzIG9mIHRoZQorICAgICAgICBcZiQocC8yKVxmJC0sIFxmJHBcZiQtIGFuZCBcZiQoMStwKS8yXGYkLXF1YW50aWxlcy4gVGhlaXIgcG9zaXRpb25zIGFyZSBlcXVhbCB0byB0aGUgbnVtYmVyCisgICAgICAgIG9mIHNhbXBsZXMgdGhhdCBhcmUgc21hbGxlciBvciBlcXVhbCB0byB0aGUgbWFya2Vycy4gRWFjaCB0aW1lIGEgbmV3IHNhbXBsZXMgaXMgcmVjb3JkZWQsIHRoZQorICAgICAgICBwb3NpdGlvbnMgb2YgdGhlIG1hcmtlcnMgYXJlIHVwZGF0ZWQgYW5kIGlmIG5lY2Vzc2FyeSB0aGVpciBoZWlnaHRzIGFyZSBhZGp1c3RlZCB1c2luZyBhIHBpZWNld2lzZS0KKyAgICAgICAgcGFyYWJvbGljIGZvcm11bGEuCisKKyAgICAgICAgRm9yIGZ1cnRoZXIgZGV0YWlscywgc2VlCisKKyAgICAgICAgUi4gSmFpbiBhbmQgSS4gQ2hsYW10YWMsIFRoZSBQXjIgYWxnb3JpdGhtIGZvciBkeW5hbWljIGNhbGN1bGF0aW9uIG9mIHF1YW50aWxlcyBhbmQKKyAgICAgICAgaGlzdG9ncmFtcyB3aXRob3V0IHN0b3Jpbmcgb2JzZXJ2YXRpb25zLCBDb21tdW5pY2F0aW9ucyBvZiB0aGUgQUNNLAorICAgICAgICBWb2x1bWUgMjggKE9jdG9iZXIpLCBOdW1iZXIgMTAsIDE5ODUsIHAuIDEwNzYtMTA4NS4KKworICAgICAgICBAcGFyYW0gcXVhbnRpbGVfcHJvYmFiaWxpdHkKKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgSW1wbD4KKyAgICBzdHJ1Y3QgcF9zcXVhcmVfcXVhbnRpbGVfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIHR5cGVkZWYgYXJyYXk8ZmxvYXRfdHlwZSwgNT4gYXJyYXlfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBmbG9hdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHBfc3F1YXJlX3F1YW50aWxlX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHAoaXNfc2FtZTxJbXBsLCBmb3JfbWVkaWFuPjo6dmFsdWUgPyAwLjUgOiBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5IHwgMC41XSkKKyAgICAgICAgICAsIGhlaWdodHMoKQorICAgICAgICAgICwgYWN0dWFsX3Bvc2l0aW9ucygpCisgICAgICAgICAgLCBkZXNpcmVkX3Bvc2l0aW9ucygpCisgICAgICAgICAgLCBwb3NpdGlvbnNfaW5jcmVtZW50cygpCisgICAgICAgIHsKKyAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gMDsgaSA8IDU7ICsraSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldID0gaSArIDEuOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1swXSA9IDEuOworICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbMV0gPSAxLiArIDIuICogdGhpcy0+cDsKKyAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zWzJdID0gMS4gKyA0LiAqIHRoaXMtPnA7CisgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1szXSA9IDMuICsgMi4gKiB0aGlzLT5wOworICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbNF0gPSA1LjsKKworICAgICAgICAgICAgdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbMF0gPSAwLjsKKyAgICAgICAgICAgIHRoaXMtPnBvc2l0aW9uc19pbmNyZW1lbnRzWzFdID0gdGhpcy0+cCAvIDIuOworICAgICAgICAgICAgdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbMl0gPSB0aGlzLT5wOworICAgICAgICAgICAgdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbM10gPSAoMS4gKyB0aGlzLT5wKSAvIDIuOworICAgICAgICAgICAgdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbNF0gPSAxLjsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisKKyAgICAgICAgICAgIC8vIGFjY3VtdWxhdGUgNSBmaXJzdCBzYW1wbGVzCisgICAgICAgICAgICBpZihjbnQgPD0gNSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2NudCAtIDFdID0gYXJnc1tzYW1wbGVdOworCisgICAgICAgICAgICAgICAgLy8gY29tcGxldGUgdGhlIGluaXRpYWxpemF0aW9uIG9mIGhlaWdodHMgYnkgc29ydGluZworICAgICAgICAgICAgICAgIGlmKGNudCA9PSA1KQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgc3RkOjpzb3J0KHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgdGhpcy0+aGVpZ2h0cy5lbmQoKSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IHNhbXBsZV9jZWxsID0gMTsgLy8gaworCisgICAgICAgICAgICAgICAgLy8gZmluZCBjZWxsIGsgc3VjaCB0aGF0IGhlaWdodHNbay0xXSA8PSBhcmdzW3NhbXBsZV0gPCBoZWlnaHRzW2tdIGFuZCBhZGp1c3QgZXh0cmVtZSB2YWx1ZXMKKyAgICAgICAgICAgICAgICBpZiAoYXJnc1tzYW1wbGVdIDwgdGhpcy0+aGVpZ2h0c1swXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbMF0gPSBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gMTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy0+aGVpZ2h0c1s0XSA8PSBhcmdzW3NhbXBsZV0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzWzRdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgICAgICBzYW1wbGVfY2VsbCA9IDQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXRlcmF0b3I7CisgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yIGl0ID0gc3RkOjp1cHBlcl9ib3VuZCgKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHMuYmVnaW4oKQorICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+aGVpZ2h0cy5lbmQoKQorICAgICAgICAgICAgICAgICAgICAgICwgYXJnc1tzYW1wbGVdCisgICAgICAgICAgICAgICAgICAgICk7CisKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvbnMgb2YgbWFya2VycyBhYm92ZSBzYW1wbGVfY2VsbAorICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpID0gc2FtcGxlX2NlbGw7IGkgPCA1OyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICArK3RoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGRlc2lyZWQgcG9zaXRpb25zIG9mIGFsbCBtYXJrZXJzCisgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgNTsgKytpKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbaV0gKz0gdGhpcy0+cG9zaXRpb25zX2luY3JlbWVudHNbaV07CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgLy8gYWRqdXN0IGhlaWdodHMgYW5kIGFjdHVhbCBwb3NpdGlvbnMgb2YgbWFya2VycyAxIHRvIDMgaWYgbmVjZXNzYXJ5CisgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGkgPSAxOyBpIDw9IDM7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBkZXNpcmVkIHBvc2l0aW9ucworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGQgPSB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1tpXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvIG5leHQgcG9zaXRpb24KKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBkcCA9IHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaSArIDFdIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gcHJldmlvdXMgcG9zaXRpb24KKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBkbSA9IHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaSAtIDFdIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBoZWlnaHQgZHMKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBocCA9ICh0aGlzLT5oZWlnaHRzW2kgKyAxXSAtIHRoaXMtPmhlaWdodHNbaV0pIC8gZHA7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaG0gPSAodGhpcy0+aGVpZ2h0c1tpIC0gMV0gLSB0aGlzLT5oZWlnaHRzW2ldKSAvIGRtOworCisgICAgICAgICAgICAgICAgICAgIGlmKChkID49IDEuICYmIGRwID4gMS4pIHx8IChkIDw9IC0xLiAmJiBkbSA8IC0xLikpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0IHNpZ25fZCA9IHN0YXRpY19jYXN0PHNob3J0PihkIC8gc3RkOjphYnMoZCkpOworCisgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnkgYWRqdXN0aW5nIGhlaWdodHNbaV0gdXNpbmcgcC1zcXVhcmVkIGZvcm11bGEKKyAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaCA9IHRoaXMtPmhlaWdodHNbaV0gKyBzaWduX2QgLyAoZHAgLSBkbSkgKiAoKHNpZ25fZCAtIGRtKSAqIGhwCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoZHAgLSBzaWduX2QpICogaG0pOworCisgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLT5oZWlnaHRzW2kgLSAxXSA8IGggJiYgaCA8IHRoaXMtPmhlaWdodHNbaSArIDFdKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gPSBoOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBsaW5lYXIgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGQgPiAwKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSArPSBocDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZCA8IDApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldIC09IGhtOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gc2lnbl9kOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmhlaWdodHNbMl07CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIGZsb2F0X3R5cGUgcDsgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWFudGlsZSBwcm9iYWJpbGl0eSBwCisgICAgICAgIGFycmF5X3R5cGUgaGVpZ2h0czsgICAgICAgICAgICAgIC8vIHFfaQorICAgICAgICBhcnJheV90eXBlIGFjdHVhbF9wb3NpdGlvbnM7ICAgICAvLyBuX2kKKyAgICAgICAgYXJyYXlfdHlwZSBkZXNpcmVkX3Bvc2l0aW9uczsgICAgLy8gbidfaQorICAgICAgICBhcnJheV90eXBlIHBvc2l0aW9uc19pbmNyZW1lbnRzOyAvLyBkbidfaQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnBfc3F1YXJlX3F1YW50aWxlCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBwX3NxdWFyZV9xdWFudGlsZQorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwX3NxdWFyZV9xdWFudGlsZV9pbXBsPG1wbDo6XzEsIHJlZ3VsYXI+IGltcGw7CisgICAgfTsKKyAgICBzdHJ1Y3QgcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbgorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwX3NxdWFyZV9xdWFudGlsZV9pbXBsPG1wbDo6XzEsIGZvcl9tZWRpYW4+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6cF9zcXVhcmVfcXVhbnRpbGUKKy8vIGV4dHJhY3Q6OnBfc3F1YXJlX3F1YW50aWxlX2Zvcl9tZWRpYW4KKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OnBfc3F1YXJlX3F1YW50aWxlPiBjb25zdCBwX3NxdWFyZV9xdWFudGlsZSA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OnBfc3F1YXJlX3F1YW50aWxlX2Zvcl9tZWRpYW4+IGNvbnN0IHBfc3F1YXJlX3F1YW50aWxlX2Zvcl9tZWRpYW4gPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBfc3F1YXJlX3F1YW50aWxlKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBfc3F1YXJlX3F1YW50aWxlX2Zvcl9tZWRpYW4pCit9CisKK3VzaW5nIGV4dHJhY3Q6OnBfc3F1YXJlX3F1YW50aWxlOwordXNpbmcgZXh0cmFjdDo6cF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbjsKKworLy8gU28gdGhhdCBwX3NxdWFyZV9xdWFudGlsZSBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyB3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZSB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnBfc3F1YXJlX3F1YW50aWxlPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZSB0eXBlOworfTsKKwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZT4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cF9zcXVhcmVfcXVhbnRpbGU+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wYXJhbWV0ZXJzL3F1YW50aWxlX3Byb2JhYmlsaXR5LmhwcApAQCAtMCwwICsxLDIzIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBxdWFudGlsZV9wcm9iYWJpbGl0eS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QQVJBTUVURVJTX1FVQU5USUxFX1BST0JBQklMSVRZX0hQUF9FQU5fMDNfMTFfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QQVJBTUVURVJTX1FVQU5USUxFX1BST0JBQklMSVRZX0hQUF9FQU5fMDNfMTFfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIHF1YW50aWxlX3Byb2JhYmlsaXR5KQorCitCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChxdWFudGlsZV9wcm9iYWJpbGl0eSkKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcGVha3Nfb3Zlcl90aHJlc2hvbGQuaHBwCkBAIC0wLDAgKzEsNDA1IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBwZWFrc19vdmVyX3RocmVzaG9sZC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRGFuaWVsIEVnbG9mZiwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QRUFLU19PVkVSX1RIUkVTSE9MRF9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QRUFLU19PVkVSX1RIUkVTSE9MRF9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxudW1lcmljPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnL25vX3RyMS9jbWF0aC5ocHA+IC8vIHBvdworI2luY2x1ZGUgPHNzdHJlYW0+IC8vIHN0cmluZ3N0cmVhbQorI2luY2x1ZGUgPHN0ZGV4Y2VwdD4gLy8gcnVudGltZV9lcnJvcgorI2luY2x1ZGUgPGJvb3N0L3Rocm93X2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2ludC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R1cGxlL3R1cGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvYWNjdW11bGF0b3JzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjIHByYWdtYSB3YXJuaW5nKGRpc2FibGU6IDQxMjcpIC8vIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRocmVzaG9sZF9wcm9iYWJpbGl0eSBhbmQgdGhyZXNob2xkIG5hbWVkIHBhcmFtZXRlcnMKKy8vCitCT09TVF9QQVJBTUVURVJfTkVTVEVEX0tFWVdPUkQodGFnLCBwb3RfdGhyZXNob2xkX3ZhbHVlLCB0aHJlc2hvbGRfdmFsdWUpCitCT09TVF9QQVJBTUVURVJfTkVTVEVEX0tFWVdPUkQodGFnLCBwb3RfdGhyZXNob2xkX3Byb2JhYmlsaXR5LCB0aHJlc2hvbGRfcHJvYmFiaWxpdHkpCisKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBvdF90aHJlc2hvbGRfdmFsdWUpCitCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChwb3RfdGhyZXNob2xkX3Byb2JhYmlsaXR5KQorCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBwZWFrc19vdmVyX3RocmVzaG9sZF9pbXBsCisgICAgLy8gIHdvcmtzIHdpdGggYW4gZXhwbGljaXQgdGhyZXNob2xkIHZhbHVlIGFuZCBkb2VzIG5vdCBkZXBlbmQgb24gb3JkZXIgc3RhdGlzdGljcworICAgIC8qKgorICAgICAgICBAYnJpZWYgUGVha3Mgb3ZlciBUaHJlc2hvbGQgTWV0aG9kIGZvciBRdWFudGlsZSBhbmQgVGFpbCBNZWFuIEVzdGltYXRpb24KKworICAgICAgICBBY2NvcmRpbmcgdG8gdGhlIHRoZW9yZW0gb2YgUGlja2FuZHMtQmFsa2VtYS1kZSBIYWFuLCB0aGUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIFxmJEZfdSh4KVxmJCBvZgorICAgICAgICB0aGUgZXhjZXNzZXMgXGYkeFxmJCBvdmVyIHNvbWUgc3VmZmljaWVudGx5IGhpZ2ggdGhyZXNob2xkIFxmJHVcZiQgb2YgYSBkaXN0cmlidXRpb24gZnVuY3Rpb24gXGYkRih4KVxmJAorICAgICAgICBtYXkgYmUgYXBwcm94aW1hdGVkIGJ5IGEgZ2VuZXJhbGl6ZWQgUGFyZXRvIGRpc3RyaWJ1dGlvbgorICAgICAgICBcZlsKKyAgICAgICAgICAgIEdfe1x4aSxcYmV0YX0oeCkgPQorICAgICAgICAgICAgXGxlZnRceworICAgICAgICAgICAgXGJlZ2lue2FycmF5fXtsbH0KKyAgICAgICAgICAgICAgICBcYmV0YV57LTF9XGxlZnQoMStcZnJhY3tceGkgeH17XGJldGF9XHJpZ2h0KV57LTEvXHhpLTF9ICYgXHRleHRybXtpZiB9XHhpXG5lcTBcXAorICAgICAgICAgICAgICAgIFxiZXRhXnstMX1cZXhwXGxlZnQoLVxmcmFje3h9e1xiZXRhfVxyaWdodCkgJiBcdGV4dHJte2lmIH1ceGk9MCwKKyAgICAgICAgICAgIFxlbmR7YXJyYXl9CisgICAgICAgICAgICBccmlnaHQuCisgICAgICAgIFxmXQorICAgICAgICB3aXRoIHN1aXRhYmxlIHBhcmFtZXRlcnMgXGYkXHhpXGYkIGFuZCBcZiRcYmV0YVxmJCB0aGF0IGNhbiBiZSBlc3RpbWF0ZWQsIGUuZy4sIHdpdGggdGhlIG1ldGhvZCBvZiBtb21lbnRzLCBjZi4KKyAgICAgICAgSG9za2luZyBhbmQgV2FsbGlzICgxOTg3KSwKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcYmVnaW57YXJyYXl9e2xsbH0KKyAgICAgICAgICAgIFxoYXR7XHhpfSAmID0gJiBcZnJhY3sxfXsyfVxsZWZ0WzEtXGZyYWN7KFxoYXR7XG11fS11KV4yfXtcaGF0e1xzaWdtYX1eMn1ccmlnaHRdXFwKKyAgICAgICAgICAgIFxoYXR7XGJldGF9ICYgPSAmIFxmcmFje1xoYXR7XG11fS11fXsyfVxsZWZ0W1xmcmFjeyhcaGF0e1xtdX0tdSleMn17XGhhdHtcc2lnbWF9XjJ9KzFccmlnaHRdLAorICAgICAgICAgICAgXGVuZHthcnJheX0KKyAgICAgICAgXGZdCisgICAgICAgIFxmJFxoYXR7XG11fVxmJCBhbmQgXGYkXGhhdHtcc2lnbWF9XjJcZiQgYmVpbmcgdGhlIGVtcGlyaWNhbCBtZWFuIGFuZCB2YXJpYW5jZSBvZiB0aGUgc2FtcGxlcyBvdmVyCisgICAgICAgIHRoZSB0aHJlc2hvbGQgXGYkdVxmJC4gRXF1aXZhbGVudGx5LCB0aGUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uCisgICAgICAgIFxmJEZfdSh4LXUpXGYkIG9mIHRoZSBleGNlZWRhbmNlcyBcZiR4LXVcZiQgY2FuIGJlIGFwcHJveGltYXRlZCBieQorICAgICAgICBcZiRHX3tceGksXGJldGF9KHgtdSk9R197XHhpLFxiZXRhLHV9KHgpXGYkLiBTaW5jZSBmb3IgXGYkeFxnZXEgdVxmJCB0aGUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIFxmJEYoeClcZiQKKyAgICAgICAgY2FuIGJlIHdyaXR0ZW4gYXMKKyAgICAgICAgXGZbCisgICAgICAgICAgICBGKHgpID0gWzEgLSBcUChYIFxsZXEgdSldRl91KHggLSB1KSArIFxQKFggXGxlcSB1KQorICAgICAgICBcZl0KKyAgICAgICAgYW5kIHRoZSBwcm9iYWJpbGl0eSBcZiRcUChYIFxsZXEgdSlcZiQgY2FuIGJlIGFwcHJveGltYXRlZCBieSB0aGUgZW1waXJpY2FsIGRpc3RyaWJ1dGlvbiBmdW5jdGlvbgorICAgICAgICBcZiRGX24odSlcZiQgZXZhbHVhdGVkIGF0IFxmJHVcZiQsIGFuIGVzdGltYXRvciBvZiBcZiRGKHgpXGYkIGlzIGdpdmVuIGJ5CisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7Rn0oeCkgPSBbMSAtIEZfbih1KV1HX3tceGksXGJldGEsdX0oeCkgKyBGX24odSkuCisgICAgICAgIFxmXQorICAgICAgICBJdCBjYW4gYmUgc2hvd24gdGhhdCBcZiRcd2lkZWhhdHtGfSh4KVxmJCBpcyBhIGdlbmVyYWxpemVkCisgICAgICAgIFBhcmV0byBkaXN0cmlidXRpb24gXGYkR197XHhpLFxiYXJ7XGJldGF9LFxiYXJ7dX19KHgpXGYkIHdpdGggXGYkXGJhcntcYmV0YX09XGJldGFbMS1GX24odSldXntceGl9XGYkCisgICAgICAgIGFuZCBcZiRcYmFye3V9PXUtXGJhcntcYmV0YX1cbGVmdFx7WzEtRl9uKHUpXV57LVx4aX0tMVxyaWdodFx9L1x4aVxmJC4gQnkgaW52ZXJ0aW5nIFxmJFx3aWRlaGF0e0Z9KHgpXGYkLAorICAgICAgICBvbmUgb2J0YWlucyBhbiBlc3RpbWF0b3IgZm9yIHRoZSBcZiRcYWxwaGFcZiQtcXVhbnRpbGUsCisgICAgICAgIFxmWworICAgICAgICAgICAgXGhhdHtxfV97XGFscGhhfSA9IFxiYXJ7dX0gKyBcZnJhY3tcYmFye1xiZXRhfX17XHhpfVxsZWZ0WygxLVxhbHBoYSleey1ceGl9LTFccmlnaHRdLAorICAgICAgICBcZl0KKyAgICAgICAgYW5kIHNpbWlsYXJseSBhbiBlc3RpbWF0b3IgZm9yIHRoZSAoY29oZXJlbnQpIHRhaWwgbWVhbiwKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcd2lkZWhhdHtDVE19X3tcYWxwaGF9ID0gXGhhdHtxfV97XGFscGhhfSAtIFxmcmFje1xiYXJ7XGJldGF9fXtceGktMX0oMS1cYWxwaGEpXnstXHhpfSwKKyAgICAgICAgXGZdCisgICAgICAgIGNmLiBNY05laWwgYW5kIEZyZXkgKDIwMDApLgorCisgICAgICAgIE5vdGUgdGhhdCBpbiBjYXNlIGV4dHJlbWUgdmFsdWVzIG9mIHRoZSBsZWZ0IHRhaWwgYXJlIGZpdHRlZCwgdGhlIGRpc3RyaWJ1dGlvbiBpcyBtaXJyb3JlZCB3aXRoIHJlc3BlY3QgdG8gdGhlCisgICAgICAgIFxmJHlcZiQgYXhpcyBzdWNoIHRoYXQgdGhlIGxlZnQgdGFpbCBjYW4gYmUgdHJlYXRlZCBhcyBhIHJpZ2h0IHRhaWwuIFRoZSBjb21wdXRlZCBmaXQgcGFyYW1ldGVycyB0aHVzIGRlZmluZQorICAgICAgICB0aGUgUGFyZXRvIGRpc3RyaWJ1dGlvbiB0aGF0IGZpdHMgdGhlIG1pcnJvcmVkIGxlZnQgdGFpbC4gV2hlbiBxdWFudGl0aWVzIGxpa2UgYSBxdWFudGlsZSBvciBhIHRhaWwgbWVhbiBhcmUKKyAgICAgICAgY29tcHV0ZWQgdXNpbmcgdGhlIGZpdCBwYXJhbWV0ZXJzIG9idGFpbmVkIGZyb20gdGhlIG1pcnJvcmVkIGRhdGEsIHRoZSByZXN1bHQgaXMgbWlycm9yZWQgYmFjaywgeWllbGRpbmcgdGhlCisgICAgICAgIGNvcnJlY3QgcmVzdWx0LgorCisgICAgICAgIEZvciBmdXJ0aGVyIGRldGFpbHMsIHNlZQorCisgICAgICAgIEouIFIuIE0uIEhvc2tpbmcgYW5kIEouIFIuIFdhbGxpcywgUGFyYW1ldGVyIGFuZCBxdWFudGlsZSBlc3RpbWF0aW9uIGZvciB0aGUgZ2VuZXJhbGl6ZWQgUGFyZXRvIGRpc3RyaWJ1dGlvbiwKKyAgICAgICAgVGVjaG5vbWV0cmljcywgVm9sdW1lIDI5LCAxOTg3LCBwLiAzMzktMzQ5CisKKyAgICAgICAgQS4gSi4gTWNOZWlsIGFuZCBSLiBGcmV5LCBFc3RpbWF0aW9uIG9mIFRhaWwtUmVsYXRlZCBSaXNrIE1lYXN1cmVzIGZvciBIZXRlcm9zY2VkYXN0aWMgRmluYW5jaWFsIFRpbWUgU2VyaWVzOgorICAgICAgICBhbiBFeHRyZW1lIFZhbHVlIEFwcHJvYWNoLCBKb3VybmFsIG9mIEVtcGlyaWNhbCBGaW5hbmNlLCBWb2x1bWUgNywgMjAwMCwgcC4gMjcxLTMwMAorCisgICAgICAgIEBwYXJhbSBxdWFudGlsZV9wcm9iYWJpbGl0eQorICAgICAgICBAcGFyYW0gcG90X3RocmVzaG9sZF92YWx1ZQorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBlYWtzX292ZXJfdGhyZXNob2xkX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGJvb3N0Ojp0dXBsZTxmbG9hdF90eXBlLCBmbG9hdF90eXBlLCBmbG9hdF90eXBlPiByZXN1bHRfdHlwZTsKKyAgICAgICAgLy8gZm9yIGxlZnQgdGFpbCBmaXR0aW5nLCBtaXJyb3IgdGhlIGV4dHJlbWUgdmFsdWVzCisgICAgICAgIHR5cGVkZWYgbXBsOjppbnRfPGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgPyAtMSA6IDE+IHNpZ247CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogTnVfKDApCisgICAgICAgICAgLCBtdV8oc2lnbjo6dmFsdWUgKiBudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCAoc3RkOjpzaXplX3QpMSkpCisgICAgICAgICAgLCBzaWdtYTJfKG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKSkKKyAgICAgICAgICAsIHRocmVzaG9sZF8oc2lnbjo6dmFsdWUgKiBhcmdzW3BvdF90aHJlc2hvbGRfdmFsdWVdKQorICAgICAgICAgICwgZml0X3BhcmFtZXRlcnNfKGJvb3N0OjptYWtlX3R1cGxlKDAuLCAwLiwgMC4pKQorICAgICAgICAgICwgaXNfZGlydHlfKHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgdGhpcy0+aXNfZGlydHlfID0gdHJ1ZTsKKworICAgICAgICAgICAgaWYgKHNpZ246OnZhbHVlICogYXJnc1tzYW1wbGVdID4gdGhpcy0+dGhyZXNob2xkXykKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5tdV8gKz0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgIHRoaXMtPnNpZ21hMl8gKz0gYXJnc1tzYW1wbGVdICogYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgICsrdGhpcy0+TnVfOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eV8pCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHlfID0gZmFsc2U7CisKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgICAgIHRoaXMtPm11XyA9IHNpZ246OnZhbHVlICogbnVtZXJpYzo6ZmRpdih0aGlzLT5tdV8sIHRoaXMtPk51Xyk7CisgICAgICAgICAgICAgICAgdGhpcy0+c2lnbWEyXyA9IG51bWVyaWM6OmZkaXYodGhpcy0+c2lnbWEyXywgdGhpcy0+TnVfKTsKKyAgICAgICAgICAgICAgICB0aGlzLT5zaWdtYTJfIC09IHRoaXMtPm11XyAqIHRoaXMtPm11XzsKKworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgdGhyZXNob2xkX3Byb2JhYmlsaXR5ID0gbnVtZXJpYzo6ZmRpdihjbnQgLSB0aGlzLT5OdV8sIGNudCk7CisKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHRtcCA9IG51bWVyaWM6OmZkaXYoKCB0aGlzLT5tdV8gLSB0aGlzLT50aHJlc2hvbGRfICkqKCB0aGlzLT5tdV8gLSB0aGlzLT50aHJlc2hvbGRfICksIHRoaXMtPnNpZ21hMl8pOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgeGlfaGF0ID0gMC41ICogKCAxLiAtIHRtcCApOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYmV0YV9oYXQgPSAwLjUgKiAoIHRoaXMtPm11XyAtIHRoaXMtPnRocmVzaG9sZF8gKSAqICggMS4gKyB0bXAgKTsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGJldGFfYmFyID0gYmV0YV9oYXQgKiBzdGQ6OnBvdygxLiAtIHRocmVzaG9sZF9wcm9iYWJpbGl0eSwgeGlfaGF0KTsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHVfYmFyID0gdGhpcy0+dGhyZXNob2xkXyAtIGJldGFfYmFyICogKCBzdGQ6OnBvdygxLiAtIHRocmVzaG9sZF9wcm9iYWJpbGl0eSwgLXhpX2hhdCkgLSAxLikveGlfaGF0OworICAgICAgICAgICAgICAgIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXyA9IGJvb3N0OjptYWtlX3R1cGxlKHVfYmFyLCBiZXRhX2JhciwgeGlfaGF0KTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXzsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgc3RkOjpzaXplX3QgTnVfOyAgICAgICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBzYW1wbGVzIGxhcmdlciB0aGFuIHRocmVzaG9sZAorICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgbXVfOyAgICAgICAgICAgICAgLy8gbWVhbiBvZiBOdV8gbGFyZ2VzdCBzYW1wbGVzCisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBzaWdtYTJfOyAgICAgICAgICAvLyB2YXJpYW5jZSBvZiBOdV8gbGFyZ2VzdCBzYW1wbGVzCisgICAgICAgIGZsb2F0X3R5cGUgdGhyZXNob2xkXzsKKyAgICAgICAgbXV0YWJsZSByZXN1bHRfdHlwZSBmaXRfcGFyYW1ldGVyc187IC8vIGJvb3N0Ojp0dXBsZSB0aGF0IHN0b3JlcyBmaXQgcGFyYW1ldGVycworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHlfOworICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYl9pbXBsCisgICAgLy8gIGRldGVybWluZXMgdGhyZXNob2xkIGZyb20gYSBnaXZlbiB0aHJlc2hvbGQgcHJvYmFiaWxpdHkgdXNpbmcgb3JkZXIgc3RhdGlzdGljcworICAgIC8qKgorICAgICAgICBAYnJpZWYgUGVha3Mgb3ZlciBUaHJlc2hvbGQgTWV0aG9kIGZvciBRdWFudGlsZSBhbmQgVGFpbCBNZWFuIEVzdGltYXRpb24KKworICAgICAgICBAc2EgcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbAorCisgICAgICAgIEBwYXJhbSBxdWFudGlsZV9wcm9iYWJpbGl0eQorICAgICAgICBAcGFyYW0gcG90X3RocmVzaG9sZF9wcm9iYWJpbGl0eQorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBlYWtzX292ZXJfdGhyZXNob2xkX3Byb2JfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgYm9vc3Q6OnR1cGxlPGZsb2F0X3R5cGUsIGZsb2F0X3R5cGUsIGZsb2F0X3R5cGU+IHJlc3VsdF90eXBlOworICAgICAgICAvLyBmb3IgbGVmdCB0YWlsIGZpdHRpbmcsIG1pcnJvciB0aGUgZXh0cmVtZSB2YWx1ZXMKKyAgICAgICAgdHlwZWRlZiBtcGw6OmludF88aXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSA/IC0xIDogMT4gc2lnbjsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICBwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IG11XyhzaWduOjp2YWx1ZSAqIG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKSkKKyAgICAgICAgICAsIHNpZ21hMl8obnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSwgKHN0ZDo6c2l6ZV90KTEpKQorICAgICAgICAgICwgdGhyZXNob2xkX3Byb2JhYmlsaXR5XyhhcmdzW3BvdF90aHJlc2hvbGRfcHJvYmFiaWxpdHldKQorICAgICAgICAgICwgZml0X3BhcmFtZXRlcnNfKGJvb3N0OjptYWtlX3R1cGxlKDAuLCAwLiwgMC4pKQorICAgICAgICAgICwgaXNfZGlydHlfKHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eV8gPSB0cnVlOworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eV8pCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHlfID0gZmFsc2U7CisKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgICAgIC8vIHRoZSBuJ3RoIGNhY2hlZCBzYW1wbGUgcHJvdmlkZXMgYW4gYXBwcm94aW1hdGUgdGhyZXNob2xkIHZhbHVlIHUKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBuID0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KAorICAgICAgICAgICAgICAgICAgICBzdGQ6OmNlaWwoCisgICAgICAgICAgICAgICAgICAgICAgICBjbnQgKiAoICggaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSApID8gdGhpcy0+dGhyZXNob2xkX3Byb2JhYmlsaXR5XyA6IDEuIC0gdGhpcy0+dGhyZXNob2xkX3Byb2JhYmlsaXR5XyApCisgICAgICAgICAgICAgICAgICAgICkKKyAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICAgICAgLy8gSWYgbiBpcyBpbiBhIHZhbGlkIHJhbmdlLCByZXR1cm4gcmVzdWx0LCBvdGhlcndpc2UgcmV0dXJuIE5hTiBvciB0aHJvdyBleGNlcHRpb24KKyAgICAgICAgICAgICAgICBpZiAoIG4gPj0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KHRhaWwoYXJncykuc2l6ZSgpKSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmIChzdGQ6Om51bWVyaWNfbGltaXRzPGZsb2F0X3R5cGU+OjpoYXNfcXVpZXRfTmFOKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9vc3Q6Om1ha2VfdHVwbGUoCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpudW1lcmljX2xpbWl0czxmbG9hdF90eXBlPjo6cXVpZXRfTmFOKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzdGQ6Om51bWVyaWNfbGltaXRzPGZsb2F0X3R5cGU+OjpxdWlldF9OYU4oKQorICAgICAgICAgICAgICAgICAgICAgICAgICAsIHN0ZDo6bnVtZXJpY19saW1pdHM8ZmxvYXRfdHlwZT46OnF1aWV0X05hTigpCisgICAgICAgICAgICAgICAgICAgICAgICApOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpvc3RyaW5nc3RyZWFtIG1zZzsKKyAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA8PCAiaW5kZXggbiA9ICIgPDwgbiA8PCAiIGlzIG5vdCBpbiB2YWxpZCByYW5nZSBbMCwgIiA8PCB0YWlsKGFyZ3MpLnNpemUoKSA8PCAiKSI7CisgICAgICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBib29zdDo6bWFrZV90dXBsZShTYW1wbGUoMCksIFNhbXBsZSgwKSwgU2FtcGxlKDApKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHUgPSAqKHRhaWwoYXJncykuYmVnaW4oKSArIG4gLSAxKSAqIHNpZ246OnZhbHVlOworCisgICAgICAgICAgICAgICAgICAgIC8vIGNvbXB1dGUgbWVhbiBhbmQgdmFyaWFuY2Ugb2Ygc2FtcGxlcyBhYm92ZS91bmRlciB0aHJlc2hvbGQgdmFsdWUgdQorICAgICAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbjsgKytpKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBtdV8gKz0gKih0YWlsKGFyZ3MpLmJlZ2luKCkgKyBpKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHNpZ21hMl8gKz0gKih0YWlsKGFyZ3MpLmJlZ2luKCkgKyBpKSAqICgqKHRhaWwoYXJncykuYmVnaW4oKSArIGkpKTsKKyAgICAgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgICAgIHRoaXMtPm11XyA9IHNpZ246OnZhbHVlICogbnVtZXJpYzo6ZmRpdih0aGlzLT5tdV8sIG4pOworICAgICAgICAgICAgICAgICAgICB0aGlzLT5zaWdtYTJfID0gbnVtZXJpYzo6ZmRpdih0aGlzLT5zaWdtYTJfLCBuKTsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+c2lnbWEyXyAtPSB0aGlzLT5tdV8gKiB0aGlzLT5tdV87CisKKyAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUpCisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT50aHJlc2hvbGRfcHJvYmFiaWxpdHlfID0gMS4gLSB0aGlzLT50aHJlc2hvbGRfcHJvYmFiaWxpdHlfOworCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgdG1wID0gbnVtZXJpYzo6ZmRpdigoIHRoaXMtPm11XyAtIHUgKSooIHRoaXMtPm11XyAtIHUgKSwgdGhpcy0+c2lnbWEyXyk7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgeGlfaGF0ID0gMC41ICogKCAxLiAtIHRtcCApOworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGJldGFfaGF0ID0gMC41ICogKCB0aGlzLT5tdV8gLSB1ICkgKiAoIDEuICsgdG1wICk7CisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYmV0YV9iYXIgPSBiZXRhX2hhdCAqIHN0ZDo6cG93KDEuIC0gdGhyZXNob2xkX3Byb2JhYmlsaXR5XywgeGlfaGF0KTsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSB1X2JhciA9IHUgLSBiZXRhX2JhciAqICggc3RkOjpwb3coMS4gLSB0aHJlc2hvbGRfcHJvYmFiaWxpdHlfLCAteGlfaGF0KSAtIDEuKS94aV9oYXQ7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXyA9IGJvb3N0OjptYWtlX3R1cGxlKHVfYmFyLCBiZXRhX2JhciwgeGlfaGF0KTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5maXRfcGFyYW1ldGVyc187CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBtdV87ICAgICAgICAgICAgICAgICAgICAgLy8gbWVhbiBvZiBzYW1wbGVzIGFib3ZlIHRocmVzaG9sZCB1CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBzaWdtYTJfOyAgICAgICAgICAgICAgICAgLy8gdmFyaWFuY2Ugb2Ygc2FtcGxlcyBhYm92ZSB0aHJlc2hvbGQgdQorICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgdGhyZXNob2xkX3Byb2JhYmlsaXR5XzsKKyAgICAgICAgbXV0YWJsZSByZXN1bHRfdHlwZSBmaXRfcGFyYW1ldGVyc187ICAgICAgICAvLyBib29zdDo6dHVwbGUgdGhhdCBzdG9yZXMgZml0IHBhcmFtZXRlcnMKKyAgICAgICAgbXV0YWJsZSBib29sIGlzX2RpcnR5XzsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6cGVha3Nfb3Zlcl90aHJlc2hvbGQKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBwZWFrc19vdmVyX3RocmVzaG9sZAorICAgICAgOiBkZXBlbmRzX29uPGNvdW50PgorICAgICAgLCBwb3RfdGhyZXNob2xkX3ZhbHVlCisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnBlYWtzX292ZXJfdGhyZXNob2xkX2ltcGw8bXBsOjpfMSwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBlYWtzX292ZXJfdGhyZXNob2xkX3Byb2IKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgdGFpbDxMZWZ0UmlnaHQ+ID4KKyAgICAgICwgcG90X3RocmVzaG9sZF9wcm9iYWJpbGl0eQorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iX2ltcGw8bXBsOjpfMSwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisKKyAgICBzdHJ1Y3QgYWJzdHJhY3RfcGVha3Nfb3Zlcl90aHJlc2hvbGQKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OnBlYWtzX292ZXJfdGhyZXNob2xkCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjphYnN0cmFjdF9wZWFrc19vdmVyX3RocmVzaG9sZD4gY29uc3QgcGVha3Nfb3Zlcl90aHJlc2hvbGQgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHBlYWtzX292ZXJfdGhyZXNob2xkKQorfQorCit1c2luZyBleHRyYWN0OjpwZWFrc19vdmVyX3RocmVzaG9sZDsKKworLy8gcGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF92YWx1ZSkgLT4gcGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjpwZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3ZhbHVlKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6cGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PiB0eXBlOworfTsKKworLy8gcGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSkgLT4gcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYjxMZWZ0UmlnaHQ+Cit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OnBlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4od2l0aF90aHJlc2hvbGRfcHJvYmFiaWxpdHkpPgoreworICAgIHR5cGVkZWYgdGFnOjpwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6cGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X3BlYWtzX292ZXJfdGhyZXNob2xkPgoreworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjphYnN0cmFjdF9wZWFrc19vdmVyX3RocmVzaG9sZD4KK3sKK307CisKKy8vIFNvIHRoYXQgcGVha3Nfb3Zlcl90aHJlc2hvbGQgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQKKy8vIHdpdGggd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQgd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZC4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6cGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OnBlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4gPgore307CisKKy8vIFNvIHRoYXQgcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZAorLy8gd2l0aCB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnBlYWtzX292ZXJfdGhyZXNob2xkX3Byb2I8TGVmdFJpZ2h0PiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkX3Byb2I8TGVmdFJpZ2h0PiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4gPgore307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNpZmRlZiBfTVNDX1ZFUgorIyBwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcG90X3F1YW50aWxlLmhwcApAQCAtMCwwICsxLDIwNSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gcG90X3F1YW50aWxlLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBEYW5pZWwgRWdsb2ZmLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1BPVF9RVUFOVElMRV9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QT1RfUVVBTlRJTEVfSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC90dXBsZS90dXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zYW1lLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BlYWtzX292ZXJfdGhyZXNob2xkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcG90X3F1YW50aWxlX2ltcGwKKyAgICAvLworICAgIC8qKgorICAgICAgICBAYnJpZWYgUXVhbnRpbGUgRXN0aW1hdGlvbiBiYXNlZCBvbiBQZWFrcyBvdmVyIFRocmVzaG9sZCBNZXRob2QgKGZvciBib3RoIGxlZnQgYW5kIHJpZ2h0IHRhaWxzKQorCisgICAgICAgIENvbXB1dGVzIGFuIGVzdGltYXRlCisgICAgICAgIFxmWworICAgICAgICAgICAgXGhhdHtxfV97XGFscGhhfSA9IFxiYXJ7dX0gKyBcZnJhY3tcYmFye1xiZXRhfX17XHhpfVxsZWZ0WygxLVxhbHBoYSleey1ceGl9LTFccmlnaHRdCisgICAgICAgIFxmXQorICAgICAgICBmb3IgYSByaWdodCBvciBsZWZ0IGV4dHJlbWUgcXVhbnRpbGUsIFxmJFxiYXJbdV1cZiQsIFxmJFxiYXJ7XGJldGF9XGYkIGFuZCBcZiRceGlcZiQgYmVpbmcgdGhlIHBhcmFtZXRlcnMgb2YgdGhlCisgICAgICAgIGdlbmVyYWxpemVkIFBhcmV0byBkaXN0cmlidXRpb24gdGhhdCBhcHByb3hpbWF0ZXMgdGhlIHJpZ2h0IHRhaWwgb2YgdGhlIGRpc3RyaWJ1dGlvbiAob3IgdGhlIG1pcnJvcmVkIGxlZnQgdGFpbCwKKyAgICAgICAgaW4gY2FzZSB0aGUgbGVmdCB0YWlsIGlzIHVzZWQpLiBJbiB0aGUgbGF0dGVyIGNhc2UsIHRoZSByZXN1bHQgaXMgbWlycm9yZWQgYmFjaywgeWllbGRpbmcgdGhlIGNvcnJlY3QgcmVzdWx0LgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBJbXBsLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF9xdWFudGlsZV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBmbG9hdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHBvdF9xdWFudGlsZV9pbXBsKGRvbnRfY2FyZSkKKyAgICAgICAgICA6IHNpZ25fKChpc19zYW1lPExlZnRSaWdodCwgbGVmdD46OnZhbHVlKSA/IC0xIDogMSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICAgICAgaXNfc2FtZTxJbXBsLCB3ZWlnaHRlZD4KKyAgICAgICAgICAgICAgICAgICwgdGFnOjp3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+CisgICAgICAgICAgICAgICAgICAsIHRhZzo6cGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0PgorICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgIHBlYWtzX292ZXJfdGhyZXNob2xkX3RhZzsKKworICAgICAgICAgICAgZXh0cmFjdG9yPHBlYWtzX292ZXJfdGhyZXNob2xkX3RhZz4gY29uc3Qgc29tZV9wZWFrc19vdmVyX3RocmVzaG9sZCA9IHt9OworCisgICAgICAgICAgICBmbG9hdF90eXBlIHVfYmFyICAgID0gc29tZV9wZWFrc19vdmVyX3RocmVzaG9sZChhcmdzKS50ZW1wbGF0ZSBnZXQ8MD4oKTsKKyAgICAgICAgICAgIGZsb2F0X3R5cGUgYmV0YV9iYXIgPSBzb21lX3BlYWtzX292ZXJfdGhyZXNob2xkKGFyZ3MpLnRlbXBsYXRlIGdldDwxPigpOworICAgICAgICAgICAgZmxvYXRfdHlwZSB4aV9oYXQgICA9IHNvbWVfcGVha3Nfb3Zlcl90aHJlc2hvbGQoYXJncykudGVtcGxhdGUgZ2V0PDI+KCk7CisKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5zaWduXyAqICh1X2JhciArIGJldGFfYmFyL3hpX2hhdCAqICggc3RkOjpwb3coCisgICAgICAgICAgICAgICAgICAgIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgPyBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSA6IDEuIC0gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0KKyAgICAgICAgICAgICAgICAsIC14aV9oYXQKKyAgICAgICAgICAgICAgKSAtIDEuKSk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHNob3J0IHNpZ25fOyAvLyBpZiB0aGUgZml0IHBhcmFtZXRlcnMgZnJvbSB0aGUgbWlycm9yZWQgbGVmdCB0YWlsIGV4dHJlbWUgdmFsdWVzIGFyZSB1c2VkLCBtaXJyb3IgYmFjayB0aGUgcmVzdWx0CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnBvdF9xdWFudGlsZTw+CisvLyB0YWc6OnBvdF9xdWFudGlsZV9wcm9iPD4KKy8vIHRhZzo6d2VpZ2h0ZWRfcG90X3F1YW50aWxlPD4KKy8vIHRhZzo6d2VpZ2h0ZWRfcG90X3F1YW50aWxlX3Byb2I8PgorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF9xdWFudGlsZQorICAgICAgOiBkZXBlbmRzX29uPHBlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwb3RfcXVhbnRpbGVfaW1wbDxtcGw6Ol8xLCB1bndlaWdodGVkLCBMZWZ0UmlnaHQ+IGltcGw7CisgICAgfTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF9xdWFudGlsZV9wcm9iCisgICAgICA6IGRlcGVuZHNfb248cGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYjxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6cG90X3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgdW53ZWlnaHRlZCwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wb3RfcXVhbnRpbGUKKyAgICAgIDogZGVwZW5kc19vbjx3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6cG90X3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgd2VpZ2h0ZWQsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcG90X3F1YW50aWxlX3Byb2IKKyAgICAgIDogZGVwZW5kc19vbjx3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwb3RfcXVhbnRpbGVfaW1wbDxtcGw6Ol8xLCB3ZWlnaHRlZCwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07Cit9CisKKy8vIHBvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3ZhbHVlKSAtPiBwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjpwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF92YWx1ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OnBvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+IHR5cGU7Cit9OworCisvLyBwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSkgLT4gcG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjpwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OnBvdF9xdWFudGlsZV9wcm9iPExlZnRSaWdodD4gdHlwZTsKK307CisKKy8vIHdlaWdodGVkX3BvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3ZhbHVlKSAtPiB3ZWlnaHRlZF9wb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9wb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF92YWx1ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+IHR5cGU7Cit9OworCisvLyB3ZWlnaHRlZF9wb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSkgLT4gd2VpZ2h0ZWRfcG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9wb3RfcXVhbnRpbGU8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BvdF9xdWFudGlsZV9wcm9iPExlZnRSaWdodD4gdHlwZTsKK307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PiBhbmQgcG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PiBwcm92aWRlCisvLyB0aGUgc2FtZSBmZWF0dXJlIGFzIHF1YW50aWxlCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OnBvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cXVhbnRpbGU+Cit7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OnBvdF9xdWFudGlsZV9wcm9iPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpxdWFudGlsZT4KK3sKK307CisKKy8vIFNvIHRoYXQgcG90X3F1YW50aWxlIGNhbiBiZSBhdXRvbWF0aWNhbGx5IHN1YnN0aXR1dGVkCisvLyB3aXRoIHdlaWdodGVkX3BvdF9xdWFudGlsZSB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjpwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+IHR5cGU7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX3BvdF9xdWFudGlsZTxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cG90X3F1YW50aWxlPExlZnRSaWdodD4gPgoreworfTsKKworLy8gU28gdGhhdCBwb3RfcXVhbnRpbGVfcHJvYiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZAorLy8gd2l0aCB3ZWlnaHRlZF9wb3RfcXVhbnRpbGVfcHJvYiB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjpwb3RfcXVhbnRpbGVfcHJvYjxMZWZ0UmlnaHQ+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfcG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9wb3RfcXVhbnRpbGVfcHJvYjxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PiA+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wb3RfdGFpbF9tZWFuLmhwcApAQCAtMCwwICsxLDIxMSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gcG90X3RhaWxfbWVhbi5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRGFuaWVsIEVnbG9mZiwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19QT1RfVEFJTF9NRUFOX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1BPVF9UQUlMX01FQU5fSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHVwbGUvdHVwbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wZWFrc19vdmVyX3RocmVzaG9sZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BvdF9xdWFudGlsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbF9tZWFuLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBwb3RfdGFpbF9tZWFuX2ltcGwKKyAgICAvLworICAgIC8qKgorICAgICAgICBAYnJpZWYgRXN0aW1hdGlvbiBvZiB0aGUgKGNvaGVyZW50KSB0YWlsIG1lYW4gYmFzZWQgb24gdGhlIHBlYWtzIG92ZXIgdGhyZXNob2xkIG1ldGhvZCAoZm9yIGJvdGggbGVmdCBhbmQgcmlnaHQgdGFpbHMpCisKKyAgICAgICAgQ29tcHV0ZXMgYW4gZXN0aW1hdGUgZm9yIHRoZSAoY29oZXJlbnQpIHRhaWwgbWVhbgorICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e0NUTX1fe1xhbHBoYX0gPSBcaGF0e3F9X3tcYWxwaGF9IC0gXGZyYWN7XGJhcntcYmV0YX19e1x4aS0xfSgxLVxhbHBoYSleey1ceGl9LAorICAgICAgICBcZl0KKyAgICAgICAgd2hlcmUgXGYkXGJhclt1XVxmJCwgXGYkXGJhcntcYmV0YX1cZiQgYW5kIFxmJFx4aVxmJCBhcmUgdGhlIHBhcmFtZXRlcnMgb2YgdGhlCisgICAgICAgIGdlbmVyYWxpemVkIFBhcmV0byBkaXN0cmlidXRpb24gdGhhdCBhcHByb3hpbWF0ZXMgdGhlIHJpZ2h0IHRhaWwgb2YgdGhlIGRpc3RyaWJ1dGlvbiAob3IgdGhlCisgICAgICAgIG1pcnJvcmVkIGxlZnQgdGFpbCwgaW4gY2FzZSB0aGUgbGVmdCB0YWlsIGlzIHVzZWQpLiBJbiB0aGUgbGF0dGVyIGNhc2UsIHRoZSByZXN1bHQgaXMgbWlycm9yZWQKKyAgICAgICAgYmFjaywgeWllbGRpbmcgdGhlIGNvcnJlY3QgcmVzdWx0LgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBJbXBsLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF90YWlsX21lYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgZmxvYXRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICBwb3RfdGFpbF9tZWFuX2ltcGwoZG9udF9jYXJlKQorICAgICAgICAgIDogc2lnbl8oKGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUpID8gLTEgOiAxKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZgorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6aWZfPAorICAgICAgICAgICAgICAgICAgICBpc19zYW1lPEltcGwsIHdlaWdodGVkPgorICAgICAgICAgICAgICAgICAgLCB0YWc6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4KKyAgICAgICAgICAgICAgICAgICwgdGFnOjpwZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+CisgICAgICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICAgICAgcGVha3Nfb3Zlcl90aHJlc2hvbGRfdGFnOworCisgICAgICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjppZl88CisgICAgICAgICAgICAgICAgICAgIGlzX3NhbWU8SW1wbCwgd2VpZ2h0ZWQ+CisgICAgICAgICAgICAgICAgICAsIHRhZzo6d2VpZ2h0ZWRfcG90X3F1YW50aWxlPExlZnRSaWdodD4KKyAgICAgICAgICAgICAgICAgICwgdGFnOjpwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PgorICAgICAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgICAgIHBvdF9xdWFudGlsZV90YWc7CisKKyAgICAgICAgICAgIGV4dHJhY3RvcjxwZWFrc19vdmVyX3RocmVzaG9sZF90YWc+IGNvbnN0IHNvbWVfcGVha3Nfb3Zlcl90aHJlc2hvbGQgPSB7fTsKKyAgICAgICAgICAgIGV4dHJhY3Rvcjxwb3RfcXVhbnRpbGVfdGFnPiBjb25zdCBzb21lX3BvdF9xdWFudGlsZSA9IHt9OworCisgICAgICAgICAgICBmbG9hdF90eXBlIGJldGFfYmFyID0gc29tZV9wZWFrc19vdmVyX3RocmVzaG9sZChhcmdzKS50ZW1wbGF0ZSBnZXQ8MT4oKTsKKyAgICAgICAgICAgIGZsb2F0X3R5cGUgeGlfaGF0ICAgPSBzb21lX3BlYWtzX292ZXJfdGhyZXNob2xkKGFyZ3MpLnRlbXBsYXRlIGdldDwyPigpOworCisgICAgICAgICAgICByZXR1cm4gc29tZV9wb3RfcXVhbnRpbGUoYXJncykgLSB0aGlzLT5zaWduXyAqIGJldGFfYmFyLyggeGlfaGF0IC0gMS4gKSAqIHN0ZDo6cG93KAorICAgICAgICAgICAgICAgIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgPyBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSA6IDEuIC0gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0KKyAgICAgICAgICAgICAgLCAteGlfaGF0KTsKKyAgICAgICAgfQorICAgIHByaXZhdGU6CisgICAgICAgIHNob3J0IHNpZ25fOyAvLyBpZiB0aGUgZml0IHBhcmFtZXRlcnMgZnJvbSB0aGUgbWlycm9yZWQgbGVmdCB0YWlsIGV4dHJlbWUgdmFsdWVzIGFyZSB1c2VkLCBtaXJyb3IgYmFjayB0aGUgcmVzdWx0CisgICAgfTsKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpwb3RfdGFpbF9tZWFuCisvLyB0YWc6OnBvdF90YWlsX21lYW5fcHJvYgorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF90YWlsX21lYW4KKyAgICAgIDogZGVwZW5kc19vbjxwZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+LCBwb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnBvdF90YWlsX21lYW5faW1wbDxtcGw6Ol8xLCB1bndlaWdodGVkLCBMZWZ0UmlnaHQ+IGltcGw7CisgICAgfTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF90YWlsX21lYW5fcHJvYgorICAgICAgOiBkZXBlbmRzX29uPHBlYWtzX292ZXJfdGhyZXNob2xkX3Byb2I8TGVmdFJpZ2h0PiwgcG90X3F1YW50aWxlX3Byb2I8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnBvdF90YWlsX21lYW5faW1wbDxtcGw6Ol8xLCB1bndlaWdodGVkLCBMZWZ0UmlnaHQ+IGltcGw7CisgICAgfTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3BvdF90YWlsX21lYW4KKyAgICAgIDogZGVwZW5kc19vbjx3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+LCB3ZWlnaHRlZF9wb3RfcXVhbnRpbGU8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnBvdF90YWlsX21lYW5faW1wbDxtcGw6Ol8xLCB3ZWlnaHRlZCwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuX3Byb2IKKyAgICAgIDogZGVwZW5kc19vbjx3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4sIHdlaWdodGVkX3BvdF9xdWFudGlsZV9wcm9iPExlZnRSaWdodD4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpwb3RfdGFpbF9tZWFuX2ltcGw8bXBsOjpfMSwgd2VpZ2h0ZWQsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworfQorCisvLyBwb3RfdGFpbF9tZWFuPExlZnRSaWdodD4od2l0aF90aHJlc2hvbGRfdmFsdWUpIC0+IHBvdF90YWlsX21lYW48TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjpwb3RfdGFpbF9tZWFuPExlZnRSaWdodD4od2l0aF90aHJlc2hvbGRfdmFsdWUpPgoreworICAgIHR5cGVkZWYgdGFnOjpwb3RfdGFpbF9tZWFuPExlZnRSaWdodD4gdHlwZTsKK307CisKKy8vIHBvdF90YWlsX21lYW48TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSkgLT4gcG90X3RhaWxfbWVhbl9wcm9iPExlZnRSaWdodD4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6cG90X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3Byb2JhYmlsaXR5KT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6cG90X3RhaWxfbWVhbl9wcm9iPExlZnRSaWdodD4gdHlwZTsKK307CisKKy8vIHdlaWdodGVkX3BvdF90YWlsX21lYW48TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF92YWx1ZSkgLT4gd2VpZ2h0ZWRfcG90X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+Cit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3BvdF90YWlsX21lYW48TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF92YWx1ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BvdF90YWlsX21lYW48TGVmdFJpZ2h0PiB0eXBlOworfTsKKworLy8gd2VpZ2h0ZWRfcG90X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3Byb2JhYmlsaXR5KSAtPiB3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuX3Byb2I8TGVmdFJpZ2h0PgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuPExlZnRSaWdodD4od2l0aF90aHJlc2hvbGRfcHJvYmFiaWxpdHkpPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuX3Byb2I8TGVmdFJpZ2h0PiB0eXBlOworfTsKKworLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiBmZWF0dXJlLWJhc2VkIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiwKKy8vIHBvdF90YWlsX21lYW48TGVmdFJpZ2h0PiBhbmQgcG90X3RhaWxfbWVhbl9wcm9iPExlZnRSaWdodD4gcHJvdmlkZQorLy8gdGhlIHNhbWUgZmVhdHVyZSBhcyB0YWlsX21lYW4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6cG90X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6dGFpbF9tZWFuPgoreworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpwb3RfdGFpbF9tZWFuX3Byb2I8TGVmdFJpZ2h0PiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OnRhaWxfbWVhbj4KK3sKK307CisKKy8vIFNvIHRoYXQgcG90X3RhaWxfbWVhbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZAorLy8gd2l0aCB3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnBvdF90YWlsX21lYW48TGVmdFJpZ2h0PiA+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BvdF90YWlsX21lYW48TGVmdFJpZ2h0PiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpwb3RfdGFpbF9tZWFuPExlZnRSaWdodD4gPgoreworfTsKKworLy8gU28gdGhhdCBwb3RfdGFpbF9tZWFuX3Byb2IgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQKKy8vIHdpdGggd2VpZ2h0ZWRfcG90X3RhaWxfbWVhbl9wcm9iIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnBvdF90YWlsX21lYW5fcHJvYjxMZWZ0UmlnaHQ+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfcG90X3RhaWxfbWVhbl9wcm9iPExlZnRSaWdodD4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfcG90X3RhaWxfbWVhbl9wcm9iPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpwb3RfdGFpbF9tZWFuX3Byb2I8TGVmdFJpZ2h0PiA+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX2NvdW50LmhwcApAQCAtMCwwICsxLDgwIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyByb2xsaW5nX2NvdW50LmhwcAorLy8KKy8vIENvcHlyaWdodCAyMDA4IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1JPTExJTkdfQ09VTlRfSFBQX0VBTl8yNl8xMl8yMDA4CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1JPTExJTkdfQ09VTlRfSFBQX0VBTl8yNl8xMl8yMDA4CisKKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvcm9sbGluZ193aW5kb3cuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gcm9sbGluZ19jb3VudF9pbXBsCisgICAgLy8gICAgcmV0dXJucyB0aGUgY291bnQgb2YgZWxlbWVudHMgaW4gdGhlIHJvbGxpbmcgd2luZG93CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCByb2xsaW5nX2NvdW50X2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnNpemVfdCByZXN1bHRfdHlwZTsKKworICAgICAgICByb2xsaW5nX2NvdW50X2ltcGwoZG9udF9jYXJlKQorICAgICAgICB7fQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KHJvbGxpbmdfd2luZG93X3BsdXMxKGFyZ3MpLnNpemUoKSkgLSBpc19yb2xsaW5nX3dpbmRvd19wbHVzMV9mdWxsKGFyZ3MpOworICAgICAgICB9CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnJvbGxpbmdfY291bnQKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHJvbGxpbmdfY291bnQKKyAgICAgIDogZGVwZW5kc19vbjwgcm9sbGluZ193aW5kb3dfcGx1czEgPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpyb2xsaW5nX2NvdW50X2ltcGw8IG1wbDo6XzEgPiBpbXBsOworCisgICAgICAgICNpZmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRE9YWUdFTl9JTlZPS0VECisgICAgICAgIC8vLyB0YWc6OnJvbGxpbmdfd2luZG93Ojp3aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgc3RhdGljIGJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8dGFnOjpyb2xsaW5nX3dpbmRvd19zaXplPiBjb25zdCB3aW5kb3dfc2l6ZTsKKyAgICAgICAgI2VuZGlmCisgICAgfTsKK30gLy8gbmFtZXNwYWNlIHRhZworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojpyb2xsaW5nX2NvdW50CisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpyb2xsaW5nX2NvdW50PiBjb25zdCByb2xsaW5nX2NvdW50ID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChyb2xsaW5nX2NvdW50KQorfQorCit1c2luZyBleHRyYWN0Ojpyb2xsaW5nX2NvdW50OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX21lYW4uaHBwCkBAIC0wLDAgKzEsMTc5IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyByb2xsaW5nX21lYW4uaHBwCisvLyBDb3B5cmlnaHQgKEMpIDIwMDggRXJpYyBOaWVibGVyLgorLy8gQ29weXJpZ2h0IChDKSAyMDEyIFBpZXRlciBCYXN0aWFhbiBPYmVyIChJbnRlZ3JpY29tKS4KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19ST0xMSU5HX01FQU5fSFBQX0VBTl8yNl8xMl8yMDA4CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1JPTExJTkdfTUVBTl9IUFBfRUFOXzI2XzEyXzIwMDgKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvcm9sbGluZ19jb3VudC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKyAgIG5hbWVzcGFjZSBpbXBsCisgICB7CisgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAvLyBsYXp5X3JvbGxpbmdfbWVhbl9pbXBsCisgICAgICAvLyAgICByZXR1cm5zIHRoZSBtZWFuIG92ZXIgdGhlIHJvbGxpbmcgd2luZG93IGFuZCBpcyBjYWxjdWxhdGVkIG9ubHkKKyAgICAgIC8vICAgIHdoZW4gdGhlIHJlc3VsdCBpcyByZXF1ZXN0ZWQKKyAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICAgIHN0cnVjdCBsYXp5X3JvbGxpbmdfbWVhbl9pbXBsCisgICAgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICAgIHsKKyAgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdCwgdm9pZCwgdm9pZD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgICBsYXp5X3JvbGxpbmdfbWVhbl9pbXBsKGRvbnRfY2FyZSkKKyAgICAgICAgIHsKKyAgICAgICAgIH0KKworICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIG51bWVyaWM6OmZkaXYocm9sbGluZ19zdW0oYXJncyksIHJvbGxpbmdfY291bnQoYXJncykpOworICAgICAgICAgfQorICAgICAgfTsKKworICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgICAgLy8gaW1tZWRpYXRlX3JvbGxpbmdfbWVhbl9pbXBsCisgICAgICAvLyAgICAgVGhlIG5vbi1sYXp5IHZlcnNpb24gY29tcHV0ZXMgdGhlIHJvbGxpbmcgbWVhbiByZWN1cnNpdmVseSB3aGVuIGEgbmV3CisgICAgICAvLyAgICAgc2FtcGxlIGlzIGFkZGVkCisgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgICBzdHJ1Y3QgaW1tZWRpYXRlX3JvbGxpbmdfbWVhbl9pbXBsCisgICAgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICAgIHsKKyAgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICAgaW1tZWRpYXRlX3JvbGxpbmdfbWVhbl9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgICA6IG1lYW5fKG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sbnVtZXJpYzo6b25lPHN0ZDo6c2l6ZV90Pjo6dmFsdWUpKQorICAgICAgICAgeworICAgICAgICAgfQorCisgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICAgdm9pZCBvcGVyYXRvcigpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICB7CisgICAgICAgICAgICBpZihpc19yb2xsaW5nX3dpbmRvd19wbHVzMV9mdWxsKGFyZ3MpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgbWVhbl8gKz0gbnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZV0tcm9sbGluZ193aW5kb3dfcGx1czEoYXJncykuZnJvbnQoKSxyb2xsaW5nX2NvdW50KGFyZ3MpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgIHJlc3VsdF90eXBlIHByZXZfbWVhbiA9IG1lYW5fOworICAgICAgICAgICAgICAgbWVhbl8gKz0gbnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZV0tcHJldl9tZWFuLHJvbGxpbmdfY291bnQoYXJncykpOworICAgICAgICAgICAgfQorICAgICAgICAgfQorCisgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJikgY29uc3QKKyAgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBtZWFuXzsKKyAgICAgICAgIH0KKworICAgICAgcHJpdmF0ZToKKworICAgICAgICAgcmVzdWx0X3R5cGUgbWVhbl87CisgICAgICB9OworICAgfSAvLyBuYW1lc3BhY2UgaW1wbAorCisgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAvLyB0YWc6Omxhenlfcm9sbGluZ19tZWFuCisgICAvLyB0YWc6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW4KKyAgIC8vIHRhZzo6cm9sbGluZ19tZWFuCisgICAvLworICAgbmFtZXNwYWNlIHRhZworICAgeworICAgICAgc3RydWN0IGxhenlfcm9sbGluZ19tZWFuCisgICAgICAgICA6IGRlcGVuZHNfb248IHJvbGxpbmdfc3VtLCByb2xsaW5nX2NvdW50ID4KKyAgICAgIHsKKyAgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgICAvLy8KKyAgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpsYXp5X3JvbGxpbmdfbWVhbl9pbXBsPCBtcGw6Ol8xID4gaW1wbDsKKworI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKKyAgICAgICAgIC8vLyB0YWc6OnJvbGxpbmdfd2luZG93Ojp3aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPHRhZzo6cm9sbGluZ193aW5kb3dfc2l6ZT4gY29uc3Qgd2luZG93X3NpemU7CisjZW5kaWYKKyAgICAgIH07CisKKyAgICAgIHN0cnVjdCBpbW1lZGlhdGVfcm9sbGluZ19tZWFuCisgICAgICAgICA6IGRlcGVuZHNfb248IHJvbGxpbmdfd2luZG93X3BsdXMxLCByb2xsaW5nX2NvdW50PgorICAgICAgeworICAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgIC8vLworICAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW5faW1wbDwgbXBsOjpfMT4gaW1wbDsKKworI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKKyAgICAgICAgIC8vLyB0YWc6OnJvbGxpbmdfd2luZG93Ojp3aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPHRhZzo6cm9sbGluZ193aW5kb3dfc2l6ZT4gY29uc3Qgd2luZG93X3NpemU7CisjZW5kaWYKKyAgICAgIH07CisKKyAgICAgIC8vIG1ha2UgaW1tZWRpYXRlX3JvbGxpbmdfbWVhbiB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbgorICAgICAgc3RydWN0IHJvbGxpbmdfbWVhbiA6IGltbWVkaWF0ZV9yb2xsaW5nX21lYW4ge307CisgICB9IC8vIG5hbWVzcGFjZSB0YWcKKworICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgLy8gZXh0cmFjdDo6bGF6eV9yb2xsaW5nX21lYW4KKyAgIC8vIGV4dHJhY3Q6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW4KKyAgIC8vIGV4dHJhY3Q6OnJvbGxpbmdfbWVhbgorICAgLy8KKyAgIG5hbWVzcGFjZSBleHRyYWN0CisgICB7CisgICAgICBleHRyYWN0b3I8dGFnOjpsYXp5X3JvbGxpbmdfbWVhbj4gY29uc3QgbGF6eV9yb2xsaW5nX21lYW4gPSB7fTsKKyAgICAgIGV4dHJhY3Rvcjx0YWc6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW4+IGNvbnN0IGltbWVkaWF0ZV9yb2xsaW5nX21lYW4gPSB7fTsKKyAgICAgIGV4dHJhY3Rvcjx0YWc6OnJvbGxpbmdfbWVhbj4gY29uc3Qgcm9sbGluZ19tZWFuID0ge307CisKKyAgICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGxhenlfcm9sbGluZ19tZWFuKQorICAgICAgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoaW1tZWRpYXRlX3JvbGxpbmdfbWVhbikKKyAgICAgICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHJvbGxpbmdfbWVhbikKKyAgIH0KKworICAgdXNpbmcgZXh0cmFjdDo6bGF6eV9yb2xsaW5nX21lYW47CisgICB1c2luZyBleHRyYWN0OjppbW1lZGlhdGVfcm9sbGluZ19tZWFuOworICAgdXNpbmcgZXh0cmFjdDo6cm9sbGluZ19tZWFuOworCisgICAvLyByb2xsaW5nX21lYW4obGF6eSkgLT4gbGF6eV9yb2xsaW5nX21lYW4KKyAgIHRlbXBsYXRlPD4KKyAgIHN0cnVjdCBhc19mZWF0dXJlPHRhZzo6cm9sbGluZ19tZWFuKGxhenkpPgorICAgeworICAgICAgdHlwZWRlZiB0YWc6Omxhenlfcm9sbGluZ19tZWFuIHR5cGU7CisgICB9OworCisgICAvLyByb2xsaW5nX21lYW4oaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfcm9sbGluZ19tZWFuCisgICB0ZW1wbGF0ZTw+CisgICBzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OnJvbGxpbmdfbWVhbihpbW1lZGlhdGUpPgorICAgeworICAgICAgdHlwZWRlZiB0YWc6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW4gdHlwZTsKKyAgIH07CisKKyAgIC8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisgICAvLyBpbW1lZGlhdGVfcm9sbGluZ19tZWFuIHByb3ZpZGVzIHRoZSBzYW1lIGZlYXR1cmUgYXMgcm9sbGluZ19tZWFuCisgICB0ZW1wbGF0ZTw+CisgICBzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OmltbWVkaWF0ZV9yb2xsaW5nX21lYW4+CisgICAgICA6IGZlYXR1cmVfb2Y8dGFnOjpyb2xsaW5nX21lYW4+CisgICB7CisgICB9OworCisgICAvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorICAgLy8gbGF6eV9yb2xsaW5nX21lYW4gcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyByb2xsaW5nX21lYW4KKyAgIHRlbXBsYXRlPD4KKyAgIHN0cnVjdCBmZWF0dXJlX29mPHRhZzo6bGF6eV9yb2xsaW5nX21lYW4+CisgICAgICA6IGZlYXR1cmVfb2Y8dGFnOjpyb2xsaW5nX21lYW4+CisgICB7CisgICB9OworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3JvbGxpbmdfbW9tZW50LmhwcApAQCAtMCwwICsxLDExMyBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gcm9sbGluZ19tb21lbnQuaHBwCisvLyBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuCisvLyBDb3B5cmlnaHQgKEMpIDIwMTQgUGlldGVyIEJhc3RpYWFuIE9iZXIgKEludGVncmljb20pLgorLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1JPTExJTkdfTU9NRU5UX0hQUF9FQU5fMjdfMTFfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19ST0xMSU5HX01PTUVOVF9IUFBfRUFOXzI3XzExXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy9ub190cjEvY21hdGguaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tb21lbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3JvbGxpbmdfY291bnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyByb2xsaW5nX21vbWVudF9pbXBsCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTiwgdHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCByb2xsaW5nX21vbWVudF9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIEJPT1NUX01QTF9BU1NFUlRfUkVMQVRJT04oTjo6dmFsdWUsID4sIDApOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdCx2b2lkLHZvaWQ+OjpyZXN1bHRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByb2xsaW5nX21vbWVudF9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBzdW1fKGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIGlmKGlzX3JvbGxpbmdfd2luZG93X3BsdXMxX2Z1bGwoYXJncykpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+c3VtXyAtPSBudW1lcmljOjpwb3cocm9sbGluZ193aW5kb3dfcGx1czEoYXJncykuZnJvbnQoKSwgTigpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIHRoaXMtPnN1bV8gKz0gbnVtZXJpYzo6cG93KGFyZ3Nbc2FtcGxlXSwgTigpKTsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gbnVtZXJpYzo6ZmRpdih0aGlzLT5zdW1fLCByb2xsaW5nX2NvdW50KGFyZ3MpKTsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgcmVzdWx0X3R5cGUgc3VtXzsKKyAgICB9OworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnJvbGxpbmdfbW9tZW50CisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPGludCBOPgorICAgIHN0cnVjdCByb2xsaW5nX21vbWVudAorICAgICAgOiBkZXBlbmRzX29uPCByb2xsaW5nX3dpbmRvd19wbHVzMSwgcm9sbGluZ19jb3VudD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6cm9sbGluZ19tb21lbnRfaW1wbDxtcGw6OmludF88Tj4sIG1wbDo6XzE+IGltcGw7CisKKyAgICAgICAgI2lmZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19ET1hZR0VOX0lOVk9LRUQKKyAgICAgICAgLy8vIHRhZzo6cm9sbGluZ193aW5kb3c6OndpbmRvd19zaXplIG5hbWVkIHBhcmFtZXRlcgorICAgICAgICBzdGF0aWMgYm9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDx0YWc6OnJvbGxpbmdfd2luZG93X3NpemU+IGNvbnN0IHdpbmRvd19zaXplOworICAgICAgICAjZW5kaWYKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojpyb2xsaW5nX21vbWVudAorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCByb2xsaW5nX21vbWVudCwgKGludCkpCit9CisKK3VzaW5nIGV4dHJhY3Q6OnJvbGxpbmdfbW9tZW50OworCisvLyBUaGVyZSBpcyBubyB3ZWlnaHRlZF9yb2xsaW5nX21vbWVudCAoeWV0KS4uLgorLy8KKy8vLy8gU28gdGhhdCByb2xsaW5nX21vbWVudDxOPiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLy8vIHdlaWdodGVkX3JvbGxpbmdfbW9tZW50PE4+IHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQKKy8vdGVtcGxhdGU8aW50IE4+CisvL3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6cm9sbGluZ19tb21lbnQ8Tj4gPgorLy97CisvLyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfcm9sbGluZ19tb21lbnQ8Tj4gdHlwZTsKKy8vfTsKKy8vCisvL3RlbXBsYXRlPGludCBOPgorLy9zdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX3JvbGxpbmdfbW9tZW50PE4+ID4KKy8vICA6IGZlYXR1cmVfb2Y8dGFnOjpyb2xsaW5nX21vbWVudDxOPiA+CisvL3sKKy8vfTsKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3JvbGxpbmdfc3VtLmhwcApAQCAtMCwwICsxLDkxIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyByb2xsaW5nX3N1bS5ocHAKKy8vCisvLyBDb3B5cmlnaHQgMjAwOCBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19ST0xMSU5HX1NVTV9IUFBfRUFOXzI2XzEyXzIwMDgKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUk9MTElOR19TVU1fSFBQX0VBTl8yNl8xMl8yMDA4CisKKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvcm9sbGluZ193aW5kb3cuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyByb2xsaW5nX3N1bV9pbXBsCisgICAgLy8gICAgcmV0dXJucyB0aGUgc3VtIG9mIHRoZSBzYW1wbGVzIGluIHRoZSByb2xsaW5nIHdpbmRvdworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgcm9sbGluZ19zdW1faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIFNhbXBsZSByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByb2xsaW5nX3N1bV9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBzdW1fKGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldKQorICAgICAgICB7fQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgaWYoaXNfcm9sbGluZ193aW5kb3dfcGx1czFfZnVsbChhcmdzKSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5zdW1fIC09IHJvbGxpbmdfd2luZG93X3BsdXMxKGFyZ3MpLmZyb250KCk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICB0aGlzLT5zdW1fICs9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICYgLyphcmdzKi8pIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5zdW1fOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBTYW1wbGUgc3VtXzsKKyAgICB9OworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnJvbGxpbmdfc3VtCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCByb2xsaW5nX3N1bQorICAgICAgOiBkZXBlbmRzX29uPCByb2xsaW5nX3dpbmRvd19wbHVzMSA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnJvbGxpbmdfc3VtX2ltcGw8IG1wbDo6XzEgPiBpbXBsOworCisgICAgICAgICNpZmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRE9YWUdFTl9JTlZPS0VECisgICAgICAgIC8vLyB0YWc6OnJvbGxpbmdfd2luZG93Ojp3aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgc3RhdGljIGJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8dGFnOjpyb2xsaW5nX3dpbmRvd19zaXplPiBjb25zdCB3aW5kb3dfc2l6ZTsKKyAgICAgICAgI2VuZGlmCisgICAgfTsKK30gLy8gbmFtZXNwYWNlIHRhZworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojpyb2xsaW5nX3N1bQorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6cm9sbGluZ19zdW0+IGNvbnN0IHJvbGxpbmdfc3VtID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChyb2xsaW5nX3N1bSkKK30KKwordXNpbmcgZXh0cmFjdDo6cm9sbGluZ19zdW07Cit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX3ZhcmlhbmNlLmhwcApAQCAtMCwwICsxLDI0NyBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gcm9sbGluZ192YXJpYW5jZS5ocHAKKy8vIENvcHlyaWdodCAoQykgMjAwNSBFcmljIE5pZWJsZXIKKy8vIENvcHlyaWdodCAoQykgMjAxNCBQaWV0ZXIgQmFzdGlhYW4gT2JlciAoSW50ZWdyaWNvbSkuCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUk9MTElOR19WQVJJQU5DRV9IUFBfRUFOXzE1XzExXzIwMTEKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfUk9MTElOR19WQVJJQU5DRV9IUFBfRUFOXzE1XzExXzIwMTEKKworI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3N0YXRzLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX21lYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3JvbGxpbmdfbW9tZW50LmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2FyaXRobWV0aWMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLyEgSW1tZWRpYXRlIChsYXp5KSBjYWxjdWxhdGlvbiBvZiB0aGUgcm9sbGluZyB2YXJpYW5jZS4KKyAgICAvKiEKKyAgICBDYWxjdWxhdGlvbiBvZiBzYW1wbGUgdmFyaWFuY2UgXGYkXHNpZ21hX25eMlxmJCBpcyBkb25lIGFzIGZvbGxvd3MsIHNlZSBhbHNvCisgICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BbGdvcml0aG1zX2Zvcl9jYWxjdWxhdGluZ192YXJpYW5jZS4KKyAgICBGb3IgYSByb2xsaW5nIHdpbmRvdyBvZiBzaXplIFxmJE5cZiQsIHdoZW4gXGYkbiA8PSBOXGYkLCB0aGUgdmFyaWFuY2UgaXMgY29tcHV0ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhCisgICAgXGZbCisgICAgXHNpZ21hX25eMiA9IFxmcmFjezF9e24tMX0gXHN1bV97aSA9IDF9Xm4gKHhfaSAtIFxtdV9uKV4yLgorICAgIFxmXQorICAgIFdoZW4gXGYkbiA+IE5cZiQsIHRoZSBzYW1wbGUgdmFyaWFuY2Ugb3ZlciB0aGUgd2luZG93IGJlY29tZXM6CisgICAgXGZbCisgICAgXHNpZ21hX25eMiA9IFxmcmFjezF9e04tMX0gXHN1bV97aSA9IG4tTisxfV5uICh4X2kgLSBcbXVfbileMi4KKyAgICBcZl0KKyAgICAqLworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBsYXp5X3JvbGxpbmdfdmFyaWFuY2VfaW1wbAorICAgIC8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBsYXp5X3JvbGxpbmdfdmFyaWFuY2VfaW1wbAorICAgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90LHZvaWQsdm9pZD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIGxhenlfcm9sbGluZ192YXJpYW5jZV9pbXBsKGRvbnRfY2FyZSkge30KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmVzdWx0X3R5cGUgbWVhbiA9IHJvbGxpbmdfbWVhbihhcmdzKTsKKyAgICAgICAgICAgIHNpemVfdCBucl9zYW1wbGVzID0gcm9sbGluZ19jb3VudChhcmdzKTsKKyAgICAgICAgICAgIGlmIChucl9zYW1wbGVzIDwgMikgcmV0dXJuIHJlc3VsdF90eXBlKCk7CisgICAgICAgICAgICByZXR1cm4gbnJfc2FtcGxlcyoocm9sbGluZ19tb21lbnQ8Mj4oYXJncykgLSBtZWFuKm1lYW4pLyhucl9zYW1wbGVzLTEpOworICAgICAgICB9CisgICAgfTsKKworICAgIC8vISBJdGVyYXRpdmUgY2FsY3VsYXRpb24gb2YgdGhlIHJvbGxpbmcgdmFyaWFuY2UuCisgICAgLyohCisgICAgSXRlcmF0aXZlIGNhbGN1bGF0aW9uIG9mIHNhbXBsZSB2YXJpYW5jZSBcZiRcc2lnbWFfbl4yXGYkIGlzIGRvbmUgYXMgZm9sbG93cywgc2VlIGFsc28KKyAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FsZ29yaXRobXNfZm9yX2NhbGN1bGF0aW5nX3ZhcmlhbmNlLgorICAgIEZvciBhIHJvbGxpbmcgd2luZG93IG9mIHNpemUgXGYkTlxmJCwgZm9yIHRoZSBmaXJzdCBcZiROXGYkIHNhbXBsZXMsIHRoZSB2YXJpYW5jZSBpcyBjb21wdXRlZCBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGEKKyAgICBcZlsKKyAgICBcc2lnbWFfbl4yID0gXGZyYWN7MX17bi0xfSBcc3VtX3tpID0gMX1ebiAoeF9pIC0gXG11X24pXjIgPSBcZnJhY3sxfXtuLTF9TV97MixufSwKKyAgICBcZl0KKyAgICB3aGVyZSB0aGUgc3VtIG9mIHNxdWFyZXMgXGYkTV97MixufVxmJCBjYW4gYmUgcmVjdXJzaXZlbHkgY29tcHV0ZWQgYXM6CisgICAgXGZbCisgICAgTV97MixufSA9IFxzdW1fe2kgPSAxfV5uICh4X2kgLSBcbXVfbileMiA9IE1fezIsbi0xfSArICh4X24gLSBcbXVfbikoeF9uIC0gXG11X3tuLTF9KSwKKyAgICBcZl0KKyAgICBhbmQgdGhlIGVzdGltYXRlIG9mIHRoZSBzYW1wbGUgbWVhbiBhczoKKyAgICBcZlsKKyAgICBcbXVfbiA9IFxmcmFjezF9e259IFxzdW1fe2kgPSAxfV5uIHhfaSA9IFxtdV97bi0xfSArIFxmcmFjezF9e259KHhfbiAtIFxtdV97bi0xfSkuCisgICAgXGZdCisgICAgRm9yIGZ1cnRoZXIgc2FtcGxlcywgd2hlbiB0aGUgcm9sbGluZyB3aW5kb3cgaXMgZnVsbHkgZmlsbGVkIHdpdGggZGF0YSwgb25lIGhhcyB0byB0YWtlIGludG8gYWNjb3VudCB0aGF0IHRoZSBvbGRlc3QKKyAgICBzYW1wbGUgXGYkeF97bi1OfVxmJCBpcyBkcm9wcGVkIGZyb20gdGhlIHdpbmRvdy4gVGhlIHNhbXBsZSB2YXJpYW5jZSBvdmVyIHRoZSB3aW5kb3cgbm93IGJlY29tZXM6CisgICAgXGZbCisgICAgXHNpZ21hX25eMiA9IFxmcmFjezF9e04tMX0gXHN1bV97aSA9IG4tTisxfV5uICh4X2kgLSBcbXVfbileMiA9IFxmcmFjezF9e24tMX1NX3syLG59LAorICAgIFxmXQorICAgIHdoZXJlIHRoZSBzdW0gb2Ygc3F1YXJlcyBcZiRNX3syLG59XGYkIG5vdyBlcXVhbHM6CisgICAgXGZbCisgICAgTV97MixufSA9IFxzdW1fe2kgPSBuLU4rMX1ebiAoeF9pIC0gXG11X24pXjIgPSBNX3syLG4tMX0gKyAoeF9uIC0gXG11X24pKHhfbiAtIFxtdV97bi0xfSkgLSAoeF97bi1OfSAtIFxtdV9uKSh4X3tuLU59IC0gXG11X3tuLTF9KSwKKyAgICBcZl0KKyAgICBhbmQgdGhlIGVzdGltYXRlZCBtZWFuIGlzOgorICAgIFxmWworICAgIFxtdV9uID0gXGZyYWN7MX17Tn0gXHN1bV97aSA9IG4tTisxfV5uIHhfaSA9IFxtdV97bi0xfSArIFxmcmFjezF9e259KHhfbiAtIHhfe24tTn0pLgorICAgIFxmXQorCisgICAgTm90ZSB0aGF0IHRoZSBzYW1wbGUgdmFyaWFuY2UgaXMgbm90IGRlZmluZWQgZm9yIFxmJG4gPD0gMVxmJC4KKworICAgICovCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlX2ltcGwKKyAgICAvLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgaW1tZWRpYXRlX3JvbGxpbmdfdmFyaWFuY2VfaW1wbAorICAgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgaW1tZWRpYXRlX3JvbGxpbmdfdmFyaWFuY2VfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgICAgOiBwcmV2aW91c19tZWFuXyhudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCBudW1lcmljOjpvbmU8c3RkOjpzaXplX3Q+Ojp2YWx1ZSkpCisgICAgICAgICAgICAsIHN1bV9vZl9zcXVhcmVzXyhudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCBudW1lcmljOjpvbmU8c3RkOjpzaXplX3Q+Ojp2YWx1ZSkpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBTYW1wbGUgYWRkZWRfc2FtcGxlID0gYXJnc1tzYW1wbGVdOworCisgICAgICAgICAgICByZXN1bHRfdHlwZSBtZWFuID0gaW1tZWRpYXRlX3JvbGxpbmdfbWVhbihhcmdzKTsKKyAgICAgICAgICAgIHN1bV9vZl9zcXVhcmVzXyArPSAoYWRkZWRfc2FtcGxlLW1lYW4pKihhZGRlZF9zYW1wbGUtcHJldmlvdXNfbWVhbl8pOworCisgICAgICAgICAgICBpZihpc19yb2xsaW5nX3dpbmRvd19wbHVzMV9mdWxsKGFyZ3MpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIFNhbXBsZSByZW1vdmVkX3NhbXBsZSA9IHJvbGxpbmdfd2luZG93X3BsdXMxKGFyZ3MpLmZyb250KCk7CisgICAgICAgICAgICAgICAgc3VtX29mX3NxdWFyZXNfIC09IChyZW1vdmVkX3NhbXBsZS1tZWFuKSoocmVtb3ZlZF9zYW1wbGUtcHJldmlvdXNfbWVhbl8pOworICAgICAgICAgICAgICAgIHByZXZlbnRfdW5kZXJmbG93KHN1bV9vZl9zcXVhcmVzXyk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBwcmV2aW91c19tZWFuXyA9IG1lYW47CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgc2l6ZV90IG5yX3NhbXBsZXMgPSByb2xsaW5nX2NvdW50KGFyZ3MpOworICAgICAgICAgICAgaWYgKG5yX3NhbXBsZXMgPCAyKSByZXR1cm4gcmVzdWx0X3R5cGUoKTsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KHN1bV9vZl9zcXVhcmVzXywobnJfc2FtcGxlcy0xKSk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcHJldmlvdXNfbWVhbl87CisgICAgICAgIHJlc3VsdF90eXBlIHN1bV9vZl9zcXVhcmVzXzsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorICAgICAgICB2b2lkIHByZXZlbnRfdW5kZXJmbG93KFQgJm5vbl9uZWdhdGl2ZV9udW1iZXIsdHlwZW5hbWUgYm9vc3Q6OmVuYWJsZV9pZjxib29zdDo6aXNfYXJpdGhtZXRpYzxUPixUPjo6dHlwZSogPSAwKQorICAgICAgICB7CisgICAgICAgICAgICBpZiAobm9uX25lZ2F0aXZlX251bWJlciA8IFQoMCkpIG5vbl9uZWdhdGl2ZV9udW1iZXIgPSBUKDApOworICAgICAgICB9CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgIHZvaWQgcHJldmVudF91bmRlcmZsb3coVCAmbm9uX2FyaXRobWV0aWNfcXVhbnRpdHksdHlwZW5hbWUgYm9vc3Q6OmRpc2FibGVfaWY8Ym9vc3Q6OmlzX2FyaXRobWV0aWM8VD4sVD46OnR5cGUqID0gMCkKKyAgICAgICAgeworICAgICAgICB9CisgICAgfTsKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjogbGF6eV9yb2xsaW5nX3ZhcmlhbmNlCisvLyB0YWc6OiBpbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZQorLy8gdGFnOjogcm9sbGluZ192YXJpYW5jZQorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3QgbGF6eV9yb2xsaW5nX3ZhcmlhbmNlCisgICAgICAgIDogZGVwZW5kc19vbjwgcm9sbGluZ19jb3VudCwgcm9sbGluZ19tZWFuLCByb2xsaW5nX21vbWVudDwyPiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6Omxhenlfcm9sbGluZ192YXJpYW5jZV9pbXBsPCBtcGw6Ol8xID4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICAvLy8gdGFnOjpyb2xsaW5nX3dpbmRvdzo6d2luZG93X3NpemUgbmFtZWQgcGFyYW1ldGVyCisgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPHRhZzo6cm9sbGluZ193aW5kb3dfc2l6ZT4gY29uc3Qgd2luZG93X3NpemU7CisgICAgICAgICNlbmRpZgorICAgIH07CisKKyAgICBzdHJ1Y3QgaW1tZWRpYXRlX3JvbGxpbmdfdmFyaWFuY2UKKyAgICAgICAgOiBkZXBlbmRzX29uPCByb2xsaW5nX3dpbmRvd19wbHVzMSwgcm9sbGluZ19jb3VudCwgaW1tZWRpYXRlX3JvbGxpbmdfbWVhbj4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6aW1tZWRpYXRlX3JvbGxpbmdfdmFyaWFuY2VfaW1wbDwgbXBsOjpfMT4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICAvLy8gdGFnOjpyb2xsaW5nX3dpbmRvdzo6d2luZG93X3NpemUgbmFtZWQgcGFyYW1ldGVyCisgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPHRhZzo6cm9sbGluZ193aW5kb3dfc2l6ZT4gY29uc3Qgd2luZG93X3NpemU7CisgICAgICAgICNlbmRpZgorICAgIH07CisKKyAgICAvLyBtYWtlIGltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uCisgICAgc3RydWN0IHJvbGxpbmdfdmFyaWFuY2UgOiBpbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZSB7fTsKK30gLy8gbmFtZXNwYWNlIHRhZworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0OjpsYXp5X3JvbGxpbmdfdmFyaWFuY2UKKy8vIGV4dHJhY3Q6OmltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlCisvLyBleHRyYWN0Ojpyb2xsaW5nX3ZhcmlhbmNlCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpsYXp5X3JvbGxpbmdfdmFyaWFuY2U+IGNvbnN0IGxhenlfcm9sbGluZ192YXJpYW5jZSA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OmltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlPiBjb25zdCBpbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZSA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OnJvbGxpbmdfdmFyaWFuY2U+IGNvbnN0IHJvbGxpbmdfdmFyaWFuY2UgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGxhenlfcm9sbGluZ192YXJpYW5jZSkKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChpbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZSkKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChyb2xsaW5nX3ZhcmlhbmNlKQorfQorCit1c2luZyBleHRyYWN0OjpsYXp5X3JvbGxpbmdfdmFyaWFuY2U7Cit1c2luZyBleHRyYWN0OjppbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZTsKK3VzaW5nIGV4dHJhY3Q6OnJvbGxpbmdfdmFyaWFuY2U7CisKKy8vIHJvbGxpbmdfdmFyaWFuY2UobGF6eSkgLT4gbGF6eV9yb2xsaW5nX3ZhcmlhbmNlCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OnJvbGxpbmdfdmFyaWFuY2UobGF6eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6Omxhenlfcm9sbGluZ192YXJpYW5jZSB0eXBlOworfTsKKworLy8gcm9sbGluZ192YXJpYW5jZShpbW1lZGlhdGUpIC0+IGltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OnJvbGxpbmdfdmFyaWFuY2UoaW1tZWRpYXRlKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6aW1tZWRpYXRlX3JvbGxpbmdfdmFyaWFuY2UgdHlwZTsKK307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBsYXp5X3JvbGxpbmdfdmFyaWFuY2UgcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyByb2xsaW5nX3ZhcmlhbmNlCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6Omxhenlfcm9sbGluZ192YXJpYW5jZT4KKyAgICA6IGZlYXR1cmVfb2Y8dGFnOjpyb2xsaW5nX3ZhcmlhbmNlPgoreworfTsKKworLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiBmZWF0dXJlLWJhc2VkIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiwKKy8vIGltbWVkaWF0ZV9yb2xsaW5nX3ZhcmlhbmNlIHByb3ZpZGVzIHRoZSBzYW1lIGZlYXR1cmUgYXMgcm9sbGluZ192YXJpYW5jZQordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjppbW1lZGlhdGVfcm9sbGluZ192YXJpYW5jZT4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cm9sbGluZ192YXJpYW5jZT4KK3sKK307Cit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9yb2xsaW5nX3dpbmRvdy5ocHAKQEAgLTAsMCArMSwxNzIgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHJvbGxpbmdfd2luZG93LmhwcAorLy8KKy8vIENvcHlyaWdodCAyMDA4IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1JPTExJTkdfV0lORE9XX0hQUF9FQU5fMjZfMTJfMjAwOAorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19ST0xMSU5HX1dJTkRPV19IUFBfRUFOXzI2XzEyXzIwMDgKKworI2luY2x1ZGUgPGNzdGRkZWY+CisjaW5jbHVkZSA8Ym9vc3QvdmVyc2lvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9jaXJjdWxhcl9idWZmZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvYWNjdW11bGF0b3JzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvYWNjdW11bGF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpyb2xsaW5nX3dpbmRvdzo6c2l6ZSBuYW1lZCBwYXJhbWV0ZXIKK0JPT1NUX1BBUkFNRVRFUl9ORVNURURfS0VZV09SRCh0YWcsIHJvbGxpbmdfd2luZG93X3NpemUsIHdpbmRvd19zaXplKQorCitCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChyb2xsaW5nX3dpbmRvd19zaXplKQorCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyByb2xsaW5nX3dpbmRvd19wbHVzMV9pbXBsCisgICAgLy8gICAgc3RvcmVzIHRoZSBsYXRlc3QgTisxIHNhbXBsZXMsIHdoZXJlIE4gaXMgc3BlY2lmaWVkIGF0IGNvbnN0cnVjdGlvbiB0aW1lCisgICAgLy8gICAgd2l0aCB0aGUgcm9sbGluZ193aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IHJvbGxpbmdfd2luZG93X3BsdXMxX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBjaXJjdWxhcl9idWZmZXI8U2FtcGxlPjo6Y29uc3RfaXRlcmF0b3IgY29uc3RfaXRlcmF0b3I7CisgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Y29uc3RfaXRlcmF0b3I+IHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJvbGxpbmdfd2luZG93X3BsdXMxX2ltcGwoQXJncyBjb25zdCAmIGFyZ3MpCisgICAgICAgICAgOiBidWZmZXJfKGFyZ3Nbcm9sbGluZ193aW5kb3dfc2l6ZV0gKyAxKQorICAgICAgICB7fQorCisgICAgICAgICNpZiBCT09TVF9WRVJTSU9OIDwgMTAzNjAwCisgICAgICAgIC8vIEJlZm9yZSBCb29zdCAxLjM2LCBjb3B5aW5nIGEgY2lyY3VsYXIgYnVmZmVyIGRpZG4ndCBjb3B5CisgICAgICAgIC8vIGl0J3MgY2FwYWNpdHksIGFuZCB3ZSBuZWVkIHRoYXQgYmVoYXZpb3IuCisgICAgICAgIHJvbGxpbmdfd2luZG93X3BsdXMxX2ltcGwocm9sbGluZ193aW5kb3dfcGx1czFfaW1wbCBjb25zdCAmdGhhdCkKKyAgICAgICAgICA6IGJ1ZmZlcl8odGhhdC5idWZmZXJfKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5idWZmZXJfLnNldF9jYXBhY2l0eSh0aGF0LmJ1ZmZlcl8uY2FwYWNpdHkoKSk7CisgICAgICAgIH0KKworICAgICAgICByb2xsaW5nX3dpbmRvd19wbHVzMV9pbXBsICZvcGVyYXRvciA9KHJvbGxpbmdfd2luZG93X3BsdXMxX2ltcGwgY29uc3QgJnRoYXQpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPmJ1ZmZlcl8gPSB0aGF0LmJ1ZmZlcl87CisgICAgICAgICAgICB0aGlzLT5idWZmZXJfLnNldF9jYXBhY2l0eSh0aGF0LmJ1ZmZlcl8uY2FwYWNpdHkoKSk7CisgICAgICAgIH0KKyAgICAgICAgI2VuZGlmCisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5idWZmZXJfLnB1c2hfYmFjayhhcmdzW3NhbXBsZV0pOworICAgICAgICB9CisKKyAgICAgICAgYm9vbCBmdWxsKCkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmJ1ZmZlcl8uZnVsbCgpOworICAgICAgICB9CisKKyAgICAgICAgLy8gVGhlIHJlc3VsdCBvZiBhIHNoaWZ0ZWQgcm9sbGluZyB3aW5kb3cgaXMgdGhlIHJhbmdlIGluY2x1ZGluZworICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgbW9zdCByZWNlbnRseSBhZGRlZCBlbGVtZW50LgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUodGhpcy0+YnVmZmVyXy5iZWdpbigpLCB0aGlzLT5idWZmZXJfLmVuZCgpKTsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgY2lyY3VsYXJfYnVmZmVyPFNhbXBsZT4gYnVmZmVyXzsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICBib29sIGlzX3JvbGxpbmdfd2luZG93X3BsdXMxX2Z1bGwoQXJncyBjb25zdCAmYXJncykKKyAgICB7CisgICAgICAgIHJldHVybiBmaW5kX2FjY3VtdWxhdG9yPHRhZzo6cm9sbGluZ193aW5kb3dfcGx1czE+KGFyZ3NbYWNjdW11bGF0b3JdKS5mdWxsKCk7CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHJvbGxpbmdfd2luZG93X2ltcGwKKyAgICAvLyAgICBzdG9yZXMgdGhlIGxhdGVzdCBOIHNhbXBsZXMsIHdoZXJlIE4gaXMgc3BlY2lmaWVkIGF0IGNvbnN0cnVjdGlvbiB0eXBlCisgICAgLy8gICAgd2l0aCB0aGUgcm9sbGluZ193aW5kb3dfc2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IHJvbGxpbmdfd2luZG93X2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBjaXJjdWxhcl9idWZmZXI8U2FtcGxlPjo6Y29uc3RfaXRlcmF0b3IgY29uc3RfaXRlcmF0b3I7CisgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Y29uc3RfaXRlcmF0b3I+IHJlc3VsdF90eXBlOworCisgICAgICAgIHJvbGxpbmdfd2luZG93X2ltcGwoZG9udF9jYXJlKQorICAgICAgICB7fQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gcm9sbGluZ193aW5kb3dfcGx1czEoYXJncykuYWR2YW5jZV9iZWdpbihpc19yb2xsaW5nX3dpbmRvd19wbHVzMV9mdWxsKGFyZ3MpKTsKKyAgICAgICAgfQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpyb2xsaW5nX3dpbmRvd19wbHVzMQorLy8gdGFnOjpyb2xsaW5nX3dpbmRvdworLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgcm9sbGluZ193aW5kb3dfcGx1czEKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgICAsIHRhZzo6cm9sbGluZ193aW5kb3dfc2l6ZQorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpyb2xsaW5nX3dpbmRvd19wbHVzMV9pbXBsPCBtcGw6Ol8xID4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICAvLy8gdGFnOjpyb2xsaW5nX3dpbmRvdzo6c2l6ZSBuYW1lZCBwYXJhbWV0ZXIKKyAgICAgICAgc3RhdGljIGJvb3N0OjpwYXJhbWV0ZXI6OmtleXdvcmQ8dGFnOjpyb2xsaW5nX3dpbmRvd19zaXplPiBjb25zdCB3aW5kb3dfc2l6ZTsKKyAgICAgICAgI2VuZGlmCisgICAgfTsKKworICAgIHN0cnVjdCByb2xsaW5nX3dpbmRvdworICAgICAgOiBkZXBlbmRzX29uPCByb2xsaW5nX3dpbmRvd19wbHVzMSA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnJvbGxpbmdfd2luZG93X2ltcGw8IG1wbDo6XzEgPiBpbXBsOworCisgICAgICAgICNpZmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfRE9YWUdFTl9JTlZPS0VECisgICAgICAgIC8vLyB0YWc6OnJvbGxpbmdfd2luZG93OjpzaXplIG5hbWVkIHBhcmFtZXRlcgorICAgICAgICBzdGF0aWMgYm9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDx0YWc6OnJvbGxpbmdfd2luZG93X3NpemU+IGNvbnN0IHdpbmRvd19zaXplOworICAgICAgICAjZW5kaWYKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSB0YWcKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6cm9sbGluZ193aW5kb3dfcGx1czEKKy8vIGV4dHJhY3Q6OnJvbGxpbmdfd2luZG93CisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpyb2xsaW5nX3dpbmRvd19wbHVzMT4gY29uc3Qgcm9sbGluZ193aW5kb3dfcGx1czEgPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjpyb2xsaW5nX3dpbmRvdz4gY29uc3Qgcm9sbGluZ193aW5kb3cgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHJvbGxpbmdfd2luZG93X3BsdXMxKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHJvbGxpbmdfd2luZG93KQorfQorCit1c2luZyBleHRyYWN0Ojpyb2xsaW5nX3dpbmRvd19wbHVzMTsKK3VzaW5nIGV4dHJhY3Q6OnJvbGxpbmdfd2luZG93OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9za2V3bmVzcy5ocHAKQEAgLTAsMCArMSwxMTQgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHNrZXduZXNzLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBPbGl2aWVyIEd5Z2ksIERhbmllbCBFZ2xvZmYuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1NLRVdORVNTX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19TS0VXTkVTU19IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbW9tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tZWFuLmhwcD4KKworCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHNrZXduZXNzX2ltcGwKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIFNrZXduZXNzIGVzdGltYXRpb24KKworICAgICAgICBUaGUgc2tld25lc3Mgb2YgYSBzYW1wbGUgZGlzdHJpYnV0aW9uIGlzIGRlZmluZWQgYXMgdGhlIHJhdGlvIG9mIHRoZSAzcmQgY2VudHJhbCBtb21lbnQgYW5kIHRoZSBcZiQgMy8yIFxmJC10aCBwb3dlcgorICAgICAgICBvZiB0aGUgMm5kIGNlbnRyYWwgbW9tZW50ICh0aGUgdmFyaWFuY2UpIG9mIHRoZSBzYW1wbGVzIDMuIFRoZSBza2V3bmVzcyBjYW4gYWxzbyBiZSBleHByZXNzZWQgYnkgdGhlIHNpbXBsZSBtb21lbnRzOgorCisgICAgICAgIFxmWworICAgICAgICAgICAgXGhhdHtnfV8xID0KKyAgICAgICAgICAgICAgICBcZnJhYworICAgICAgICAgICAgICAgIHtcd2lkZWhhdHttfV9uXnsoMyl9LTNcd2lkZWhhdHttfV9uXnsoMil9XGhhdHtcbXV9X24rMlxoYXR7XG11fV9uXjN9CisgICAgICAgICAgICAgICAge1xsZWZ0KFx3aWRlaGF0e219X25eeygyKX0gLSBcaGF0e1xtdX1fbl57Mn1ccmlnaHQpXnszLzJ9fQorICAgICAgICBcZl0KKworICAgICAgICB3aGVyZSBcZiQgXHdpZGVoYXR7bX1fbl57KGkpfSBcZiQgYXJlIHRoZSBcZiQgaSBcZiQtdGggbW9tZW50IGFuZCBcZiQgXGhhdHtcbXV9X24gXGYkIHRoZSBtZWFuIChmaXJzdCBtb21lbnQpIG9mIHRoZQorICAgICAgICBcZiQgbiBcZiQgc2FtcGxlcy4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgc2tld25lc3NfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBTYW1wbGU+OjpyZXN1bHRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICBza2V3bmVzc19pbXBsKGRvbnRfY2FyZSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KAorICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3JzOjptb21lbnQ8Mz4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgIC0gMy4gKiBhY2N1bXVsYXRvcnM6Om1vbWVudDwyPihhcmdzKSAqIG1lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgICsgMi4gKiBtZWFuKGFyZ3MpICogbWVhbihhcmdzKSAqIG1lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAsICggYWNjdW11bGF0b3JzOjptb21lbnQ8Mj4oYXJncykgLSBtZWFuKGFyZ3MpICogbWVhbihhcmdzKSApCisgICAgICAgICAgICAgICAgICAgICAgICAqIHN0ZDo6c3FydCggYWNjdW11bGF0b3JzOjptb21lbnQ8Mj4oYXJncykgLSBtZWFuKGFyZ3MpICogbWVhbihhcmdzKSApCisgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgfQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpza2V3bmVzcworLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgc2tld25lc3MKKyAgICAgIDogZGVwZW5kc19vbjxtZWFuLCBtb21lbnQ8Mj4sIG1vbWVudDwzPiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnNrZXduZXNzX2ltcGw8bXBsOjpfMT4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojpza2V3bmVzcworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6c2tld25lc3M+IGNvbnN0IHNrZXduZXNzID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChza2V3bmVzcykKK30KKwordXNpbmcgZXh0cmFjdDo6c2tld25lc3M7CisKKy8vIFNvIHRoYXQgc2tld25lc3MgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfc2tld25lc3Mgd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZAordGVtcGxhdGU8Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjpza2V3bmVzcz4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfc2tld25lc3MgdHlwZTsKK307CisKK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfc2tld25lc3M+CisgIDogZmVhdHVyZV9vZjx0YWc6OnNrZXduZXNzPgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3RhdHMuaHBwCkBAIC0wLDAgKzEsMjkgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vLyBcZmlsZSBzdGF0cy5ocHAKKy8vLyBDb250YWlucyB0aGUgc3RhdHM8PiB0ZW1wbGF0ZS4KKy8vLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfU1RBVFNfSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1NUQVRTX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC92ZWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8vIEFuIE1QTCBzZXF1ZW5jZSBvZiBzdGF0aXN0aWNzLgordGVtcGxhdGU8Qk9PU1RfUFBfRU5VTV9QQVJBTVMoQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9GRUFUVVJFUywgdHlwZW5hbWUgU3RhdCk+CitzdHJ1Y3Qgc3RhdHMKKyAgOiBtcGw6OnZlY3RvcjxCT09TVF9QUF9FTlVNX1BBUkFNUyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0ZFQVRVUkVTLCBTdGF0KT4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3N1bS5ocHAKQEAgLTAsMCArMSwxNDEgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHN1bS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19TVU1fSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1NVTV9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy93ZWlnaHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL2V4dGVybmFsX2FjY3VtdWxhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHN1bV9pbXBsCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHN1bV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgU2FtcGxlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHN1bV9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBzdW0oYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCkgfCBTYW1wbGUoKV0pCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgLy8gd2hhdCBhYm91dCBvdmVyZmxvdz8KKyAgICAgICAgICAgIHRoaXMtPnN1bSArPSBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKV07CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+c3VtOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorCisgICAgICAgIFNhbXBsZSBzdW07CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnN1bQorLy8gdGFnOjpzdW1fb2Zfd2VpZ2h0cworLy8gdGFnOjpzdW1fb2ZfdmFyaWF0ZXMKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHN1bQorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6c3VtX2ltcGw8bXBsOjpfMSwgdGFnOjpzYW1wbGU+IGltcGw7CisgICAgfTsKKworICAgIHN0cnVjdCBzdW1fb2Zfd2VpZ2h0cworICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgbXBsOjp0cnVlXyBpc193ZWlnaHRfYWNjdW11bGF0b3I7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6c3VtX2ltcGw8bXBsOjpfMiwgdGFnOjp3ZWlnaHQ+IGltcGw7CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCBzdW1fb2ZfdmFyaWF0ZXMKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBtcGw6OmFsd2F5czxhY2N1bXVsYXRvcnM6OmltcGw6OnN1bV9pbXBsPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+IGltcGw7CisgICAgfTsKKworICAgIHN0cnVjdCBhYnN0cmFjdF9zdW1fb2ZfdmFyaWF0ZXMKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OnN1bQorLy8gZXh0cmFjdDo6c3VtX29mX3dlaWdodHMKKy8vIGV4dHJhY3Q6OnN1bV9vZl92YXJpYXRlcworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6c3VtPiBjb25zdCBzdW0gPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjpzdW1fb2Zfd2VpZ2h0cz4gY29uc3Qgc3VtX29mX3dlaWdodHMgPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjphYnN0cmFjdF9zdW1fb2ZfdmFyaWF0ZXM+IGNvbnN0IHN1bV9vZl92YXJpYXRlcyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoc3VtKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHN1bV9vZl93ZWlnaHRzKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHN1bV9vZl92YXJpYXRlcykKK30KKwordXNpbmcgZXh0cmFjdDo6c3VtOwordXNpbmcgZXh0cmFjdDo6c3VtX29mX3dlaWdodHM7Cit1c2luZyBleHRyYWN0OjpzdW1fb2ZfdmFyaWF0ZXM7CisKKy8vIFNvIHRoYXQgbWVhbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyB3ZWlnaHRlZF9tZWFuIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnN1bT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfc3VtIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX3N1bT4KKyAgOiBmZWF0dXJlX29mPHRhZzo6c3VtPgore307CisKK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpzdW1fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6YWJzdHJhY3Rfc3VtX29mX3ZhcmlhdGVzPgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtX2thaGFuLmhwcApAQCAtMCwwICsxLDE4OCBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gc3VtX2thaGFuLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAxMCBHYWV0YW5vIE1lbmRvbGEsIDIwMTEgU2ltb24gV2VzdC4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfU1VNX0tBSEFOX0hQUF9FQU5fMjZfMDdfMjAxMAorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19TVU1fS0FIQU5fSFBQX0VBTl8yNl8wN18yMDEwCisKKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9zdW1fa2FoYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L251bWVyaWMvY29udmVyc2lvbi9jYXN0LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworCisjaWYgX01TQ19WRVIgPiAxNDAwCisjIHByYWdtYSBmbG9hdF9jb250cm9sKHB1c2gpCisjIHByYWdtYSBmbG9hdF9jb250cm9sKHByZWNpc2UsIG9uKQorI2VuZGlmCisKK3RlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgVGFnPgorc3RydWN0IHN1bV9rYWhhbl9pbXBsCisgIDogYWNjdW11bGF0b3JfYmFzZQoreworICAgIHR5cGVkZWYgU2FtcGxlIHJlc3VsdF90eXBlOworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHN1bV9rYWhhbl9pbXBsCisgICAgLyoqCisgICAgICAgIEBicmllZiBLYWhhbiBzdW1tYXRpb24gYWxnb3JpdGhtCisKKyAgICAgICAgVGhlIEthaGFuIHN1bW1hdGlvbiBhbGdvcml0aG0gcmVkdWNlcyB0aGUgbnVtZXJpY2FsIGVycm9yIG9idGFpbmVkIHdpdGggc3RhbmRhcmQKKyAgICAgICAgc2VxdWVudGlhbCBzdW0uCisKKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgc3VtX2thaGFuX2ltcGwoQXJncyBjb25zdCAmIGFyZ3MpCisgICAgICA6IHN1bShhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKSB8IFNhbXBsZSgpXSksCisgICAgICAgIGNvbXBlbnNhdGlvbihib29zdDo6bnVtZXJpY19jYXN0PFNhbXBsZT4oMC4wKSkKKyAgICB7CisgICAgfQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICB2b2lkIAorI2lmIEJPT1NUX0FDQ1VNVUxBVE9SU19HQ0NfVkVSU0lPTiA+IDQwMzA1CisgICAgX19hdHRyaWJ1dGVfXygoX19vcHRpbWl6ZV9fKCJuby1hc3NvY2lhdGl2ZS1tYXRoIikpKQorI2VuZGlmCisgICAgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmIGFyZ3MpCisgICAgeworICAgICAgICBjb25zdCBTYW1wbGUgbXlUbXAxID0gYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCldIC0gdGhpcy0+Y29tcGVuc2F0aW9uOworICAgICAgICBjb25zdCBTYW1wbGUgbXlUbXAyID0gdGhpcy0+c3VtICsgbXlUbXAxOworICAgICAgICB0aGlzLT5jb21wZW5zYXRpb24gPSAobXlUbXAyIC0gdGhpcy0+c3VtKSAtIG15VG1wMTsKKyAgICAgICAgdGhpcy0+c3VtID0gbXlUbXAyOworICAgIH0KKworICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgeworICAgICAgcmV0dXJuIHRoaXMtPnN1bTsKKyAgICB9CisKK3ByaXZhdGU6CisgICAgU2FtcGxlIHN1bTsKKyAgICBTYW1wbGUgY29tcGVuc2F0aW9uOworfTsKKworI2lmIF9NU0NfVkVSID4gMTQwMAorIyBwcmFnbWEgZmxvYXRfY29udHJvbChwb3ApCisjZW5kaWYKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnN1bV9rYWhhbgorLy8gdGFnOjpzdW1fb2Zfd2VpZ2h0c19rYWhhbgorLy8gdGFnOjpzdW1fb2ZfdmFyaWF0ZXNfa2FoYW4KKy8vCituYW1lc3BhY2UgdGFnCit7CisKKyAgICBzdHJ1Y3Qgc3VtX2thaGFuCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgaW1wbDo6c3VtX2thaGFuX2ltcGw8IG1wbDo6XzEsIHRhZzo6c2FtcGxlID4gaW1wbDsKKyAgICB9OworCisgICAgc3RydWN0IHN1bV9vZl93ZWlnaHRzX2thaGFuCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBtcGw6OnRydWVfIGlzX3dlaWdodF9hY2N1bXVsYXRvcjsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpzdW1fa2FoYW5faW1wbDxtcGw6Ol8yLCB0YWc6OndlaWdodD4gaW1wbDsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHN1bV9vZl92YXJpYXRlc19rYWhhbgorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIG1wbDo6YWx3YXlzPGFjY3VtdWxhdG9yczo6aW1wbDo6c3VtX2thaGFuX2ltcGw8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4gaW1wbDsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSB0YWcKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6c3VtX2thaGFuCisvLyBleHRyYWN0OjpzdW1fb2Zfd2VpZ2h0c19rYWhhbgorLy8gZXh0cmFjdDo6c3VtX29mX3ZhcmlhdGVzX2thaGFuCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpzdW1fa2FoYW4+IGNvbnN0IHN1bV9rYWhhbiA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OnN1bV9vZl93ZWlnaHRzX2thaGFuPiBjb25zdCBzdW1fb2Zfd2VpZ2h0c19rYWhhbiA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X3N1bV9vZl92YXJpYXRlcz4gY29uc3Qgc3VtX29mX3ZhcmlhdGVzX2thaGFuID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChzdW1fa2FoYW4pCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoc3VtX29mX3dlaWdodHNfa2FoYW4pCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwoc3VtX29mX3ZhcmlhdGVzX2thaGFuKQorfSAvLyBuYW1lc3BhY2UgZXh0cmFjdAorCit1c2luZyBleHRyYWN0OjpzdW1fa2FoYW47Cit1c2luZyBleHRyYWN0OjpzdW1fb2Zfd2VpZ2h0c19rYWhhbjsKK3VzaW5nIGV4dHJhY3Q6OnN1bV9vZl92YXJpYXRlc19rYWhhbjsKKworLy8gc3VtKGthaGFuKSAtPiBzdW1fa2FoYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6c3VtKGthaGFuKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6c3VtX2thaGFuIHR5cGU7Cit9OworCisvLyBzdW1fb2Zfd2VpZ2h0cyhrYWhhbikgLT4gc3VtX29mX3dlaWdodHNfa2FoYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6c3VtX29mX3dlaWdodHMoa2FoYW4pPgoreworICAgIHR5cGVkZWYgdGFnOjpzdW1fb2Zfd2VpZ2h0c19rYWhhbiB0eXBlOworfTsKKworLy8gU28gdGhhdCBzdW1fa2FoYW4gY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfc3VtX2thaGFuIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6OnN1bV9rYWhhbj4KK3sKKyAgICB0eXBlZGVmIHRhZzo6d2VpZ2h0ZWRfc3VtX2thaGFuIHR5cGU7Cit9OworCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX3N1bV9rYWhhbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6c3VtPgore307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBzdW1fa2FoYW4gcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyBzdW0KK3RlbXBsYXRlPD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6c3VtX2thaGFuPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpzdW0+Cit7Cit9OworCisvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorLy8gc3VtX29mX3dlaWdodHNfa2FoYW4gcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyBzdW1fb2Zfd2VpZ2h0cwordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpzdW1fb2Zfd2VpZ2h0c19rYWhhbj4KKyAgOiBmZWF0dXJlX29mPHRhZzo6c3VtX29mX3dlaWdodHM+Cit7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6c3VtX29mX3ZhcmlhdGVzX2thaGFuPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X3N1bV9vZl92YXJpYXRlcz4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgorCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbC5ocHAKQEAgLTAsMCArMSwzMzggQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhaWwuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IEVyaWMgTmllYmxlciwgTWljaGFlbCBHYXVja2xlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVEFJTF9IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVEFJTF9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL29yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvcmV2ZXJzZV9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvcGVybXV0YXRpb25faXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGNhY2hlX3NpemUgbmFtZWQgcGFyYW1ldGVycworQk9PU1RfUEFSQU1FVEVSX05FU1RFRF9LRVlXT1JEKHRhZywgcmlnaHRfdGFpbF9jYWNoZV9zaXplLCBjYWNoZV9zaXplKQorQk9PU1RfUEFSQU1FVEVSX05FU1RFRF9LRVlXT1JEKHRhZywgbGVmdF90YWlsX2NhY2hlX3NpemUsIGNhY2hlX3NpemUpCisKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHJpZ2h0X3RhaWxfY2FjaGVfc2l6ZSkKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGxlZnRfdGFpbF9jYWNoZV9zaXplKQorCituYW1lc3BhY2UgZGV0YWlsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHRhaWxfcmFuZ2UKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEVsZW1lbnRJdGVyYXRvciwgdHlwZW5hbWUgSW5kZXhJdGVyYXRvcj4KKyAgICBzdHJ1Y3QgdGFpbF9yYW5nZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiBib29zdDo6aXRlcmF0b3JfcmFuZ2U8CisgICAgICAgICAgICBib29zdDo6cmV2ZXJzZV9pdGVyYXRvcjxib29zdDo6cGVybXV0YXRpb25faXRlcmF0b3I8RWxlbWVudEl0ZXJhdG9yLCBJbmRleEl0ZXJhdG9yPiA+CisgICAgICAgID4gdHlwZTsKKyAgICB9OworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIG1ha2VfdGFpbF9yYW5nZQorICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgRWxlbWVudEl0ZXJhdG9yLCB0eXBlbmFtZSBJbmRleEl0ZXJhdG9yPgorICAgIHR5cGVuYW1lIHRhaWxfcmFuZ2U8RWxlbWVudEl0ZXJhdG9yLCBJbmRleEl0ZXJhdG9yPjo6dHlwZQorICAgIG1ha2VfdGFpbF9yYW5nZShFbGVtZW50SXRlcmF0b3IgZWxlbV9iZWdpbiwgSW5kZXhJdGVyYXRvciBpbmRleF9iZWdpbiwgSW5kZXhJdGVyYXRvciBpbmRleF9lbmQpCisgICAgeworICAgICAgICByZXR1cm4gYm9vc3Q6Om1ha2VfaXRlcmF0b3JfcmFuZ2UoCisgICAgICAgICAgICBib29zdDo6bWFrZV9yZXZlcnNlX2l0ZXJhdG9yKAorICAgICAgICAgICAgICAgIGJvb3N0OjptYWtlX3Blcm11dGF0aW9uX2l0ZXJhdG9yKGVsZW1fYmVnaW4sIGluZGV4X2VuZCkKKyAgICAgICAgICAgICkKKyAgICAgICAgICAsIGJvb3N0OjptYWtlX3JldmVyc2VfaXRlcmF0b3IoCisgICAgICAgICAgICAgICAgYm9vc3Q6Om1ha2VfcGVybXV0YXRpb25faXRlcmF0b3IoZWxlbV9iZWdpbiwgaW5kZXhfYmVnaW4pCisgICAgICAgICAgICApCisgICAgICAgICk7CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHN0YXRfYXNzaWduX3Zpc2l0b3IKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgc3RydWN0IHN0YXRfYXNzaWduX3Zpc2l0b3IKKyAgICB7CisgICAgICAgIHN0YXRfYXNzaWduX3Zpc2l0b3IoQXJncyBjb25zdCAmYSwgc3RkOjpzaXplX3QgaSkKKyAgICAgICAgICA6IGFyZ3MoYSkKKyAgICAgICAgICAsIGluZGV4KGkpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFN0YXQ+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoU3RhdCAmc3RhdCkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgc3RhdC5hc3NpZ24odGhpcy0+YXJncywgdGhpcy0+aW5kZXgpOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBzdGF0X2Fzc2lnbl92aXNpdG9yICZvcGVyYXRvciA9KHN0YXRfYXNzaWduX3Zpc2l0b3IgY29uc3QgJik7CisgICAgICAgIEFyZ3MgY29uc3QgJmFyZ3M7CisgICAgICAgIHN0ZDo6c2l6ZV90IGluZGV4OworICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gc3RhdF9hc3NpZ24KKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgaW5saW5lIHN0YXRfYXNzaWduX3Zpc2l0b3I8QXJncz4gY29uc3Qgc3RhdF9hc3NpZ24oQXJncyBjb25zdCAmYXJncywgc3RkOjpzaXplX3QgaW5kZXgpCisgICAgeworICAgICAgICByZXR1cm4gc3RhdF9hc3NpZ25fdmlzaXRvcjxBcmdzPihhcmdzLCBpbmRleCk7CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGlzX3RhaWxfdmFyaWF0ZV9mZWF0dXJlCisgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAvLy8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTdGF0LCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IGlzX3RhaWxfdmFyaWF0ZV9mZWF0dXJlCisgICAgICA6IG1wbDo6ZmFsc2VfCisgICAgeworICAgIH07CisKKyAgICAvLy8gSU5URVJOQUwgT05MWQorICAgIC8vLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IGlzX3RhaWxfdmFyaWF0ZV9mZWF0dXJlPHRhZzo6dGFpbF92YXJpYXRlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnLCBMZWZ0UmlnaHQ+LCBMZWZ0UmlnaHQ+CisgICAgICA6IG1wbDo6dHJ1ZV8KKyAgICB7CisgICAgfTsKKworICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgLy8vCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBpc190YWlsX3ZhcmlhdGVfZmVhdHVyZTx0YWc6OnRhaWxfd2VpZ2h0czxMZWZ0UmlnaHQ+LCBMZWZ0UmlnaHQ+CisgICAgICA6IG1wbDo6dHJ1ZV8KKyAgICB7CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHRhaWxfaW1wbAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgLy8gTGVmdFJpZ2h0IG11c3QgYmUgZWl0aGVyIHJpZ2h0IG9yIGxlZnQKKyAgICAgICAgQk9PU1RfTVBMX0FTU0VSVCgoCisgICAgICAgICAgICBtcGw6Om9yXzxpc19zYW1lPExlZnRSaWdodCwgcmlnaHQ+LCBpc19zYW1lPExlZnRSaWdodCwgbGVmdD4gPgorICAgICAgICApKTsKKworICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICBpc19zYW1lPExlZnRSaWdodCwgcmlnaHQ+CisgICAgICAgICAgICAgICwgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6Z3JlYXRlcjxTYW1wbGUgY29uc3QsIFNhbXBsZSBjb25zdD4KKyAgICAgICAgICAgICAgLCBudW1lcmljOjpmdW5jdGlvbmFsOjpsZXNzPFNhbXBsZSBjb25zdCwgU2FtcGxlIGNvbnN0PgorICAgICAgICAgICAgPjo6dHlwZQorICAgICAgICBwcmVkaWNhdGVfdHlwZTsKKworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGRldGFpbDo6dGFpbF9yYW5nZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIHN0ZDo6dmVjdG9yPFNhbXBsZT46OmNvbnN0X2l0ZXJhdG9yCisgICAgICAgICAgLCBzdGQ6OnZlY3RvcjxzdGQ6OnNpemVfdD46Oml0ZXJhdG9yCisgICAgICAgID46OnR5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdGFpbF9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBpc19zb3J0ZWQoZmFsc2UpCisgICAgICAgICAgLCBpbmRpY2VzKCkKKyAgICAgICAgICAsIHNhbXBsZXMoYXJnc1t0YWc6OnRhaWw8TGVmdFJpZ2h0Pjo6Y2FjaGVfc2l6ZV0sIGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pbmRpY2VzLnJlc2VydmUodGhpcy0+c2FtcGxlcy5zaXplKCkpOworICAgICAgICB9CisKKyAgICAgICAgdGFpbF9pbXBsKHRhaWxfaW1wbCBjb25zdCAmdGhhdCkKKyAgICAgICAgICA6IGlzX3NvcnRlZCh0aGF0LmlzX3NvcnRlZCkKKyAgICAgICAgICAsIGluZGljZXModGhhdC5pbmRpY2VzKQorICAgICAgICAgICwgc2FtcGxlcyh0aGF0LnNhbXBsZXMpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPmluZGljZXMucmVzZXJ2ZSh0aGlzLT5zYW1wbGVzLnNpemUoKSk7CisgICAgICAgIH0KKworICAgICAgICAvLyBUaGlzIGp1c3Qgc3RvcmVzIHRoZSBoZWFwIGFuZCB0aGUgc2FtcGxlcy4KKyAgICAgICAgLy8gSW4gb3BlcmF0b3IoKSgpIGJlbG93LCBpZiB3ZSBhcmUgYWRkaW5nIGEgbmV3IHNhbXBsZQorICAgICAgICAvLyB0byB0aGUgc2FtcGxlIGNhY2hlLCB3ZSBmb3JjZSBhbGwgdGhlCisgICAgICAgIC8vIHRhaWxfdmFyaWF0ZXMgdG8gdXBkYXRlIGFsc28uIChJdCdzIG5vdAorICAgICAgICAvLyBnb29kIGVub3VnaCB0byB3YWl0IGZvciB0aGUgYWNjdW11bGF0b3Jfc2V0IHRvIGRvIGl0CisgICAgICAgIC8vIGZvciB1cyBiZWNhdXNlIHRoZW4gaW5mb3JtYXRpb24gYWJvdXQgd2hldGhlciBhIHNhbXBsZQorICAgICAgICAvLyB3YXMgc3RvcmVkIGFuZCB3aGVyZSBpcyBsb3N0LCBhbmQgd291bGQgbmVlZCB0byBiZQorICAgICAgICAvLyBxdWVyaWVkIGF0IHJ1bnRpbWUsIHdoaWNoIHdvdWxkIGJlIHNsb3cuKSBUaGlzIGlzCisgICAgICAgIC8vIGltcGxlbWVudGVkIGFzIGEgZmlsdGVyZWQgdmlzaXRhdGlvbiBvdmVyIHRoZSBzdGF0cywKKyAgICAgICAgLy8gd2hpY2ggd2UgY2FuIGFjY2VzcyBiZWNhdXNlIGFyZ3NbYWNjdW11bGF0b3JdIGdpdmVzIHVzCisgICAgICAgIC8vIGFsbCB0aGUgc3RhdHMuCisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBpZih0aGlzLT5pbmRpY2VzLnNpemUoKSA8IHRoaXMtPnNhbXBsZXMuc2l6ZSgpKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmluZGljZXMucHVzaF9iYWNrKHRoaXMtPmluZGljZXMuc2l6ZSgpKTsKKyAgICAgICAgICAgICAgICB0aGlzLT5hc3NpZ24oYXJncywgdGhpcy0+aW5kaWNlcy5iYWNrKCkpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgZWxzZSBpZihwcmVkaWNhdGVfdHlwZSgpKGFyZ3Nbc2FtcGxlXSwgdGhpcy0+c2FtcGxlc1t0aGlzLT5pbmRpY2VzWzBdXSkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgc3RkOjpwb3BfaGVhcCh0aGlzLT5pbmRpY2VzLmJlZ2luKCksIHRoaXMtPmluZGljZXMuZW5kKCksIGluZGlyZWN0X2NtcCh0aGlzLT5zYW1wbGVzKSk7CisgICAgICAgICAgICAgICAgdGhpcy0+YXNzaWduKGFyZ3MsIHRoaXMtPmluZGljZXMuYmFjaygpKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmKCF0aGlzLT5pc19zb3J0ZWQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gTXVzdCB1c2UgdGhlIHNhbWUgcHJlZGljYXRlIGhlcmUgYXMgaW4gcHVzaF9oZWFwL3BvcF9oZWFwIGFib3ZlLgorICAgICAgICAgICAgICAgIHN0ZDo6c29ydF9oZWFwKHRoaXMtPmluZGljZXMuYmVnaW4oKSwgdGhpcy0+aW5kaWNlcy5lbmQoKSwgaW5kaXJlY3RfY21wKHRoaXMtPnNhbXBsZXMpKTsKKyAgICAgICAgICAgICAgICAvLyBzb3J0X2hlYXAgcHV0cyBlbGVtZW50cyBpbiByZXZlcnNlIG9yZGVyLiBDYWxsaW5nIHN0ZDo6cmV2ZXJzZQorICAgICAgICAgICAgICAgIC8vIHR1cm5zIHRoZSBzb3J0ZWQgc2VxdWVuY2UgYmFjayBpbnRvIGEgdmFsaWQgaGVhcC4KKyAgICAgICAgICAgICAgICBzdGQ6OnJldmVyc2UodGhpcy0+aW5kaWNlcy5iZWdpbigpLCB0aGlzLT5pbmRpY2VzLmVuZCgpKTsKKyAgICAgICAgICAgICAgICB0aGlzLT5pc19zb3J0ZWQgPSB0cnVlOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjptYWtlX3RhaWxfcmFuZ2UoCisgICAgICAgICAgICAgICAgdGhpcy0+c2FtcGxlcy5iZWdpbigpCisgICAgICAgICAgICAgICwgdGhpcy0+aW5kaWNlcy5iZWdpbigpCisgICAgICAgICAgICAgICwgdGhpcy0+aW5kaWNlcy5lbmQoKQorICAgICAgICAgICAgKTsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKworICAgICAgICBzdHJ1Y3QgaXNfdGFpbF92YXJpYXRlCisgICAgICAgIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CisgICAgICAgICAgICBzdHJ1Y3QgYXBwbHkKKyAgICAgICAgICAgICAgOiBkZXRhaWw6OmlzX3RhaWxfdmFyaWF0ZV9mZWF0dXJlPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBkZXRhaWw6OmZlYXR1cmVfdGFnPFQ+Ojp0eXBlCisgICAgICAgICAgICAgICAgICAsIExlZnRSaWdodAorICAgICAgICAgICAgICAgID4KKyAgICAgICAgICAgIHt9OworICAgICAgICB9OworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgYXNzaWduKEFyZ3MgY29uc3QgJmFyZ3MsIHN0ZDo6c2l6ZV90IGluZGV4KQorICAgICAgICB7CisgICAgICAgICAgICBCT09TVF9BU1NFUlQoaW5kZXggPCB0aGlzLT5zYW1wbGVzLnNpemUoKSk7CisgICAgICAgICAgICB0aGlzLT5zYW1wbGVzW2luZGV4XSA9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgICAgIHN0ZDo6cHVzaF9oZWFwKHRoaXMtPmluZGljZXMuYmVnaW4oKSwgdGhpcy0+aW5kaWNlcy5lbmQoKSwgaW5kaXJlY3RfY21wKHRoaXMtPnNhbXBsZXMpKTsKKyAgICAgICAgICAgIHRoaXMtPmlzX3NvcnRlZCA9IGZhbHNlOworICAgICAgICAgICAgLy8gVGVsbCB0aGUgdGFpbCB2YXJpYXRlcyB0byBzdG9yZSB0aGVpciB2YWx1ZXMgYWxzbworICAgICAgICAgICAgYXJnc1thY2N1bXVsYXRvcl0udGVtcGxhdGUgdmlzaXRfaWY8aXNfdGFpbF92YXJpYXRlPihkZXRhaWw6OnN0YXRfYXNzaWduKGFyZ3MsIGluZGV4KSk7CisgICAgICAgIH0KKworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vCisgICAgICAgIHN0cnVjdCBpbmRpcmVjdF9jbXAKKyAgICAgICAgICA6IHN0ZDo6YmluYXJ5X2Z1bmN0aW9uPHN0ZDo6c2l6ZV90LCBzdGQ6OnNpemVfdCwgYm9vbD4KKyAgICAgICAgeworICAgICAgICAgICAgaW5kaXJlY3RfY21wKHN0ZDo6dmVjdG9yPFNhbXBsZT4gY29uc3QgJnMpCisgICAgICAgICAgICAgIDogc2FtcGxlcyhzKQorICAgICAgICAgICAgeworICAgICAgICAgICAgfQorCisgICAgICAgICAgICBib29sIG9wZXJhdG9yICgpKHN0ZDo6c2l6ZV90IGxlZnQsIHN0ZDo6c2l6ZV90IHJpZ2h0KSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJldHVybiBwcmVkaWNhdGVfdHlwZSgpKHRoaXMtPnNhbXBsZXNbbGVmdF0sIHRoaXMtPnNhbXBsZXNbcmlnaHRdKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgaW5kaXJlY3RfY21wICZvcGVyYXRvciA9KGluZGlyZWN0X2NtcCBjb25zdCAmKTsKKyAgICAgICAgICAgIHN0ZDo6dmVjdG9yPFNhbXBsZT4gY29uc3QgJnNhbXBsZXM7CisgICAgICAgIH07CisKKyAgICAgICAgbXV0YWJsZSBib29sIGlzX3NvcnRlZDsKKyAgICAgICAgbXV0YWJsZSBzdGQ6OnZlY3RvcjxzdGQ6OnNpemVfdD4gaW5kaWNlczsKKyAgICAgICAgc3RkOjp2ZWN0b3I8U2FtcGxlPiBzYW1wbGVzOworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8gVE9ETyBUaGUgdGVtcGxhdGl6ZWQgdGFnOjp0YWlsIGJlbG93IHNob3VsZCBpbmhlcml0IGZyb20gdGhlIGNvcnJlY3QgbmFtZWQgcGFyYW1ldGVyLgorLy8gVGhlIGZvbGxvd2luZyBsaW5lcyBwcm92aWRlIGEgd29ya2Fyb3VuZCwgYnV0IHRoZXJlIG11c3QgYmUgYSBiZXR0ZXIgd2F5IG9mIGRvaW5nIHRoaXMuCit0ZW1wbGF0ZTx0eXBlbmFtZSBUPgorc3RydWN0IHRhaWxfY2FjaGVfc2l6ZV9uYW1lZF9hcmcKK3sKK307Cit0ZW1wbGF0ZTw+CitzdHJ1Y3QgdGFpbF9jYWNoZV9zaXplX25hbWVkX2FyZzxsZWZ0PgorICA6IHRhZzo6bGVmdF90YWlsX2NhY2hlX3NpemUKK3sKK307Cit0ZW1wbGF0ZTw+CitzdHJ1Y3QgdGFpbF9jYWNoZV9zaXplX25hbWVkX2FyZzxyaWdodD4KKyAgOiB0YWc6OnJpZ2h0X3RhaWxfY2FjaGVfc2l6ZQoreworfTsKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp0YWlsPD4KKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsCisgICAgICA6IGRlcGVuZHNfb248PgorICAgICAgLCB0YWlsX2NhY2hlX3NpemVfbmFtZWRfYXJnPExlZnRSaWdodD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6dGFpbF9pbXBsPG1wbDo6XzEsIExlZnRSaWdodD4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICAvLy8gdGFnOjp0YWlsPExlZnRSaWdodD46OmNhY2hlX3NpemUgbmFtZWQgcGFyYW1ldGVyCisgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPHRhaWxfY2FjaGVfc2l6ZV9uYW1lZF9hcmc8TGVmdFJpZ2h0PiA+IGNvbnN0IGNhY2hlX3NpemU7CisgICAgICAgICNlbmRpZgorICAgIH07CisKKyAgICBzdHJ1Y3QgYWJzdHJhY3RfdGFpbAorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6dGFpbAorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3RfdGFpbD4gY29uc3QgdGFpbCA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwodGFpbCkKK30KKwordXNpbmcgZXh0cmFjdDo6dGFpbDsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp0YWlsPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjphYnN0cmFjdF90YWlsPgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbF9tZWFuLmhwcApAQCAtMCwwICsxLDI0NiBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFpbF9tZWFuLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBEYW5pZWwgRWdsb2ZmLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1RBSUxfTUVBTl9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19UQUlMX01FQU5fSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPG51bWVyaWM+CisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPHNzdHJlYW0+CisjaW5jbHVkZSA8c3RkZXhjZXB0PgorI2luY2x1ZGUgPGJvb3N0L3Rocm93X2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWxfcXVhbnRpbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorCisjaWZkZWYgX01TQ19WRVIKKyMgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTogNDEyNykgLy8gY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBpcyBjb25zdGFudAorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBjb2hlcmVudF90YWlsX21lYW5faW1wbAorICAgIC8vCisgICAgLyoqCisgICAgICAgIEBicmllZiBFc3RpbWF0aW9uIG9mIHRoZSBjb2hlcmVudCB0YWlsIG1lYW4gYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyAoZm9yIGJvdGggbGVmdCBhbmQgcmlnaHQgdGFpbHMpCisKKyAgICAgICAgVGhlIGNvaGVyZW50IHRhaWwgbWVhbiBcZiRcd2lkZWhhdHtDVE19X3tuLFxhbHBoYX0oWClcZiQgaXMgZXF1YWwgdG8gdGhlIG5vbi1jb2hlcmVudCB0YWlsIG1lYW4gXGYkXHdpZGVoYXR7TkNUTX1fe24sXGFscGhhfShYKVxmJAorICAgICAgICBwbHVzIGEgY29ycmVjdGlvbiB0ZXJtIHRoYXQgZW5zdXJlcyBjb2hlcmVuY2UgaW4gY2FzZSBvZiBub24tY29udGludW91cyBkaXN0cmlidXRpb25zLgorCisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7Q1RNfV97bixcYWxwaGF9XntcbWF0aHJte3JpZ2h0fX0oWCkgPSBcd2lkZWhhdHtOQ1RNfV97bixcYWxwaGF9XntcbWF0aHJte3JpZ2h0fX0oWCkgKworICAgICAgICAgICAgXGZyYWN7MX17XGxjZWlsIG4oMS1cYWxwaGEpXHJjZWlsfVxoYXR7cX1fe24sXGFscGhhfShYKVxsZWZ0KDEgLSBcYWxwaGEgLSBcZnJhY3sxfXtufVxsY2VpbCBuKDEtXGFscGhhKVxyY2VpbCBccmlnaHQpCisgICAgICAgIFxmXQorCisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7Q1RNfV97bixcYWxwaGF9XntcbWF0aHJte2xlZnR9fShYKSA9IFx3aWRlaGF0e05DVE19X3tuLFxhbHBoYX1ee1xtYXRocm17bGVmdH19KFgpICsKKyAgICAgICAgICAgIFxmcmFjezF9e1xsY2VpbCBuXGFscGhhXHJjZWlsfVxoYXR7cX1fe24sXGFscGhhfShYKVxsZWZ0KFxhbHBoYSAtIFxmcmFjezF9e259XGxjZWlsIG5cYWxwaGFccmNlaWwgXHJpZ2h0KQorICAgICAgICBcZl0KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBjb2hlcmVudF90YWlsX21lYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgZmxvYXRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICBjb2hlcmVudF90YWlsX21lYW5faW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBuID0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KAorICAgICAgICAgICAgICAgIHN0ZDo6Y2VpbCgKKyAgICAgICAgICAgICAgICAgICAgY250ICogKCAoIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgKSA/IGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldIDogMS4gLSBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSApCisgICAgICAgICAgICAgICAgKQorICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgZXh0cmFjdG9yPHRhZzo6bm9uX2NvaGVyZW50X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+ID4gY29uc3Qgc29tZV9ub25fY29oZXJlbnRfdGFpbF9tZWFuID0ge307CisKKyAgICAgICAgICAgIHJldHVybiBzb21lX25vbl9jb2hlcmVudF90YWlsX21lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgKyBudW1lcmljOjpmZGl2KHF1YW50aWxlKGFyZ3MpLCBuKQorICAgICAgICAgICAgICAgICAqICgKKyAgICAgICAgICAgICAgICAgICAgICggaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSApID8gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0gOiAxLiAtIGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldCisgICAgICAgICAgICAgICAgICAgICAtIG51bWVyaWM6OmZkaXYobiwgY291bnQoYXJncykpCisgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgfQorICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gbm9uX2NvaGVyZW50X3RhaWxfbWVhbl9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIEVzdGltYXRpb24gb2YgdGhlIChub24tY29oZXJlbnQpIHRhaWwgbWVhbiBiYXNlZCBvbiBvcmRlciBzdGF0aXN0aWNzIChmb3IgYm90aCBsZWZ0IGFuZCByaWdodCB0YWlscykKKworICAgICAgICBBbiBlc3RpbWF0aW9uIG9mIHRoZSBub24tY29oZXJlbnQgdGFpbCBtZWFuIFxmJFx3aWRlaGF0e05DVE19X3tuLFxhbHBoYX0oWClcZiQgaXMgZ2l2ZW4gYnkgdGhlIG1lYW4gb2YgdGhlCisgICAgICAgIFxmJFxsY2VpbCBuXGFscGhhXHJjZWlsXGYkIHNtYWxsZXN0IHNhbXBsZXMgKGxlZnQgdGFpbCkgb3IgdGhlIG1lYW4gb2YgdGhlICBcZiRcbGNlaWwgbigxLVxhbHBoYSlccmNlaWxcZiQKKyAgICAgICAgbGFyZ2VzdCBzYW1wbGVzIChyaWdodCB0YWlsKSwgXGYkblxmJCBiZWluZyB0aGUgdG90YWwgbnVtYmVyIG9mIHNhbXBsZXMgYW5kIFxmJFxhbHBoYVxmJCB0aGUgcXVhbnRpbGUgbGV2ZWw6CisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcd2lkZWhhdHtOQ1RNfV97bixcYWxwaGF9XntcbWF0aHJte3JpZ2h0fX0oWCkgPSBcZnJhY3sxfXtcbGNlaWwgbigxLVxhbHBoYSlccmNlaWx9IFxzdW1fe2k9XGxjZWlsIFxhbHBoYSBuIFxyY2VpbH1ebiBYX3tpOm59CisgICAgICAgIFxmXQorCisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7TkNUTX1fe24sXGFscGhhfV57XG1hdGhybXtsZWZ0fX0oWCkgPSBcZnJhY3sxfXtcbGNlaWwgblxhbHBoYVxyY2VpbH0gXHN1bV97aT0xfV57XGxjZWlsIFxhbHBoYSBuIFxyY2VpbH0gWF97aTpufQorICAgICAgICBcZl0KKworICAgICAgICBJdCB0aHVzIHJlcXVpcmVzIHRoZSBjYWNoaW5nIG9mIGF0IGxlYXN0IHRoZSBcZiRcbGNlaWwgblxhbHBoYVxyY2VpbFxmJCBzbWFsbGVzdCBvciB0aGUgXGYkXGxjZWlsIG4oMS1cYWxwaGEpXHJjZWlsXGYkCisgICAgICAgIGxhcmdlc3Qgc2FtcGxlcy4KKworICAgICAgICBAcGFyYW0gcXVhbnRpbGVfcHJvYmFiaWxpdHkKKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBub25fY29oZXJlbnRfdGFpbF9tZWFuX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGZsb2F0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgbm9uX2NvaGVyZW50X3RhaWxfbWVhbl9pbXBsKGRvbnRfY2FyZSkge30KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSBzdGF0aWNfY2FzdDxzdGQ6OnNpemVfdD4oCisgICAgICAgICAgICAgICAgc3RkOjpjZWlsKAorICAgICAgICAgICAgICAgICAgICBjbnQgKiAoICggaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSApID8gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0gOiAxLiAtIGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldICkKKyAgICAgICAgICAgICAgICApCisgICAgICAgICAgICApOworCisgICAgICAgICAgICAvLyBJZiBuIGlzIGluIGEgdmFsaWQgcmFuZ2UsIHJldHVybiByZXN1bHQsIG90aGVyd2lzZSByZXR1cm4gTmFOIG9yIHRocm93IGV4Y2VwdGlvbgorICAgICAgICAgICAgaWYgKG4gPD0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KHRhaWwoYXJncykuc2l6ZSgpKSkKKyAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpYzo6ZmRpdigKKyAgICAgICAgICAgICAgICAgICAgc3RkOjphY2N1bXVsYXRlKAorICAgICAgICAgICAgICAgICAgICAgICAgdGFpbChhcmdzKS5iZWdpbigpCisgICAgICAgICAgICAgICAgICAgICAgLCB0YWlsKGFyZ3MpLmJlZ2luKCkgKyBuCisgICAgICAgICAgICAgICAgICAgICAgLCBTYW1wbGUoMCkKKyAgICAgICAgICAgICAgICAgICAgKQorICAgICAgICAgICAgICAgICAgLCBuCisgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAoc3RkOjpudW1lcmljX2xpbWl0czxyZXN1bHRfdHlwZT46Omhhc19xdWlldF9OYU4pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjpudW1lcmljX2xpbWl0czxyZXN1bHRfdHlwZT46OnF1aWV0X05hTigpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBzdGQ6Om9zdHJpbmdzdHJlYW0gbXNnOworICAgICAgICAgICAgICAgICAgICBtc2cgPDwgImluZGV4IG4gPSAiIDw8IG4gPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgWzAsICIgPDwgdGFpbChhcmdzKS5zaXplKCkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNhbXBsZSgwKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH0KKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjpjb2hlcmVudF90YWlsX21lYW48PgorLy8gdGFnOjpub25fY29oZXJlbnRfdGFpbF9tZWFuPD4KKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBjb2hlcmVudF90YWlsX21lYW4KKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgcXVhbnRpbGUsIG5vbl9jb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6Y29oZXJlbnRfdGFpbF9tZWFuX2ltcGw8bXBsOjpfMSwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IG5vbl9jb2hlcmVudF90YWlsX21lYW4KKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgdGFpbDxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpub25fY29oZXJlbnRfdGFpbF9tZWFuX2ltcGw8bXBsOjpfMSwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisKKyAgICBzdHJ1Y3QgYWJzdHJhY3Rfbm9uX2NvaGVyZW50X3RhaWxfbWVhbgorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6bm9uX2NvaGVyZW50X3RhaWxfbWVhbjsKKy8vIGV4dHJhY3Q6OmNvaGVyZW50X3RhaWxfbWVhbjsKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X25vbl9jb2hlcmVudF90YWlsX21lYW4+IGNvbnN0IG5vbl9jb2hlcmVudF90YWlsX21lYW4gPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjp0YWlsX21lYW4+IGNvbnN0IGNvaGVyZW50X3RhaWxfbWVhbiA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwobm9uX2NvaGVyZW50X3RhaWxfbWVhbikKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChjb2hlcmVudF90YWlsX21lYW4pCit9CisKK3VzaW5nIGV4dHJhY3Q6Om5vbl9jb2hlcmVudF90YWlsX21lYW47Cit1c2luZyBleHRyYWN0Ojpjb2hlcmVudF90YWlsX21lYW47CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBjb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiBwcm92aWRlcyB0aGUgc2FtZSBmZWF0dXJlIGFzIHRhaWxfbWVhbgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpjb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OnRhaWxfbWVhbj4KK3sKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6bm9uX2NvaGVyZW50X3RhaWxfbWVhbjxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6YWJzdHJhY3Rfbm9uX2NvaGVyZW50X3RhaWxfbWVhbj4KK3sKK307CisKKy8vIFNvIHRoYXQgbm9uX2NvaGVyZW50X3RhaWxfbWVhbiBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZAorLy8gd2l0aCB3ZWlnaHRlZF9ub25fY29oZXJlbnRfdGFpbF9tZWFuIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfd2VpZ2h0ZWRfZmVhdHVyZTx0YWc6Om5vbl9jb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiA+Cit7CisgICAgdHlwZWRlZiB0YWc6Om5vbl9jb2hlcmVudF93ZWlnaHRlZF90YWlsX21lYW48TGVmdFJpZ2h0PiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpub25fY29oZXJlbnRfd2VpZ2h0ZWRfdGFpbF9tZWFuPExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpub25fY29oZXJlbnRfdGFpbF9tZWFuPExlZnRSaWdodD4gPgore307CisKKy8vIE5PVEUgdGhhdCBub25fY29oZXJlbnRfdGFpbF9tZWFuIGNhbm5vdCBiZSBmZWF0dXJlLWdyb3VwZWQgd2l0aCB0YWlsX21lYW4sCisvLyB3aGljaCBpcyB0aGUgYmFzZSBmZWF0dXJlIGZvciBjb2hlcmVudCB0YWlsIG1lYW5zLCBzaW5jZSAoYXQgbGVhc3QgZm9yCisvLyBub24tY29udGludW91cyBkaXN0cmlidXRpb25zKSBub25fY29oZXJlbnRfdGFpbF9tZWFuIGlzIGEgZGlmZmVyZW50IG1lYXN1cmUhCisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNpZmRlZiBfTVNDX1ZFUgorIyBwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbF9xdWFudGlsZS5ocHAKQEAgLTAsMCArMSwxNTggQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhaWxfcXVhbnRpbGUuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVEFJTF9RVUFOVElMRV9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19UQUlMX1FVQU5USUxFX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8c3N0cmVhbT4KKyNpbmNsdWRlIDxzdGRleGNlcHQ+CisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnL25vX3RyMS9jbWF0aC5ocHA+ICAgICAgICAgICAgIC8vIEZvciBjZWlsCisjaW5jbHVkZSA8Ym9vc3QvdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zYW1lLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY291bnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorCisjaWZkZWYgX01TQ19WRVIKKyMgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTogNDEyNykgLy8gY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBpcyBjb25zdGFudAorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gdGFpbF9xdWFudGlsZV9pbXBsCisgICAgLy8gIFRhaWwgcXVhbnRpbGUgZXN0aW1hdGlvbiBiYXNlZCBvbiBvcmRlciBzdGF0aXN0aWNzCisgICAgLyoqCisgICAgICAgIEBicmllZiBUYWlsIHF1YW50aWxlIGVzdGltYXRpb24gYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyAoZm9yIGJvdGggbGVmdCBhbmQgcmlnaHQgdGFpbHMpCisKKyAgICAgICAgVGhlIGVzdGltYXRpb24gb2YgYSB0YWlsIHF1YW50aWxlIFxmJFxoYXR7cX1cZiQgd2l0aCBsZXZlbCBcZiRcYWxwaGFcZiQgYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyByZXF1aXJlcyB0aGUKKyAgICAgICAgY2FjaGluZyBvZiBhdCBsZWFzdCB0aGUgXGYkXGxjZWlsIG5cYWxwaGFccmNlaWxcZiQgc21hbGxlc3Qgb3IgdGhlIFxmJFxsY2VpbCBuKDEtXGFscGhhKVxyY2VpbFxmJCBsYXJnZXN0IHNhbXBsZXMsCisgICAgICAgIFxmJG5cZiQgYmVpbmcgdGhlIHRvdGFsIG51bWJlciBvZiBzYW1wbGVzLiBUaGUgbGFyZ2VzdCBvZiB0aGUgXGYkXGxjZWlsIG5cYWxwaGFccmNlaWxcZiQgc21hbGxlc3Qgc2FtcGxlcyBvciB0aGUKKyAgICAgICAgc21hbGxlc3Qgb2YgdGhlIFxmJFxsY2VpbCBuKDEtXGFscGhhKVxyY2VpbFxmJCBsYXJnZXN0IHNhbXBsZXMgcHJvdmlkZXMgYW4gZXN0aW1hdGUgZm9yIHRoZSBxdWFudGlsZToKKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFxoYXR7cX1fe24sXGFscGhhfSA9IFhfe1xsY2VpbCBcYWxwaGEgbiBccmNlaWw6bn0KKyAgICAgICAgXGZdCisKKyAgICAgICAgQHBhcmFtIHF1YW50aWxlX3Byb2JhYmlsaXR5CisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgdGFpbF9xdWFudGlsZV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgU2FtcGxlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRhaWxfcXVhbnRpbGVfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBuID0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KAorICAgICAgICAgICAgICAgIHN0ZDo6Y2VpbCgKKyAgICAgICAgICAgICAgICAgICAgY250ICogKCAoIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgKSA/IGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldIDogMS4gLSBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSApCisgICAgICAgICAgICAgICAgKQorICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgLy8gSWYgbiBpcyBpbiBhIHZhbGlkIHJhbmdlLCByZXR1cm4gcmVzdWx0LCBvdGhlcndpc2UgcmV0dXJuIE5hTiBvciB0aHJvdyBleGNlcHRpb24KKyAgICAgICAgICAgIGlmICggbiA8IHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90Pih0YWlsKGFyZ3MpLnNpemUoKSkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIGNhY2hlZCBzYW1wbGVzIG9mIHRoZSBsZWZ0IGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLAorICAgICAgICAgICAgICAgLy8gd2hlcmVhcyB0aGUgc2FtcGxlcyBvZiB0aGUgcmlnaHQgdGFpbCBhcmUgc29ydGVkIGluIGRlc2NlbmRpbmcgb3JkZXIKKyAgICAgICAgICAgICAgIHJldHVybiAqKGJvb3N0OjpiZWdpbih0YWlsKGFyZ3MpKSArIG4gLSAxKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAoc3RkOjpudW1lcmljX2xpbWl0czxyZXN1bHRfdHlwZT46Omhhc19xdWlldF9OYU4pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjpudW1lcmljX2xpbWl0czxyZXN1bHRfdHlwZT46OnF1aWV0X05hTigpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBzdGQ6Om9zdHJpbmdzdHJlYW0gbXNnOworICAgICAgICAgICAgICAgICAgICBtc2cgPDwgImluZGV4IG4gPSAiIDw8IG4gPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgWzAsICIgPDwgdGFpbChhcmdzKS5zaXplKCkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNhbXBsZSgwKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgIH0KKyAgICB9OworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OnRhaWxfcXVhbnRpbGU8PgorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHRhaWxfcXVhbnRpbGUKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgdGFpbDxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6dGFpbF9xdWFudGlsZV9pbXBsPG1wbDo6XzEsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp0YWlsX3F1YW50aWxlCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpxdWFudGlsZT4gY29uc3QgdGFpbF9xdWFudGlsZSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwodGFpbF9xdWFudGlsZSkKK30KKwordXNpbmcgZXh0cmFjdDo6dGFpbF9xdWFudGlsZTsKKworLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiBmZWF0dXJlLWJhc2VkIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiwKKy8vIHRhaWxfcXVhbnRpbGU8TGVmdFJpZ2h0PiBwcm92aWRlIHRoZSBzYW1lIGZlYXR1cmUgYXMgcXVhbnRpbGUKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6dGFpbF9xdWFudGlsZTxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6cXVhbnRpbGU+Cit7Cit9OworCisvLyBTbyB0aGF0IHRhaWxfcXVhbnRpbGUgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfdGFpbF9xdWFudGlsZSB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjp0YWlsX3F1YW50aWxlPExlZnRSaWdodD4gPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF90YWlsX3F1YW50aWxlPExlZnRSaWdodD4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfdGFpbF9xdWFudGlsZTxMZWZ0UmlnaHQ+ID4KKyAgOiBmZWF0dXJlX29mPHRhZzo6dGFpbF9xdWFudGlsZTxMZWZ0UmlnaHQ+ID4KK3t9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjaWZkZWYgX01TQ19WRVIKKyMgcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWxfdmFyaWF0ZS5ocHAKQEAgLTAsMCArMSwxNDEgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhaWxfdmFyaWF0ZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLCBNaWNoYWVsIEdhdWNrbGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9TVEFUX1NUQVRJU1RJQ1NfVEFJTF9WQVJJQVRFX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9TVEFUX1NUQVRJU1RJQ1NfVEFJTF9WQVJJQVRFX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hbHdheXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3JldmVyc2VfaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3Blcm11dGF0aW9uX2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gdGFpbF92YXJpYXRlX2ltcGwKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZywgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsX3ZhcmlhdGVfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmCisgICAgICAgICAgICB0eXBlbmFtZSBkZXRhaWw6OnRhaWxfcmFuZ2U8CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgc3RkOjp2ZWN0b3I8VmFyaWF0ZVR5cGU+Ojpjb25zdF9pdGVyYXRvcgorICAgICAgICAgICAgICAsIHN0ZDo6dmVjdG9yPHN0ZDo6c2l6ZV90Pjo6aXRlcmF0b3IKKyAgICAgICAgICAgID46OnR5cGUKKyAgICAgICAgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdGFpbF92YXJpYXRlX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHZhcmlhdGVzKGFyZ3NbdGFnOjp0YWlsPExlZnRSaWdodD46OmNhY2hlX3NpemVdLCBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxWYXJpYXRlVGFnPjo6Z2V0KCkgfCBWYXJpYXRlVHlwZSgpXSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBhc3NpZ24oQXJncyBjb25zdCAmYXJncywgc3RkOjpzaXplX3QgaW5kZXgpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPnZhcmlhdGVzW2luZGV4XSA9IGFyZ3NbcGFyYW1ldGVyOjprZXl3b3JkPFZhcmlhdGVUYWc+OjpnZXQoKV07CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgLy8gZ2V0dGluZyB0aGUgb3JkZXIgcmVzdWx0IGNhdXNlcyB0aGUgaW5kaWNlcyB2ZWN0b3IgdG8gYmUgc29ydGVkLgorICAgICAgICAgICAgZXh0cmFjdG9yPHRhZzo6dGFpbDxMZWZ0UmlnaHQ+ID4gY29uc3Qgc29tZV90YWlsID0ge307CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+ZG9fcmVzdWx0KHNvbWVfdGFpbChhcmdzKSk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFRhaWxSbmc+CisgICAgICAgIHJlc3VsdF90eXBlIGRvX3Jlc3VsdChUYWlsUm5nIGNvbnN0ICZybmcpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6Om1ha2VfdGFpbF9yYW5nZSgKKyAgICAgICAgICAgICAgICB0aGlzLT52YXJpYXRlcy5iZWdpbigpCisgICAgICAgICAgICAgICwgcm5nLmVuZCgpLmJhc2UoKS5iYXNlKCkgICAvLyB0aGUgaW5kZXggaXRlcmF0b3IKKyAgICAgICAgICAgICAgLCBybmcuYmVnaW4oKS5iYXNlKCkuYmFzZSgpIC8vIChiZWdpbiBhbmQgZW5kIHJldmVyc2VkIGJlY2F1c2UgdGhlc2UgYXJlIHJldmVyc2UgaXRlcmF0b3JzKQorICAgICAgICAgICAgKTsKKyAgICAgICAgfQorCisgICAgICAgIHN0ZDo6dmVjdG9yPFZhcmlhdGVUeXBlPiB2YXJpYXRlczsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6dGFpbF92YXJpYXRlPD4KKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWcsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgdGFpbF92YXJpYXRlCisgICAgICA6IGRlcGVuZHNfb248dGFpbDxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIG1wbDo6YWx3YXlzPGFjY3VtdWxhdG9yczo6aW1wbDo6dGFpbF92YXJpYXRlX2ltcGw8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWcsIExlZnRSaWdodD4gPiBpbXBsOworICAgIH07CisKKyAgICBzdHJ1Y3QgYWJzdHJhY3RfdGFpbF92YXJpYXRlCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsX3dlaWdodHMKKyAgICAgIDogZGVwZW5kc19vbjx0YWlsPExlZnRSaWdodD4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp0YWlsX3ZhcmlhdGVfaW1wbDxtcGw6Ol8yLCB0YWc6OndlaWdodCwgTGVmdFJpZ2h0PiBpbXBsOworICAgIH07CisKKyAgICBzdHJ1Y3QgYWJzdHJhY3RfdGFpbF93ZWlnaHRzCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp0YWlsX3ZhcmlhdGUKKy8vIGV4dHJhY3Q6OnRhaWxfd2VpZ2h0cworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3RfdGFpbF92YXJpYXRlPiBjb25zdCB0YWlsX3ZhcmlhdGUgPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjphYnN0cmFjdF90YWlsX3dlaWdodHM+IGNvbnN0IHRhaWxfd2VpZ2h0cyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwodGFpbF92YXJpYXRlKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHRhaWxfd2VpZ2h0cykKK30KKwordXNpbmcgZXh0cmFjdDo6dGFpbF92YXJpYXRlOwordXNpbmcgZXh0cmFjdDo6dGFpbF93ZWlnaHRzOworCit0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZywgdHlwZW5hbWUgTGVmdFJpZ2h0Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp0YWlsX3ZhcmlhdGU8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWcsIExlZnRSaWdodD4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjphYnN0cmFjdF90YWlsX3ZhcmlhdGU+Cit7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OnRhaWxfd2VpZ2h0czxMZWZ0UmlnaHQ+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6YWJzdHJhY3RfdGFpbF93ZWlnaHRzIHR5cGU7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX3ZhcmlhdGVfbWVhbnMuaHBwCkBAIC0wLDAgKzEsMjU4IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWlsX3ZhcmlhdGVfbWVhbnMuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVEFJTF9WQVJJQVRFX01FQU5TX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1RBSUxfVkFSSUFURV9NRUFOU19IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8c3N0cmVhbT4KKyNpbmNsdWRlIDxzdGRleGNlcHQ+CisjaW5jbHVkZSA8Ym9vc3QvdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX3ZhcmlhdGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWxfbWVhbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvcGFyYW1ldGVycy9xdWFudGlsZV9wcm9iYWJpbGl0eS5ocHA+CisKKyNpZmRlZiBfTVNDX1ZFUgorIyBwcmFnbWEgd2FybmluZyhwdXNoKQorIyBwcmFnbWEgd2FybmluZyhkaXNhYmxlOiA0MTI3KSAvLyBjb25kaXRpb25hbCBleHByZXNzaW9uIGlzIGNvbnN0YW50CisjZW5kaWYKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8qKgorICAgICAgICBAYnJpZWYgRXN0aW1hdGlvbiBvZiB0aGUgYWJzb2x1dGUgYW5kIHJlbGF0aXZlIHRhaWwgdmFyaWF0ZSBtZWFucyAoZm9yIGJvdGggbGVmdCBhbmQgcmlnaHQgdGFpbHMpCisKKyAgICAgICAgRm9yIGFsbCBcZiRqXGYkLXRoIHZhcmlhdGVzIGFzc29jaWF0ZWQgdG8gdGhlIFxmJFxsY2VpbCBuKDEtXGFscGhhKVxyY2VpbFxmJCBsYXJnZXN0IHNhbXBsZXMgKG9yIHRoZQorICAgICAgICBcZiRcbGNlaWwgbigxLVxhbHBoYSlccmNlaWxcZiQgc21hbGxlc3Qgc2FtcGxlcyBpbiBjYXNlIG9mIHRoZSBsZWZ0IHRhaWwpLCB0aGUgYWJzb2x1dGUgdGFpbCBtZWFucworICAgICAgICBcZiRcd2lkZWhhdHtBVE19X3tuLFxhbHBoYX0oWCwgailcZiQgYXJlIGNvbXB1dGVkIGFuZCByZXR1cm5lZCBhcyBhbiBpdGVyYXRvciByYW5nZS4gQWx0ZXJuYXRpdmVseSwKKyAgICAgICAgdGhlIHJlbGF0aXZlIHRhaWwgbWVhbnMgXGYkXHdpZGVoYXR7UlRNfV97bixcYWxwaGF9KFgsIGopXGYkIGFyZSByZXR1cm5lZCwgd2hpY2ggYXJlIHRoZSBhYnNvbHV0ZQorICAgICAgICB0YWlsIG1lYW5zIG5vcm1hbGl6ZWQgd2l0aCB0aGUgKG5vbi1jb2hlcmVudCkgc2FtcGxlIHRhaWwgbWVhbiBcZiRcd2lkZWhhdHtOQ1RNfV97bixcYWxwaGF9KFgpXGYkLgorCisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7QVRNfV97bixcYWxwaGF9XntcbWF0aHJte3JpZ2h0fX0oWCwgaikgPQorICAgICAgICAgICAgICAgIFxmcmFjezF9e1xsY2VpbCBuKDEtXGFscGhhKSBccmNlaWx9CisgICAgICAgICAgICAgICAgXHN1bV97aT1cbGNlaWwgXGFscGhhIG4gXHJjZWlsfV5uIFx4aV97aixpfQorICAgICAgICBcZl0KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e0FUTX1fe24sXGFscGhhfV57XG1hdGhybXtsZWZ0fX0oWCwgaikgPQorICAgICAgICAgICAgICAgIFxmcmFjezF9e1xsY2VpbCBuXGFscGhhIFxyY2VpbH0KKyAgICAgICAgICAgICAgICBcc3VtX3tpPTF9XntcbGNlaWwgblxhbHBoYSBccmNlaWx9IFx4aV97aixpfQorICAgICAgICBcZl0KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e1JUTX1fe24sXGFscGhhfV57XG1hdGhybXtyaWdodH19KFgsIGopID0KKyAgICAgICAgICAgICAgICBcZnJhY3tcc3VtX3tpPVxsY2VpbCBuXGFscGhhIFxyY2VpbH1ebiBceGlfe2osaX19CisgICAgICAgICAgICB7XGxjZWlsIG4oMS1cYWxwaGEpXHJjZWlsXHdpZGVoYXR7TkNUTX1fe24sXGFscGhhfV57XG1hdGhybXtyaWdodH19KFgpfQorICAgICAgICBcZl0KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e1JUTX1fe24sXGFscGhhfV57XG1hdGhybXtsZWZ0fX0oWCwgaikgPQorICAgICAgICAgICAgICAgIFxmcmFje1xzdW1fe2k9MX1ee1xsY2VpbCBuXGFscGhhIFxyY2VpbH0gXHhpX3tqLGl9fQorICAgICAgICAgICAge1xsY2VpbCBuXGFscGhhXHJjZWlsXHdpZGVoYXR7TkNUTX1fe24sXGFscGhhfV57XG1hdGhybXtsZWZ0fX0oWCl9CisgICAgICAgIFxmXQorICAgICovCisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gdGFpbF92YXJpYXRlX21lYW5zX2ltcGwKKyAgICAvLyAgYnkgZGVmYXVsdDogYWJzb2x1dGUgdGFpbF92YXJpYXRlX21lYW5zCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBJbXBsLCB0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHRhaWxfdmFyaWF0ZV9tZWFuc19pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3RvcjxmbG9hdF90eXBlPiBhcnJheV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yPiByZXN1bHRfdHlwZTsKKworICAgICAgICB0YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBuID0gc3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KAorICAgICAgICAgICAgICAgIHN0ZDo6Y2VpbCgKKyAgICAgICAgICAgICAgICAgICAgY250ICogKCAoIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgKSA/IGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldIDogMS4gLSBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSApCisgICAgICAgICAgICAgICAgKQorICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX3ZhcmlhdGVzID0gdGFpbF92YXJpYXRlKGFyZ3MpLmJlZ2luKCktPnNpemUoKTsKKworICAgICAgICAgICAgdGhpcy0+dGFpbF9tZWFuc18uY2xlYXIoKTsKKyAgICAgICAgICAgIHRoaXMtPnRhaWxfbWVhbnNfLnJlc2l6ZShudW1fdmFyaWF0ZXMsIFNhbXBsZSgwKSk7CisKKyAgICAgICAgICAgIC8vIElmIG4gaXMgaW4gYSB2YWxpZCByYW5nZSwgcmV0dXJuIHJlc3VsdCwgb3RoZXJ3aXNlIHJldHVybiBOYU4gb3IgdGhyb3cgZXhjZXB0aW9uCisgICAgICAgICAgICBpZiAobiA8IHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90Pih0YWlsKGFyZ3MpLnNpemUoKSkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+dGFpbF9tZWFuc18gPSBzdGQ6OmFjY3VtdWxhdGUoCisgICAgICAgICAgICAgICAgICAgIHRhaWxfdmFyaWF0ZShhcmdzKS5iZWdpbigpCisgICAgICAgICAgICAgICAgICAsIHRhaWxfdmFyaWF0ZShhcmdzKS5iZWdpbigpICsgbgorICAgICAgICAgICAgICAgICAgLCB0aGlzLT50YWlsX21lYW5zXworICAgICAgICAgICAgICAgICAgLCBudW1lcmljOjpwbHVzCisgICAgICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZmFjdG9yID0gbiAqICggKGlzX3NhbWU8SW1wbCwgcmVsYXRpdmU+Ojp2YWx1ZSkgPyBub25fY29oZXJlbnRfdGFpbF9tZWFuKGFyZ3MpIDogMS4gKTsKKworICAgICAgICAgICAgICAgIHN0ZDo6dHJhbnNmb3JtKAorICAgICAgICAgICAgICAgICAgICB0aGlzLT50YWlsX21lYW5zXy5iZWdpbigpCisgICAgICAgICAgICAgICAgICAsIHRoaXMtPnRhaWxfbWVhbnNfLmVuZCgpCisgICAgICAgICAgICAgICAgICAsIHRoaXMtPnRhaWxfbWVhbnNfLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICwgc3RkOjpiaW5kMm5kKHN0ZDo6ZGl2aWRlczxmbG9hdF90eXBlPigpLCBmYWN0b3IpCisgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAoc3RkOjpudW1lcmljX2xpbWl0czxmbG9hdF90eXBlPjo6aGFzX3F1aWV0X05hTikKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHN0ZDo6ZmlsbCgKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPnRhaWxfbWVhbnNfLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIHRoaXMtPnRhaWxfbWVhbnNfLmVuZCgpCisgICAgICAgICAgICAgICAgICAgICAgLCBzdGQ6Om51bWVyaWNfbGltaXRzPGZsb2F0X3R5cGU+OjpxdWlldF9OYU4oKQorICAgICAgICAgICAgICAgICAgICApOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBzdGQ6Om9zdHJpbmdzdHJlYW0gbXNnOworICAgICAgICAgICAgICAgICAgICBtc2cgPDwgImluZGV4IG4gPSAiIDw8IG4gPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgWzAsICIgPDwgdGFpbChhcmdzKS5zaXplKCkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgICAgICByZXR1cm4gbWFrZV9pdGVyYXRvcl9yYW5nZSh0aGlzLT50YWlsX21lYW5zXyk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisKKyAgICAgICAgbXV0YWJsZSBhcnJheV90eXBlIHRhaWxfbWVhbnNfOworCisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmFic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFucworLy8gdGFnOjpyZWxhdGl2ZV90YWlsX3ZhcmlhdGVfbWVhbnMKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgYWJzb2x1dGVfdGFpbF92YXJpYXRlX21lYW5zCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIG5vbl9jb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiwgdGFpbF92YXJpYXRlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnLCBMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp0YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbDxtcGw6Ol8xLCBhYnNvbHV0ZSwgTGVmdFJpZ2h0LCBWYXJpYXRlVGFnPiBpbXBsOworICAgIH07CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgcmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIG5vbl9jb2hlcmVudF90YWlsX21lYW48TGVmdFJpZ2h0PiwgdGFpbF92YXJpYXRlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnLCBMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp0YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbDxtcGw6Ol8xLCByZWxhdGl2ZSwgTGVmdFJpZ2h0LCBWYXJpYXRlVGFnPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IGFic3RyYWN0X2Fic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFucworICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgfTsKKyAgICBzdHJ1Y3QgYWJzdHJhY3RfcmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp0YWlsX3ZhcmlhdGVfbWVhbnMKKy8vIGV4dHJhY3Q6OnJlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFucworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3RfYWJzb2x1dGVfdGFpbF92YXJpYXRlX21lYW5zPiBjb25zdCB0YWlsX3ZhcmlhdGVfbWVhbnMgPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjphYnN0cmFjdF9yZWxhdGl2ZV90YWlsX3ZhcmlhdGVfbWVhbnM+IGNvbnN0IHJlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFucyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwodGFpbF92YXJpYXRlX21lYW5zKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHJlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFucykKK30KKwordXNpbmcgZXh0cmFjdDo6dGFpbF92YXJpYXRlX21lYW5zOwordXNpbmcgZXh0cmFjdDo6cmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zOworCisvLyB0YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4oYWJzb2x1dGUpIC0+IGFic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6dGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+KGFic29sdXRlKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6YWJzb2x1dGVfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+IHR5cGU7Cit9OworCisvLyB0YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4ocmVsYXRpdmUpIC0+cmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+Cit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp0YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4ocmVsYXRpdmUpPgoreworICAgIHR5cGVkZWYgdGFnOjpyZWxhdGl2ZV90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gdHlwZTsKK307CisKKy8vIFByb3ZpZGVzIG5vbi10ZW1wbGF0aXplZCBleHRyYWN0b3IKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OmFic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X2Fic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFucz4KK3sKK307CisKKy8vIFByb3ZpZGVzIG5vbi10ZW1wbGF0aXplZCBleHRyYWN0b3IKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OnJlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X3JlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFucz4KK3sKK307CisKKy8vIFNvIHRoYXQgYWJzb2x1dGVfdGFpbF9tZWFucyBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZAorLy8gd2l0aCBhYnNvbHV0ZV93ZWlnaHRlZF90YWlsX21lYW5zIHdoZW4gdGhlIHdlaWdodCBwYXJhbWV0ZXIgaXMgbm9uLXZvaWQuCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGFzX3dlaWdodGVkX2ZlYXR1cmU8dGFnOjphYnNvbHV0ZV90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgoreworICAgIHR5cGVkZWYgdGFnOjphYnNvbHV0ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gdHlwZTsKK307CisKK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OmFic29sdXRlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+Cit7Cit9OworCisvLyBTbyB0aGF0IHJlbGF0aXZlX3RhaWxfbWVhbnMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQKKy8vIHdpdGggcmVsYXRpdmVfd2VpZ2h0ZWRfdGFpbF9tZWFucyB3aGVuIHRoZSB3ZWlnaHQgcGFyYW1ldGVyIGlzIG5vbi12b2lkLgordGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6cmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KK3sKKyAgICB0eXBlZGVmIHRhZzo6cmVsYXRpdmVfd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+IHR5cGU7Cit9OworCit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpyZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpyZWxhdGl2ZV90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgoreworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90aW1lczJfaXRlcmF0b3IuaHBwCkBAIC0wLDAgKzEsNjIgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRpbWVzMl9pdGVyYXRvci5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19USU1FUzJfSVRFUkFUT1JfSFBQX0RFXzAxXzAxXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVElNRVMyX0lURVJBVE9SX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvdHJhbnNmb3JtX2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9pdGVyYXRvci9jb3VudGluZ19pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvcGVybXV0YXRpb25faXRlcmF0b3IuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBkZXRhaWwKK3sKKyAgICB0eXBlZGVmIHRyYW5zZm9ybV9pdGVyYXRvcjwKKyAgICAgICAgc3RkOjpiaW5kZXIxc3Q8c3RkOjptdWx0aXBsaWVzPHN0ZDo6c2l6ZV90PiA+CisgICAgICAsIGNvdW50aW5nX2l0ZXJhdG9yPHN0ZDo6c2l6ZV90PgorICAgID4gdGltZXMyX2l0ZXJhdG9yOworCisgICAgaW5saW5lIHRpbWVzMl9pdGVyYXRvciBtYWtlX3RpbWVzMl9pdGVyYXRvcihzdGQ6OnNpemVfdCBpKQorICAgIHsKKyAgICAgICAgcmV0dXJuIG1ha2VfdHJhbnNmb3JtX2l0ZXJhdG9yKAorICAgICAgICAgICAgbWFrZV9jb3VudGluZ19pdGVyYXRvcihpKQorICAgICAgICAgICwgc3RkOjpiaW5kMXN0KHN0ZDo6bXVsdGlwbGllczxzdGQ6OnNpemVfdD4oKSwgMikKKyAgICAgICAgKTsKKyAgICB9CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gbHZhbHVlX2luZGV4X2l0ZXJhdG9yCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQmFzZT4KKyAgICBzdHJ1Y3QgbHZhbHVlX2luZGV4X2l0ZXJhdG9yCisgICAgICA6IEJhc2UKKyAgICB7CisgICAgICAgIGx2YWx1ZV9pbmRleF9pdGVyYXRvcigpCisgICAgICAgICAgOiBCYXNlKCkKKyAgICAgICAge30KKworICAgICAgICBsdmFsdWVfaW5kZXhfaXRlcmF0b3IoQmFzZSBiYXNlKQorICAgICAgICAgIDogQmFzZShiYXNlKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0eXBlbmFtZSBCYXNlOjpyZWZlcmVuY2Ugb3BlcmF0b3IgW10odHlwZW5hbWUgQmFzZTo6ZGlmZmVyZW5jZV90eXBlIG4pIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAqKCp0aGlzICsgbik7CisgICAgICAgIH0KKyAgICB9OworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisKK319CisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3ZhcmlhbmNlLmhwcApAQCAtMCwwICsxLDIzNiBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdmFyaWFuY2UuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IERhbmllbCBFZ2xvZmYsIEVyaWMgTmllYmxlci4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVkFSSUFOQ0VfSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1ZBUklBTkNFX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9zdW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21lYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL21vbWVudC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLyEgTGF6eSBjYWxjdWxhdGlvbiBvZiB2YXJpYW5jZS4KKyAgICAvKiEKKyAgICAgICAgRGVmYXVsdCBzYW1wbGUgdmFyaWFuY2UgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gdGhlIHNlY29uZCBtb21lbnQgXGYkIE1fbl57KDIpfSBcZiQgbW9tZW50PDI+LCBtZWFuIGFuZCBjb3VudC4KKyAgICAgICAgXGZbCisgICAgICAgICAgICBcc2lnbWFfbl4yID0gTV9uXnsoMil9IC0gXG11X25eMi4KKyAgICAgICAgXGZdCisgICAgICAgIHdoZXJlCisgICAgICAgIFxmWworICAgICAgICAgICAgXG11X24gPSBcZnJhY3sxfXtufSBcc3VtX3tpID0gMX1ebiB4X2kuCisgICAgICAgIFxmXQorICAgICAgICBpcyB0aGUgZXN0aW1hdGUgb2YgdGhlIHNhbXBsZSBtZWFuIGFuZCBcZiRuXGYkIGlzIHRoZSBudW1iZXIgb2Ygc2FtcGxlcy4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTWVhbkZlYXR1cmU+CisgICAgc3RydWN0IGxhenlfdmFyaWFuY2VfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8U2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIGxhenlfdmFyaWFuY2VfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGV4dHJhY3RvcjxNZWFuRmVhdHVyZT4gbWVhbjsKKyAgICAgICAgICAgIHJlc3VsdF90eXBlIHRtcCA9IG1lYW4oYXJncyk7CisgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3JzOjptb21lbnQ8Mj4oYXJncykgLSB0bXAgKiB0bXA7CisgICAgICAgIH0KKyAgICB9OworCisgICAgLy8hIEl0ZXJhdGl2ZSBjYWxjdWxhdGlvbiBvZiB2YXJpYW5jZS4KKyAgICAvKiEKKyAgICAgICAgSXRlcmF0aXZlIGNhbGN1bGF0aW9uIG9mIHNhbXBsZSB2YXJpYW5jZSBcZiRcc2lnbWFfbl4yXGYkIGFjY29yZGluZyB0byB0aGUgZm9ybXVsYQorICAgICAgICBcZlsKKyAgICAgICAgICAgIFxzaWdtYV9uXjIgPSBcZnJhY3sxfXtufSBcc3VtX3tpID0gMX1ebiAoeF9pIC0gXG11X24pXjIgPSBcZnJhY3tuLTF9e259IFxzaWdtYV97bi0xfV4yICsgXGZyYWN7MX17bi0xfSh4X24gLSBcbXVfbileMi4KKyAgICAgICAgXGZdCisgICAgICAgIHdoZXJlCisgICAgICAgIFxmWworICAgICAgICAgICAgXG11X24gPSBcZnJhY3sxfXtufSBcc3VtX3tpID0gMX1ebiB4X2kuCisgICAgICAgIFxmXQorICAgICAgICBpcyB0aGUgZXN0aW1hdGUgb2YgdGhlIHNhbXBsZSBtZWFuIGFuZCBcZiRuXGYkIGlzIHRoZSBudW1iZXIgb2Ygc2FtcGxlcy4KKworICAgICAgICBOb3RlIHRoYXQgdGhlIHNhbXBsZSB2YXJpYW5jZSBpcyBub3QgZGVmaW5lZCBmb3IgXGYkbiA8PSAxXGYkLgorCisgICAgICAgIEEgc2ltcGxpZmljYXRpb24gY2FuIGJlIG9idGFpbmVkIGJ5IHRoZSBhcHByb3hpbWF0ZSByZWN1cnNpb24KKyAgICAgICAgXGZbCisgICAgICAgICAgICBcc2lnbWFfbl4yIFxhcHByb3ggXGZyYWN7bi0xfXtufSBcc2lnbWFfe24tMX1eMiArIFxmcmFjezF9e259KHhfbiAtIFxtdV9uKV4yLgorICAgICAgICBcZl0KKyAgICAgICAgYmVjYXVzZSB0aGUgZGlmZmVyZW5jZQorICAgICAgICBcZlsKKyAgICAgICAgICAgIFxsZWZ0KFxmcmFjezF9e24tMX0gLSBcZnJhY3sxfXtufVxyaWdodCkoeF9uIC0gXG11X24pXjIgPSBcZnJhY3sxfXtuKG4tMSl9KHhfbiAtIFxtdV9uKV4yLgorICAgICAgICBcZl0KKyAgICAgICAgY29udmVyZ2VzIHRvIHplcm8gYXMgXGYkbiBccmlnaHRhcnJvdyBcaW5mdHlcZiQuIEhvd2V2ZXIsIGZvciBzbWFsbCBcZiQgbiBcZiQgdGhlIGRpZmZlcmVuY2UKKyAgICAgICAgY2FuIGJlIG5vbi1uZWdsaWdpYmxlLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBNZWFuRmVhdHVyZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB2YXJpYW5jZV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdmFyaWFuY2VfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogdmFyaWFuY2UobnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSwgbnVtZXJpYzo6b25lPHN0ZDo6c2l6ZV90Pjo6dmFsdWUpKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworCisgICAgICAgICAgICBpZihjbnQgPiAxKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGV4dHJhY3RvcjxNZWFuRmVhdHVyZT4gbWVhbjsKKyAgICAgICAgICAgICAgICByZXN1bHRfdHlwZSB0bXAgPSBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxUYWc+OjpnZXQoKV0gLSBtZWFuKGFyZ3MpOworICAgICAgICAgICAgICAgIHRoaXMtPnZhcmlhbmNlID0KKyAgICAgICAgICAgICAgICAgICAgbnVtZXJpYzo6ZmRpdih0aGlzLT52YXJpYW5jZSAqIChjbnQgLSAxKSwgY250KQorICAgICAgICAgICAgICAgICAgKyBudW1lcmljOjpmZGl2KHRtcCAqIHRtcCwgY250IC0gMSk7CisgICAgICAgICAgICB9CisgICAgICAgIH0KKworICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoZG9udF9jYXJlKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdGhpcy0+dmFyaWFuY2U7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHJlc3VsdF90eXBlIHZhcmlhbmNlOworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp2YXJpYW5jZQorLy8gdGFnOjppbW1lZGlhdGVfdmFyaWFuY2UKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IGxhenlfdmFyaWFuY2UKKyAgICAgIDogZGVwZW5kc19vbjxtb21lbnQ8Mj4sIG1lYW4+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmxhenlfdmFyaWFuY2VfaW1wbDxtcGw6Ol8xLCBtZWFuPiBpbXBsOworICAgIH07CisKKyAgICBzdHJ1Y3QgdmFyaWFuY2UKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgaW1tZWRpYXRlX21lYW4+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OnZhcmlhbmNlX2ltcGw8bXBsOjpfMSwgbWVhbiwgc2FtcGxlPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OmxhenlfdmFyaWFuY2UKKy8vIGV4dHJhY3Q6OnZhcmlhbmNlCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpsYXp5X3ZhcmlhbmNlPiBjb25zdCBsYXp5X3ZhcmlhbmNlID0ge307CisgICAgZXh0cmFjdG9yPHRhZzo6dmFyaWFuY2U+IGNvbnN0IHZhcmlhbmNlID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChsYXp5X3ZhcmlhbmNlKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHZhcmlhbmNlKQorfQorCit1c2luZyBleHRyYWN0OjpsYXp5X3ZhcmlhbmNlOwordXNpbmcgZXh0cmFjdDo6dmFyaWFuY2U7CisKKy8vIHZhcmlhbmNlKGxhenkpIC0+IGxhenlfdmFyaWFuY2UKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6dmFyaWFuY2UobGF6eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OmxhenlfdmFyaWFuY2UgdHlwZTsKK307CisKKy8vIHZhcmlhbmNlKGltbWVkaWF0ZSkgLT4gdmFyaWFuY2UKK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6dmFyaWFuY2UoaW1tZWRpYXRlKT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6dmFyaWFuY2UgdHlwZTsKK307CisKKy8vIGZvciB0aGUgcHVycG9zZXMgb2YgZmVhdHVyZS1iYXNlZCBkZXBlbmRlbmN5IHJlc29sdXRpb24sCisvLyBpbW1lZGlhdGVfdmFyaWFuY2UgcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyB2YXJpYW5jZQordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpsYXp5X3ZhcmlhbmNlPgorICA6IGZlYXR1cmVfb2Y8dGFnOjp2YXJpYW5jZT4KK3sKK307CisKKy8vIFNvIHRoYXQgdmFyaWFuY2UgY2FuIGJlIGF1dG9tYXRpY2FsbHkgc3Vic3RpdHV0ZWQgd2l0aAorLy8gd2VpZ2h0ZWRfdmFyaWFuY2Ugd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZC4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6dmFyaWFuY2U+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3ZhcmlhbmNlIHR5cGU7Cit9OworCisvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGZlYXR1cmUtYmFzZWQgZGVwZW5kZW5jeSByZXNvbHV0aW9uLAorLy8gd2VpZ2h0ZWRfdmFyaWFuY2UgcHJvdmlkZXMgdGhlIHNhbWUgZmVhdHVyZSBhcyB2YXJpYW5jZQordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjp3ZWlnaHRlZF92YXJpYW5jZT4KKyAgOiBmZWF0dXJlX29mPHRhZzo6dmFyaWFuY2U+Cit7Cit9OworCisvLyBTbyB0aGF0IGltbWVkaWF0ZV92YXJpYW5jZSBjYW4gYmUgYXV0b21hdGljYWxseSBzdWJzdGl0dXRlZCB3aXRoCisvLyBpbW1lZGlhdGVfd2VpZ2h0ZWRfdmFyaWFuY2Ugd2hlbiB0aGUgd2VpZ2h0IHBhcmFtZXRlciBpcyBub24tdm9pZC4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc193ZWlnaHRlZF9mZWF0dXJlPHRhZzo6bGF6eV92YXJpYW5jZT4KK3sKKyAgICB0eXBlZGVmIHRhZzo6bGF6eV93ZWlnaHRlZF92YXJpYW5jZSB0eXBlOworfTsKKworLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiBmZWF0dXJlLWJhc2VkIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiwKKy8vIGltbWVkaWF0ZV93ZWlnaHRlZF92YXJpYW5jZSBwcm92aWRlcyB0aGUgc2FtZSBmZWF0dXJlIGFzIGltbWVkaWF0ZV92YXJpYW5jZQordGVtcGxhdGU8Pgorc3RydWN0IGZlYXR1cmVfb2Y8dGFnOjpsYXp5X3dlaWdodGVkX3ZhcmlhbmNlPgorICA6IGZlYXR1cmVfb2Y8dGFnOjpsYXp5X3ZhcmlhbmNlPgoreworfTsKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8vLyBkcm9wcGFibGVfYWNjdW11bGF0b3I8dmFyaWFuY2VfaW1wbD4KKy8vLy8gIG5lZWQgdG8gc3BlY2lhbGl6ZSBkcm9wcGFibGUgbGF6eSB2YXJpYW5jZSB0byBjYWNoZSB0aGUgcmVzdWx0IGF0IHRoZQorLy8vLyAgcG9pbnQgdGhlIGFjY3VtdWxhdG9yIGlzIGRyb3BwZWQuCisvLy8vLyBJTlRFUk5BTCBPTkxZCisvLy8vLworLy90ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIE1lYW5GZWF0dXJlPgorLy9zdHJ1Y3QgZHJvcHBhYmxlX2FjY3VtdWxhdG9yPGltcGw6OnZhcmlhbmNlX2ltcGw8U2FtcGxlLCBNZWFuRmVhdHVyZT4gPgorLy8gIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2U8CisvLyAgICAgICAgd2l0aF9jYWNoZWRfcmVzdWx0PGltcGw6OnZhcmlhbmNlX2ltcGw8U2FtcGxlLCBNZWFuRmVhdHVyZT4gPgorLy8gICAgPgorLy97CisvLyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorLy8gICAgZHJvcHBhYmxlX2FjY3VtdWxhdG9yKEFyZ3MgY29uc3QgJmFyZ3MpCisvLyAgICAgIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yOjpiYXNlKGFyZ3MpCisvLyAgICB7CisvLyAgICB9CisvL307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3ZhcmlhdGVzL2NvdmFyaWF0ZS5ocHAKQEAgLTAsMCArMSwyNSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2VpZ2h0LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1ZBUklBVEVTX0NPVkFSSUFURV9IUFBfRUFOXzAzXzExXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfVkFSSUFURVNfQ09WQVJJQVRFX0hQUF9FQU5fMDNfMTFfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9hY2N1bXVsYXRvcnNfZndkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIGNvdmFyaWF0ZTEpCitCT09TVF9QQVJBTUVURVJfS0VZV09SRCh0YWcsIGNvdmFyaWF0ZTIpCisKK0JPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKGNvdmFyaWF0ZTEpCitCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChjb3ZhcmlhdGUyKQorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9jb3ZhcmlhbmNlLmhwcApAQCAtMCwwICsxLDEzMyBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2VpZ2h0ZWRfY292YXJpYW5jZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRGFuaWVsIEVnbG9mZiwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9DT1ZBUklBTkNFX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX0NPVkFSSUFOQ0VfSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGNvbXBsZXg+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Jvb2wuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbnVtZXJpYy91Ymxhcy9pby5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbnVtZXJpYy91Ymxhcy9tYXRyaXguaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NjYWxhci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvY292YXJpYW5jZS5ocHA+IC8vIGZvciBudW1lcmljOjpvdXRlcl9wcm9kdWN0KCkgYW5kIHR5cGUgdHJhaXRzCisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbWVhbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfY292YXJpYW5jZV9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIFdlaWdodGVkIENvdmFyaWFuY2UgRXN0aW1hdG9yCisKKyAgICAgICAgQW4gaXRlcmF0aXZlIE1vbnRlIENhcmxvIGVzdGltYXRvciBmb3IgdGhlIHdlaWdodGVkIGNvdmFyaWFuY2UgXGYkXG1hdGhybXtDb3Z9KFgsWCcpXGYkLCB3aGVyZSBcZiRYXGYkIGlzIGEgc2FtcGxlCisgICAgICAgIGFuZCBcZiRYJ1xmJCBhIHZhcmlhdGUsIGlzIGdpdmVuIGJ5OgorCisgICAgICAgIFxmWworICAgICAgICAgICAgXGhhdHtjfV9uID0gXGZyYWN7XGJhcnt3fV9uLXdfbn17XGJhcnt3fV9ufSBcaGF0e2N9X3tuLTF9ICsgXGZyYWN7d19ufXtcYmFye3d9X24td19ufShYX24gLSBcaGF0e1xtdX1fbikoWF9uJyAtIFxoYXR7XG11fV9uJyksCisgICAgICAgICAgICBccXVhZCBuXGdlMixccXVhZFxoYXR7Y31fMSA9IDAsCisgICAgICAgIFxmXQorCisgICAgICAgIFxmJFxoYXR7XG11fV9uXGYkIGFuZCBcZiRcaGF0e1xtdX1fbidcZiQgYmVpbmcgdGhlIHdlaWdodGVkIG1lYW5zIG9mIHRoZSBzYW1wbGVzIGFuZCB2YXJpYXRlcyBhbmQKKyAgICAgICAgXGYkXGJhcnt3fV9uXGYkIHRoZSBzdW0gb2YgdGhlIFxmJG5cZiQgZmlyc3Qgd2VpZ2h0cyBcZiR3X2lcZiQuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX2NvdmFyaWFuY2VfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8V2VpZ2h0LCB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZT46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZV90eXBlOworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8V2VpZ2h0LCB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFZhcmlhdGVUeXBlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlPjo6cmVzdWx0X3R5cGUgd2VpZ2h0ZWRfdmFyaWF0ZV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om91dGVyX3Byb2R1Y3Q8d2VpZ2h0ZWRfc2FtcGxlX3R5cGUsIHdlaWdodGVkX3ZhcmlhdGVfdHlwZT46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHdlaWdodGVkX2NvdmFyaWFuY2VfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogY292XygKKyAgICAgICAgICAgICAgICBudW1lcmljOjpvdXRlcl9wcm9kdWN0KAorICAgICAgICAgICAgICAgICAgICBudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCAoc3RkOjpzaXplX3QpMSkKKyAgICAgICAgICAgICAgICAgICAgICAqIG51bWVyaWM6Om9uZTxXZWlnaHQ+Ojp2YWx1ZQorICAgICAgICAgICAgICAgICAgLCBudW1lcmljOjpmZGl2KGFyZ3NbcGFyYW1ldGVyOjprZXl3b3JkPFZhcmlhdGVUYWc+OjpnZXQoKSB8IFZhcmlhdGVUeXBlKCldLCAoc3RkOjpzaXplX3QpMSkKKyAgICAgICAgICAgICAgICAgICAgICAqIG51bWVyaWM6Om9uZTxXZWlnaHQ+Ojp2YWx1ZQorICAgICAgICAgICAgICAgICkKKyAgICAgICAgICAgICkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgaWYgKGNudCA+IDEpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPiBjb25zdCBzb21lX3dlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXMgPSB7fTsKKworICAgICAgICAgICAgICAgIHRoaXMtPmNvdl8gPSB0aGlzLT5jb3ZfICogKHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gYXJnc1t3ZWlnaHRdKSAvIHN1bV9vZl93ZWlnaHRzKGFyZ3MpCisgICAgICAgICAgICAgICAgICAgICAgICAgICArIG51bWVyaWM6Om91dGVyX3Byb2R1Y3QoCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb21lX3dlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXMoYXJncykgLSBhcmdzW3BhcmFtZXRlcjo6a2V5d29yZDxWYXJpYXRlVGFnPjo6Z2V0KCldCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB3ZWlnaHRlZF9tZWFuKGFyZ3MpIC0gYXJnc1tzYW1wbGVdCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgKiBhcmdzW3dlaWdodF0gLyAoc3VtX29mX3dlaWdodHMoYXJncykgLSBhcmdzW3dlaWdodF0pOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmNvdl87CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHJlc3VsdF90eXBlIGNvdl87CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OndlaWdodGVkX2NvdmFyaWFuY2UKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX2NvdmFyaWFuY2UKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgc3VtX29mX3dlaWdodHMsIHdlaWdodGVkX21lYW4sIHdlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9jb3ZhcmlhbmNlX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfY292YXJpYW5jZQorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3RfY292YXJpYW5jZT4gY29uc3Qgd2VpZ2h0ZWRfY292YXJpYW5jZSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfY292YXJpYW5jZSkKK30KKwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfY292YXJpYW5jZTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfZGVuc2l0eS5ocHAKQEAgLTAsMCArMSwyMjEgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX2RlbnNpdHkuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfREVOU0lUWV9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9ERU5TSVRZX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbWF4LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9taW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2RlbnNpdHkuaHBwPiAvLyBmb3IgbmFtZWQgcGFyYW1ldGVycyBkZW5zaXR5X2NhY2hlX3NpemUgYW5kIGRlbnNpdHlfbnVtX2JpbnMKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3ZWlnaHRlZF9kZW5zaXR5X2ltcGwKKyAgICAvLyAgZGVuc2l0eSBoaXN0b2dyYW0gZm9yIHdlaWdodGVkIHNhbXBsZXMKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIEhpc3RvZ3JhbSBkZW5zaXR5IGVzdGltYXRvciBmb3Igd2VpZ2h0ZWQgc2FtcGxlcworCisgICAgICAgIFRoZSBoaXN0b2dyYW0gZGVuc2l0eSBlc3RpbWF0b3IgcmV0dXJucyBhIGhpc3RvZ3JhbSBvZiB0aGUgc2FtcGxlIGRpc3RyaWJ1dGlvbi4gVGhlIHBvc2l0aW9ucyBhbmQgc2l6ZXMgb2YgdGhlIGJpbnMKKyAgICAgICAgYXJlIGRldGVybWluZWQgdXNpbmcgYSBzcGVjaWZpYWJsZSBudW1iZXIgb2YgY2FjaGVkIHNhbXBsZXMgKGNhY2hlX3NpemUpLiBUaGUgcmFuZ2UgYmV0d2VlbiB0aGUgbWluaW11bSBhbmQgdGhlCisgICAgICAgIG1heGltdW0gb2YgdGhlIGNhY2hlZCBzYW1wbGVzIGlzIHN1YmRpdmlkZWQgaW50byBhIHNwZWNpZmlhYmxlIG51bWJlciBvZiBiaW5zIChudW1fYmlucykgb2Ygc2FtZSBzaXplLiBBZGRpdGlvbmFsbHksCisgICAgICAgIGFuIHVuZGVyLSBhbmQgYW4gb3ZlcmZsb3cgYmluIGlzIGFkZGVkIHRvIGNhcHR1cmUgZnV0dXJlIHVuZGVyLSBhbmQgb3ZlcmZsb3cgc2FtcGxlcy4gT25jZSB0aGUgYmlucyBhcmUgZGV0ZXJtaW5lZCwKKyAgICAgICAgdGhlIGNhY2hlZCBzYW1wbGVzIGFuZCBhbGwgc3Vic2VxdWVudCBzYW1wbGVzIGFyZSBhZGRlZCB0byB0aGUgY29ycmVjdCBiaW5zLiBBdCB0aGUgZW5kLCBhIHJhbmdlIG9mIHN0ZDo6cGFpciBpcworICAgICAgICByZXR1cm5lZCwgd2hlcmUgZWFjaCBwYWlyIGNvbnRhaW5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgYmluIChsb3dlciBib3VuZCkgYW5kIHRoZSBzdW0gb2YgdGhlIHdlaWdodHMgKG5vcm1hbGl6ZWQgd2l0aCB0aGUKKyAgICAgICAgc3VtIG9mIGFsbCB3ZWlnaHRzKS4KKworICAgICAgICBAcGFyYW0gZGVuc2l0eV9jYWNoZV9zaXplIE51bWJlciBvZiBmaXJzdCBzYW1wbGVzIHVzZWQgdG8gZGV0ZXJtaW5lIG1pbiBhbmQgbWF4LgorICAgICAgICBAcGFyYW0gZGVuc2l0eV9udW1fYmlucyBOdW1iZXIgb2YgYmlucyAodHdvIGFkZGl0aW9uYWwgYmlucyBjb2xsZWN0IHVuZGVyLSBhbmQgb3ZlcmZsb3cgc2FtcGxlcykuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfZGVuc2l0eV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxXZWlnaHQsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3RvcjxzdGQ6OnBhaXI8ZmxvYXRfdHlwZSwgZmxvYXRfdHlwZT4gPiBoaXN0b2dyYW1fdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3RvcjxmbG9hdF90eXBlPiBhcnJheV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGhpc3RvZ3JhbV90eXBlOjppdGVyYXRvcj4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfZGVuc2l0eV9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgICA6IGNhY2hlX3NpemUoYXJnc1tkZW5zaXR5X2NhY2hlX3NpemVdKQorICAgICAgICAgICAgLCBjYWNoZShjYWNoZV9zaXplKQorICAgICAgICAgICAgLCBudW1fYmlucyhhcmdzW2RlbnNpdHlfbnVtX2JpbnNdKQorICAgICAgICAgICAgLCBzYW1wbGVzX2luX2JpbihudW1fYmlucyArIDIsIDAuKQorICAgICAgICAgICAgLCBiaW5fcG9zaXRpb25zKG51bV9iaW5zICsgMikKKyAgICAgICAgICAgICwgaGlzdG9ncmFtKAorICAgICAgICAgICAgICAgIG51bV9iaW5zICsgMgorICAgICAgICAgICAgICAsIHN0ZDo6bWFrZV9wYWlyKAorICAgICAgICAgICAgICAgICAgICBudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLChzdGQ6OnNpemVfdCkxKQorICAgICAgICAgICAgICAgICAgLCBudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLChzdGQ6OnNpemVfdCkxKQorICAgICAgICAgICAgICAgICkKKyAgICAgICAgICAgICAgKQorICAgICAgICAgICAgLCBpc19kaXJ0eSh0cnVlKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5ID0gdHJ1ZTsKKworICAgICAgICAgICAgc3RkOjpzaXplX3QgY250ID0gY291bnQoYXJncyk7CisKKyAgICAgICAgICAgIC8vIEZpbGwgdXAgY2FjaGUgd2l0aCBjYWNoZV9zaXplIGZpcnN0IHNhbXBsZXMKKyAgICAgICAgICAgIGlmIChjbnQgPD0gdGhpcy0+Y2FjaGVfc2l6ZSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5jYWNoZVtjbnQgLSAxXSA9IHN0ZDo6bWFrZV9wYWlyKGFyZ3Nbc2FtcGxlXSwgYXJnc1t3ZWlnaHRdKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgLy8gT25jZSBjYWNoZV9zaXplIHNhbXBsZXMgaGF2ZSBiZWVuIGFjY3VtdWxhdGVkLCBjcmVhdGUgbnVtX2JpbnMgYmlucyBvZiBzYW1lIHNpemUgYmV0d2VlbgorICAgICAgICAgICAgLy8gdGhlIG1pbmltdW0gYW5kIG1heGltdW0gb2YgdGhlIGNhY2hlZCBzYW1wbGVzIGFzIHdlbGwgYXMgYW4gdW5kZXItIGFuZCBhbiBvdmVyZmxvdyBiaW4uCisgICAgICAgICAgICAvLyBTdG9yZSB0aGVpciBsb3dlciBib3VuZHMgKGJpbl9wb3NpdGlvbnMpIGFuZCBmaWxsIHRoZSBiaW5zIHdpdGggdGhlIGNhY2hlZCBzYW1wbGVzIChzYW1wbGVzX2luX2JpbikuCisgICAgICAgICAgICBpZiAoY250ID09IHRoaXMtPmNhY2hlX3NpemUpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBtaW5pbXVtID0gbnVtZXJpYzo6ZmRpdigobWluKShhcmdzKSwoc3RkOjpzaXplX3QpMSk7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBtYXhpbXVtID0gbnVtZXJpYzo6ZmRpdigobWF4KShhcmdzKSwoc3RkOjpzaXplX3QpMSk7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBiaW5fc2l6ZSA9IG51bWVyaWM6OmZkaXYobWF4aW11bSAtIG1pbmltdW0sIHRoaXMtPm51bV9iaW5zKTsKKworICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBiaW4gcG9zaXRpb25zICh0aGVpciBsb3dlciBib3VuZHMpCisgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMDsgaSA8IHRoaXMtPm51bV9iaW5zICsgMjsgKytpKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+YmluX3Bvc2l0aW9uc1tpXSA9IG1pbmltdW0gKyAoaSAtIDEuKSAqIGJpbl9zaXplOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIGZvciAodHlwZW5hbWUgaGlzdG9ncmFtX3R5cGU6OmNvbnN0X2l0ZXJhdG9yIGl0ZXIgPSB0aGlzLT5jYWNoZS5iZWdpbigpOyBpdGVyICE9IHRoaXMtPmNhY2hlLmVuZCgpOyArK2l0ZXIpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpZiAoaXRlci0+Zmlyc3QgPCB0aGlzLT5iaW5fcG9zaXRpb25zWzFdKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5zYW1wbGVzX2luX2JpblswXSArPSBpdGVyLT5zZWNvbmQ7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlci0+Zmlyc3QgPj0gdGhpcy0+YmluX3Bvc2l0aW9uc1t0aGlzLT5udW1fYmlucyArIDFdKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5zYW1wbGVzX2luX2Jpblt0aGlzLT5udW1fYmlucyArIDFdICs9IGl0ZXItPnNlY29uZDsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yIGl0ID0gc3RkOjp1cHBlcl9ib3VuZCgKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5iaW5fcG9zaXRpb25zLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgLCB0aGlzLT5iaW5fcG9zaXRpb25zLmVuZCgpCisgICAgICAgICAgICAgICAgICAgICAgICAgICwgaXRlci0+Zmlyc3QKKyAgICAgICAgICAgICAgICAgICAgICAgICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGQgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmJpbl9wb3NpdGlvbnMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+c2FtcGxlc19pbl9iaW5bZCAtIDFdICs9IGl0ZXItPnNlY29uZDsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIC8vIEFkZCBlYWNoIHN1YnNlcXVlbnQgc2FtcGxlIHRvIHRoZSBjb3JyZWN0IGJpbgorICAgICAgICAgICAgZWxzZSBpZiAoY250ID4gdGhpcy0+Y2FjaGVfc2l6ZSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAoYXJnc1tzYW1wbGVdIDwgdGhpcy0+YmluX3Bvc2l0aW9uc1sxXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPnNhbXBsZXNfaW5fYmluWzBdICs9IGFyZ3Nbd2VpZ2h0XTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnc1tzYW1wbGVdID49IHRoaXMtPmJpbl9wb3NpdGlvbnNbdGhpcy0+bnVtX2JpbnMgKyAxXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPnNhbXBsZXNfaW5fYmluW3RoaXMtPm51bV9iaW5zICsgMV0gKz0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBhcnJheV90eXBlOjppdGVyYXRvciBpdCA9IHN0ZDo6dXBwZXJfYm91bmQoCisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5iaW5fcG9zaXRpb25zLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIHRoaXMtPmJpbl9wb3NpdGlvbnMuZW5kKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIGFyZ3Nbc2FtcGxlXQorICAgICAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGQgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmJpbl9wb3NpdGlvbnMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgICAgICB0aGlzLT5zYW1wbGVzX2luX2JpbltkIC0gMV0gKz0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICBpZiAodGhpcy0+aXNfZGlydHkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHkgPSBmYWxzZTsKKworICAgICAgICAgICAgICAgIC8vIGNyZWF0ZXMgYSB2ZWN0b3Igb2Ygc3RkOjpwYWlyIHdoZXJlIGVhY2ggcGFpciBpIGhvbGRzCisgICAgICAgICAgICAgICAgLy8gdGhlIHZhbHVlcyBiaW5fcG9zaXRpb25zW2ldICh4LWF4aXMgb2YgaGlzdG9ncmFtKSBhbmQKKyAgICAgICAgICAgICAgICAvLyBzYW1wbGVzX2luX2JpbltpXSAvIGNudCAoeS1heGlzIG9mIGhpc3RvZ3JhbSkuCisKKyAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgdGhpcy0+bnVtX2JpbnMgKyAyOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oaXN0b2dyYW1baV0gPSBzdGQ6Om1ha2VfcGFpcih0aGlzLT5iaW5fcG9zaXRpb25zW2ldLCBudW1lcmljOjpmZGl2KHRoaXMtPnNhbXBsZXNfaW5fYmluW2ldLCBzdW1fb2Zfd2VpZ2h0cyhhcmdzKSkpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgLy8gcmV0dXJucyBhIHJhbmdlIG9mIHBhaXJzCisgICAgICAgICAgICByZXR1cm4gbWFrZV9pdGVyYXRvcl9yYW5nZSh0aGlzLT5oaXN0b2dyYW0pOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBzdGQ6OnNpemVfdCAgICAgICAgICAgIGNhY2hlX3NpemU7ICAgICAgLy8gbnVtYmVyIG9mIGNhY2hlZCBzYW1wbGVzCisgICAgICAgIGhpc3RvZ3JhbV90eXBlICAgICAgICAgY2FjaGU7ICAgICAgICAgICAvLyBjYWNoZSB0byBzdG9yZSB0aGUgZmlyc3QgY2FjaGVfc2l6ZSBzYW1wbGVzIHdpdGggdGhlaXIgd2VpZ2h0cyBhcyBzdGQ6OnBhaXIKKyAgICAgICAgc3RkOjpzaXplX3QgICAgICAgICAgICBudW1fYmluczsgICAgICAgIC8vIG51bWJlciBvZiBiaW5zCisgICAgICAgIGFycmF5X3R5cGUgICAgICAgICAgICAgc2FtcGxlc19pbl9iaW47ICAvLyBudW1iZXIgb2Ygc2FtcGxlcyBpbiBlYWNoIGJpbgorICAgICAgICBhcnJheV90eXBlICAgICAgICAgICAgIGJpbl9wb3NpdGlvbnM7ICAgLy8gbG93ZXIgYm91bmRzIG9mIGJpbnMKKyAgICAgICAgbXV0YWJsZSBoaXN0b2dyYW1fdHlwZSBoaXN0b2dyYW07ICAgICAgIC8vIGhpc3RvZ3JhbQorICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHk7CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OndlaWdodGVkX2RlbnNpdHkKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHdlaWdodGVkX2RlbnNpdHkKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgc3VtX29mX3dlaWdodHMsIG1pbiwgbWF4PgorICAgICAgLCBkZW5zaXR5X2NhY2hlX3NpemUKKyAgICAgICwgZGVuc2l0eV9udW1fYmlucworICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9kZW5zaXR5X2ltcGw8bXBsOjpfMSwgbXBsOjpfMj4gaW1wbDsKKworICAgICAgICAjaWZkZWYgQk9PU1RfQUNDVU1VTEFUT1JTX0RPWFlHRU5fSU5WT0tFRAorICAgICAgICBzdGF0aWMgYm9vc3Q6OnBhcmFtZXRlcjo6a2V5d29yZDxkZW5zaXR5X2NhY2hlX3NpemU+IGNvbnN0IGNhY2hlX3NpemU7CisgICAgICAgIHN0YXRpYyBib29zdDo6cGFyYW1ldGVyOjprZXl3b3JkPGRlbnNpdHlfbnVtX2JpbnM+IGNvbnN0IG51bV9iaW5zOworICAgICAgICAjZW5kaWYKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp3ZWlnaHRlZF9kZW5zaXR5CisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpkZW5zaXR5PiBjb25zdCB3ZWlnaHRlZF9kZW5zaXR5ID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9kZW5zaXR5KQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9kZW5zaXR5OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZS5ocHAKQEAgLTAsMCArMSwyOTAgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBEYW5pZWwgRWdsb2ZmLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9FWFRFTkRFRF9QX1NRVUFSRV9IUFBfREVfMDFfMDFfMjAwNgorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9FWFRFTkRFRF9QX1NRVUFSRV9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3RyYW5zZm9ybV9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvY291bnRpbmdfaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3Blcm11dGF0aW9uX2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9zdW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RpbWVzMl9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvZXh0ZW5kZWRfcF9zcXVhcmUuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX2ltcGwKKyAgICAvLyAgbXVsdGlwbGUgcXVhbnRpbGUgZXN0aW1hdGlvbiB3aXRoIHdlaWdodGVkIHNhbXBsZXMKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIE11bHRpcGxlIHF1YW50aWxlIGVzdGltYXRpb24gd2l0aCB0aGUgZXh0ZW5kZWQgXGYkUF4yXGYkIGFsZ29yaXRobSBmb3Igd2VpZ2h0ZWQgc2FtcGxlcworCisgICAgICAgIFRoaXMgdmVyc2lvbiBvZiB0aGUgZXh0ZW5kZWQgXGYkUF4yXGYkIGFsZ29yaXRobSBleHRlbmRzIHRoZSBleHRlbmRlZCBcZiRQXjJcZiQgYWxnb3JpdGhtIHRvCisgICAgICAgIHN1cHBvcnQgd2VpZ2h0ZWQgc2FtcGxlcy4gVGhlIGV4dGVuZGVkIFxmJFBeMlxmJCBhbGdvcml0aG0gZHluYW1pY2FsbHkgZXN0aW1hdGVzIHNldmVyYWwKKyAgICAgICAgcXVhbnRpbGVzIHdpdGhvdXQgc3RvcmluZyBzYW1wbGVzLiBBc3N1bWUgdGhhdCBcZiRtXGYkIHF1YW50aWxlcworICAgICAgICBcZiRceGlfe3BfMX0sIFxsZG90cywgXHhpX3twX219XGYkIGFyZSB0byBiZSBlc3RpbWF0ZWQuIEluc3RlYWQgb2Ygc3RvcmluZyB0aGUgd2hvbGUgc2FtcGxlCisgICAgICAgIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uLCB0aGUgYWxnb3JpdGhtIG1haW50YWlucyBvbmx5IFxmJG0rMlxmJCBwcmluY2lwYWwgbWFya2VycyBhbmQKKyAgICAgICAgXGYkbSsxXGYkIG1pZGRsZSBtYXJrZXJzLCB3aG9zZSBwb3NpdGlvbnMgYXJlIHVwZGF0ZWQgd2l0aCBlYWNoIHNhbXBsZSBhbmQgd2hvc2UgaGVpZ2h0cworICAgICAgICBhcmUgYWRqdXN0ZWQgKGlmIG5lY2Vzc2FyeSkgdXNpbmcgYSBwaWVjZXdpc2UtcGFyYWJsaWMgZm9ybXVsYS4gVGhlIGhlaWdodHMgb2YgdGhlIHByaW5jaXBhbAorICAgICAgICBtYXJrZXJzIGFyZSB0aGUgY3VycmVudCBlc3RpbWF0ZXMgb2YgdGhlIHF1YW50aWxlcyBhbmQgYXJlIHJldHVybmVkIGFzIGFuIGl0ZXJhdG9yIHJhbmdlLgorCisgICAgICAgIEZvciBmdXJ0aGVyIGRldGFpbHMsIHNlZQorCisgICAgICAgIEsuIEUuIEUuIFJhYXRpa2FpbmVuLCBTaW11bHRhbmVvdXMgZXN0aW1hdGlvbiBvZiBzZXZlcmFsIHF1YW50aWxlcywgU2ltdWxhdGlvbiwgVm9sdW1lIDQ5LAorICAgICAgICBOdW1iZXIgNCAoT2N0b2JlciksIDE5ODYsIHAuIDE1OS0xNjQuCisKKyAgICAgICAgVGhlIGV4dGVuZGVkIFxmJCBQXjIgXGYkIGFsZ29yaXRobSBnZW5lcmFsaXplcyB0aGUgXGYkIFBeMiBcZiQgYWxnb3JpdGhtIG9mCisKKyAgICAgICAgUi4gSmFpbiBhbmQgSS4gQ2hsYW10YWMsIFRoZSBQXjIgYWxnb3JpdGhtIGZvciBkeW5hbWljIGNhbGN1bGF0aW9uIG9mIHF1YW50aWxlcyBhbmQKKyAgICAgICAgaGlzdG9ncmFtcyB3aXRob3V0IHN0b3Jpbmcgb2JzZXJ2YXRpb25zLCBDb21tdW5pY2F0aW9ucyBvZiB0aGUgQUNNLAorICAgICAgICBWb2x1bWUgMjggKE9jdG9iZXIpLCBOdW1iZXIgMTAsIDE5ODUsIHAuIDEwNzYtMTA4NS4KKworICAgICAgICBAcGFyYW0gZXh0ZW5kZWRfcF9zcXVhcmVfcHJvYmFiaWxpdGllcyBBIHZlY3RvciBvZiBxdWFudGlsZSBwcm9iYWJpbGl0aWVzLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjptdWx0aXBsaWVzPFNhbXBsZSwgV2VpZ2h0Pjo6cmVzdWx0X3R5cGUgd2VpZ2h0ZWRfc2FtcGxlOworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8d2VpZ2h0ZWRfc2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIGZsb2F0X3R5cGU7CisgICAgICAgIHR5cGVkZWYgc3RkOjp2ZWN0b3I8ZmxvYXRfdHlwZT4gYXJyYXlfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgIGRldGFpbDo6bHZhbHVlX2luZGV4X2l0ZXJhdG9yPAorICAgICAgICAgICAgICAgIHBlcm11dGF0aW9uX2l0ZXJhdG9yPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBhcnJheV90eXBlOjpjb25zdF9pdGVyYXRvcgorICAgICAgICAgICAgICAgICAgLCBkZXRhaWw6OnRpbWVzMl9pdGVyYXRvcgorICAgICAgICAgICAgICAgID4KKyAgICAgICAgICAgID4KKyAgICAgICAgPiByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBwcm9iYWJpbGl0aWVzKAorICAgICAgICAgICAgICAgIGJvb3N0OjpiZWdpbihhcmdzW2V4dGVuZGVkX3Bfc3F1YXJlX3Byb2JhYmlsaXRpZXNdKQorICAgICAgICAgICAgICAsIGJvb3N0OjplbmQoYXJnc1tleHRlbmRlZF9wX3NxdWFyZV9wcm9iYWJpbGl0aWVzXSkKKyAgICAgICAgICAgICkKKyAgICAgICAgICAsIGhlaWdodHMoMiAqIHByb2JhYmlsaXRpZXMuc2l6ZSgpICsgMykKKyAgICAgICAgICAsIGFjdHVhbF9wb3NpdGlvbnMoaGVpZ2h0cy5zaXplKCkpCisgICAgICAgICAgLCBkZXNpcmVkX3Bvc2l0aW9ucyhoZWlnaHRzLnNpemUoKSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IHNhbXBsZV9jZWxsID0gMTsgLy8gaworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX3F1YW50aWxlcyA9IHRoaXMtPnByb2JhYmlsaXRpZXMuc2l6ZSgpOworCisgICAgICAgICAgICAvLyBtKzIgcHJpbmNpcGFsIG1hcmtlcnMgYW5kIG0rMSBtaWRkbGUgbWFya2VycworICAgICAgICAgICAgc3RkOjpzaXplX3QgbnVtX21hcmtlcnMgPSAyICogbnVtX3F1YW50aWxlcyArIDM7CisKKyAgICAgICAgICAgIC8vIGZpcnN0IGFjY3VtdWxhdGUgbnVtX21hcmtlcnMgc2FtcGxlcworICAgICAgICAgICAgaWYoY250IDw9IG51bV9tYXJrZXJzKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbY250IC0gMV0gPSBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tjbnQgLSAxXSA9IGFyZ3Nbd2VpZ2h0XTsKKworICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRlIHRoZSBpbml0aWFsaXphdGlvbiBvZiBoZWlnaHRzIChhbmQgYWN0dWFsX3Bvc2l0aW9ucykgYnkgc29ydGluZworICAgICAgICAgICAgICAgIGlmKGNudCA9PSBudW1fbWFya2VycykKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHdlIG5lZWQgdG8gc29ydCB0aGUgaW5pdGlhbCBzYW1wbGVzIChpbiBoZWlnaHRzKSBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kCisgICAgICAgICAgICAgICAgICAgIC8vIHNvcnQgdGhlaXIgd2VpZ2h0cyAoaW4gYWN0dWFsX3Bvc2l0aW9ucykgdGhlIHNhbWUgd2F5LiBUaGUgZm9sbG93aW5nIGxpbmVzIGRvCisgICAgICAgICAgICAgICAgICAgIC8vIGl0LCBidXQgdGhlcmUgbXVzdCBiZSBhIGJldHRlciBhbmQgbW9yZSBlZmZpY2llbnQgd2F5IG9mIGRvaW5nIHRoaXMuCisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yIGl0X2JlZ2luLCBpdF9lbmQsIGl0X21pbjsKKworICAgICAgICAgICAgICAgICAgICBpdF9iZWdpbiA9IHRoaXMtPmhlaWdodHMuYmVnaW4oKTsKKyAgICAgICAgICAgICAgICAgICAgaXRfZW5kICAgPSB0aGlzLT5oZWlnaHRzLmVuZCgpOworCisgICAgICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IHBvcyA9IDA7CisKKyAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGl0X2JlZ2luICE9IGl0X2VuZCkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgaXRfbWluID0gc3RkOjptaW5fZWxlbWVudChpdF9iZWdpbiwgaXRfZW5kKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGQgPSBzdGQ6OmRpc3RhbmNlKGl0X2JlZ2luLCBpdF9taW4pOworICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzd2FwKCppdF9iZWdpbiwgKml0X21pbik7CisgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnN3YXAodGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1twb3NdLCB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW3BvcyArIGRdKTsKKyAgICAgICAgICAgICAgICAgICAgICAgICsraXRfYmVnaW47CisgICAgICAgICAgICAgICAgICAgICAgICArK3BvczsKKyAgICAgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBjb3JyZWN0IGluaXRpYWwgYWN0dWFsIHBvc2l0aW9ucworICAgICAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAxOyBpIDwgbnVtX21hcmtlcnM7ICsraSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsX3Bvc2l0aW9uc1tpXSArPSBhY3R1YWxfcG9zaXRpb25zW2kgLSAxXTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZihhcmdzW3NhbXBsZV0gPCB0aGlzLT5oZWlnaHRzWzBdKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1swXSA9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXSA9IGFyZ3Nbd2VpZ2h0XTsKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSAxOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlIGlmKGFyZ3Nbc2FtcGxlXSA+PSB0aGlzLT5oZWlnaHRzW251bV9tYXJrZXJzIC0gMV0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW251bV9tYXJrZXJzIC0gMV0gPSBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gbnVtX21hcmtlcnMgLSAxOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIGNlbGwgayA9IHNhbXBsZV9jZWxsIHN1Y2ggdGhhdCBoZWlnaHRzW2stMV0gPD0gc2FtcGxlIDwgaGVpZ2h0c1trXQorCisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXRlcmF0b3I7CisgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yIGl0ID0gc3RkOjp1cHBlcl9ib3VuZCgKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHMuYmVnaW4oKQorICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+aGVpZ2h0cy5lbmQoKQorICAgICAgICAgICAgICAgICAgICAgICwgYXJnc1tzYW1wbGVdCisgICAgICAgICAgICAgICAgICAgICk7CisKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSBzdGQ6OmRpc3RhbmNlKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaXQpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBhY3R1YWwgcG9zaXRpb24gb2YgYWxsIG1hcmtlcnMgYWJvdmUgc2FtcGxlX2NlbGwKKyAgICAgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IHNhbXBsZV9jZWxsOyBpIDwgbnVtX21hcmtlcnM7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGNvbXB1dGUgZGVzaXJlZCBwb3NpdGlvbnMKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zWzBdID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXTsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbbnVtX21hcmtlcnMgLSAxXSA9IHN1bV9vZl93ZWlnaHRzKGFyZ3MpOworICAgICAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1sxXSA9IChzdW1fb2Zfd2VpZ2h0cyhhcmdzKSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF0pICogcHJvYmFiaWxpdGllc1swXQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gMi4gKyB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdOworICAgICAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1tudW1fbWFya2VycyAtIDJdID0gKHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXSkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKHByb2JhYmlsaXRpZXNbbnVtX3F1YW50aWxlcyAtIDFdICsgMS4pCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIDIuICsgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXTsKKworICAgICAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbnVtX3F1YW50aWxlczsgKytpKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1syICogaSArIDJdID0gKHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXSkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHByb2JhYmlsaXRpZXNbaV0gKyB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdOworICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IG51bV9xdWFudGlsZXM7ICsraSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbMiAqIGkgKyAxXSA9IChzdW1fb2Zfd2VpZ2h0cyhhcmdzKSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF0pCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIChwcm9iYWJpbGl0aWVzW2kgLSAxXSArIHByb2JhYmlsaXRpZXNbaV0pCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIDIuICsgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGFkanVzdCBoZWlnaHRzIGFuZCBhY3R1YWxfcG9zaXRpb25zIG9mIG1hcmtlcnMgMSB0byBudW1fbWFya2VycyAtIDIgaWYgbmVjZXNzYXJ5CisgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8PSBudW1fbWFya2VycyAtIDI7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBkZXNpcmVkIHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZCA9IHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gbmV4dCBwb3NpdGlvbgorICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGRwID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpICsgMV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBwcmV2aW91cyBwb3NpdGlvbgorICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGRtID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpIC0gMV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIGhlaWdodCBkcworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhwID0gKHRoaXMtPmhlaWdodHNbaSArIDFdIC0gdGhpcy0+aGVpZ2h0c1tpXSkgLyBkcDsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBobSA9ICh0aGlzLT5oZWlnaHRzW2kgLSAxXSAtIHRoaXMtPmhlaWdodHNbaV0pIC8gZG07CisKKyAgICAgICAgICAgICAgICAgICAgaWYoKGQgPj0gMSAmJiBkcCA+IDEpIHx8IChkIDw9IC0xICYmIGRtIDwgLTEpKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydCBzaWduX2QgPSBzdGF0aWNfY2FzdDxzaG9ydD4oZCAvIHN0ZDo6YWJzKGQpKTsKKworICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBoID0gdGhpcy0+aGVpZ2h0c1tpXSArIHNpZ25fZCAvIChkcCAtIGRtKSAqICgoc2lnbl9kIC0gZG0pKmhwICsgKGRwIC0gc2lnbl9kKSAqIGhtKTsKKworICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IGFkanVzdGluZyBoZWlnaHRzW2ldIHVzaW5nIHAtc3F1YXJlZCBmb3JtdWxhCisgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLT5oZWlnaHRzW2kgLSAxXSA8IGggJiYgaCA8IHRoaXMtPmhlaWdodHNbaSArIDFdKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gPSBoOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBsaW5lYXIgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGQgPiAwKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSArPSBocDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZCA8IDApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldIC09IGhtOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gc2lnbl9kOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgLy8gZm9yIGkgaW4gWzEscHJvYmFiaWxpdGllcy5zaXplKCldLCByZXR1cm4gaGVpZ2h0c1tpICogMl0KKyAgICAgICAgICAgIGRldGFpbDo6dGltZXMyX2l0ZXJhdG9yIGlkeF9iZWdpbiA9IGRldGFpbDo6bWFrZV90aW1lczJfaXRlcmF0b3IoMSk7CisgICAgICAgICAgICBkZXRhaWw6OnRpbWVzMl9pdGVyYXRvciBpZHhfZW5kID0gZGV0YWlsOjptYWtlX3RpbWVzMl9pdGVyYXRvcih0aGlzLT5wcm9iYWJpbGl0aWVzLnNpemUoKSArIDEpOworCisgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoCisgICAgICAgICAgICAgICAgbWFrZV9wZXJtdXRhdGlvbl9pdGVyYXRvcih0aGlzLT5oZWlnaHRzLmJlZ2luKCksIGlkeF9iZWdpbikKKyAgICAgICAgICAgICAgLCBtYWtlX3Blcm11dGF0aW9uX2l0ZXJhdG9yKHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgaWR4X2VuZCkKKyAgICAgICAgICAgICk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIGFycmF5X3R5cGUgcHJvYmFiaWxpdGllczsgICAgICAgICAvLyB0aGUgcXVhbnRpbGUgcHJvYmFiaWxpdGllcworICAgICAgICBhcnJheV90eXBlIGhlaWdodHM7ICAgICAgICAgICAgICAgLy8gcV9pCisgICAgICAgIGFycmF5X3R5cGUgYWN0dWFsX3Bvc2l0aW9uczsgICAgICAvLyBuX2kKKyAgICAgICAgYXJyYXlfdHlwZSBkZXNpcmVkX3Bvc2l0aW9uczsgICAgIC8vIGRfaQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZQorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmUKKyAgICAgIDogZGVwZW5kc19vbjxjb3VudCwgc3VtX29mX3dlaWdodHM+CisgICAgICAsIGV4dGVuZGVkX3Bfc3F1YXJlX3Byb2JhYmlsaXRpZXMKKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9pbXBsPG1wbDo6XzEsIG1wbDo6XzI+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmUKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OndlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlPiBjb25zdCB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmUpCit9CisKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlOworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9rdXJ0b3Npcy5ocHAKQEAgLTAsMCArMSwxMDUgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX2t1cnRvc2lzLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBPbGl2aWVyIEd5Z2ksIERhbmllbCBFZ2xvZmYuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX0tVUlRPU0lTX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9LVVJUT1NJU19IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbW9tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9tZWFuLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3ZWlnaHRlZF9rdXJ0b3Npc19pbXBsCisgICAgLyoqCisgICAgICAgIEBicmllZiBLdXJ0b3NpcyBlc3RpbWF0aW9uIGZvciB3ZWlnaHRlZCBzYW1wbGVzCisKKyAgICAgICAgVGhlIGt1cnRvc2lzIG9mIGEgc2FtcGxlIGRpc3RyaWJ1dGlvbiBpcyBkZWZpbmVkIGFzIHRoZSByYXRpbyBvZiB0aGUgNHRoIGNlbnRyYWwgbW9tZW50IGFuZCB0aGUgc3F1YXJlIG9mIHRoZSAybmQgY2VudHJhbAorICAgICAgICBtb21lbnQgKHRoZSB2YXJpYW5jZSkgb2YgdGhlIHNhbXBsZXMsIG1pbnVzIDMuIFRoZSB0ZXJtIFxmJCAtMyBcZiQgaXMgYWRkZWQgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIG5vcm1hbCBkaXN0cmlidXRpb24KKyAgICAgICAgaGFzIHplcm8ga3VydG9zaXMuIFRoZSBrdXJ0b3NpcyBjYW4gYWxzbyBiZSBleHByZXNzZWQgYnkgdGhlIHNpbXBsZSBtb21lbnRzOgorCisgICAgICAgIFxmWworICAgICAgICAgICAgXGhhdHtnfV8yID0KKyAgICAgICAgICAgICAgICBcZnJhYworICAgICAgICAgICAgICAgIHtcd2lkZWhhdHttfV9uXnsoNCl9LTRcd2lkZWhhdHttfV9uXnsoMyl9XGhhdHtcbXV9X24rNlx3aWRlaGF0e219X25eeygyKX1caGF0e1xtdX1fbl4yLTNcaGF0e1xtdX1fbl40fQorICAgICAgICAgICAgICAgIHtcbGVmdChcd2lkZWhhdHttfV9uXnsoMil9IC0gXGhhdHtcbXV9X25eezJ9XHJpZ2h0KV4yfSAtIDMsCisgICAgICAgIFxmXQorCisgICAgICAgIHdoZXJlIFxmJCBcd2lkZWhhdHttfV9uXnsoaSl9IFxmJCBhcmUgdGhlIFxmJCBpIFxmJC10aCBtb21lbnQgYW5kIFxmJCBcaGF0e1xtdX1fbiBcZiQgdGhlIG1lYW4gKGZpcnN0IG1vbWVudCkgb2YgdGhlCisgICAgICAgIFxmJCBuIFxmJCBzYW1wbGVzLgorCisgICAgICAgIFRoZSBrdXJ0b3NpcyBlc3RpbWF0b3IgZm9yIHdlaWdodGVkIHNhbXBsZXMgaXMgZm9ybWFsbHkgaWRlbnRpY2FsIHRvIHRoZSBlc3RpbWF0b3IgZm9yIHVud2VpZ2h0ZWQgc2FtcGxlcywgZXhjZXB0IHRoYXQKKyAgICAgICAgdGhlIHdlaWdodGVkIGNvdW50ZXJwYXJ0cyBvZiBhbGwgbWVhc3VyZXMgaXQgZGVwZW5kcyBvbiBhcmUgdG8gYmUgdGFrZW4uCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfa3VydG9zaXNfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIHdlaWdodGVkX3NhbXBsZT46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHdlaWdodGVkX2t1cnRvc2lzX2ltcGwoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIG51bWVyaWM6OmZkaXYoCisgICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcnM6OndlaWdodGVkX21vbWVudDw0PihhcmdzKQorICAgICAgICAgICAgICAgICAgICAgICAgLSA0LiAqIGFjY3VtdWxhdG9yczo6d2VpZ2h0ZWRfbW9tZW50PDM+KGFyZ3MpICogd2VpZ2h0ZWRfbWVhbihhcmdzKQorICAgICAgICAgICAgICAgICAgICAgICAgKyA2LiAqIGFjY3VtdWxhdG9yczo6d2VpZ2h0ZWRfbW9tZW50PDI+KGFyZ3MpICogd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgIC0gMy4gKiB3ZWlnaHRlZF9tZWFuKGFyZ3MpICogd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykgKiB3ZWlnaHRlZF9tZWFuKGFyZ3MpCisgICAgICAgICAgICAgICAgICAgICAgLCAoIGFjY3VtdWxhdG9yczo6d2VpZ2h0ZWRfbW9tZW50PDI+KGFyZ3MpIC0gd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykgKQorICAgICAgICAgICAgICAgICAgICAgICAgKiAoIGFjY3VtdWxhdG9yczo6d2VpZ2h0ZWRfbW9tZW50PDI+KGFyZ3MpIC0gd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykgKQorICAgICAgICAgICAgICAgICAgICkgLSAzLjsKKyAgICAgICAgfQorICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9rdXJ0b3NpcworLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfa3VydG9zaXMKKyAgICAgIDogZGVwZW5kc19vbjx3ZWlnaHRlZF9tZWFuLCB3ZWlnaHRlZF9tb21lbnQ8Mj4sIHdlaWdodGVkX21vbWVudDwzPiwgd2VpZ2h0ZWRfbW9tZW50PDQ+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfa3VydG9zaXNfaW1wbDxtcGw6Ol8xLCBtcGw6Ol8yPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OndlaWdodGVkX2t1cnRvc2lzCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjp3ZWlnaHRlZF9rdXJ0b3Npcz4gY29uc3Qgd2VpZ2h0ZWRfa3VydG9zaXMgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdlaWdodGVkX2t1cnRvc2lzKQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9rdXJ0b3NpczsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbWVhbi5ocHAKQEAgLTAsMCArMSwxODkgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX21lYW4uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IEVyaWMgTmllYmxlciwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9NRUFOX0hQUF9FQU5fMDNfMTFfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9NRUFOX0hQUF9FQU5fMDNfMTFfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy93ZWlnaHRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9zdW0uaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHdlaWdodGVkX21lYW5faW1wbAorICAgIC8vICAgICAgbGF6eSwgYnkgZGVmYXVsdAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX21lYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHdlaWdodGVkX21lYW5faW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHR5cGVkZWYKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmlmXzwKKyAgICAgICAgICAgICAgICAgICAgaXNfc2FtZTxUYWcsIHRhZzo6c2FtcGxlPgorICAgICAgICAgICAgICAgICAgLCB0YWc6OndlaWdodGVkX3N1bQorICAgICAgICAgICAgICAgICAgLCB0YWc6OndlaWdodGVkX3N1bV9vZl92YXJpYXRlczxTYW1wbGUsIFRhZz4KKyAgICAgICAgICAgICAgICA+Ojp0eXBlCisgICAgICAgICAgICB3ZWlnaHRlZF9zdW1fdGFnOworCisgICAgICAgICAgICBleHRyYWN0b3I8d2VpZ2h0ZWRfc3VtX3RhZz4gY29uc3Qgc29tZV93ZWlnaHRlZF9zdW0gPSB7fTsKKworICAgICAgICAgICAgcmV0dXJuIG51bWVyaWM6OmZkaXYoc29tZV93ZWlnaHRlZF9zdW0oYXJncyksIHN1bV9vZl93ZWlnaHRzKGFyZ3MpKTsKKyAgICAgICAgfQorICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gaW1tZWRpYXRlX3dlaWdodGVkX21lYW5faW1wbAorICAgIC8vICAgICAgaW1tZWRpYXRlCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3QgaW1tZWRpYXRlX3dlaWdodGVkX21lYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIGltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IG1lYW4oCisgICAgICAgICAgICAgICAgbnVtZXJpYzo6ZmRpdigKKyAgICAgICAgICAgICAgICAgICAgYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCkgfCBTYW1wbGUoKV0KKyAgICAgICAgICAgICAgICAgICAgICAqIG51bWVyaWM6Om9uZTxXZWlnaHQ+Ojp2YWx1ZQorICAgICAgICAgICAgICAgICAgLCBudW1lcmljOjpvbmU8V2VpZ2h0Pjo6dmFsdWUKKyAgICAgICAgICAgICAgICApCisgICAgICAgICAgICApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgLy8gTWF0dGhpYXM6CisgICAgICAgICAgICAvLyAgbmVlZCB0byBwYXNzIHRoZSBhcmd1bWVudCBwYWNrIHNpbmNlIHRoZSB3ZWlnaHQgbWlnaHQgYmUgYW4gZXh0ZXJuYWwKKyAgICAgICAgICAgIC8vICBhY2N1bXVsYXRvciBzZXQgcGFzc2VkIGFzIGEgbmFtZWQgcGFyYW1ldGVyCisgICAgICAgICAgICBXZWlnaHQgd19zdW0gPSBzdW1fb2Zfd2VpZ2h0cyhhcmdzKTsKKyAgICAgICAgICAgIFdlaWdodCB3ID0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgd2VpZ2h0ZWRfc2FtcGxlIGNvbnN0ICZzID0gYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCldICogdzsKKyAgICAgICAgICAgIHRoaXMtPm1lYW4gPSBudW1lcmljOjpmZGl2KHRoaXMtPm1lYW4gKiAod19zdW0gLSB3KSArIHMsIHdfc3VtKTsKKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5tZWFuOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICByZXN1bHRfdHlwZSBtZWFuOworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9tZWFuCisvLyB0YWc6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCB3ZWlnaHRlZF9tZWFuCisgICAgICA6IGRlcGVuZHNfb248c3VtX29mX3dlaWdodHMsIHdlaWdodGVkX3N1bT4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfbWVhbl9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIHRhZzo6c2FtcGxlPiBpbXBsOworICAgIH07CisgICAgc3RydWN0IGltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuCisgICAgICA6IGRlcGVuZHNfb248c3VtX29mX3dlaWdodHM+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgdGFnOjpzYW1wbGU+IGltcGw7CisgICAgfTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlcworICAgICAgOiBkZXBlbmRzX29uPHN1bV9vZl93ZWlnaHRzLCB3ZWlnaHRlZF9zdW1fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+ID4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfbWVhbl9pbXBsPFZhcmlhdGVUeXBlLCBtcGw6Ol8yLCBWYXJpYXRlVGFnPiBpbXBsOworICAgIH07CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IGltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzCisgICAgICA6IGRlcGVuZHNfb248c3VtX29mX3dlaWdodHM+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuX2ltcGw8VmFyaWF0ZVR5cGUsIG1wbDo6XzIsIFZhcmlhdGVUYWc+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfbWVhbgorLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlcworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6bWVhbj4gY29uc3Qgd2VpZ2h0ZWRfbWVhbiA9IHt9OworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19ERUZJTkVfRVhUUkFDVE9SKHRhZywgd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlcywgKHR5cGVuYW1lKSh0eXBlbmFtZSkpCisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9tZWFuKQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9tZWFuOwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczsKKworLy8gd2VpZ2h0ZWRfbWVhbihsYXp5KSAtPiB3ZWlnaHRlZF9tZWFuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX21lYW4obGF6eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX21lYW4gdHlwZTsKK307CisKKy8vIHdlaWdodGVkX21lYW4oaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbgordGVtcGxhdGU8Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9tZWFuKGltbWVkaWF0ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OmltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuIHR5cGU7Cit9OworCisvLyB3ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihsYXp5KSAtPiB3ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPgordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXM8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+KGxhenkpPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKworLy8gd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4oaW1tZWRpYXRlKSAtPiBpbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4KK3RlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9tZWFuX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihpbW1lZGlhdGUpPgoreworICAgIHR5cGVkZWYgdGFnOjppbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gdHlwZTsKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX21lZGlhbi5ocHAKQEAgLTAsMCArMSwyMzcgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX21lZGlhbi5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRXJpYyBOaWVibGVyLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX01FRElBTl9IUFBfRUFOXzI4XzEwXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfTUVESUFOX0hQUF9FQU5fMjhfMTBfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbWVkaWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfZGVuc2l0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxfZGlzdC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfbWVkaWFuX2ltcGwKKyAgICAvLworICAgIC8qKgorICAgICAgICBAYnJpZWYgTWVkaWFuIGVzdGltYXRpb24gZm9yIHdlaWdodGVkIHNhbXBsZXMgYmFzZWQgb24gdGhlIFxmJFBeMlxmJCBxdWFudGlsZSBlc3RpbWF0b3IKKworICAgICAgICBUaGUgXGYkUF4yXGYkIGFsZ29yaXRobSBmb3Igd2VpZ2h0ZWQgc2FtcGxlcyBpcyBpbnZva2VkIHdpdGggYSBxdWFudGlsZSBwcm9iYWJpbGl0eSBvZiAwLjUuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IHdlaWdodGVkX21lZGlhbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjxTYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgd2VpZ2h0ZWRfbWVkaWFuX2ltcGwoZG9udF9jYXJlKSB7fQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbihhcmdzKTsKKyAgICAgICAgfQorICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2l0aF9kZW5zaXR5X3dlaWdodGVkX21lZGlhbl9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIE1lZGlhbiBlc3RpbWF0aW9uIGZvciB3ZWlnaHRlZCBzYW1wbGVzIGJhc2VkIG9uIHRoZSBkZW5zaXR5IGVzdGltYXRvcgorCisgICAgICAgIFRoZSBhbGdvcml0aG0gZGV0ZXJtaW5lcyB0aGUgYmluIGluIHdoaWNoIHRoZSBcZiQwLjUqY250XGYkLXRoIHNhbXBsZSBsaWVzLCBcZiRjbnRcZiQgYmVpbmcKKyAgICAgICAgdGhlIHRvdGFsIG51bWJlciBvZiBzYW1wbGVzLiBJdCByZXR1cm5zIHRoZSBhcHByb3hpbWF0ZSBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoaXMgc2FtcGxlLAorICAgICAgICBiYXNlZCBvbiBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYmluLgorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCB3aXRoX2RlbnNpdHlfd2VpZ2h0ZWRfbWVkaWFuX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFNhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxmbG9hdF90eXBlLCBmbG9hdF90eXBlPiA+IGhpc3RvZ3JhbV90eXBlOworICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGhpc3RvZ3JhbV90eXBlOjppdGVyYXRvcj4gcmFuZ2VfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBmbG9hdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHdpdGhfZGVuc2l0eV93ZWlnaHRlZF9tZWRpYW5faW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogc3VtKG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKSkKKyAgICAgICAgICAsIGlzX2RpcnR5KHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IHRydWU7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgaWYgKHRoaXMtPmlzX2RpcnR5KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5ID0gZmFsc2U7CisKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKyAgICAgICAgICAgICAgICByYW5nZV90eXBlIGhpc3RvZ3JhbSA9IHdlaWdodGVkX2RlbnNpdHkoYXJncyk7CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgcmFuZ2VfdHlwZTo6aXRlcmF0b3IgaXQgPSBoaXN0b2dyYW0uYmVnaW4oKTsKKyAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy0+c3VtIDwgMC41ICogY250KQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+c3VtICs9IGl0LT5zZWNvbmQgKiBjbnQ7CisgICAgICAgICAgICAgICAgICAgICsraXQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIC0taXQ7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBvdmVyID0gbnVtZXJpYzo6ZmRpdih0aGlzLT5zdW0gLSAwLjUgKiBjbnQsIGl0LT5zZWNvbmQgKiBjbnQpOworICAgICAgICAgICAgICAgIHRoaXMtPm1lZGlhbiA9IGl0LT5maXJzdCAqIG92ZXIgKyAoaXQgKyAxKS0+Zmlyc3QgKiAoIDEuIC0gb3ZlciApOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gdGhpcy0+bWVkaWFuOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgc3VtOworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHk7CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSBtZWRpYW47CisgICAgfTsKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbl9pbXBsCisgICAgLy8KKyAgICAvKioKKyAgICAgICAgQGJyaWVmIE1lZGlhbiBlc3RpbWF0aW9uIGZvciB3ZWlnaHRlZCBzYW1wbGVzIGJhc2VkIG9uIHRoZSBcZiRQXjJcZiQgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gZXN0aW1hdG9yCisKKyAgICAgICAgVGhlIGFsZ29yaXRobSBkZXRlcm1pbmVzIHRoZSBmaXJzdCAobGVmdG1vc3QpIGJpbiB3aXRoIGEgaGVpZ2h0IGV4Y2VlZGluZyAwLjUuIEl0CisgICAgICAgIHJldHVybnMgdGhlIGFwcHJveGltYXRlIGhvcml6b250YWwgcG9zaXRpb24gb2Ygd2hlcmUgdGhlIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uCisgICAgICAgIGVxdWFscyAwLjUsIGJhc2VkIG9uIGEgbGluZWFyIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBiaW4uCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3Qgd2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl93ZWlnaHRlZF9tZWRpYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzdGQ6OnZlY3RvcjxzdGQ6OnBhaXI8ZmxvYXRfdHlwZSwgZmxvYXRfdHlwZT4gPiBoaXN0b2dyYW1fdHlwZTsKKyAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTx0eXBlbmFtZSBoaXN0b2dyYW1fdHlwZTo6aXRlcmF0b3I+IHJhbmdlX3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgZmxvYXRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbl9pbXBsKGRvbnRfY2FyZSkKKyAgICAgICAgICA6IGlzX2RpcnR5KHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IHRydWU7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICByZXN1bHRfdHlwZSByZXN1bHQoQXJncyBjb25zdCAmYXJncykgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgaWYgKHRoaXMtPmlzX2RpcnR5KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5ID0gZmFsc2U7CisKKyAgICAgICAgICAgICAgICByYW5nZV90eXBlIGhpc3RvZ3JhbSA9IHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uKGFyZ3MpOworICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJhbmdlX3R5cGU6Oml0ZXJhdG9yIGl0ID0gaGlzdG9ncmFtLmJlZ2luKCk7CisgICAgICAgICAgICAgICAgd2hpbGUgKGl0LT5zZWNvbmQgPCAwLjUpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICArK2l0OworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIG92ZXIgPSBudW1lcmljOjpmZGl2KGl0LT5zZWNvbmQgLSAwLjUsIGl0LT5zZWNvbmQgLSAoaXQgLSAxKS0+c2Vjb25kKTsKKyAgICAgICAgICAgICAgICB0aGlzLT5tZWRpYW4gPSBpdC0+Zmlyc3QgKiBvdmVyICsgKGl0ICsgMSktPmZpcnN0ICogKCAxLiAtIG92ZXIgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPm1lZGlhbjsKKyAgICAgICAgfQorICAgIHByaXZhdGU6CisgICAgICAgIG11dGFibGUgYm9vbCBpc19kaXJ0eTsKKyAgICAgICAgbXV0YWJsZSBmbG9hdF90eXBlIG1lZGlhbjsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6d2VpZ2h0ZWRfbWVkaWFuCisvLyB0YWc6OndpdGhfZGVuc2l0eV93ZWlnaHRlZF9tZWRpYW4KKy8vIHRhZzo6d2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl93ZWlnaHRlZF9tZWRpYW4KKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHdlaWdodGVkX21lZGlhbgorICAgICAgOiBkZXBlbmRzX29uPHdlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlX2Zvcl9tZWRpYW4+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndlaWdodGVkX21lZGlhbl9pbXBsPG1wbDo6XzE+IGltcGw7CisgICAgfTsKKyAgICBzdHJ1Y3Qgd2l0aF9kZW5zaXR5X3dlaWdodGVkX21lZGlhbgorICAgICAgOiBkZXBlbmRzX29uPGNvdW50LCB3ZWlnaHRlZF9kZW5zaXR5PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3aXRoX2RlbnNpdHlfd2VpZ2h0ZWRfbWVkaWFuX2ltcGw8bXBsOjpfMT4gaW1wbDsKKyAgICB9OworICAgIHN0cnVjdCB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbgorICAgICAgOiBkZXBlbmRzX29uPHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbl9pbXBsPG1wbDo6XzEsIG1wbDo6XzI+IGltcGw7CisgICAgfTsKKworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp3ZWlnaHRlZF9tZWRpYW4KKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6Om1lZGlhbj4gY29uc3Qgd2VpZ2h0ZWRfbWVkaWFuID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9tZWRpYW4pCit9CisKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX21lZGlhbjsKKy8vIHdlaWdodGVkX21lZGlhbih3aXRoX3Bfc3F1YXJlX3F1YW50aWxlKSAtPiB3ZWlnaHRlZF9tZWRpYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6d2VpZ2h0ZWRfbWVkaWFuKHdpdGhfcF9zcXVhcmVfcXVhbnRpbGUpPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9tZWRpYW4gdHlwZTsKK307CisKKy8vIHdlaWdodGVkX21lZGlhbih3aXRoX2RlbnNpdHkpIC0+IHdpdGhfZGVuc2l0eV93ZWlnaHRlZF9tZWRpYW4KK3RlbXBsYXRlPD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6d2VpZ2h0ZWRfbWVkaWFuKHdpdGhfZGVuc2l0eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndpdGhfZGVuc2l0eV93ZWlnaHRlZF9tZWRpYW4gdHlwZTsKK307CisKKy8vIHdlaWdodGVkX21lZGlhbih3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uKSAtPiB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbgordGVtcGxhdGU8Pgorc3RydWN0IGFzX2ZlYXR1cmU8dGFnOjp3ZWlnaHRlZF9tZWRpYW4od2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbik+Cit7CisgICAgdHlwZWRlZiB0YWc6OndpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fd2VpZ2h0ZWRfbWVkaWFuIHR5cGU7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9tb21lbnQuaHBwCkBAIC0wLDAgKzEsOTYgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX21vbWVudC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYsIEVyaWMgTmllYmxlciwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9NT01FTlRfSFBQX0VBTl8xNV8xMV8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX01PTUVOVF9IUFBfRUFOXzE1XzExXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy9ub190cjEvY21hdGguaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9hcml0aG1ldGljL2luYy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vcmVwZWF0X2Zyb21fdG8uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL2VudW1fdHJhaWxpbmdfcGFyYW1zLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wcmVwcm9jZXNzb3IvcmVwZXRpdGlvbi9lbnVtX3RyYWlsaW5nX2JpbmFyeV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvbW9tZW50LmhwcD4gLy8gZm9yIHBvdygpCisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3ZWlnaHRlZF9tb21lbnRfaW1wbAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIE4sIHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9tb21lbnRfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlIC8vIFRPRE86IGFsc28gZGVwZW5kc19vbiBzdW0gb2YgcG93ZXJzCisgICAgeworICAgICAgICBCT09TVF9NUExfQVNTRVJUX1JFTEFUSU9OKE46OnZhbHVlLCA+LCAwKTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjptdWx0aXBsaWVzPFNhbXBsZSwgV2VpZ2h0Pjo6cmVzdWx0X3R5cGUgd2VpZ2h0ZWRfc2FtcGxlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8d2VpZ2h0ZWRfc2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB3ZWlnaHRlZF9tb21lbnRfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogc3VtKGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldICogbnVtZXJpYzo6b25lPFdlaWdodD46OnZhbHVlKQorICAgICAgICB7CisgICAgICAgIH0KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB2b2lkIG9wZXJhdG9yICgpKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRoaXMtPnN1bSArPSBhcmdzW3dlaWdodF0gKiBudW1lcmljOjpwb3coYXJnc1tzYW1wbGVdLCBOKCkpOworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KHRoaXMtPnN1bSwgc3VtX29mX3dlaWdodHMoYXJncykpOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICB3ZWlnaHRlZF9zYW1wbGUgc3VtOworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9tb21lbnQKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8aW50IE4+CisgICAgc3RydWN0IHdlaWdodGVkX21vbWVudAorICAgICAgOiBkZXBlbmRzX29uPGNvdW50LCBzdW1fb2Zfd2VpZ2h0cz4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfbW9tZW50X2ltcGw8bXBsOjppbnRfPE4+LCBtcGw6Ol8xLCBtcGw6Ol8yPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OndlaWdodGVkX21vbWVudAorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0RFRklORV9FWFRSQUNUT1IodGFnLCB3ZWlnaHRlZF9tb21lbnQsIChpbnQpKQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9tb21lbnQ7CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwCkBAIC0wLDAgKzEsMjYyIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bF9kaXN0LmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBEYW5pZWwgRWdsb2ZmLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BfU1FVQVJFX0NVTVVMX0RJU1RfSFBQX0RFXzAxXzAxXzIwMDYKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfUF9TUVVBUkVfQ1VNVUxfRElTVF9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvcGFyYW1ldGVyL2tleXdvcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL2NvdW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9zdW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3Bfc3F1YXJlX2N1bXVsX2Rpc3QuaHBwPiAvLyBmb3IgbmFtZWQgcGFyYW1ldGVyIHBfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX251bV9jZWxscworCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX2ltcGwKKyAgICAvLyAgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gY2FsY3VsYXRpb24gKGFzIGhpc3RvZ3JhbSkKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIEhpc3RvZ3JhbSBjYWxjdWxhdGlvbiBvZiB0aGUgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gd2l0aCB0aGUgXGYkUF4yXGYkIGFsZ29yaXRobSBmb3Igd2VpZ2h0ZWQgc2FtcGxlcworCisgICAgICAgIEEgaGlzdG9ncmFtIG9mIHRoZSBzYW1wbGUgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gaXMgY29tcHV0ZWQgZHluYW1pY2FsbHkgd2l0aG91dCBzdG9yaW5nIHNhbXBsZXMKKyAgICAgICAgYmFzZWQgb24gdGhlIFxmJCBQXjIgXGYkIGFsZ29yaXRobSBmb3Igd2VpZ2h0ZWQgc2FtcGxlcy4gVGhlIHJldHVybmVkIGhpc3RvZ3JhbSBoYXMgYSBzcGVjaWZpYWJsZQorICAgICAgICBhbW91bnQgKG51bV9jZWxscykgZXF1aXByb2JhYmxlIChhbmQgbm90IGVxdWFsLXNpemVkKSBjZWxscy4KKworICAgICAgICBOb3RlIHRoYXQgYXBwbHlpbmcgaW1wb3J0YW5jZSBzYW1wbGluZyByZXN1bHRzIGluIHJlZ2lvbnMgdG8gYmUgbW9yZSBhbmQgb3RoZXIgcmVnaW9ucyB0byBiZSBsZXNzCisgICAgICAgIGFjY3VyYXRlbHkgZXN0aW1hdGVkIHRoYW4gd2l0aG91dCBpbXBvcnRhbmNlIHNhbXBsaW5nLCBpLmUuLCB3aXRoIHVud2VpZ2h0ZWQgc2FtcGxlcy4KKworICAgICAgICBGb3IgZnVydGhlciBkZXRhaWxzLCBzZWUKKworICAgICAgICBSLiBKYWluIGFuZCBJLiBDaGxhbXRhYywgVGhlIFBeMiBhbGdvcml0aG0gZm9yIGR5bmFtaWMgY2FsY3VsYXRpb24gb2YgcXVhbnRpbGVzIGFuZAorICAgICAgICBoaXN0b2dyYW1zIHdpdGhvdXQgc3RvcmluZyBvYnNlcnZhdGlvbnMsIENvbW11bmljYXRpb25zIG9mIHRoZSBBQ00sCisgICAgICAgIFZvbHVtZSAyOCAoT2N0b2JlciksIE51bWJlciAxMCwgMTk4NSwgcC4gMTA3Ni0xMDg1LgorCisgICAgICAgIEBwYXJhbSBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9udW1fY2VsbHMKKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxTYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PHdlaWdodGVkX3NhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxmbG9hdF90eXBlLCBmbG9hdF90eXBlPiA+IGhpc3RvZ3JhbV90eXBlOworICAgICAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGZsb2F0X3R5cGU+IGFycmF5X3R5cGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8dHlwZW5hbWUgaGlzdG9ncmFtX3R5cGU6Oml0ZXJhdG9yPiByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9pbXBsKEFyZ3MgY29uc3QgJmFyZ3MpCisgICAgICAgICAgOiBudW1fY2VsbHMoYXJnc1twX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9udW1fY2VsbHNdKQorICAgICAgICAgICwgaGVpZ2h0cyhudW1fY2VsbHMgKyAxKQorICAgICAgICAgICwgYWN0dWFsX3Bvc2l0aW9ucyhudW1fY2VsbHMgKyAxKQorICAgICAgICAgICwgZGVzaXJlZF9wb3NpdGlvbnMobnVtX2NlbGxzICsgMSkKKyAgICAgICAgICAsIGhpc3RvZ3JhbShudW1fY2VsbHMgKyAxKQorICAgICAgICAgICwgaXNfZGlydHkodHJ1ZSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IHRydWU7CisKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGNudCA9IGNvdW50KGFyZ3MpOworICAgICAgICAgICAgc3RkOjpzaXplX3Qgc2FtcGxlX2NlbGwgPSAxOyAvLyBrCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBiID0gdGhpcy0+bnVtX2NlbGxzOworCisgICAgICAgICAgICAvLyBhY2N1bXVsYXRlIG51bV9jZWxscyArIDEgZmlyc3Qgc2FtcGxlcworICAgICAgICAgICAgaWYgKGNudCA8PSBiICsgMSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2NudCAtIDFdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbY250IC0gMV0gPSBhcmdzW3dlaWdodF07CisKKyAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZSB0aGUgaW5pdGlhbGl6YXRpb24gb2YgaGVpZ2h0cyBieSBzb3J0aW5nCisgICAgICAgICAgICAgICAgaWYgKGNudCA9PSBiICsgMSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vc3RkOjpzb3J0KHRoaXMtPmhlaWdodHMuYmVnaW4oKSwgdGhpcy0+aGVpZ2h0cy5lbmQoKSk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogd2UgbmVlZCB0byBzb3J0IHRoZSBpbml0aWFsIHNhbXBsZXMgKGluIGhlaWdodHMpIGluIGFzY2VuZGluZyBvcmRlciBhbmQKKyAgICAgICAgICAgICAgICAgICAgLy8gc29ydCB0aGVpciB3ZWlnaHRzIChpbiBhY3R1YWxfcG9zaXRpb25zKSB0aGUgc2FtZSB3YXkuIFRoZSBmb2xsb3dpbmcgbGluZXMgZG8KKyAgICAgICAgICAgICAgICAgICAgLy8gaXQsIGJ1dCB0aGVyZSBtdXN0IGJlIGEgYmV0dGVyIGFuZCBtb3JlIGVmZmljaWVudCB3YXkgb2YgZG9pbmcgdGhpcy4KKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgYXJyYXlfdHlwZTo6aXRlcmF0b3IgaXRfYmVnaW4sIGl0X2VuZCwgaXRfbWluOworCisgICAgICAgICAgICAgICAgICAgIGl0X2JlZ2luID0gdGhpcy0+aGVpZ2h0cy5iZWdpbigpOworICAgICAgICAgICAgICAgICAgICBpdF9lbmQgICA9IHRoaXMtPmhlaWdodHMuZW5kKCk7CisKKyAgICAgICAgICAgICAgICAgICAgc3RkOjpzaXplX3QgcG9zID0gMDsKKworICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaXRfYmVnaW4gIT0gaXRfZW5kKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBpdF9taW4gPSBzdGQ6Om1pbl9lbGVtZW50KGl0X2JlZ2luLCBpdF9lbmQpOworICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzaXplX3QgZCA9IHN0ZDo6ZGlzdGFuY2UoaXRfYmVnaW4sIGl0X21pbik7CisgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnN3YXAoKml0X2JlZ2luLCAqaXRfbWluKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6c3dhcCh0aGlzLT5hY3R1YWxfcG9zaXRpb25zW3Bvc10sIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbcG9zICsgZF0pOworICAgICAgICAgICAgICAgICAgICAgICAgKytpdF9iZWdpbjsKKyAgICAgICAgICAgICAgICAgICAgICAgICsrcG9zOworICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGNvcnJlY3QgaW5pdGlhbCBhY3R1YWwgcG9zaXRpb25zCisgICAgICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDE7IGkgPCBiOyArK2kpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpIC0gMV07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gZmluZCBjZWxsIGsgc3VjaCB0aGF0IGhlaWdodHNbay0xXSA8PSBhcmdzW3NhbXBsZV0gPCBoZWlnaHRzW2tdIGFuZCBhZGp1c3QgZXh0cmVtZSB2YWx1ZXMKKyAgICAgICAgICAgICAgICBpZiAoYXJnc1tzYW1wbGVdIDwgdGhpcy0+aGVpZ2h0c1swXSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbMF0gPSBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF0gPSBhcmdzW3dlaWdodF07CisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gMTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy0+aGVpZ2h0c1tiXSA8PSBhcmdzW3NhbXBsZV0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2JdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgICAgICBzYW1wbGVfY2VsbCA9IGI7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yIGl0OworICAgICAgICAgICAgICAgICAgICBpdCA9IHN0ZDo6dXBwZXJfYm91bmQoCisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIHRoaXMtPmhlaWdodHMuZW5kKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIGFyZ3Nbc2FtcGxlXQorICAgICAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gc3RkOjpkaXN0YW5jZSh0aGlzLT5oZWlnaHRzLmJlZ2luKCksIGl0KTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBpbmNyZW1lbnQgcG9zaXRpb25zIG9mIG1hcmtlcnMgYWJvdmUgc2FtcGxlX2NlbGwKKyAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSBzYW1wbGVfY2VsbDsgaSA8IGIgKyAxOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldICs9IGFyZ3Nbd2VpZ2h0XTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgZGVzaXJlZCBtYXJrZXIgcG9zaXRpb25zCisgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IGIgKyAxOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1tpXSA9IHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBudW1lcmljOjpmZGl2KChpLTEpICogKHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1swXSksIGIpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIGFkanVzdCBoZWlnaHRzIG9mIG1hcmtlcnMgMiB0byBudW1fY2VsbHMgaWYgbmVjZXNzYXJ5CisgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IGI7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBkZXNpcmUgcG9zaXRpb24KKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBkID0gdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbaV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBuZXh0IHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZHAgPSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2kgKyAxXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvIHByZXZpb3VzIHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZG0gPSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2kgLSAxXSAtIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV07CisKKyAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0IGRzCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaHAgPSAodGhpcy0+aGVpZ2h0c1tpICsgMV0gLSB0aGlzLT5oZWlnaHRzW2ldKSAvIGRwOworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhtID0gKHRoaXMtPmhlaWdodHNbaSAtIDFdIC0gdGhpcy0+aGVpZ2h0c1tpXSkgLyBkbTsKKworICAgICAgICAgICAgICAgICAgICBpZiAoICggZCA+PSAxLiAmJiBkcCA+IDEuICkgfHwgKCBkIDw9IC0xLiAmJiBkbSA8IC0xLiApICkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnQgc2lnbl9kID0gc3RhdGljX2Nhc3Q8c2hvcnQ+KGQgLyBzdGQ6OmFicyhkKSk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSBhZGp1c3RpbmcgaGVpZ2h0c1tpXSB1c2luZyBwLXNxdWFyZWQgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBoID0gdGhpcy0+aGVpZ2h0c1tpXSArIHNpZ25fZCAvIChkcCAtIGRtKSAqICggKHNpZ25fZCAtIGRtKSAqIGhwICsgKGRwIC0gc2lnbl9kKSAqIGhtICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy0+aGVpZ2h0c1tpIC0gMV0gPCBoICYmIGggPCB0aGlzLT5oZWlnaHRzW2kgKyAxXSApCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSA9IGg7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGxpbmVhciBmb3JtdWxhCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQ+MCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gKz0gaHA7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkPDApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldIC09IGhtOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gc2lnbl9kOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eSA9IGZhbHNlOworCisgICAgICAgICAgICAgICAgLy8gY3JlYXRlcyBhIHZlY3RvciBvZiBzdGQ6OnBhaXIgd2hlcmUgZWFjaCBwYWlyIGkgaG9sZHMKKyAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWVzIGhlaWdodHNbaV0gKHgtYXhpcyBvZiBoaXN0b2dyYW0pIGFuZAorICAgICAgICAgICAgICAgIC8vIGFjdHVhbF9wb3NpdGlvbnNbaV0gLyBzdW1fb2Zfd2VpZ2h0cyAoeS1heGlzIG9mIGhpc3RvZ3JhbSkKKworICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDA7IGkgPCB0aGlzLT5oaXN0b2dyYW0uc2l6ZSgpOyArK2kpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oaXN0b2dyYW1baV0gPSBzdGQ6Om1ha2VfcGFpcih0aGlzLT5oZWlnaHRzW2ldLCBudW1lcmljOjpmZGl2KHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0sIHN1bV9vZl93ZWlnaHRzKGFyZ3MpKSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gbWFrZV9pdGVyYXRvcl9yYW5nZSh0aGlzLT5oaXN0b2dyYW0pOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBzdGQ6OnNpemVfdCBudW1fY2VsbHM7ICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGNlbGxzIGIKKyAgICAgICAgYXJyYXlfdHlwZSAgaGVpZ2h0czsgICAgICAgICAgICAgIC8vIHFfaQorICAgICAgICBhcnJheV90eXBlICBhY3R1YWxfcG9zaXRpb25zOyAgICAgLy8gbl9pCisgICAgICAgIGFycmF5X3R5cGUgIGRlc2lyZWRfcG9zaXRpb25zOyAgICAvLyBuJ19pCisgICAgICAgIG11dGFibGUgaGlzdG9ncmFtX3R5cGUgaGlzdG9ncmFtOyAvLyBoaXN0b2dyYW0KKyAgICAgICAgbXV0YWJsZSBib29sIGlzX2RpcnR5OworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OndlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCB3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbgorICAgICAgOiBkZXBlbmRzX29uPGNvdW50LCBzdW1fb2Zfd2VpZ2h0cz4KKyAgICAgICwgcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbnVtX2NlbGxzCisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25faW1wbDxtcGw6Ol8xLCBtcGw6Ol8yPiBpbXBsOworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OndlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjp3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbj4gY29uc3Qgd2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24gPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uKQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbjsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb24uaHBwCkBAIC0wLDAgKzEsMTkgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAxMiBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BfU1FVQVJFX0NVTVVMQVRJVkVfRElTVFJJQlVUSU9OX0hQUF8wM18xOV8yMDEyCisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BfU1FVQVJFX0NVTVVMQVRJVkVfRElTVFJJQlVUSU9OX0hQUF8wM18xOV8yMDEyCisKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKSB8fCBkZWZpbmVkKF9fQk9STEFORENfXykgfHwgZGVmaW5lZChfX0RNQ19fKQorIyAgcHJhZ21hIG1lc3NhZ2UgKCJXYXJuaW5nOiBUaGlzIGhlYWRlciBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlOiBib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9wX3NxdWFyZV9jdW11bF9kaXN0LmhwcCIpCisjZWxpZiBkZWZpbmVkKF9fR05VQ19fKSB8fCBkZWZpbmVkKF9fSFBfYUNDKSB8fCBkZWZpbmVkKF9fU1VOUFJPX0NDKSB8fCBkZWZpbmVkKF9fSUJNQ1BQX18pCisjICB3YXJuaW5nICJUaGlzIGhlYWRlciBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlOiBib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9wX3NxdWFyZV9jdW11bF9kaXN0LmhwcCIKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxfZGlzdC5ocHA+CisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlLmhwcApAQCAtMCwwICsxLDI1NSBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGUuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA1IERhbmllbCBFZ2xvZmYuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BfU1FVQVJFX1FVQU5USUxFX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BfU1FVQVJFX1FVQU5USUxFX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDxjbWF0aD4KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGJvb3N0L2FycmF5LmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvc3VtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wYXJhbWV0ZXJzL3F1YW50aWxlX3Byb2JhYmlsaXR5LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbCB7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHdlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGwKKyAgICAvLyAgc2luZ2xlIHF1YW50aWxlIGVzdGltYXRpb24gd2l0aCB3ZWlnaHRlZCBzYW1wbGVzCisgICAgLyoqCisgICAgICAgIEBicmllZiBTaW5nbGUgcXVhbnRpbGUgZXN0aW1hdGlvbiB3aXRoIHRoZSBcZiRQXjJcZiQgYWxnb3JpdGhtIGZvciB3ZWlnaHRlZCBzYW1wbGVzCisKKyAgICAgICAgVGhpcyB2ZXJzaW9uIG9mIHRoZSBcZiRQXjJcZiQgYWxnb3JpdGhtIGV4dGVuZHMgdGhlIFxmJFBeMlxmJCBhbGdvcml0aG0gdG8gc3VwcG9ydCB3ZWlnaHRlZCBzYW1wbGVzLgorICAgICAgICBUaGUgXGYkUF4yXGYkIGFsZ29yaXRobSBlc3RpbWF0ZXMgYSBxdWFudGlsZSBkeW5hbWljYWxseSB3aXRob3V0IHN0b3Jpbmcgc2FtcGxlcy4gSW5zdGVhZCBvZgorICAgICAgICBzdG9yaW5nIHRoZSB3aG9sZSBzYW1wbGUgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24sIG9ubHkgZml2ZSBwb2ludHMgKG1hcmtlcnMpIGFyZSBzdG9yZWQuIFRoZSBoZWlnaHRzCisgICAgICAgIG9mIHRoZXNlIG1hcmtlcnMgYXJlIHRoZSBtaW5pbXVtIGFuZCB0aGUgbWF4aW11bSBvZiB0aGUgc2FtcGxlcyBhbmQgdGhlIGN1cnJlbnQgZXN0aW1hdGVzIG9mIHRoZQorICAgICAgICBcZiQocC8yKVxmJC0sIFxmJHBcZiQgLSBhbmQgXGYkKDErcCkvMlxmJCAtcXVhbnRpbGVzLiBUaGVpciBwb3NpdGlvbnMgYXJlIGVxdWFsIHRvIHRoZSBudW1iZXIKKyAgICAgICAgb2Ygc2FtcGxlcyB0aGF0IGFyZSBzbWFsbGVyIG9yIGVxdWFsIHRvIHRoZSBtYXJrZXJzLiBFYWNoIHRpbWUgYSBuZXcgc2FtcGxlIGlzIGFkZGVkLCB0aGUKKyAgICAgICAgcG9zaXRpb25zIG9mIHRoZSBtYXJrZXJzIGFyZSB1cGRhdGVkIGFuZCBpZiBuZWNlc3NhcnkgdGhlaXIgaGVpZ2h0cyBhcmUgYWRqdXN0ZWQgdXNpbmcgYSBwaWVjZXdpc2UtCisgICAgICAgIHBhcmFib2xpYyBmb3JtdWxhLgorCisgICAgICAgIEZvciBmdXJ0aGVyIGRldGFpbHMsIHNlZQorCisgICAgICAgIFIuIEphaW4gYW5kIEkuIENobGFtdGFjLCBUaGUgUF4yIGFsZ29yaXRobSBmb3IgZHluYW1pYyBjYWxjdWxhdGlvbiBvZiBxdWFudGlsZXMgYW5kCisgICAgICAgIGhpc3RvZ3JhbXMgd2l0aG91dCBzdG9yaW5nIG9ic2VydmF0aW9ucywgQ29tbXVuaWNhdGlvbnMgb2YgdGhlIEFDTSwKKyAgICAgICAgVm9sdW1lIDI4IChPY3RvYmVyKSwgTnVtYmVyIDEwLCAxOTg1LCBwLiAxMDc2LTEwODUuCisKKyAgICAgICAgQHBhcmFtIHF1YW50aWxlX3Byb2JhYmlsaXR5CisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgSW1wbD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBhcnJheTxmbG9hdF90eXBlLCA1PiBhcnJheV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGZsb2F0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogcChpc19zYW1lPEltcGwsIGZvcl9tZWRpYW4+Ojp2YWx1ZSA/IDAuNSA6IGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHkgfCAwLjVdKQorICAgICAgICAgICwgaGVpZ2h0cygpCisgICAgICAgICAgLCBhY3R1YWxfcG9zaXRpb25zKCkKKyAgICAgICAgICAsIGRlc2lyZWRfcG9zaXRpb25zKCkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgLy8gYWNjdW11bGF0ZSA1IGZpcnN0IHNhbXBsZXMKKyAgICAgICAgICAgIGlmIChjbnQgPD0gNSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2NudCAtIDFdID0gYXJnc1tzYW1wbGVdOworCisgICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBpbml0aWFsaXphdGlvbiBwaGFzZSwgYWN0dWFsX3Bvc2l0aW9ucyBzdG9yZXMgdGhlIHdlaWdodHMgb2YgdGhlCisgICAgICAgICAgICAgICAgLy8gaW5pdGlhbCBzYW1wbGVzIHRoYXQgYXJlIG5lZWRlZCBhdCB0aGUgZW5kIG9mIHRoZSBpbml0aWFsaXphdGlvbiBwaGFzZSB0bworICAgICAgICAgICAgICAgIC8vIGNvbXB1dGUgdGhlIGNvcnJlY3QgaW5pdGlhbCBwb3NpdGlvbnMgb2YgdGhlIG1hcmtlcnMuCisgICAgICAgICAgICAgICAgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tjbnQgLSAxXSA9IGFyZ3Nbd2VpZ2h0XTsKKworICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRlIHRoZSBpbml0aWFsaXphdGlvbiBvZiBoZWlnaHRzIGFuZCBhY3R1YWxfcG9zaXRpb25zIGJ5IHNvcnRpbmcKKyAgICAgICAgICAgICAgICBpZiAoY250ID09IDUpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB3ZSBuZWVkIHRvIHNvcnQgdGhlIGluaXRpYWwgc2FtcGxlcyAoaW4gaGVpZ2h0cykgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZAorICAgICAgICAgICAgICAgICAgICAvLyBzb3J0IHRoZWlyIHdlaWdodHMgKGluIGFjdHVhbF9wb3NpdGlvbnMpIHRoZSBzYW1lIHdheS4gVGhlIGZvbGxvd2luZyBsaW5lcyBkbworICAgICAgICAgICAgICAgICAgICAvLyBpdCwgYnV0IHRoZXJlIG11c3QgYmUgYSBiZXR0ZXIgYW5kIG1vcmUgZWZmaWNpZW50IHdheSBvZiBkb2luZyB0aGlzLgorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBhcnJheV90eXBlOjppdGVyYXRvciBpdF9iZWdpbiwgaXRfZW5kLCBpdF9taW47CisKKyAgICAgICAgICAgICAgICAgICAgaXRfYmVnaW4gPSB0aGlzLT5oZWlnaHRzLmJlZ2luKCk7CisgICAgICAgICAgICAgICAgICAgIGl0X2VuZCAgID0gdGhpcy0+aGVpZ2h0cy5lbmQoKTsKKworICAgICAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBwb3MgPSAwOworCisgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpdF9iZWdpbiAhPSBpdF9lbmQpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGl0X21pbiA9IHN0ZDo6bWluX2VsZW1lbnQoaXRfYmVnaW4sIGl0X2VuZCk7CisgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBkID0gc3RkOjpkaXN0YW5jZShpdF9iZWdpbiwgaXRfbWluKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6c3dhcCgqaXRfYmVnaW4sICppdF9taW4pOworICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzd2FwKHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbcG9zXSwgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1twb3MgKyBkXSk7CisgICAgICAgICAgICAgICAgICAgICAgICArK2l0X2JlZ2luOworICAgICAgICAgICAgICAgICAgICAgICAgKytwb3M7CisgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgY29ycmVjdCBpbml0aWFsIGFjdHVhbCBwb3NpdGlvbnMKKyAgICAgICAgICAgICAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IDU7ICsraSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXSArPSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2kgLSAxXTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBzYW1wbGVfY2VsbCA9IDE7IC8vIGsKKworICAgICAgICAgICAgICAgIC8vIGZpbmQgY2VsbCBrIHN1Y2ggdGhhdCBoZWlnaHRzW2stMV0gPD0gYXJnc1tzYW1wbGVdIDwgaGVpZ2h0c1trXSBhbmQgYWRqdXN0IGV4dHJlbWUgdmFsdWVzCisgICAgICAgICAgICAgICAgaWYgKGFyZ3Nbc2FtcGxlXSA8IHRoaXMtPmhlaWdodHNbMF0pCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzWzBdID0gYXJnc1tzYW1wbGVdOworICAgICAgICAgICAgICAgICAgICB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdID0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgICAgICAgICBzYW1wbGVfY2VsbCA9IDE7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMtPmhlaWdodHNbNF0gPD0gYXJnc1tzYW1wbGVdKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1s0XSA9IGFyZ3Nbc2FtcGxlXTsKKyAgICAgICAgICAgICAgICAgICAgc2FtcGxlX2NlbGwgPSA0OworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yIGl0ZXJhdG9yOworICAgICAgICAgICAgICAgICAgICBpdGVyYXRvciBpdCA9IHN0ZDo6dXBwZXJfYm91bmQoCisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIHRoaXMtPmhlaWdodHMuZW5kKCkKKyAgICAgICAgICAgICAgICAgICAgICAsIGFyZ3Nbc2FtcGxlXQorICAgICAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9jZWxsID0gc3RkOjpkaXN0YW5jZSh0aGlzLT5oZWlnaHRzLmJlZ2luKCksIGl0KTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBpbmNyZW1lbnQgcG9zaXRpb25zIG9mIG1hcmtlcnMgYWJvdmUgc2FtcGxlX2NlbGwKKyAgICAgICAgICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSBzYW1wbGVfY2VsbDsgaSA8IDU7ICsraSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbaV0gKz0gYXJnc1t3ZWlnaHRdOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBkZXNpcmVkIHBvc2l0aW9ucyBmb3IgYWxsIG1hcmtlcnMKKyAgICAgICAgICAgICAgICB0aGlzLT5kZXNpcmVkX3Bvc2l0aW9uc1swXSA9IHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF07CisgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbMV0gPSAoc3VtX29mX3dlaWdodHMoYXJncykgLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogdGhpcy0+cC8yLiArIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF07CisgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbMl0gPSAoc3VtX29mX3dlaWdodHMoYXJncykgLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogdGhpcy0+cCArIHRoaXMtPmFjdHVhbF9wb3NpdGlvbnNbMF07CisgICAgICAgICAgICAgICAgdGhpcy0+ZGVzaXJlZF9wb3NpdGlvbnNbM10gPSAoc3VtX29mX3dlaWdodHMoYXJncykgLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKDEuICsgdGhpcy0+cCkvMi4gKyB0aGlzLT5hY3R1YWxfcG9zaXRpb25zWzBdOworICAgICAgICAgICAgICAgIHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zWzRdID0gc3VtX29mX3dlaWdodHMoYXJncyk7CisKKyAgICAgICAgICAgICAgICAvLyBhZGp1c3QgaGVpZ2h0IGFuZCBhY3R1YWwgcG9zaXRpb25zIG9mIG1hcmtlcnMgMSB0byAzIGlmIG5lY2Vzc2FyeQorICAgICAgICAgICAgICAgIGZvciAoc3RkOjpzaXplX3QgaSA9IDE7IGkgPD0gMzsgKytpKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvIGRlc2lyZWQgcG9zaXRpb25zCisgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgZCA9IHRoaXMtPmRlc2lyZWRfcG9zaXRpb25zW2ldIC0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpXTsKKworICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gbmV4dCBwb3NpdGlvbgorICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGRwID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpICsgMV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldCB0byBwcmV2aW91cyBwb3NpdGlvbgorICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGRtID0gdGhpcy0+YWN0dWFsX3Bvc2l0aW9uc1tpIC0gMV0gLSB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldOworCisgICAgICAgICAgICAgICAgICAgIC8vIGhlaWdodCBkcworICAgICAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGhwID0gKHRoaXMtPmhlaWdodHNbaSArIDFdIC0gdGhpcy0+aGVpZ2h0c1tpXSkgLyBkcDsKKyAgICAgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBobSA9ICh0aGlzLT5oZWlnaHRzW2kgLSAxXSAtIHRoaXMtPmhlaWdodHNbaV0pIC8gZG07CisKKyAgICAgICAgICAgICAgICAgICAgaWYgKCAoIGQgPj0gMS4gJiYgZHAgPiAxLiApIHx8ICggZCA8PSAtMS4gJiYgZG0gPCAtMS4gKSApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0IHNpZ25fZCA9IHN0YXRpY19jYXN0PHNob3J0PihkIC8gc3RkOjphYnMoZCkpOworCisgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnkgYWRqdXN0aW5nIGhlaWdodHNbaV0gdXNpbmcgcC1zcXVhcmVkIGZvcm11bGEKKyAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgaCA9IHRoaXMtPmhlaWdodHNbaV0gKyBzaWduX2QgLyAoZHAgLSBkbSkgKiAoIChzaWduX2QgLSBkbSkgKiBocCArIChkcCAtIHNpZ25fZCkgKiBobSApOworCisgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMtPmhlaWdodHNbaSAtIDFdIDwgaCAmJiBoIDwgdGhpcy0+aGVpZ2h0c1tpICsgMV0gKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMtPmhlaWdodHNbaV0gPSBoOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBsaW5lYXIgZm9ybXVsYQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkPjApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5oZWlnaHRzW2ldICs9IGhwOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZDwwKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy0+aGVpZ2h0c1tpXSAtPSBobTsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT5hY3R1YWxfcG9zaXRpb25zW2ldICs9IHNpZ25fZDsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgfQorCisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChkb250X2NhcmUpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5oZWlnaHRzWzJdOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICBmbG9hdF90eXBlIHA7ICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcXVhbnRpbGUgcHJvYmFiaWxpdHkgcAorICAgICAgICBhcnJheV90eXBlIGhlaWdodHM7ICAgICAgICAgICAgICAvLyBxX2kKKyAgICAgICAgYXJyYXlfdHlwZSBhY3R1YWxfcG9zaXRpb25zOyAgICAgLy8gbl9pCisgICAgICAgIGFycmF5X3R5cGUgZGVzaXJlZF9wb3NpdGlvbnM7ICAgIC8vIG4nX2kKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6d2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGUKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHdlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIHN1bV9vZl93ZWlnaHRzPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgcmVndWxhcj4gaW1wbDsKKyAgICB9OworICAgIHN0cnVjdCB3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZV9mb3JfbWVkaWFuCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIHN1bV9vZl93ZWlnaHRzPgorICAgIHsKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgZm9yX21lZGlhbj4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZQorLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbgorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGU+IGNvbnN0IHdlaWdodGVkX3Bfc3F1YXJlX3F1YW50aWxlID0ge307CisgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbj4gY29uc3Qgd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbiA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGUpCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbikKK30KKwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGU7Cit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZV9mb3JfbWVkaWFuOworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZC5ocHAKQEAgLTAsMCArMSwyODkgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBEYW5pZWwgRWdsb2ZmLCBPbGl2aWVyIEd5Z2kuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BFQUtTX09WRVJfVEhSRVNIT0xEX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1BFQUtTX09WRVJfVEhSRVNIT0xEX0hQUF9ERV8wMV8wMV8yMDA2CisKKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPG51bWVyaWM+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxib29zdC90aHJvd19leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC90dXBsZS90dXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BlYWtzX292ZXJfdGhyZXNob2xkLmhwcD4gLy8gZm9yIG5hbWVkIHBhcmFtZXRlcnMgcG90X3RocmVzaG9sZF92YWx1ZSBhbmQgcG90X3RocmVzaG9sZF9wcm9iYWJpbGl0eQorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdGFpbF92YXJpYXRlLmhwcD4KKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjIHByYWdtYSB3YXJuaW5nKGRpc2FibGU6IDQxMjcpIC8vIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbAorICAgIC8vICB3b3JrcyB3aXRoIGFuIGV4cGxpY2l0IHRocmVzaG9sZCB2YWx1ZSBhbmQgZG9lcyBub3QgZGVwZW5kIG9uIG9yZGVyIHN0YXRpc3RpY3Mgb2Ygd2VpZ2h0ZWQgc2FtcGxlcworICAgIC8qKgorICAgICAgICBAYnJpZWYgV2VpZ2h0ZWQgUGVha3Mgb3ZlciBUaHJlc2hvbGQgTWV0aG9kIGZvciBXZWlnaHRlZCBRdWFudGlsZSBhbmQgV2VpZ2h0ZWQgVGFpbCBNZWFuIEVzdGltYXRpb24KKworICAgICAgICBAc2EgcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbAorCisgICAgICAgIEBwYXJhbSBxdWFudGlsZV9wcm9iYWJpbGl0eQorICAgICAgICBAcGFyYW0gcG90X3RocmVzaG9sZF92YWx1ZQorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8V2VpZ2h0LCBTYW1wbGU+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIHN0ZDo6c2l6ZV90Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiBib29zdDo6dHVwbGU8ZmxvYXRfdHlwZSwgZmxvYXRfdHlwZSwgZmxvYXRfdHlwZT4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogc2lnbl8oKGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUpID8gLTEgOiAxKQorICAgICAgICAgICwgbXVfKHNpZ25fICogbnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSwgKHN0ZDo6c2l6ZV90KTEpKQorICAgICAgICAgICwgc2lnbWEyXyhudW1lcmljOjpmZGl2KGFyZ3Nbc2FtcGxlIHwgU2FtcGxlKCldLCAoc3RkOjpzaXplX3QpMSkpCisgICAgICAgICAgLCB3X3N1bV8obnVtZXJpYzo6ZmRpdihhcmdzW3dlaWdodCB8IFdlaWdodCgpXSwgKHN0ZDo6c2l6ZV90KTEpKQorICAgICAgICAgICwgdGhyZXNob2xkXyhzaWduXyAqIGFyZ3NbcG90X3RocmVzaG9sZF92YWx1ZV0pCisgICAgICAgICAgLCBmaXRfcGFyYW1ldGVyc18oYm9vc3Q6Om1ha2VfdHVwbGUoMC4sIDAuLCAwLikpCisgICAgICAgICAgLCBpc19kaXJ0eV8odHJ1ZSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eV8gPSB0cnVlOworCisgICAgICAgICAgICBpZiAodGhpcy0+c2lnbl8gKiBhcmdzW3NhbXBsZV0gPiB0aGlzLT50aHJlc2hvbGRfKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPm11XyArPSBhcmdzW3dlaWdodF0gKiBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgdGhpcy0+c2lnbWEyXyArPSBhcmdzW3dlaWdodF0gKiBhcmdzW3NhbXBsZV0gKiBhcmdzW3NhbXBsZV07CisgICAgICAgICAgICAgICAgdGhpcy0+d19zdW1fICs9IGFyZ3Nbd2VpZ2h0XTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICBpZiAodGhpcy0+aXNfZGlydHlfKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRoaXMtPmlzX2RpcnR5XyA9IGZhbHNlOworCisgICAgICAgICAgICAgICAgdGhpcy0+bXVfID0gdGhpcy0+c2lnbl8gKiBudW1lcmljOjpmZGl2KHRoaXMtPm11XywgdGhpcy0+d19zdW1fKTsKKyAgICAgICAgICAgICAgICB0aGlzLT5zaWdtYTJfID0gbnVtZXJpYzo6ZmRpdih0aGlzLT5zaWdtYTJfLCB0aGlzLT53X3N1bV8pOworICAgICAgICAgICAgICAgIHRoaXMtPnNpZ21hMl8gLT0gdGhpcy0+bXVfICogdGhpcy0+bXVfOworCisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSB0aHJlc2hvbGRfcHJvYmFiaWxpdHkgPSBudW1lcmljOjpmZGl2KHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gdGhpcy0+d19zdW1fLCBzdW1fb2Zfd2VpZ2h0cyhhcmdzKSk7CisKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHRtcCA9IG51bWVyaWM6OmZkaXYoKCB0aGlzLT5tdV8gLSB0aGlzLT50aHJlc2hvbGRfICkqKCB0aGlzLT5tdV8gLSB0aGlzLT50aHJlc2hvbGRfICksIHRoaXMtPnNpZ21hMl8pOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgeGlfaGF0ID0gMC41ICogKCAxLiAtIHRtcCApOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYmV0YV9oYXQgPSAwLjUgKiAoIHRoaXMtPm11XyAtIHRoaXMtPnRocmVzaG9sZF8gKSAqICggMS4gKyB0bXAgKTsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIGJldGFfYmFyID0gYmV0YV9oYXQgKiBzdGQ6OnBvdygxLiAtIHRocmVzaG9sZF9wcm9iYWJpbGl0eSwgeGlfaGF0KTsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHVfYmFyID0gdGhpcy0+dGhyZXNob2xkXyAtIGJldGFfYmFyICogKCBzdGQ6OnBvdygxLiAtIHRocmVzaG9sZF9wcm9iYWJpbGl0eSwgLXhpX2hhdCkgLSAxLikveGlfaGF0OworICAgICAgICAgICAgICAgIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXyA9IGJvb3N0OjptYWtlX3R1cGxlKHVfYmFyLCBiZXRhX2JhciwgeGlfaGF0KTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXzsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgc2hvcnQgc2lnbl87ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBsZWZ0IHRhaWwgZml0dGluZywgbWlycm9yIHRoZSBleHRyZW1lIHZhbHVlcworICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgbXVfOyAgICAgICAgICAgICAgLy8gbWVhbiBvZiBzYW1wbGVzIGFib3ZlIHRocmVzaG9sZAorICAgICAgICBtdXRhYmxlIGZsb2F0X3R5cGUgc2lnbWEyXzsgICAgICAgICAgLy8gdmFyaWFuY2Ugb2Ygc2FtcGxlcyBhYm92ZSB0aHJlc2hvbGQKKyAgICAgICAgbXV0YWJsZSBmbG9hdF90eXBlIHdfc3VtXzsgICAgICAgICAgIC8vIHN1bSBvZiB3ZWlnaHRzIG9mIHNhbXBsZXMgYWJvdmUgdGhyZXNob2xkCisgICAgICAgIGZsb2F0X3R5cGUgdGhyZXNob2xkXzsKKyAgICAgICAgbXV0YWJsZSByZXN1bHRfdHlwZSBmaXRfcGFyYW1ldGVyc187IC8vIGJvb3N0Ojp0dXBsZSB0aGF0IHN0b3JlcyBmaXQgcGFyYW1ldGVycworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHlfOworICAgIH07CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYl9pbXBsCisgICAgLy8gIGRldGVybWluZXMgdGhyZXNob2xkIGZyb20gYSBnaXZlbiB0aHJlc2hvbGQgcHJvYmFiaWxpdHkgdXNpbmcgb3JkZXIgc3RhdGlzdGljcworICAgIC8qKgorICAgICAgICBAYnJpZWYgUGVha3Mgb3ZlciBUaHJlc2hvbGQgTWV0aG9kIGZvciBRdWFudGlsZSBhbmQgVGFpbCBNZWFuIEVzdGltYXRpb24KKworICAgICAgICBAc2Egd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbAorCisgICAgICAgIEBwYXJhbSBxdWFudGlsZV9wcm9iYWJpbGl0eQorICAgICAgICBAcGFyYW0gcG90X3RocmVzaG9sZF9wcm9iYWJpbGl0eQorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxXZWlnaHQsIFNhbXBsZT46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PHdlaWdodGVkX3NhbXBsZSwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGJvb3N0Ojp0dXBsZTxmbG9hdF90eXBlLCBmbG9hdF90eXBlLCBmbG9hdF90eXBlPiByZXN1bHRfdHlwZTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBBcmdzPgorICAgICAgICB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHNpZ25fKChpc19zYW1lPExlZnRSaWdodCwgbGVmdD46OnZhbHVlKSA/IC0xIDogMSkKKyAgICAgICAgICAsIG11XyhzaWduXyAqIG51bWVyaWM6OmZkaXYoYXJnc1tzYW1wbGUgfCBTYW1wbGUoKV0sIChzdGQ6OnNpemVfdCkxKSkKKyAgICAgICAgICAsIHNpZ21hMl8obnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSwgKHN0ZDo6c2l6ZV90KTEpKQorICAgICAgICAgICwgdGhyZXNob2xkX3Byb2JhYmlsaXR5XyhhcmdzW3BvdF90aHJlc2hvbGRfcHJvYmFiaWxpdHldKQorICAgICAgICAgICwgZml0X3BhcmFtZXRlcnNfKGJvb3N0OjptYWtlX3R1cGxlKDAuLCAwLiwgMC4pKQorICAgICAgICAgICwgaXNfZGlydHlfKHRydWUpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoZG9udF9jYXJlKQorICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5pc19kaXJ0eV8gPSB0cnVlOworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGlmICh0aGlzLT5pc19kaXJ0eV8pCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdGhpcy0+aXNfZGlydHlfID0gZmFsc2U7CisKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHRocmVzaG9sZCA9IHN1bV9vZl93ZWlnaHRzKGFyZ3MpCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKCAoIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgKSA/IHRoaXMtPnRocmVzaG9sZF9wcm9iYWJpbGl0eV8gOiAxLiAtIHRoaXMtPnRocmVzaG9sZF9wcm9iYWJpbGl0eV8gKTsKKworICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSAwOworICAgICAgICAgICAgICAgIFdlaWdodCBzdW0gPSBXZWlnaHQoMCk7CisKKyAgICAgICAgICAgICAgICB3aGlsZSAoc3VtIDwgdGhyZXNob2xkKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKG4gPCBzdGF0aWNfY2FzdDxzdGQ6OnNpemVfdD4odGFpbF93ZWlnaHRzKGFyZ3MpLnNpemUoKSkpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIG11XyArPSAqKHRhaWxfd2VpZ2h0cyhhcmdzKS5iZWdpbigpICsgbikgKiAqKHRhaWwoYXJncykuYmVnaW4oKSArIG4pOworICAgICAgICAgICAgICAgICAgICAgICAgc2lnbWEyXyArPSAqKHRhaWxfd2VpZ2h0cyhhcmdzKS5iZWdpbigpICsgbikgKiAqKHRhaWwoYXJncykuYmVnaW4oKSArIG4pICogKCoodGFpbChhcmdzKS5iZWdpbigpICsgbikpOworICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9ICoodGFpbF93ZWlnaHRzKGFyZ3MpLmJlZ2luKCkgKyBuKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIG4rKzsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGQ6Om51bWVyaWNfbGltaXRzPGZsb2F0X3R5cGU+OjpoYXNfcXVpZXRfTmFOKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBib29zdDo6bWFrZV90dXBsZSgKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpudW1lcmljX2xpbWl0czxmbG9hdF90eXBlPjo6cXVpZXRfTmFOKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc3RkOjpudW1lcmljX2xpbWl0czxmbG9hdF90eXBlPjo6cXVpZXRfTmFOKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc3RkOjpudW1lcmljX2xpbWl0czxmbG9hdF90eXBlPjo6cXVpZXRfTmFOKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICApOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6b3N0cmluZ3N0cmVhbSBtc2c7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnIDw8ICJpbmRleCBuID0gIiA8PCBuIDw8ICIgaXMgbm90IGluIHZhbGlkIHJhbmdlIFswLCAiIDw8IHRhaWwoYXJncykuc2l6ZSgpIDw8ICIpIjsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9vc3Q6Om1ha2VfdHVwbGUoU2FtcGxlKDApLCBTYW1wbGUoMCksIFNhbXBsZSgwKSk7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHUgPSAqKHRhaWwoYXJncykuYmVnaW4oKSArIG4gLSAxKSAqIHRoaXMtPnNpZ25fOworCisKKyAgICAgICAgICAgICAgICB0aGlzLT5tdV8gPSB0aGlzLT5zaWduXyAqIG51bWVyaWM6OmZkaXYodGhpcy0+bXVfLCBzdW0pOworICAgICAgICAgICAgICAgIHRoaXMtPnNpZ21hMl8gPSBudW1lcmljOjpmZGl2KHRoaXMtPnNpZ21hMl8sIHN1bSk7CisgICAgICAgICAgICAgICAgdGhpcy0+c2lnbWEyXyAtPSB0aGlzLT5tdV8gKiB0aGlzLT5tdV87CisKKyAgICAgICAgICAgICAgICBpZiAoaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSkKKyAgICAgICAgICAgICAgICAgICAgdGhpcy0+dGhyZXNob2xkX3Byb2JhYmlsaXR5XyA9IDEuIC0gdGhpcy0+dGhyZXNob2xkX3Byb2JhYmlsaXR5XzsKKworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgdG1wID0gbnVtZXJpYzo6ZmRpdigoIHRoaXMtPm11XyAtIHUgKSooIHRoaXMtPm11XyAtIHUgKSwgdGhpcy0+c2lnbWEyXyk7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSB4aV9oYXQgPSAwLjUgKiAoIDEuIC0gdG1wICk7CisgICAgICAgICAgICAgICAgZmxvYXRfdHlwZSBiZXRhX2hhdCA9IDAuNSAqICggdGhpcy0+bXVfIC0gdSApICogKCAxLiArIHRtcCApOworICAgICAgICAgICAgICAgIGZsb2F0X3R5cGUgYmV0YV9iYXIgPSBiZXRhX2hhdCAqIHN0ZDo6cG93KDEuIC0gdGhyZXNob2xkX3Byb2JhYmlsaXR5XywgeGlfaGF0KTsKKyAgICAgICAgICAgICAgICBmbG9hdF90eXBlIHVfYmFyID0gdSAtIGJldGFfYmFyICogKCBzdGQ6OnBvdygxLiAtIHRocmVzaG9sZF9wcm9iYWJpbGl0eV8sIC14aV9oYXQpIC0gMS4pL3hpX2hhdDsKKyAgICAgICAgICAgICAgICB0aGlzLT5maXRfcGFyYW1ldGVyc18gPSBib29zdDo6bWFrZV90dXBsZSh1X2JhciwgYmV0YV9iYXIsIHhpX2hhdCk7CisKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmZpdF9wYXJhbWV0ZXJzXzsKKyAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKyAgICAgICAgc2hvcnQgc2lnbl87ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgbGVmdCB0YWlsIGZpdHRpbmcsIG1pcnJvciB0aGUgZXh0cmVtZSB2YWx1ZXMKKyAgICAgICAgbXV0YWJsZSBmbG9hdF90eXBlIG11XzsgICAgICAgICAgICAgICAgICAgICAvLyBtZWFuIG9mIHNhbXBsZXMgYWJvdmUgdGhyZXNob2xkIHUKKyAgICAgICAgbXV0YWJsZSBmbG9hdF90eXBlIHNpZ21hMl87ICAgICAgICAgICAgICAgICAvLyB2YXJpYW5jZSBvZiBzYW1wbGVzIGFib3ZlIHRocmVzaG9sZCB1CisgICAgICAgIG11dGFibGUgZmxvYXRfdHlwZSB0aHJlc2hvbGRfcHJvYmFiaWxpdHlfOworICAgICAgICBtdXRhYmxlIHJlc3VsdF90eXBlIGZpdF9wYXJhbWV0ZXJzXzsgICAgICAgIC8vIGJvb3N0Ojp0dXBsZSB0aGF0IHN0b3JlcyBmaXQgcGFyYW1ldGVycworICAgICAgICBtdXRhYmxlIGJvb2wgaXNfZGlydHlfOworICAgIH07CisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZAorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkCisgICAgICA6IGRlcGVuZHNfb248c3VtX29mX3dlaWdodHM+CisgICAgICAsIHBvdF90aHJlc2hvbGRfdmFsdWUKKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iCisgICAgICA6IGRlcGVuZHNfb248c3VtX29mX3dlaWdodHMsIHRhaWxfd2VpZ2h0czxMZWZ0UmlnaHQ+ID4KKyAgICAgICwgcG90X3RocmVzaG9sZF9wcm9iYWJpbGl0eQorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkX3Byb2JfaW1wbDxtcGw6Ol8xLCBtcGw6Ol8yLCBMZWZ0UmlnaHQ+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X3BlYWtzX292ZXJfdGhyZXNob2xkPiBjb25zdCB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZCA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQpCit9CisKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkOworCisvLyB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3ZhbHVlKSAtPiB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+Cit0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkPExlZnRSaWdodD4od2l0aF90aHJlc2hvbGRfdmFsdWUpPgoreworICAgIHR5cGVkZWYgdGFnOjp3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+IHR5cGU7Cit9OworCisvLyB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDxMZWZ0UmlnaHQ+KHdpdGhfdGhyZXNob2xkX3Byb2JhYmlsaXR5KSAtPiB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iPExlZnRSaWdodD4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KK3N0cnVjdCBhc19mZWF0dXJlPHRhZzo6d2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGQ8TGVmdFJpZ2h0Pih3aXRoX3RocmVzaG9sZF9wcm9iYWJpbGl0eSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkX3Byb2I8TGVmdFJpZ2h0PiB0eXBlOworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9za2V3bmVzcy5ocHAKQEAgLTAsMCArMSwxMDEgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX3NrZXduZXNzLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNiBPbGl2aWVyIEd5Z2ksIERhbmllbCBFZ2xvZmYuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1NLRVdORVNTX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9TS0VXTkVTU19IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGxpbWl0cz4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbW9tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9tZWFuLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3ZWlnaHRlZF9za2V3bmVzc19pbXBsCisgICAgLyoqCisgICAgICAgIEBicmllZiBTa2V3bmVzcyBlc3RpbWF0aW9uIGZvciB3ZWlnaHRlZCBzYW1wbGVzCisKKyAgICAgICAgVGhlIHNrZXduZXNzIG9mIGEgc2FtcGxlIGRpc3RyaWJ1dGlvbiBpcyBkZWZpbmVkIGFzIHRoZSByYXRpbyBvZiB0aGUgM3JkIGNlbnRyYWwgbW9tZW50IGFuZCB0aGUgXGYkIDMvMiBcZiQtdGggcG93ZXIgJAorICAgICAgICBvZiB0aGUgMm5kIGNlbnRyYWwgbW9tZW50ICh0aGUgdmFyaWFuY2UpIG9mIHRoZSBzYW1wbGVzLiBUaGUgc2tld25lc3MgY2FuIGFsc28gYmUgZXhwcmVzc2VkIGJ5IHRoZSBzaW1wbGUgbW9tZW50czoKKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFxoYXR7Z31fMSA9CisgICAgICAgICAgICAgICAgXGZyYWMKKyAgICAgICAgICAgICAgICB7XHdpZGVoYXR7bX1fbl57KDMpfS0zXHdpZGVoYXR7bX1fbl57KDIpfVxoYXR7XG11fV9uKzJcaGF0e1xtdX1fbl4zfQorICAgICAgICAgICAgICAgIHtcbGVmdChcd2lkZWhhdHttfV9uXnsoMil9IC0gXGhhdHtcbXV9X25eezJ9XHJpZ2h0KV57My8yfX0KKyAgICAgICAgXGZdCisKKyAgICAgICAgd2hlcmUgXGYkIFx3aWRlaGF0e219X25eeyhpKX0gXGYkIGFyZSB0aGUgXGYkIGkgXGYkLXRoIG1vbWVudCBhbmQgXGYkIFxoYXR7XG11fV9uIFxmJCB0aGUgbWVhbiAoZmlyc3QgbW9tZW50KSBvZiB0aGUKKyAgICAgICAgXGYkIG4gXGYkIHNhbXBsZXMuCisKKyAgICAgICAgVGhlIHNrZXduZXNzIGVzdGltYXRvciBmb3Igd2VpZ2h0ZWQgc2FtcGxlcyBpcyBmb3JtYWxseSBpZGVudGljYWwgdG8gdGhlIGVzdGltYXRvciBmb3IgdW53ZWlnaHRlZCBzYW1wbGVzLCBleGNlcHQgdGhhdAorICAgICAgICB0aGUgd2VpZ2h0ZWQgY291bnRlcnBhcnRzIG9mIGFsbCBtZWFzdXJlcyBpdCBkZXBlbmRzIG9uIGFyZSB0byBiZSB0YWtlbi4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9za2V3bmVzc19pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxTYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PHdlaWdodGVkX3NhbXBsZSwgd2VpZ2h0ZWRfc2FtcGxlPjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgd2VpZ2h0ZWRfc2tld25lc3NfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBudW1lcmljOjpmZGl2KAorICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3JzOjp3ZWlnaHRlZF9tb21lbnQ8Mz4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgIC0gMy4gKiBhY2N1bXVsYXRvcnM6OndlaWdodGVkX21vbWVudDwyPihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgICsgMi4gKiB3ZWlnaHRlZF9tZWFuKGFyZ3MpICogd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAsICggYWNjdW11bGF0b3JzOjp3ZWlnaHRlZF9tb21lbnQ8Mj4oYXJncykgLSB3ZWlnaHRlZF9tZWFuKGFyZ3MpICogd2VpZ2h0ZWRfbWVhbihhcmdzKSApCisgICAgICAgICAgICAgICAgICAgICAgKiBzdGQ6OnNxcnQoIGFjY3VtdWxhdG9yczo6d2VpZ2h0ZWRfbW9tZW50PDI+KGFyZ3MpIC0gd2VpZ2h0ZWRfbWVhbihhcmdzKSAqIHdlaWdodGVkX21lYW4oYXJncykgKQorICAgICAgICAgICAgICAgICAgICk7CisgICAgICAgIH0KKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6d2VpZ2h0ZWRfc2tld25lc3MKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHdlaWdodGVkX3NrZXduZXNzCisgICAgICA6IGRlcGVuZHNfb248d2VpZ2h0ZWRfbWVhbiwgd2VpZ2h0ZWRfbW9tZW50PDI+LCB3ZWlnaHRlZF9tb21lbnQ8Mz4gPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9za2V3bmVzc19pbXBsPG1wbDo6XzEsIG1wbDo6XzI+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfc2tld25lc3MKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OndlaWdodGVkX3NrZXduZXNzPiBjb25zdCB3ZWlnaHRlZF9za2V3bmVzcyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfc2tld25lc3MpCit9CisKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX3NrZXduZXNzOworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF9zdW0uaHBwCkBAIC0wLDAgKzEsMTE2IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB3ZWlnaHRlZF9zdW0uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IEVyaWMgTmllYmxlciwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9TVU1fSFBQX0VBTl8yOF8xMF8yMDA1CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1NVTV9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy93ZWlnaHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JzL2V4dGVybmFsX2FjY3VtdWxhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2RlcGVuZHNfb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzX2Z3ZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfc3VtX2ltcGwKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9zdW1faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB3ZWlnaHRlZF9zYW1wbGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfc3VtX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHdlaWdodGVkX3N1bV8oCisgICAgICAgICAgICAgICAgYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCkgfCBTYW1wbGUoKV0KKyAgICAgICAgICAgICAgICAgICogbnVtZXJpYzo6b25lPFdlaWdodD46OnZhbHVlCisgICAgICAgICAgICApCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHZvaWQgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgLy8gd2hhdCBhYm91dCBvdmVyZmxvdz8KKyAgICAgICAgICAgIHRoaXMtPndlaWdodGVkX3N1bV8gKz0gYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCldICogYXJnc1t3ZWlnaHRdOworICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPndlaWdodGVkX3N1bV87CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisKKyAgICAgICAgd2VpZ2h0ZWRfc2FtcGxlIHdlaWdodGVkX3N1bV87CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OndlaWdodGVkX3N1bQorLy8KK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfc3VtCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9zdW1faW1wbDxtcGw6Ol8xLCBtcGw6Ol8yLCB0YWc6OnNhbXBsZT4gaW1wbDsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX3N1bV9vZl92YXJpYXRlcworICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIC8vLyBJTlRFUk5BTCBPTkxZCisgICAgICAgIC8vLworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfc3VtX2ltcGw8VmFyaWF0ZVR5cGUsIG1wbDo6XzIsIFZhcmlhdGVUYWc+IGltcGw7CisgICAgfTsKKworICAgIHN0cnVjdCBhYnN0cmFjdF93ZWlnaHRlZF9zdW1fb2ZfdmFyaWF0ZXMKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgIH07Cit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OndlaWdodGVkX3N1bQorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6d2VpZ2h0ZWRfc3VtPiBjb25zdCB3ZWlnaHRlZF9zdW0gPSB7fTsKKyAgICBleHRyYWN0b3I8dGFnOjphYnN0cmFjdF93ZWlnaHRlZF9zdW1fb2ZfdmFyaWF0ZXM+IGNvbnN0IHdlaWdodGVkX3N1bV9vZl92YXJpYXRlcyA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfc3VtKQorICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdlaWdodGVkX3N1bV9vZl92YXJpYXRlcykKK30KKwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfc3VtOwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzOworCit0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KK3N0cnVjdCBmZWF0dXJlX29mPHRhZzo6d2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiA+CisgIDogZmVhdHVyZV9vZjx0YWc6OmFic3RyYWN0X3dlaWdodGVkX3N1bV9vZl92YXJpYXRlcz4KK3sKK307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3N1bV9rYWhhbi5ocHAKQEAgLTAsMCArMSwxMzggQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX3N1bV9rYWhhbi5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMTEgU2ltb24gV2VzdC4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfU1VNX0tBSEFOX0hQUF9FQU5fMTFfMDVfMjAxMQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9TVU1fS0FIQU5fSFBQX0VBTl8xMV8wNV8yMDExCisKKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9yX2Jhc2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZXh0cmFjdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvbnVtZXJpYy9mdW5jdGlvbmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvc2FtcGxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL3BhcmFtZXRlcnMvd2VpZ2h0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2FjY3VtdWxhdG9ycy9leHRlcm5hbF9hY2N1bXVsYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbnVtZXJpYy9jb252ZXJzaW9uL2Nhc3QuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisjaWYgX01TQ19WRVIgPiAxNDAwCisjIHByYWdtYSBmbG9hdF9jb250cm9sKHB1c2gpCisjIHByYWdtYSBmbG9hdF9jb250cm9sKHByZWNpc2UsIG9uKQorI2VuZGlmCisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gd2VpZ2h0ZWRfc3VtX2thaGFuX2ltcGwKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9zdW1fa2FoYW5faW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB3ZWlnaHRlZF9zYW1wbGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfc3VtX2thaGFuX2ltcGwoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgICA6IHdlaWdodGVkX3N1bV8oCisgICAgICAgICAgICAgICAgYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCkgfCBTYW1wbGUoKV0gKiBudW1lcmljOjpvbmU8V2VpZ2h0Pjo6dmFsdWUpLAorICAgICAgICAgICAgICAgIGNvbXBlbnNhdGlvbihib29zdDo6bnVtZXJpY19jYXN0PHdlaWdodGVkX3NhbXBsZT4oMC4wKSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCAKKyNpZiBCT09TVF9BQ0NVTVVMQVRPUlNfR0NDX1ZFUlNJT04gPiA0MDMwNQorICAgICAgICBfX2F0dHJpYnV0ZV9fKChfX29wdGltaXplX18oIm5vLWFzc29jaWF0aXZlLW1hdGgiKSkpCisjZW5kaWYKKyAgICAgICAgb3BlcmF0b3IgKCkoQXJncyBjb25zdCAmYXJncykKKyAgICAgICAgeworICAgICAgICAgICAgY29uc3Qgd2VpZ2h0ZWRfc2FtcGxlIG15VG1wMSA9IGFyZ3NbcGFyYW1ldGVyOjprZXl3b3JkPFRhZz46OmdldCgpXSAqIGFyZ3Nbd2VpZ2h0XSAtIHRoaXMtPmNvbXBlbnNhdGlvbjsKKyAgICAgICAgICAgIGNvbnN0IHdlaWdodGVkX3NhbXBsZSBteVRtcDIgPSB0aGlzLT53ZWlnaHRlZF9zdW1fICsgbXlUbXAxOworICAgICAgICAgICAgdGhpcy0+Y29tcGVuc2F0aW9uID0gKG15VG1wMiAtIHRoaXMtPndlaWdodGVkX3N1bV8pIC0gbXlUbXAxOworICAgICAgICAgICAgdGhpcy0+d2VpZ2h0ZWRfc3VtXyA9IG15VG1wMjsKKworICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPndlaWdodGVkX3N1bV87CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisgICAgICAgIHdlaWdodGVkX3NhbXBsZSB3ZWlnaHRlZF9zdW1fOworICAgICAgICB3ZWlnaHRlZF9zYW1wbGUgY29tcGVuc2F0aW9uOworICAgIH07CisKKyNpZiBfTVNDX1ZFUiA+IDE0MDAKKyMgcHJhZ21hIGZsb2F0X2NvbnRyb2wocG9wKQorI2VuZGlmCisKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gdGFnOjp3ZWlnaHRlZF9zdW1fa2FoYW4KKy8vIHRhZzo6d2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzX2thaGFuCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCB3ZWlnaHRlZF9zdW1fa2FoYW4KKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICAvLy8KKyAgICAgICAgdHlwZWRlZiBhY2N1bXVsYXRvcnM6OmltcGw6OndlaWdodGVkX3N1bV9rYWhhbl9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIHRhZzo6c2FtcGxlPiBpbXBsOworICAgIH07CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzX2thaGFuCisgICAgICA6IGRlcGVuZHNfb248PgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF9zdW1fa2FoYW5faW1wbDxWYXJpYXRlVHlwZSwgbXBsOjpfMiwgVmFyaWF0ZVRhZz4gaW1wbDsKKyAgICB9OworCit9CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGV4dHJhY3Q6OndlaWdodGVkX3N1bV9rYWhhbgorLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzX2thaGFuCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjp3ZWlnaHRlZF9zdW1fa2FoYW4+IGNvbnN0IHdlaWdodGVkX3N1bV9rYWhhbiA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X3dlaWdodGVkX3N1bV9vZl92YXJpYXRlcz4gY29uc3Qgd2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzX2thaGFuID0ge307CisKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF9zdW1fa2FoYW4pCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfc3VtX29mX3ZhcmlhdGVzX2thaGFuKQorfQorCit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9zdW1fa2FoYW47Cit1c2luZyBleHRyYWN0Ojp3ZWlnaHRlZF9zdW1fb2ZfdmFyaWF0ZXNfa2FoYW47CisKKy8vIHdlaWdodGVkX3N1bShrYWhhbikgLT4gd2VpZ2h0ZWRfc3VtX2thaGFuCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3N1bShrYWhhbik+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3N1bV9rYWhhbiB0eXBlOworfTsKKwordGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgZmVhdHVyZV9vZjx0YWc6OndlaWdodGVkX3N1bV9vZl92YXJpYXRlc19rYWhhbjxWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4gPgorICA6IGZlYXR1cmVfb2Y8dGFnOjphYnN0cmFjdF93ZWlnaHRlZF9zdW1fb2ZfdmFyaWF0ZXM+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF90YWlsX21lYW4uaHBwCkBAIC0wLDAgKzEsMTY5IEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB3ZWlnaHRlZF90YWlsX21lYW4uaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfVEFJTF9NRUFOX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1RBSUxfTUVBTl9IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8c3N0cmVhbT4KKyNpbmNsdWRlIDxzdGRleGNlcHQ+CisjaW5jbHVkZSA8Ym9vc3QvdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX21lYW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3BhcmFtZXRlcnMvcXVhbnRpbGVfcHJvYmFiaWxpdHkuaHBwPgorCisjaWZkZWYgX01TQ19WRVIKKyMgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTogNDEyNykgLy8gY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBpcyBjb25zdGFudAorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBjb2hlcmVudF93ZWlnaHRlZF90YWlsX21lYW5faW1wbAorICAgIC8vCisgICAgLy8gVE9ETworCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIG5vbl9jb2hlcmVudF93ZWlnaHRlZF90YWlsX21lYW5faW1wbAorICAgIC8vCisgICAgLyoqCisgICAgICAgIEBicmllZiBFc3RpbWF0aW9uIG9mIHRoZSAobm9uLWNvaGVyZW50KSB3ZWlnaHRlZCB0YWlsIG1lYW4gYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyAoZm9yIGJvdGggbGVmdCBhbmQgcmlnaHQgdGFpbHMpCisKKworCisgICAgICAgIEFuIGVzdGltYXRpb24gb2YgdGhlIG5vbi1jb2hlcmVudCwgd2VpZ2h0ZWQgdGFpbCBtZWFuIFxmJFx3aWRlaGF0e05DVE19X3tuLFxhbHBoYX0oWClcZiQgaXMgZ2l2ZW4gYnkgdGhlIHdlaWdodGVkIG1lYW4KKyAgICAgICAgb2YgdGhlCisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcbGFtYmRhID0gXGluZlxsZWZ0XHsgbCBcbGVmdHwgXGZyYWN7MX17XGJhcnt3fV9ufVxzdW1fe2k9MX1ee2x9IHdfaSBcZ2VxIFxhbHBoYSBccmlnaHQuIFxyaWdodFx9CisgICAgICAgIFxmXQorCisgICAgICAgIHNtYWxsZXN0IHNhbXBsZXMgKGxlZnQgdGFpbCkgb3IgdGhlIHdlaWdodGVkIG1lYW4gb2YgdGhlCisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBuICsgMSAtIFxyaG8gPSBuICsgMSAtIFxzdXBcbGVmdFx7IHIgXGxlZnR8IFxmcmFjezF9e1xiYXJ7d31fbn1cc3VtX3tpPXJ9XntufSB3X2kgXGdlcSAoMSAtIFxhbHBoYSkgXHJpZ2h0LiBccmlnaHRcfQorICAgICAgICBcZl0KKworICAgICAgICBsYXJnZXN0IHNhbXBsZXMgKHJpZ2h0IHRhaWwpIGFib3ZlIGEgcXVhbnRpbGUgXGYkXGhhdHtxfV97XGFscGhhfVxmJCBvZiBsZXZlbCBcZiRcYWxwaGFcZiQsIFxmJG5cZiQgYmVpbmcgdGhlIHRvdGFsIG51bWJlciBvZiBzYW1wbGUKKyAgICAgICAgYW5kIFxmJFxiYXJ7d31fblxmJCB0aGUgc3VtIG9mIGFsbCBcZiRuXGYkIHdlaWdodHM6CisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcd2lkZWhhdHtOQ1RNfV97bixcYWxwaGF9XntcbWF0aHJte2xlZnR9fShYKSA9IFxmcmFje1xzdW1fe2k9MX1ee1xsYW1iZGF9IHdfaSBYX3tpOm59fXtcc3VtX3tpPTF9XntcbGFtYmRhfSB3X2l9LAorICAgICAgICBcZl0KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e05DVE19X3tuLFxhbHBoYX1ee1xtYXRocm17cmlnaHR9fShYKSA9IFxmcmFje1xzdW1fe2k9XHJob31ebiB3X2kgWF97aTpufX17XHN1bV97aT1ccmhvfV5uIHdfaX0uCisgICAgICAgIFxmXQorCisgICAgICAgIEBwYXJhbSBxdWFudGlsZV9wcm9iYWJpbGl0eQorICAgICovCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbl9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxTYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFdlaWdodCwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6OmZkaXY8d2VpZ2h0ZWRfc2FtcGxlLCBzdGQ6OnNpemVfdD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIG5vbl9jb2hlcmVudF93ZWlnaHRlZF90YWlsX21lYW5faW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGZsb2F0X3R5cGUgdGhyZXNob2xkID0gc3VtX29mX3dlaWdodHMoYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAoICggaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSApID8gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0gOiAxLiAtIGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldICk7CisKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSAwOworICAgICAgICAgICAgV2VpZ2h0IHN1bSA9IFdlaWdodCgwKTsKKworICAgICAgICAgICAgd2hpbGUgKHN1bSA8IHRocmVzaG9sZCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAobiA8IHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90Pih0YWlsX3dlaWdodHMoYXJncykuc2l6ZSgpKSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHN1bSArPSAqKHRhaWxfd2VpZ2h0cyhhcmdzKS5iZWdpbigpICsgbik7CisgICAgICAgICAgICAgICAgICAgIG4rKzsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZDo6bnVtZXJpY19saW1pdHM8cmVzdWx0X3R5cGU+OjpoYXNfcXVpZXRfTmFOKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjpudW1lcmljX2xpbWl0czxyZXN1bHRfdHlwZT46OnF1aWV0X05hTigpOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpvc3RyaW5nc3RyZWFtIG1zZzsKKyAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA8PCAiaW5kZXggbiA9ICIgPDwgbiA8PCAiIGlzIG5vdCBpbiB2YWxpZCByYW5nZSBbMCwgIiA8PCB0YWlsKGFyZ3MpLnNpemUoKSA8PCAiKSI7CisgICAgICAgICAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6cnVudGltZV9lcnJvcihtc2cuc3RyKCkpKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSgwKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIG51bWVyaWM6OmZkaXYoCisgICAgICAgICAgICAgICAgc3RkOjppbm5lcl9wcm9kdWN0KAorICAgICAgICAgICAgICAgICAgICB0YWlsKGFyZ3MpLmJlZ2luKCkKKyAgICAgICAgICAgICAgICAgICwgdGFpbChhcmdzKS5iZWdpbigpICsgbgorICAgICAgICAgICAgICAgICAgLCB0YWlsX3dlaWdodHMoYXJncykuYmVnaW4oKQorICAgICAgICAgICAgICAgICAgLCB3ZWlnaHRlZF9zYW1wbGUoMCkKKyAgICAgICAgICAgICAgICApCisgICAgICAgICAgICAgICwgc3VtCisgICAgICAgICAgICApOworICAgICAgICB9CisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6bm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbjw+CisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbgorICAgICAgOiBkZXBlbmRzX29uPHN1bV9vZl93ZWlnaHRzLCB0YWlsX3dlaWdodHM8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6bm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbl9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojpub25fY29oZXJlbnRfd2VpZ2h0ZWRfdGFpbF9tZWFuOworLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3Rfbm9uX2NvaGVyZW50X3RhaWxfbWVhbj4gY29uc3Qgbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbiA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwobm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbikKK30KKwordXNpbmcgZXh0cmFjdDo6bm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbjsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF90YWlsX3F1YW50aWxlLmhwcApAQCAtMCwwICsxLDE0NiBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2VpZ2h0ZWRfdGFpbF9xdWFudGlsZS5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDYgRGFuaWVsIEVnbG9mZiwgT2xpdmllciBHeWdpLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9UQUlMX1FVQU5USUxFX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1RBSUxfUVVBTlRJTEVfSFBQX0RFXzAxXzAxXzIwMDYKKworI2luY2x1ZGUgPHZlY3Rvcj4KKyNpbmNsdWRlIDxsaW1pdHM+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxzc3RyZWFtPgorI2luY2x1ZGUgPHN0ZGV4Y2VwdD4KKyNpbmNsdWRlIDxib29zdC90aHJvd19leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3BhcmFtZXRlci9rZXl3b3JkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX3F1YW50aWxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wYXJhbWV0ZXJzL3F1YW50aWxlX3Byb2JhYmlsaXR5LmhwcD4KKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjIHByYWdtYSB3YXJuaW5nKGRpc2FibGU6IDQxMjcpIC8vIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWNjdW11bGF0b3JzCit7CisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIHdlaWdodGVkX3RhaWxfcXVhbnRpbGVfaW1wbAorICAgIC8vICBUYWlsIHF1YW50aWxlIGVzdGltYXRpb24gYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyBvZiB3ZWlnaHRlZCBzYW1wbGVzCisgICAgLyoqCisgICAgICAgIEBicmllZiBUYWlsIHF1YW50aWxlIGVzdGltYXRpb24gYmFzZWQgb24gb3JkZXIgc3RhdGlzdGljcyBvZiB3ZWlnaHRlZCBzYW1wbGVzIChmb3IgYm90aCBsZWZ0IGFuZCByaWdodCB0YWlscykKKworICAgICAgICBBbiBlc3RpbWF0b3IgXGYkXGhhdHtxfVxmJCBvZiB0YWlsIHF1YW50aWxlcyB3aXRoIGxldmVsIFxmJFxhbHBoYVxmJCBiYXNlZCBvbiBvcmRlciBzdGF0aXN0aWNzCisgICAgICAgIFxmJFhfezE6bn0gXGxlcSBYX3syOm59IFxsZXFcZG90c1xsZXEgWF97bjpufVxmJCBvZiB3ZWlnaHRlZCBzYW1wbGVzIGFyZSBnaXZlbiBieSBcZiRYX3tcbGFtYmRhOm59XGYkIChsZWZ0IHRhaWwpCisgICAgICAgIGFuZCBcZiRYX3tccmhvOm59XGYkIChyaWdodCB0YWlsKSwgd2hlcmUKKworICAgICAgICAgICAgXGZbCisgICAgICAgICAgICAgICAgXGxhbWJkYSA9IFxpbmZcbGVmdFx7IGwgXGxlZnR8IFxmcmFjezF9e1xiYXJ7d31fbn1cc3VtX3tpPTF9XntsfSB3X2kgXGdlcSBcYWxwaGEgXHJpZ2h0LiBccmlnaHRcfQorICAgICAgICAgICAgXGZdCisKKyAgICAgICAgYW5kCisKKyAgICAgICAgICAgIFxmWworICAgICAgICAgICAgICAgIFxyaG8gPSBcc3VwXGxlZnRceyByIFxsZWZ0fCBcZnJhY3sxfXtcYmFye3d9X259XHN1bV97aT1yfV57bn0gd19pIFxnZXEgKDEgLSBcYWxwaGEpIFxyaWdodC4gXHJpZ2h0XH0sCisgICAgICAgICAgICBcZl0KKworICAgICAgICBcZiRuXGYkIGJlaW5nIHRoZSBudW1iZXIgb2Ygc2FtcGxlcyBhbmQgXGYkXGJhcnt3fV9uXGYkIHRoZSBzdW0gb2YgYWxsIHdlaWdodHMuCisKKyAgICAgICAgQHBhcmFtIHF1YW50aWxlX3Byb2JhYmlsaXR5CisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF90YWlsX3F1YW50aWxlX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFdlaWdodCwgc3RkOjpzaXplX3Q+OjpyZXN1bHRfdHlwZSBmbG9hdF90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIFNhbXBsZSByZXN1bHRfdHlwZTsKKworICAgICAgICB3ZWlnaHRlZF90YWlsX3F1YW50aWxlX2ltcGwoZG9udF9jYXJlKSB7fQorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisgICAgICAgIHJlc3VsdF90eXBlIHJlc3VsdChBcmdzIGNvbnN0ICZhcmdzKSBjb25zdAorICAgICAgICB7CisgICAgICAgICAgICBmbG9hdF90eXBlIHRocmVzaG9sZCA9IHN1bV9vZl93ZWlnaHRzKGFyZ3MpCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogKCAoIGlzX3NhbWU8TGVmdFJpZ2h0LCBsZWZ0Pjo6dmFsdWUgKSA/IGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldIDogMS4gLSBhcmdzW3F1YW50aWxlX3Byb2JhYmlsaXR5XSApOworCisgICAgICAgICAgICBzdGQ6OnNpemVfdCBuID0gMDsKKyAgICAgICAgICAgIFdlaWdodCBzdW0gPSBXZWlnaHQoMCk7CisKKyAgICAgICAgICAgIHdoaWxlIChzdW0gPCB0aHJlc2hvbGQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYgKG4gPCBzdGF0aWNfY2FzdDxzdGQ6OnNpemVfdD4odGFpbF93ZWlnaHRzKGFyZ3MpLnNpemUoKSkpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBzdW0gKz0gKih0YWlsX3dlaWdodHMoYXJncykuYmVnaW4oKSArIG4pOworICAgICAgICAgICAgICAgICAgICBuKys7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmIChzdGQ6Om51bWVyaWNfbGltaXRzPHJlc3VsdF90eXBlPjo6aGFzX3F1aWV0X05hTikKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bnVtZXJpY19saW1pdHM8cmVzdWx0X3R5cGU+OjpxdWlldF9OYU4oKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6b3N0cmluZ3N0cmVhbSBtc2c7CisgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPDwgImluZGV4IG4gPSAiIDw8IG4gPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgWzAsICIgPDwgdGFpbChhcmdzKS5zaXplKCkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICAgICAgYm9vc3Q6OnRocm93X2V4Y2VwdGlvbihzdGQ6OnJ1bnRpbWVfZXJyb3IobXNnLnN0cigpKSk7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2FtcGxlKDApOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIGNhY2hlZCBzYW1wbGVzIG9mIHRoZSBsZWZ0IGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLAorICAgICAgICAgICAgLy8gd2hlcmVhcyB0aGUgc2FtcGxlcyBvZiB0aGUgcmlnaHQgdGFpbCBhcmUgc29ydGVkIGluIGRlc2NlbmRpbmcgb3JkZXIKKyAgICAgICAgICAgIHJldHVybiAqKGJvb3N0OjpiZWdpbih0YWlsKGFyZ3MpKSArIG4gLSAxKTsKKyAgICAgICAgfQorICAgIH07Cit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6d2VpZ2h0ZWRfdGFpbF9xdWFudGlsZTw+CisvLworbmFtZXNwYWNlIHRhZworeworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfdGFpbF9xdWFudGlsZQorICAgICAgOiBkZXBlbmRzX29uPHN1bV9vZl93ZWlnaHRzLCB0YWlsX3dlaWdodHM8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICAvLy8gSU5URVJOQUwgT05MWQorICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfdGFpbF9xdWFudGlsZV9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIExlZnRSaWdodD4gaW1wbDsKKyAgICB9OworfQorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleHRyYWN0Ojp3ZWlnaHRlZF90YWlsX3F1YW50aWxlCisvLworbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpxdWFudGlsZT4gY29uc3Qgd2VpZ2h0ZWRfdGFpbF9xdWFudGlsZSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwod2VpZ2h0ZWRfdGFpbF9xdWFudGlsZSkKK30KKwordXNpbmcgZXh0cmFjdDo6d2VpZ2h0ZWRfdGFpbF9xdWFudGlsZTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMuaHBwCkBAIC0wLDAgKzEsMjQyIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB3ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMuaHBwCisvLworLy8gIENvcHlyaWdodCAyMDA2IERhbmllbCBFZ2xvZmYsIE9saXZpZXIgR3lnaS4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0CisvLyAgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUKKy8vICBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNpZm5kZWYgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfV0VJR0hURURfVEFJTF9WQVJJQVRFX01FQU5TX0hQUF9ERV8wMV8wMV8yMDA2CisjZGVmaW5lIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1RBSUxfVkFSSUFURV9NRUFOU19IUFBfREVfMDFfMDFfMjAwNgorCisjaW5jbHVkZSA8bnVtZXJpYz4KKyNpbmNsdWRlIDx2ZWN0b3I+CisjaW5jbHVkZSA8bGltaXRzPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8c3N0cmVhbT4KKyNpbmNsdWRlIDxzdGRleGNlcHQ+CisjaW5jbHVkZSA8Ym9vc3QvdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9wYXJhbWV0ZXIva2V5d29yZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL251bWVyaWMvZnVuY3Rpb25hbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9hY2N1bXVsYXRvcl9iYXNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9wYXJhbWV0ZXJzL3NhbXBsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy90YWlsX3ZhcmlhdGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3RhaWxfdmFyaWF0ZV9tZWFucy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfdGFpbF9tZWFuLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9wYXJhbWV0ZXJzL3F1YW50aWxlX3Byb2JhYmlsaXR5LmhwcD4KKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjIHByYWdtYSB3YXJuaW5nKGRpc2FibGU6IDQxMjcpIC8vIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gaXMgY29uc3RhbnQKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QKK3sKKyAgICAvLyBmb3IgX0JpbmFyeU9wZXJhdHJpb24yIGluIHN0ZDo6aW5uZXJfcHJvZHVjdCBiZWxvdworICAgIC8vIG11bHRpcGxpZXMgdHdvIHZhbHVlcyBhbmQgcHJvbW90ZXMgdGhlIHJlc3VsdCB0byBkb3VibGUKKyAgICBuYW1lc3BhY2UgbnVtZXJpYyB7IG5hbWVzcGFjZSBmdW5jdGlvbmFsCisgICAgeworICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgICAgIC8vIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGx5X2FuZF9wcm9tb3RlX3RvX2RvdWJsZQorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBVPgorICAgICAgICBzdHJ1Y3QgbXVsdGlwbHlfYW5kX3Byb21vdGVfdG9fZG91YmxlCisgICAgICAgICAgOiBtdWx0aXBsaWVzPFQsIGRvdWJsZSBjb25zdD4KKyAgICAgICAgeworICAgICAgICB9OworICAgIH19Cit9CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGltcGwKK3sKKyAgICAvKioKKyAgICAgICAgQGJyaWVmIEVzdGltYXRpb24gb2YgdGhlIGFic29sdXRlIGFuZCByZWxhdGl2ZSB3ZWlnaHRlZCB0YWlsIHZhcmlhdGUgbWVhbnMgKGZvciBib3RoIGxlZnQgYW5kIHJpZ2h0IHRhaWxzKQorCisgICAgICAgIEZvciBhbGwgXGYkalxmJC10aCB2YXJpYXRlcyBhc3NvY2lhdGVkIHRvIHRoZQorCisgICAgICAgIFxmWworICAgICAgICAgICAgXGxhbWJkYSA9IFxpbmZcbGVmdFx7IGwgXGxlZnR8IFxmcmFjezF9e1xiYXJ7d31fbn1cc3VtX3tpPTF9XntsfSB3X2kgXGdlcSBcYWxwaGEgXHJpZ2h0LiBccmlnaHRcfQorICAgICAgICBcZl0KKworICAgICAgICBzbWFsbGVzdCBzYW1wbGVzIChsZWZ0IHRhaWwpIG9yIHRoZSB3ZWlnaHRlZCBtZWFuIG9mIHRoZQorCisgICAgICAgIFxmWworICAgICAgICAgICAgbiArIDEgLSBccmhvID0gbiArIDEgLSBcc3VwXGxlZnRceyByIFxsZWZ0fCBcZnJhY3sxfXtcYmFye3d9X259XHN1bV97aT1yfV57bn0gd19pIFxnZXEgKDEgLSBcYWxwaGEpIFxyaWdodC4gXHJpZ2h0XH0KKyAgICAgICAgXGZdCisKKyAgICAgICAgbGFyZ2VzdCBzYW1wbGVzIChyaWdodCB0YWlsKSwgdGhlIGFic29sdXRlIHdlaWdodGVkIHRhaWwgbWVhbnMgXGYkXHdpZGVoYXR7QVRNfV97bixcYWxwaGF9KFgsIGopXGYkCisgICAgICAgIGFyZSBjb21wdXRlZCBhbmQgcmV0dXJuZWQgYXMgYW4gaXRlcmF0b3IgcmFuZ2UuIEFsdGVybmF0aXZlbHksIHRoZSByZWxhdGl2ZSB3ZWlnaHRlZCB0YWlsIG1lYW5zCisgICAgICAgIFxmJFx3aWRlaGF0e1JUTX1fe24sXGFscGhhfShYLCBqKVxmJCBhcmUgcmV0dXJuZWQsIHdoaWNoIGFyZSB0aGUgYWJzb2x1dGUgd2VpZ2h0ZWQgdGFpbCBtZWFucworICAgICAgICBub3JtYWxpemVkIHdpdGggdGhlIHdlaWdodGVkIChub24tY29oZXJlbnQpIHNhbXBsZSB0YWlsIG1lYW4gXGYkXHdpZGVoYXR7TkNUTX1fe24sXGFscGhhfShYKVxmJC4KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e0FUTX1fe24sXGFscGhhfV57XG1hdGhybXtyaWdodH19KFgsIGopID0KKyAgICAgICAgICAgICAgICBcZnJhY3sxfXtcc3VtX3tpPVxyaG99Xm4gd19pfQorICAgICAgICAgICAgICAgIFxzdW1fe2k9XHJob31ebiB3X2kgXHhpX3tqLGl9CisgICAgICAgIFxmXQorCisgICAgICAgIFxmWworICAgICAgICAgICAgXHdpZGVoYXR7QVRNfV97bixcYWxwaGF9XntcbWF0aHJte2xlZnR9fShYLCBqKSA9CisgICAgICAgICAgICAgICAgXGZyYWN7MX17XHN1bV97aT0xfV57XGxhbWJkYX19CisgICAgICAgICAgICAgICAgXHN1bV97aT0xfV57XGxhbWJkYX0gd19pIFx4aV97aixpfQorICAgICAgICBcZl0KKworICAgICAgICBcZlsKKyAgICAgICAgICAgIFx3aWRlaGF0e1JUTX1fe24sXGFscGhhfV57XG1hdGhybXtyaWdodH19KFgsIGopID0KKyAgICAgICAgICAgICAgICBcZnJhY3tcc3VtX3tpPVxyaG99Xm4gd19pIFx4aV97aixpfX0KKyAgICAgICAgICAgIHtcc3VtX3tpPVxyaG99Xm4gd19pIFx3aWRlaGF0e05DVE19X3tuLFxhbHBoYX1ee1xtYXRocm17cmlnaHR9fShYKX0KKyAgICAgICAgXGZdCisKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcd2lkZWhhdHtSVE19X3tuLFxhbHBoYX1ee1xtYXRocm17bGVmdH19KFgsIGopID0KKyAgICAgICAgICAgICAgICBcZnJhY3tcc3VtX3tpPTF9XntcbGFtYmRhfSB3X2kgXHhpX3tqLGl9fQorICAgICAgICAgICAge1xzdW1fe2k9MX1ee1xsYW1iZGF9IHdfaSBcd2lkZWhhdHtOQ1RNfV97bixcYWxwaGF9XntcbWF0aHJte2xlZnR9fShYKX0KKyAgICAgICAgXGZdCisgICAgKi8KKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyB3ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbAorICAgIC8vICBieSBkZWZhdWx0OiBhYnNvbHV0ZSB3ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgSW1wbCwgdHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZT4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zX2ltcGwKKyAgICAgIDogYWNjdW11bGF0b3JfYmFzZQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PFdlaWdodCwgV2VpZ2h0Pjo6cmVzdWx0X3R5cGUgZmxvYXRfdHlwZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8VmFyaWF0ZVR5cGUsIFdlaWdodD46OnJlc3VsdF90eXBlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSBhcnJheV90eXBlOworICAgICAgICAvLyBmb3IgYm9vc3Q6OnJlc3VsdF9vZgorICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPHR5cGVuYW1lIGFycmF5X3R5cGU6Oml0ZXJhdG9yPiByZXN1bHRfdHlwZTsKKworICAgICAgICB3ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGZsb2F0X3R5cGUgdGhyZXNob2xkID0gc3VtX29mX3dlaWdodHMoYXJncykKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAoICggaXNfc2FtZTxMZWZ0UmlnaHQsIGxlZnQ+Ojp2YWx1ZSApID8gYXJnc1txdWFudGlsZV9wcm9iYWJpbGl0eV0gOiAxLiAtIGFyZ3NbcXVhbnRpbGVfcHJvYmFiaWxpdHldICk7CisKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSAwOworICAgICAgICAgICAgV2VpZ2h0IHN1bSA9IFdlaWdodCgwKTsKKworICAgICAgICAgICAgd2hpbGUgKHN1bSA8IHRocmVzaG9sZCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZiAobiA8IHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90Pih0YWlsX3dlaWdodHMoYXJncykuc2l6ZSgpKSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHN1bSArPSAqKHRhaWxfd2VpZ2h0cyhhcmdzKS5iZWdpbigpICsgbik7CisgICAgICAgICAgICAgICAgICAgIG4rKzsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZDo6bnVtZXJpY19saW1pdHM8ZmxvYXRfdHlwZT46Omhhc19xdWlldF9OYU4pCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6ZmlsbCgKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLT50YWlsX21lYW5zXy5iZWdpbigpCisgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGhpcy0+dGFpbF9tZWFuc18uZW5kKCkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzdGQ6Om51bWVyaWNfbGltaXRzPGZsb2F0X3R5cGU+OjpxdWlldF9OYU4oKQorICAgICAgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6b3N0cmluZ3N0cmVhbSBtc2c7CisgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPDwgImluZGV4IG4gPSAiIDw8IG4gPDwgIiBpcyBub3QgaW4gdmFsaWQgcmFuZ2UgWzAsICIgPDwgdGFpbChhcmdzKS5zaXplKCkgPDwgIikiOworICAgICAgICAgICAgICAgICAgICAgICAgYm9vc3Q6OnRocm93X2V4Y2VwdGlvbihzdGQ6OnJ1bnRpbWVfZXJyb3IobXNnLnN0cigpKSk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IG51bV92YXJpYXRlcyA9IHRhaWxfdmFyaWF0ZShhcmdzKS5iZWdpbigpLT5zaXplKCk7CisKKyAgICAgICAgICAgIHRoaXMtPnRhaWxfbWVhbnNfLmNsZWFyKCk7CisgICAgICAgICAgICB0aGlzLT50YWlsX21lYW5zXy5yZXNpemUobnVtX3ZhcmlhdGVzLCBTYW1wbGUoMCkpOworCisgICAgICAgICAgICB0aGlzLT50YWlsX21lYW5zXyA9IHN0ZDo6aW5uZXJfcHJvZHVjdCgKKyAgICAgICAgICAgICAgICB0YWlsX3ZhcmlhdGUoYXJncykuYmVnaW4oKQorICAgICAgICAgICAgICAsIHRhaWxfdmFyaWF0ZShhcmdzKS5iZWdpbigpICsgbgorICAgICAgICAgICAgICAsIHRhaWxfd2VpZ2h0cyhhcmdzKS5iZWdpbigpCisgICAgICAgICAgICAgICwgdGhpcy0+dGFpbF9tZWFuc18KKyAgICAgICAgICAgICAgLCBudW1lcmljOjpmdW5jdGlvbmFsOjpwbHVzPGFycmF5X3R5cGUgY29uc3QsIGFycmF5X3R5cGUgY29uc3Q+KCkKKyAgICAgICAgICAgICAgLCBudW1lcmljOjpmdW5jdGlvbmFsOjptdWx0aXBseV9hbmRfcHJvbW90ZV90b19kb3VibGU8VmFyaWF0ZVR5cGUgY29uc3QsIFdlaWdodCBjb25zdD4oKQorICAgICAgICAgICAgKTsKKworICAgICAgICAgICAgZmxvYXRfdHlwZSBmYWN0b3IgPSBzdW0gKiAoIChpc19zYW1lPEltcGwsIHJlbGF0aXZlPjo6dmFsdWUpID8gbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbihhcmdzKSA6IDEuICk7CisKKyAgICAgICAgICAgIHN0ZDo6dHJhbnNmb3JtKAorICAgICAgICAgICAgICAgIHRoaXMtPnRhaWxfbWVhbnNfLmJlZ2luKCkKKyAgICAgICAgICAgICAgLCB0aGlzLT50YWlsX21lYW5zXy5lbmQoKQorICAgICAgICAgICAgICAsIHRoaXMtPnRhaWxfbWVhbnNfLmJlZ2luKCkKKyAgICAgICAgICAgICAgLCBzdGQ6OmJpbmQybmQobnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZGl2aWRlczx0eXBlbmFtZSBhcnJheV90eXBlOjp2YWx1ZV90eXBlIGNvbnN0LCBmbG9hdF90eXBlIGNvbnN0PigpLCBmYWN0b3IpCisgICAgICAgICAgICApOworCisgICAgICAgICAgICByZXR1cm4gbWFrZV9pdGVyYXRvcl9yYW5nZSh0aGlzLT50YWlsX21lYW5zXyk7CisgICAgICAgIH0KKworICAgIHByaXZhdGU6CisKKyAgICAgICAgbXV0YWJsZSBhcnJheV90eXBlIHRhaWxfbWVhbnNfOworCisgICAgfTsKKworfSAvLyBuYW1lc3BhY2UgaW1wbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyB0YWc6OmFic29sdXRlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFucworLy8gdGFnOjpyZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMKKy8vCituYW1lc3BhY2UgdGFnCit7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgYWJzb2x1dGVfd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zCisgICAgICA6IGRlcGVuZHNfb248bm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbjxMZWZ0UmlnaHQ+LCB0YWlsX3ZhcmlhdGU8VmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWcsIExlZnRSaWdodD4sIHRhaWxfd2VpZ2h0czxMZWZ0UmlnaHQ+ID4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbDxtcGw6Ol8xLCBtcGw6Ol8yLCBhYnNvbHV0ZSwgTGVmdFJpZ2h0LCBWYXJpYXRlVHlwZT4gaW1wbDsKKyAgICB9OworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHJlbGF0aXZlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFucworICAgICAgOiBkZXBlbmRzX29uPG5vbl9jb2hlcmVudF93ZWlnaHRlZF90YWlsX21lYW48TGVmdFJpZ2h0PiwgdGFpbF92YXJpYXRlPFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnLCBMZWZ0UmlnaHQ+LCB0YWlsX3dlaWdodHM8TGVmdFJpZ2h0PiA+CisgICAgeworICAgICAgICB0eXBlZGVmIGFjY3VtdWxhdG9yczo6aW1wbDo6d2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgcmVsYXRpdmUsIExlZnRSaWdodCwgVmFyaWF0ZVR5cGU+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zCisvLyBleHRyYWN0OjpyZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMKKy8vCituYW1lc3BhY2UgZXh0cmFjdAoreworICAgIGV4dHJhY3Rvcjx0YWc6OmFic3RyYWN0X2Fic29sdXRlX3RhaWxfdmFyaWF0ZV9tZWFucz4gY29uc3Qgd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zID0ge307CisgICAgZXh0cmFjdG9yPHRhZzo6YWJzdHJhY3RfcmVsYXRpdmVfdGFpbF92YXJpYXRlX21lYW5zPiBjb25zdCByZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHdlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFucykKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTChyZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnMpCit9CisKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczsKK3VzaW5nIGV4dHJhY3Q6OnJlbGF0aXZlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczsKKworLy8gd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+KGFic29sdXRlKSAtPiBhYnNvbHV0ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihhYnNvbHV0ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OmFic29sdXRlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKworLy8gd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zPExlZnRSaWdodCwgVmFyaWF0ZVR5cGUsIFZhcmlhdGVUYWc+KHJlbGF0aXZlKSAtPiByZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnM8TGVmdFJpZ2h0LCBWYXJpYXRlVHlwZSwgVmFyaWF0ZVRhZz4KK3RlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPihyZWxhdGl2ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OnJlbGF0aXZlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczxMZWZ0UmlnaHQsIFZhcmlhdGVUeXBlLCBWYXJpYXRlVGFnPiB0eXBlOworfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2lmZGVmIF9NU0NfVkVSCisjIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy93ZWlnaHRlZF92YXJpYW5jZS5ocHAKQEAgLTAsMCArMSwxODYgQEAKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHdlaWdodGVkX3ZhcmlhbmNlLmhwcAorLy8KKy8vICBDb3B5cmlnaHQgMjAwNSBEYW5pZWwgRWdsb2ZmLCBFcmljIE5pZWJsZXIuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdAorLy8gIFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlCisvLyAgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FDQ1VNVUxBVE9SU19TVEFUSVNUSUNTX1dFSUdIVEVEX1ZBUklBTkNFX0hQUF9FQU5fMjhfMTBfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XRUlHSFRFRF9WQVJJQU5DRV9IUFBfRUFOXzI4XzEwXzIwMDUKKworI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvYWNjdW11bGF0b3JfYmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9leHRyYWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9udW1lcmljL2Z1bmN0aW9uYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvcGFyYW1ldGVycy9zYW1wbGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9mcmFtZXdvcmsvZGVwZW5kc19vbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9jb3VudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3MvdmFyaWFuY2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FjY3VtdWxhdG9ycy9zdGF0aXN0aWNzL3dlaWdodGVkX3N1bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbWVhbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2VpZ2h0ZWRfbW9tZW50LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFjY3VtdWxhdG9ycworeworCituYW1lc3BhY2UgaW1wbAoreworICAgIC8vISBMYXp5IGNhbGN1bGF0aW9uIG9mIHZhcmlhbmNlIG9mIHdlaWdodGVkIHNhbXBsZXMuCisgICAgLyohCisgICAgICAgIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSB2YXJpYW5jZSBvZiB3ZWlnaHRlZCBzYW1wbGVzIGlzIGJhc2VkIG9uIHRoZSBzZWNvbmQgbW9tZW50CisgICAgICAgIFxmJFx3aWRlaGF0e219X25eeygyKX1cZiQgKHdlaWdodGVkX21vbWVudDwyPikgYW5kIHRoZSBtZWFuXGYkIFxoYXR7XG11fV9uXGYkICh3ZWlnaHRlZF9tZWFuKToKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcaGF0e1xzaWdtYX1fbl4yID0gXHdpZGVoYXR7bX1fbl57KDIpfS1caGF0e1xtdX1fbl4yLAorICAgICAgICBcZl0KKyAgICAgICAgd2hlcmUgXGYkblxmJCBpcyB0aGUgbnVtYmVyIG9mIHNhbXBsZXMuCisgICAgKi8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgTWVhbkZlYXR1cmU+CisgICAgc3RydWN0IGxhenlfd2VpZ2h0ZWRfdmFyaWFuY2VfaW1wbAorICAgICAgOiBhY2N1bXVsYXRvcl9iYXNlCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIG51bWVyaWM6OmZ1bmN0aW9uYWw6Om11bHRpcGxpZXM8U2FtcGxlLCBXZWlnaHQ+OjpyZXN1bHRfdHlwZSB3ZWlnaHRlZF9zYW1wbGU7CisgICAgICAgIC8vIGZvciBib29zdDo6cmVzdWx0X29mCisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6ZmRpdjx3ZWlnaHRlZF9zYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHJlc3VsdF90eXBlOworCisgICAgICAgIGxhenlfd2VpZ2h0ZWRfdmFyaWFuY2VfaW1wbChkb250X2NhcmUpIHt9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KEFyZ3MgY29uc3QgJmFyZ3MpIGNvbnN0CisgICAgICAgIHsKKyAgICAgICAgICAgIGV4dHJhY3RvcjxNZWFuRmVhdHVyZT4gY29uc3Qgc29tZV9tZWFuID0ge307CisgICAgICAgICAgICByZXN1bHRfdHlwZSB0bXAgPSBzb21lX21lYW4oYXJncyk7CisgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3JzOjp3ZWlnaHRlZF9tb21lbnQ8Mj4oYXJncykgLSB0bXAgKiB0bXA7CisgICAgICAgIH0KKyAgICB9OworCisgICAgLy8hIEl0ZXJhdGl2ZSBjYWxjdWxhdGlvbiBvZiB2YXJpYW5jZSBvZiB3ZWlnaHRlZCBzYW1wbGVzLgorICAgIC8qIQorICAgICAgICBJdGVyYXRpdmUgY2FsY3VsYXRpb24gb2YgdmFyaWFuY2Ugb2Ygd2VpZ2h0ZWQgc2FtcGxlczoKKyAgICAgICAgXGZbCisgICAgICAgICAgICBcaGF0e1xzaWdtYX1fbl4yID0KKyAgICAgICAgICAgICAgICBcZnJhY3tcYmFye3d9X24gLSB3X259e1xiYXJ7d31fbn1caGF0e1xzaWdtYX1fe24gLSAxfV4yCisgICAgICAgICAgICAgICsgXGZyYWN7d19ufXtcYmFye3d9X24gLSB3X259XGxlZnQoWF9uIC0gXGhhdHtcbXV9X25ccmlnaHQpXjIKKyAgICAgICAgICAgICxccXVhZCBuXGdlMixccXVhZFxoYXR7XHNpZ21hfV8wXjIgPSAwLgorICAgICAgICBcZl0KKyAgICAgICAgd2hlcmUgXGYkXGJhcnt3fV9uXGYkIGlzIHRoZSBzdW0gb2YgdGhlIFxmJG5cZiQgd2VpZ2h0cyBcZiR3X2lcZiQgYW5kIFxmJFxoYXR7XG11fV9uXGYkCisgICAgICAgIHRoZSBlc3RpbWF0ZSBvZiB0aGUgbWVhbiBvZiB0aGUgd2VpZ2h0ZWQgc2FtcGxlcy4gTm90ZSB0aGF0IHRoZSBzYW1wbGUgdmFyaWFuY2UgaXMgbm90IGRlZmluZWQgZm9yCisgICAgICAgIFxmJG4gPD0gMVxmJC4KKyAgICAqLworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBNZWFuRmVhdHVyZSwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB3ZWlnaHRlZF92YXJpYW5jZV9pbXBsCisgICAgICA6IGFjY3VtdWxhdG9yX2Jhc2UKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgbnVtZXJpYzo6ZnVuY3Rpb25hbDo6bXVsdGlwbGllczxTYW1wbGUsIFdlaWdodD46OnJlc3VsdF90eXBlIHdlaWdodGVkX3NhbXBsZTsKKyAgICAgICAgLy8gZm9yIGJvb3N0OjpyZXN1bHRfb2YKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBudW1lcmljOjpmdW5jdGlvbmFsOjpmZGl2PHdlaWdodGVkX3NhbXBsZSwgV2VpZ2h0Pjo6cmVzdWx0X3R5cGUgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgd2VpZ2h0ZWRfdmFyaWFuY2VfaW1wbChBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICAgIDogd2VpZ2h0ZWRfdmFyaWFuY2UobnVtZXJpYzo6ZmRpdihhcmdzW3NhbXBsZSB8IFNhbXBsZSgpXSwgbnVtZXJpYzo6b25lPFdlaWdodD46OnZhbHVlKSkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQXJncz4KKyAgICAgICAgdm9pZCBvcGVyYXRvciAoKShBcmdzIGNvbnN0ICZhcmdzKQorICAgICAgICB7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBjbnQgPSBjb3VudChhcmdzKTsKKworICAgICAgICAgICAgaWYoY250ID4gMSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBleHRyYWN0b3I8TWVhbkZlYXR1cmU+IGNvbnN0IHNvbWVfbWVhbiA9IHt9OworCisgICAgICAgICAgICAgICAgcmVzdWx0X3R5cGUgdG1wID0gYXJnc1twYXJhbWV0ZXI6OmtleXdvcmQ8VGFnPjo6Z2V0KCldIC0gc29tZV9tZWFuKGFyZ3MpOworCisgICAgICAgICAgICAgICAgdGhpcy0+d2VpZ2h0ZWRfdmFyaWFuY2UgPQorICAgICAgICAgICAgICAgICAgICBudW1lcmljOjpmZGl2KHRoaXMtPndlaWdodGVkX3ZhcmlhbmNlICogKHN1bV9vZl93ZWlnaHRzKGFyZ3MpIC0gYXJnc1t3ZWlnaHRdKSwgc3VtX29mX3dlaWdodHMoYXJncykpCisgICAgICAgICAgICAgICAgICArIG51bWVyaWM6OmZkaXYodG1wICogdG1wICogYXJnc1t3ZWlnaHRdLCBzdW1fb2Zfd2VpZ2h0cyhhcmdzKSAtIGFyZ3Nbd2VpZ2h0XSApOworICAgICAgICAgICAgfQorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0X3R5cGUgcmVzdWx0KGRvbnRfY2FyZSkgY29uc3QKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHRoaXMtPndlaWdodGVkX3ZhcmlhbmNlOworICAgICAgICB9CisKKyAgICBwcml2YXRlOgorICAgICAgICByZXN1bHRfdHlwZSB3ZWlnaHRlZF92YXJpYW5jZTsKKyAgICB9OworCit9IC8vIG5hbWVzcGFjZSBpbXBsCisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIHRhZzo6d2VpZ2h0ZWRfdmFyaWFuY2UKKy8vIHRhZzo6aW1tZWRpYXRlX3dlaWdodGVkX3ZhcmlhbmNlCisvLworbmFtZXNwYWNlIHRhZworeworICAgIHN0cnVjdCBsYXp5X3dlaWdodGVkX3ZhcmlhbmNlCisgICAgICA6IGRlcGVuZHNfb248d2VpZ2h0ZWRfbW9tZW50PDI+LCB3ZWlnaHRlZF9tZWFuPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjpsYXp5X3dlaWdodGVkX3ZhcmlhbmNlX2ltcGw8bXBsOjpfMSwgbXBsOjpfMiwgd2VpZ2h0ZWRfbWVhbj4gaW1wbDsKKyAgICB9OworCisgICAgc3RydWN0IHdlaWdodGVkX3ZhcmlhbmNlCisgICAgICA6IGRlcGVuZHNfb248Y291bnQsIGltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuPgorICAgIHsKKyAgICAgICAgLy8vIElOVEVSTkFMIE9OTFkKKyAgICAgICAgLy8vCisgICAgICAgIHR5cGVkZWYgYWNjdW11bGF0b3JzOjppbXBsOjp3ZWlnaHRlZF92YXJpYW5jZV9pbXBsPG1wbDo6XzEsIG1wbDo6XzIsIGltbWVkaWF0ZV93ZWlnaHRlZF9tZWFuLCBzYW1wbGU+IGltcGw7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gZXh0cmFjdDo6d2VpZ2h0ZWRfdmFyaWFuY2UKKy8vIGV4dHJhY3Q6OmltbWVkaWF0ZV93ZWlnaHRlZF92YXJpYW5jZQorLy8KK25hbWVzcGFjZSBleHRyYWN0Cit7CisgICAgZXh0cmFjdG9yPHRhZzo6bGF6eV93ZWlnaHRlZF92YXJpYW5jZT4gY29uc3QgbGF6eV93ZWlnaHRlZF92YXJpYW5jZSA9IHt9OworICAgIGV4dHJhY3Rvcjx0YWc6OndlaWdodGVkX3ZhcmlhbmNlPiBjb25zdCB3ZWlnaHRlZF92YXJpYW5jZSA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwobGF6eV93ZWlnaHRlZF92YXJpYW5jZSkKKyAgICBCT09TVF9BQ0NVTVVMQVRPUlNfSUdOT1JFX0dMT0JBTCh3ZWlnaHRlZF92YXJpYW5jZSkKK30KKwordXNpbmcgZXh0cmFjdDo6bGF6eV93ZWlnaHRlZF92YXJpYW5jZTsKK3VzaW5nIGV4dHJhY3Q6OndlaWdodGVkX3ZhcmlhbmNlOworCisvLyB3ZWlnaHRlZF92YXJpYW5jZShsYXp5KSAtPiBsYXp5X3dlaWdodGVkX3ZhcmlhbmNlCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3ZhcmlhbmNlKGxhenkpPgoreworICAgIHR5cGVkZWYgdGFnOjpsYXp5X3dlaWdodGVkX3ZhcmlhbmNlIHR5cGU7Cit9OworCisvLyB3ZWlnaHRlZF92YXJpYW5jZShpbW1lZGlhdGUpIC0+IHdlaWdodGVkX3ZhcmlhbmNlCit0ZW1wbGF0ZTw+CitzdHJ1Y3QgYXNfZmVhdHVyZTx0YWc6OndlaWdodGVkX3ZhcmlhbmNlKGltbWVkaWF0ZSk+Cit7CisgICAgdHlwZWRlZiB0YWc6OndlaWdodGVkX3ZhcmlhbmNlIHR5cGU7Cit9OworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLy8vIGRyb3BwYWJsZV9hY2N1bXVsYXRvcjx3ZWlnaHRlZF92YXJpYW5jZV9pbXBsPgorLy8vLyAgbmVlZCB0byBzcGVjaWFsaXplIGRyb3BwYWJsZSBsYXp5IHdlaWdodGVkX3ZhcmlhbmNlIHRvIGNhY2hlIHRoZSByZXN1bHQgYXQgdGhlCisvLy8vICBwb2ludCB0aGUgYWNjdW11bGF0b3IgaXMgZHJvcHBlZC4KKy8vLy8vIElOVEVSTkFMIE9OTFkKKy8vLy8vCisvL3RlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBNZWFuRmVhdHVyZT4KKy8vc3RydWN0IGRyb3BwYWJsZV9hY2N1bXVsYXRvcjxpbXBsOjp3ZWlnaHRlZF92YXJpYW5jZV9pbXBsPFNhbXBsZSwgV2VpZ2h0LCBNZWFuRmVhdHVyZT4gPgorLy8gIDogZHJvcHBhYmxlX2FjY3VtdWxhdG9yX2Jhc2U8CisvLyAgICAgICAgd2l0aF9jYWNoZWRfcmVzdWx0PGltcGw6OndlaWdodGVkX3ZhcmlhbmNlX2ltcGw8U2FtcGxlLCBXZWlnaHQsIE1lYW5GZWF0dXJlPiA+CisvLyAgICA+CisvL3sKKy8vICAgIHRlbXBsYXRlPHR5cGVuYW1lIEFyZ3M+CisvLyAgICBkcm9wcGFibGVfYWNjdW11bGF0b3IoQXJncyBjb25zdCAmYXJncykKKy8vICAgICAgOiBkcm9wcGFibGVfYWNjdW11bGF0b3I6OmJhc2UoYXJncykKKy8vICAgIHsKKy8vICAgIH0KKy8vfTsKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0OjphY2N1bXVsYXRvcnMKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3Mvd2l0aF9lcnJvci5ocHAKQEAgLTAsMCArMSw0NCBAQAorLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2l0aF9lcnJvci5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XSVRIX0VSUk9SX0hQUF9FQU5fMDFfMTFfMjAwNQorI2RlZmluZSBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19XSVRIX0VSUk9SX0hQUF9FQU5fMDFfMTFfMjAwNQorCisjaW5jbHVkZSA8Ym9vc3QvcHJlcHJvY2Vzc29yL3JlcGV0aXRpb24vZW51bV9wYXJhbXMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC92ZWN0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC90cmFuc2Zvcm1fdmlldy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL3BsYWNlaG9sZGVycy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL3N0YXRpc3RpY3NfZndkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljcy9lcnJvcl9vZi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworbmFtZXNwYWNlIGRldGFpbAoreworICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZlYXR1cmU+CisgICAgc3RydWN0IGVycm9yX29mX3RhZworICAgIHsKKyAgICAgICAgdHlwZWRlZiB0YWc6OmVycm9yX29mPEZlYXR1cmU+IHR5cGU7CisgICAgfTsKK30KKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gd2l0aF9lcnJvcgorLy8KK3RlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIHR5cGVuYW1lIEZlYXR1cmUpPgorc3RydWN0IHdpdGhfZXJyb3IKKyAgOiBtcGw6OnRyYW5zZm9ybV92aWV3PAorICAgICAgICBtcGw6OnZlY3RvcjxCT09TVF9QUF9FTlVNX1BBUkFNUyhCT09TVF9BQ0NVTVVMQVRPUlNfTUFYX0ZFQVRVUkVTLCBGZWF0dXJlKT4KKyAgICAgICwgZGV0YWlsOjplcnJvcl9vZl90YWc8bXBsOjpfMT4KKyAgICA+Cit7Cit9OworCit9fSAvLyBuYW1lc3BhY2UgYm9vc3Q6OmFjY3VtdWxhdG9ycworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hY2N1bXVsYXRvcnMvc3RhdGlzdGljc19md2QuaHBwCkBAIC0wLDAgKzEsNDMyIEBACisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBzdGF0aXN0aWNzX2Z3ZC5ocHAKKy8vCisvLyAgQ29weXJpZ2h0IDIwMDUgRXJpYyBOaWVibGVyLiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QKKy8vICBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZQorLy8gIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworI2lmbmRlZiBCT09TVF9BQ0NVTVVMQVRPUlNfU1RBVElTVElDU19TVEFUSVNUSUNTX0ZXRF9IUFBfRUFOXzIzXzExXzIwMDUKKyNkZWZpbmUgQk9PU1RfQUNDVU1VTEFUT1JTX1NUQVRJU1RJQ1NfU1RBVElTVElDU19GV0RfSFBQX0VBTl8yM18xMV8yMDA1CisKKyNpbmNsdWRlIDxib29zdC9tcGwvYXBwbHlfZndkLmhwcD4gLy8gZm9yIG1wbDo6bmEKKyNpbmNsdWRlIDxib29zdC9tcGwvcHJpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3ByZXByb2Nlc3Nvci9yZXBldGl0aW9uL2VudW1fcGFyYW1zX3dpdGhfYV9kZWZhdWx0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvYWNjdW11bGF0b3JzX2Z3ZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWNjdW11bGF0b3JzL2ZyYW1ld29yay9kZXBlbmRzX29uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hY2N1bXVsYXRvcnMvZnJhbWV3b3JrL2V4dHJhY3Rvci5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhY2N1bXVsYXRvcnMKK3sKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gYmFzZSBzdHJ1Y3QgYW5kIGJhc2UgZXh0cmFjdG9yIGZvciBxdWFudGlsZXMKK25hbWVzcGFjZSB0YWcKK3sKKyAgICBzdHJ1Y3QgcXVhbnRpbGUKKyAgICAgIDogZGVwZW5kc19vbjw+CisgICAgeworICAgICAgICB0eXBlZGVmIG1wbDo6cHJpbnQ8Y2xhc3MgX19fX01JU1NJTkdfU1BFQ0lGSUNfUVVBTlRJTEVfRkVBVFVSRV9JTl9BQ0NVTVVMQVRPUl9TRVRfX19fID4gaW1wbDsKKyAgICB9OworfQorbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjpxdWFudGlsZT4gY29uc3QgcXVhbnRpbGUgPSB7fTsKKworICAgIEJPT1NUX0FDQ1VNVUxBVE9SU19JR05PUkVfR0xPQkFMKHF1YW50aWxlKQorfQordXNpbmcgZXh0cmFjdDo6cXVhbnRpbGU7CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKy8vIGJhc2Ugc3RydWN0IGFuZCBiYXNlIGV4dHJhY3RvciBmb3IgKmNvaGVyZW50KiB0YWlsIG1lYW5zCituYW1lc3BhY2UgdGFnCit7CisgICAgc3RydWN0IHRhaWxfbWVhbgorICAgICAgOiBkZXBlbmRzX29uPD4KKyAgICB7CisgICAgICAgIHR5cGVkZWYgbXBsOjpwcmludDxjbGFzcyBfX19fTUlTU0lOR19TUEVDSUZJQ19UQUlMX01FQU5fRkVBVFVSRV9JTl9BQ0NVTVVMQVRPUl9TRVRfX19fID4gaW1wbDsKKyAgICB9OworfQorbmFtZXNwYWNlIGV4dHJhY3QKK3sKKyAgICBleHRyYWN0b3I8dGFnOjp0YWlsX21lYW4+IGNvbnN0IHRhaWxfbWVhbiA9IHt9OworCisgICAgQk9PU1RfQUNDVU1VTEFUT1JTX0lHTk9SRV9HTE9CQUwodGFpbF9tZWFuKQorfQordXNpbmcgZXh0cmFjdDo6dGFpbF9tZWFuOworCituYW1lc3BhY2UgdGFnCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIFZhcmlhdGVzIHRhZ3MKKyAgICBzdHJ1Y3Qgd2VpZ2h0czsKKyAgICBzdHJ1Y3QgY292YXJpYXRlMTsKKyAgICBzdHJ1Y3QgY292YXJpYXRlMjsKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBTdGF0aXN0aWMgdGFncworICAgIHN0cnVjdCBjb3VudDsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgY292YXJpYW5jZTsKKyAgICBzdHJ1Y3QgZGVuc2l0eTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBlcnJvcl9vZjsKKyAgICBzdHJ1Y3QgZXh0ZW5kZWRfcF9zcXVhcmU7CisgICAgc3RydWN0IGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlOworICAgIHN0cnVjdCBleHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZV9xdWFkcmF0aWM7CisgICAgc3RydWN0IGt1cnRvc2lzOworICAgIHN0cnVjdCBtYXg7CisgICAgc3RydWN0IG1lYW47CisgICAgc3RydWN0IGltbWVkaWF0ZV9tZWFuOworICAgIHN0cnVjdCBtZWFuX29mX3dlaWdodHM7CisgICAgc3RydWN0IGltbWVkaWF0ZV9tZWFuX29mX3dlaWdodHM7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IG1lYW5fb2ZfdmFyaWF0ZXM7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IGltbWVkaWF0ZV9tZWFuX29mX3ZhcmlhdGVzOworICAgIHN0cnVjdCBtZWRpYW47CisgICAgc3RydWN0IHdpdGhfZGVuc2l0eV9tZWRpYW47CisgICAgc3RydWN0IHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fbWVkaWFuOworICAgIHN0cnVjdCBtaW47CisgICAgdGVtcGxhdGU8aW50IE4+CisgICAgc3RydWN0IG1vbWVudDsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBlYWtzX292ZXJfdGhyZXNob2xkOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgcGVha3Nfb3Zlcl90aHJlc2hvbGRfcHJvYjsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHBvdF90YWlsX21lYW47CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBwb3RfdGFpbF9tZWFuX3Byb2I7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBwb3RfcXVhbnRpbGU7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBwb3RfcXVhbnRpbGVfcHJvYjsKKyAgICBzdHJ1Y3QgcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb247CisgICAgc3RydWN0IHBfc3F1YXJlX3F1YW50aWxlOworICAgIHN0cnVjdCBwX3NxdWFyZV9xdWFudGlsZV9mb3JfbWVkaWFuOworICAgIHN0cnVjdCBza2V3bmVzczsKKyAgICBzdHJ1Y3Qgc3VtOworICAgIHN0cnVjdCBzdW1fb2Zfd2VpZ2h0czsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgc3VtX29mX3ZhcmlhdGVzOworICAgIHN0cnVjdCBzdW1fa2FoYW47CisgICAgc3RydWN0IHN1bV9vZl93ZWlnaHRzX2thaGFuOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCBzdW1fb2ZfdmFyaWF0ZXNfa2FoYW47CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgY29oZXJlbnRfdGFpbF9tZWFuOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgbm9uX2NvaGVyZW50X3RhaWxfbWVhbjsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHRhaWxfcXVhbnRpbGU7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWcsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgdGFpbF92YXJpYXRlOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgdGFpbF93ZWlnaHRzOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHJpZ2h0X3RhaWxfdmFyaWF0ZTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZywgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBsZWZ0X3RhaWxfdmFyaWF0ZTsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCB0YWlsX3ZhcmlhdGVfbWVhbnM7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgYWJzb2x1dGVfdGFpbF92YXJpYXRlX21lYW5zOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHJlbGF0aXZlX3RhaWxfdmFyaWF0ZV9tZWFuczsKKyAgICBzdHJ1Y3QgbGF6eV92YXJpYW5jZTsKKyAgICBzdHJ1Y3QgdmFyaWFuY2U7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX2NvdmFyaWFuY2U7CisgICAgc3RydWN0IHdlaWdodGVkX2RlbnNpdHk7CisgICAgc3RydWN0IHdlaWdodGVkX2t1cnRvc2lzOworICAgIHN0cnVjdCB3ZWlnaHRlZF9tZWFuOworICAgIHN0cnVjdCBpbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbjsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfbWVhbl9vZl92YXJpYXRlczsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3QgaW1tZWRpYXRlX3dlaWdodGVkX21lYW5fb2ZfdmFyaWF0ZXM7CisgICAgc3RydWN0IHdlaWdodGVkX21lZGlhbjsKKyAgICBzdHJ1Y3Qgd2l0aF9kZW5zaXR5X3dlaWdodGVkX21lZGlhbjsKKyAgICBzdHJ1Y3Qgd2l0aF9wX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl93ZWlnaHRlZF9tZWRpYW47CisgICAgc3RydWN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlOworICAgIHN0cnVjdCB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZTsKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfZXh0ZW5kZWRfcF9zcXVhcmVfcXVhbnRpbGVfcXVhZHJhdGljOworICAgIHRlbXBsYXRlPGludCBOPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9tb21lbnQ7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wZWFrc19vdmVyX3RocmVzaG9sZDsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkX3Byb2I7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wb3RfcXVhbnRpbGU7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wb3RfcXVhbnRpbGVfcHJvYjsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3BvdF90YWlsX21lYW47CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wb3RfdGFpbF9tZWFuX3Byb2I7CisgICAgc3RydWN0IHdlaWdodGVkX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uOworICAgIHN0cnVjdCB3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZTsKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcF9zcXVhcmVfcXVhbnRpbGVfZm9yX21lZGlhbjsKKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfc2tld25lc3M7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF90YWlsX3F1YW50aWxlOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbjsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3RhaWxfcXVhbnRpbGU7CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfdGFpbF92YXJpYXRlX21lYW5zOworICAgIHRlbXBsYXRlPHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IGFic29sdXRlX3dlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuczsKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBMZWZ0UmlnaHQsIHR5cGVuYW1lIFZhcmlhdGVUeXBlLCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCByZWxhdGl2ZV93ZWlnaHRlZF90YWlsX3ZhcmlhdGVfbWVhbnM7CisgICAgc3RydWN0IGxhenlfd2VpZ2h0ZWRfdmFyaWFuY2U7CisgICAgc3RydWN0IHdlaWdodGVkX3ZhcmlhbmNlOworICAgIHN0cnVjdCB3ZWlnaHRlZF9zdW07CisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX3N1bV9vZl92YXJpYXRlczsKKyAgICBzdHJ1Y3Qgcm9sbGluZ193aW5kb3dfcGx1czE7CisgICAgc3RydWN0IHJvbGxpbmdfd2luZG93OworICAgIHN0cnVjdCByb2xsaW5nX3N1bTsKKyAgICBzdHJ1Y3Qgcm9sbGluZ19jb3VudDsKKyAgICBzdHJ1Y3Qgcm9sbGluZ19tZWFuOworfSAvLyBuYW1lc3BhY2UgdGFnCisKK25hbWVzcGFjZSBpbXBsCit7CisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIFN0YXRpc3RpY3MgaW1wbHMKKyAgICBzdHJ1Y3QgY291bnRfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgVmFyaWF0ZVR5cGUsIHR5cGVuYW1lIFZhcmlhdGVUYWc+CisgICAgc3RydWN0IGNvdmFyaWFuY2VfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3QgZGVuc2l0eV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBGZWF0dXJlPgorICAgIHN0cnVjdCBlcnJvcl9vZl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBWYXJpYW5jZT4KKyAgICBzdHJ1Y3QgZXJyb3Jfb2ZfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBleHRlbmRlZF9wX3NxdWFyZV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBJbXBsMSwgdHlwZW5hbWUgSW1wbDI+CisgICAgc3RydWN0IGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IGt1cnRvc2lzX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGU+CisgICAgc3RydWN0IG1heF9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBtZWRpYW5faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgd2l0aF9kZW5zaXR5X21lZGlhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX21lZGlhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBtaW5faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgU3VtRmVhdHVyZSA9IHRhZzo6c3VtPgorICAgIHN0cnVjdCBtZWFuX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFRhZyA9IHRhZzo6c2FtcGxlPgorICAgIHN0cnVjdCBpbW1lZGlhdGVfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgTiwgdHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBtb21lbnRfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCBwZWFrc19vdmVyX3RocmVzaG9sZF9wcm9iX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIEltcGwsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgcG90X3F1YW50aWxlX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIEltcGwsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgcG90X3RhaWxfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBwX3NxdWFyZV9jdW11bGF0aXZlX2Rpc3RyaWJ1dGlvbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBJbXBsPgorICAgIHN0cnVjdCBwX3NxdWFyZV9xdWFudGlsZV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCBza2V3bmVzc19pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBUYWcgPSB0YWc6OnNhbXBsZT4KKyAgICBzdHJ1Y3Qgc3VtX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3Qgc3VtX2thaGFuX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3QgdGFpbF9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IGNvaGVyZW50X3RhaWxfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IG5vbl9jb2hlcmVudF90YWlsX21lYW5faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsX3F1YW50aWxlX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZywgdHlwZW5hbWUgTGVmdFJpZ2h0PgorICAgIHN0cnVjdCB0YWlsX3ZhcmlhdGVfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgSW1wbCwgdHlwZW5hbWUgTGVmdFJpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVGFnPgorICAgIHN0cnVjdCB0YWlsX3ZhcmlhdGVfbWVhbnNfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTWVhbkZlYXR1cmU+CisgICAgc3RydWN0IGxhenlfdmFyaWFuY2VfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgTWVhbkZlYXR1cmUsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3QgdmFyaWFuY2VfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBWYXJpYXRlVHlwZSwgdHlwZW5hbWUgVmFyaWF0ZVRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfY292YXJpYW5jZV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX2RlbnNpdHlfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgIHN0cnVjdCB3ZWlnaHRlZF9rdXJ0b3Npc19pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9tZWRpYW5faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgd2l0aF9kZW5zaXR5X3dlaWdodGVkX21lZGlhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgc3RydWN0IHdpdGhfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25fd2VpZ2h0ZWRfbWVkaWFuX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9tZWFuX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCBpbW1lZGlhdGVfd2VpZ2h0ZWRfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcGVha3Nfb3Zlcl90aHJlc2hvbGRfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBMZWZ0UmlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3BlYWtzX292ZXJfdGhyZXNob2xkX3Byb2JfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0PgorICAgIHN0cnVjdCB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX3dlaWdodGVkX21lZGlhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX2V4dGVuZGVkX3Bfc3F1YXJlX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBOLCB0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfbW9tZW50X2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfcF9zcXVhcmVfY3VtdWxhdGl2ZV9kaXN0cmlidXRpb25faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBJbXBsPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9wX3NxdWFyZV9xdWFudGlsZV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQ+CisgICAgc3RydWN0IHdlaWdodGVkX3NrZXduZXNzX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgVGFnPgorICAgIHN0cnVjdCB3ZWlnaHRlZF9zdW1faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZSwgdHlwZW5hbWUgV2VpZ2h0LCB0eXBlbmFtZSBUYWc+CisgICAgc3RydWN0IHdlaWdodGVkX3N1bV9rYWhhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgbm9uX2NvaGVyZW50X3dlaWdodGVkX3RhaWxfbWVhbl9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIExlZnRSaWdodD4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfdGFpbF9xdWFudGlsZV9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIEltcGwsIHR5cGVuYW1lIExlZnRSaWdodCwgdHlwZW5hbWUgVmFyaWF0ZVR5cGU+CisgICAgc3RydWN0IHdlaWdodGVkX3RhaWxfdmFyaWF0ZV9tZWFuc19pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlLCB0eXBlbmFtZSBXZWlnaHQsIHR5cGVuYW1lIE1lYW5GZWF0dXJlPgorICAgIHN0cnVjdCBsYXp5X3dlaWdodGVkX3ZhcmlhbmNlX2ltcGw7CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTYW1wbGUsIHR5cGVuYW1lIFdlaWdodCwgdHlwZW5hbWUgTWVhbkZlYXR1cmUsIHR5cGVuYW1lIFRhZz4KKyAgICBzdHJ1Y3Qgd2VpZ2h0ZWRfdmFyaWFuY2VfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgcm9sbGluZ193aW5kb3dfcGx1czFfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgcm9sbGluZ193aW5kb3dfaW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgcm9sbGluZ19zdW1faW1wbDsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNhbXBsZT4KKyAgICBzdHJ1Y3Qgcm9sbGluZ19jb3VudF9pbXBsOworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2FtcGxlPgorICAgIHN0cnVjdCByb2xsaW5nX21lYW5faW1wbDsKK30gLy8gbmFtZXNwYWNlIGltcGwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gc3RhdHMKKy8vICAgICAgQSBtb3JlIGRlc2NyaXB0aXZlIG5hbWUgZm9yIGFuIE1QTCBzZXF1ZW5jZSBvZiBzdGF0aXN0aWNzLgordGVtcGxhdGU8Qk9PU1RfUFBfRU5VTV9QQVJBTVNfV0lUSF9BX0RFRkFVTFQoQk9PU1RfQUNDVU1VTEFUT1JTX01BWF9GRUFUVVJFUywgdHlwZW5hbWUgRmVhdHVyZSwgbXBsOjpuYSk+CitzdHJ1Y3Qgc3RhdHM7CisKK3RlbXBsYXRlPEJPT1NUX1BQX0VOVU1fUEFSQU1TX1dJVEhfQV9ERUZBVUxUKEJPT1NUX0FDQ1VNVUxBVE9SU19NQVhfRkVBVFVSRVMsIHR5cGVuYW1lIEZlYXR1cmUsIG1wbDo6bmEpPgorc3RydWN0IHdpdGhfZXJyb3I7CisKKy8vIG1vZGlmaWVycyBmb3IgdGhlIG1lYW4gYW5kIHZhcmlhbmNlIHN0YXRzCitzdHJ1Y3QgbGF6eSB7fTsKK3N0cnVjdCBpbW1lZGlhdGUge307CisKKy8vIG1vZGlmaWVycyBmb3IgdGhlIHZhcmlhbmNlIHN0YXQKKy8vIHN0cnVjdCBmYXN0IHt9OworLy8gc3RydWN0IGFjY3VyYXRlIHt9OworCisvLyBtb2RpZmllcnMgZm9yIG9yZGVyCitzdHJ1Y3QgcmlnaHQge307CitzdHJ1Y3QgbGVmdCB7fTsKKy8vIHR5cGVkZWYgcmlnaHQgZGVmYXVsdF9vcmRlcl90YWdfdHlwZTsKKworLy8gbW9kaWZpZXJzIGZvciB0aGUgdGFpbF92YXJpYXRlX21lYW5zIHN0YXQKK3N0cnVjdCBhYnNvbHV0ZSB7fTsKK3N0cnVjdCByZWxhdGl2ZSB7fTsKKworLy8gbW9kaWZpZXJzIGZvciBtZWRpYW4gYW5kIHdlaWdodGVkX21lZGlhbiBzdGF0cworc3RydWN0IHdpdGhfZGVuc2l0eSB7fTsKK3N0cnVjdCB3aXRoX3Bfc3F1YXJlX2N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uIHt9Oworc3RydWN0IHdpdGhfcF9zcXVhcmVfcXVhbnRpbGUge307CisKKy8vIG1vZGlmaWVycyBmb3IgcGVha3Nfb3Zlcl90aHJlc2hvbGQgc3RhdAorc3RydWN0IHdpdGhfdGhyZXNob2xkX3ZhbHVlIHt9Oworc3RydWN0IHdpdGhfdGhyZXNob2xkX3Byb2JhYmlsaXR5IHt9OworCisvLyBtb2RpZmllcnMgZm9yIGV4dGVuZGVkX3Bfc3F1YXJlX3F1YW50aWxlIGFuZCB3ZWlnaHRlZF9leHRlbmRlZF9wX3NxdWFyZV9xdWFudGlsZSBzdGF0cworc3RydWN0IHdlaWdodGVkIHt9Oworc3RydWN0IHVud2VpZ2h0ZWQge307CitzdHJ1Y3QgbGluZWFyIHt9Oworc3RydWN0IHF1YWRyYXRpYyB7fTsKKworLy8gbW9kaWZpZXJzIGZvciBwX3NxdWFyZV9xdWFudGlsZQorc3RydWN0IHJlZ3VsYXIge307CitzdHJ1Y3QgZm9yX21lZGlhbiB7fTsKKworLy8gbW9kaWZpZXIgZm9yIHN1bV9rYWhhbiwgc3VtX29mX3dlaWdodHNfa2FoYW4sIHN1bV9vZl92YXJpYXRlc19rYWhhbiwgd2VpZ2h0ZWRfc3VtX2thaGFuCitzdHJ1Y3Qga2FoYW4ge307CisKK319IC8vIG5hbWVzcGFjZSBib29zdDo6YWNjdW11bGF0b3JzCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NApCaW5hcnkgZmlsZXMgL2Rldi9udWxsIGFuZCBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS8uRFNfU3RvcmUgZGlmZmVyCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2FsZ29yaXRobS5ocHAKQEAgLTAsMCArMSw4OCBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAxNC4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyBSZXZpc2lvbiBoaXN0b3J5OgorICAgIDIgRGVjIDIwMTQgbXRjIEZpcnN0IHZlcnNpb247IHBvd2VyCisgICAKKyovCisKKy8vLyBcZmlsZSBhbGdvcml0aG0uaHBwCisvLy8gXGJyaWVmIE1pc2MgQWxnb3JpdGhtcworLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworLy8vCisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fSFBQCisKKyNpbmNsdWRlIDxmdW5jdGlvbmFsPiAvLyBmb3IgcGx1cyBhbmQgbXVsdGlwbGllcworCisjaW5jbHVkZSA8Ym9vc3QvdXRpbGl0eS9lbmFibGVfaWYuaHBwPiAvLyBmb3IgYm9vc3Q6OmRpc2FibGVfaWYKKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19pbnRlZ3JhbC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCit0ZW1wbGF0ZSA8dHlwZW5hbWUgVD4KK1QgaWRlbnRpdHlfb3BlcmF0aW9uICggc3RkOjptdWx0aXBsaWVzPFQ+ICkgeyByZXR1cm4gVCgxKTsgfQorCit0ZW1wbGF0ZSA8dHlwZW5hbWUgVD4KK1QgaWRlbnRpdHlfb3BlcmF0aW9uICggc3RkOjpwbHVzPFQ+ICkgeyByZXR1cm4gVCgwKTsgfQorCisKKy8vLyBcZm4gcG93ZXIgKCBUIHgsIEludGVnZXIgbiApCisvLy8gXHJldHVybiB0aGUgdmFsdWUgIngiIHJhaXNlZCB0byB0aGUgcG93ZXIgIm4iCisvLy8gCisvLy8gXHBhcmFtIHggICAgIFRoZSB2YWx1ZSB0byBiZSBleHBvbmVudGlhdGVkCisvLy8gXHBhcmFtIG4gICAgIFRoZSBleHBvbmVudCAobXVzdCBiZSA+PSAwKQorLy8vCisvLyAgXHJlbWFyayBUYWtlbiBmcm9tIEtudXRoLCBUaGUgQXJ0IG9mIENvbXB1dGVyIFByb2dyYW1taW5nLCBWb2x1bWUgMjoKKy8vICBTZW1pbnVtZXJpY2FsIEFsZ29yaXRobXMsIFNlY3Rpb24gNC42LjMKK3RlbXBsYXRlIDx0eXBlbmFtZSBULCB0eXBlbmFtZSBJbnRlZ2VyPgordHlwZW5hbWUgYm9vc3Q6OmVuYWJsZV9pZjxib29zdDo6aXNfaW50ZWdyYWw8SW50ZWdlcj4sIFQ+Ojp0eXBlCitwb3dlciAoVCB4LCBJbnRlZ2VyIG4pIHsKKyAgICBUIHkgPSAxOyAvLyBTaG91bGQgYmUgIlQgeXsxfTsiIAorICAgIGlmIChuID09IDApIHJldHVybiB5OworICAgIHdoaWxlICh0cnVlKSB7CisgICAgICAgIGlmIChuICUgMiA9PSAxKSB7CisgICAgICAgICAgICB5ID0geCAqIHk7CisgICAgICAgICAgICBpZiAobiA9PSAxKQorICAgICAgICAgICAgICAgIHJldHVybiB5OworICAgICAgICAgICAgfQorICAgICAgICBuID0gbiAvIDI7CisgICAgICAgIHggPSB4ICogeDsKKyAgICAgICAgfQorICAgIHJldHVybiB5OworICAgIH0KKworLy8vIFxmbiBwb3dlciAoIFQgeCwgSW50ZWdlciBuLCBPcGVyYXRpb24gb3AgKQorLy8vIFxyZXR1cm4gdGhlIHZhbHVlICJ4IiByYWlzZWQgdG8gdGhlIHBvd2VyICJuIgorLy8vIHVzaW5nIHRoZSBvcGVyYXRpb24gIm9wIi4KKy8vLyAKKy8vLyBccGFyYW0geCAgICAgVGhlIHZhbHVlIHRvIGJlIGV4cG9uZW50aWF0ZWQKKy8vLyBccGFyYW0gbiAgICAgVGhlIGV4cG9uZW50IChtdXN0IGJlID49IDApCisvLy8gXHBhcmFtIG9wICAgIFRoZSBvcGVyYXRpb24gdXNlZAorLy8vCisvLyAgXHJlbWFyayBUYWtlbiBmcm9tIEtudXRoLCBUaGUgQXJ0IG9mIENvbXB1dGVyIFByb2dyYW1taW5nLCBWb2x1bWUgMjoKKy8vICBTZW1pbnVtZXJpY2FsIEFsZ29yaXRobXMsIFNlY3Rpb24gNC42LjMKK3RlbXBsYXRlIDx0eXBlbmFtZSBULCB0eXBlbmFtZSBJbnRlZ2VyLCB0eXBlbmFtZSBPcGVyYXRpb24+Cit0eXBlbmFtZSBib29zdDo6ZW5hYmxlX2lmPGJvb3N0Ojppc19pbnRlZ3JhbDxJbnRlZ2VyPiwgVD46OnR5cGUKK3Bvd2VyIChUIHgsIEludGVnZXIgbiwgT3BlcmF0aW9uIG9wKSB7CisgICAgVCB5ID0gaWRlbnRpdHlfb3BlcmF0aW9uKG9wKTsKKyAgICBpZiAobiA9PSAwKSByZXR1cm4geTsKKyAgICB3aGlsZSAodHJ1ZSkgeworICAgICAgICBpZiAobiAlIDIgPT0gMSkgeworICAgICAgICAgICAgeSA9IG9wKHgsIHkpOworICAgICAgICAgICAgaWYgKG4gPT0gMSkKKyAgICAgICAgICAgICAgICByZXR1cm4geTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgbiA9IG4gLyAyOworICAgICAgICB4ID0gb3AoeCwgeCk7CisgICAgICAgIH0KKyAgICByZXR1cm4geTsKKyAgICB9CisKK319CisKKyNlbmRpZiAvLyBCT09TVF9BTEdPUklUSE1fSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2NsYW1wLmhwcApAQCAtMCwwICsxLDE3NSBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAwOC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworIFJldmlzaW9uIGhpc3Rvcnk6CisgICAyNyBKdW5lIDIwMDkgbXRjIEZpcnN0IHZlcnNpb24KKyAgIDIzIE9jdCAgMjAxMCBtdGMgQWRkZWQgcHJlZGljYXRlIHZlcnNpb24KKyAgIAorKi8KKworLy8vIFxmaWxlIGNsYW1wLmhwcAorLy8vIFxicmllZiBDbGFtcCBhbGdvcml0aG0KKy8vLyBcYXV0aG9yIE1hcnNoYWxsIENsb3cKKy8vLworLy8vIFN1Z2dlc3RlZCBieSBvbGFmdmRzcGVrIGluIGh0dHBzOi8vc3ZuLmJvb3N0Lm9yZy90cmFjL2Jvb3N0L3RpY2tldC8zMjE1CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0NMQU1QX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fQ0xBTVBfSFBQCisKKyNpbmNsdWRlIDxmdW5jdGlvbmFsPiAgICAgICAvLyAgRm9yIHN0ZDo6bGVzcworI2luY2x1ZGUgPGl0ZXJhdG9yPiAgICAgICAgIC8vICBGb3Igc3RkOjppdGVyYXRvcl90cmFpdHMKKyNpbmNsdWRlIDxjYXNzZXJ0PgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lkZW50aXR5LmhwcD4gICAgICAvLyBmb3IgaWRlbnRpdHkKKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+IC8vIGZvciBib29zdDo6ZGlzYWJsZV9pZgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBjbGFtcCAoIFQgY29uc3QmIHZhbCwgCisvLy8gICAgICAgICAgICAgICB0eXBlbmFtZSBib29zdDo6bXBsOjppZGVudGl0eTxUPjo6dHlwZSBjb25zdCAmIGxvLCAKKy8vLyAgICAgICAgICAgICAgIHR5cGVuYW1lIGJvb3N0OjptcGw6OmlkZW50aXR5PFQ+Ojp0eXBlIGNvbnN0ICYgaGksIFByZWQgcCApCisvLy8gXHJldHVybiB0aGUgdmFsdWUgInZhbCIgYnJvdWdodCBpbnRvIHRoZSByYW5nZSBbIGxvLCBoaSBdCisvLy8gICAgIHVzaW5nIHRoZSBjb21wYXJpc29uIHByZWRpY2F0ZSBwLgorLy8vICAgICBJZiBwICggdmFsLCBsbyApIHJldHVybiBsby4KKy8vLyAgICAgSWYgcCAoIGhpLCB2YWwgKSByZXR1cm4gaGkuCisvLy8gICAgIE90aGVyd2lzZSwgcmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZS4KKy8vLyAKKy8vLyBccGFyYW0gdmFsICAgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWQKKy8vLyBccGFyYW0gbG8gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIGhpICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UgdG8gYmUgY2xhbXBlZCB0bworLy8vIFxwYXJhbSBwICAgICBBIHByZWRpY2F0ZSB0byB1c2UgdG8gY29tcGFyZSB0aGUgdmFsdWVzLgorLy8vICAgICAgICAgICAgICAgICBwICggYSwgYiApIHJldHVybnMgYSBib29sZWFuLgorLy8vCisgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIFByZWQ+IAorICBUIGNvbnN0ICYgY2xhbXAgKCBUIGNvbnN0JiB2YWwsIAorICAgIHR5cGVuYW1lIGJvb3N0OjptcGw6OmlkZW50aXR5PFQ+Ojp0eXBlIGNvbnN0ICYgbG8sIAorICAgIHR5cGVuYW1lIGJvb3N0OjptcGw6OmlkZW50aXR5PFQ+Ojp0eXBlIGNvbnN0ICYgaGksIFByZWQgcCApCisgIHsKKy8vICAgIGFzc2VydCAoICFwICggaGksIGxvICkpOyAgICAvLyBDYW4ndCBhc3NlcnQgcCAoIGxvLCBoaSApIGIvYyB0aGV5IG1pZ2h0IGJlIGVxdWFsCisgICAgcmV0dXJuIHAgKCB2YWwsIGxvICkgPyBsbyA6IHAgKCBoaSwgdmFsICkgPyBoaSA6IHZhbDsKKyAgfSAKKworCisvLy8gXGZuIGNsYW1wICggVCBjb25zdCYgdmFsLCAKKy8vLyAgICAgICAgICAgICAgIHR5cGVuYW1lIGJvb3N0OjptcGw6OmlkZW50aXR5PFQ+Ojp0eXBlIGNvbnN0ICYgbG8sIAorLy8vICAgICAgICAgICAgICAgdHlwZW5hbWUgYm9vc3Q6Om1wbDo6aWRlbnRpdHk8VD46OnR5cGUgY29uc3QgJiBoaSApCisvLy8gXHJldHVybiB0aGUgdmFsdWUgInZhbCIgYnJvdWdodCBpbnRvIHRoZSByYW5nZSBbIGxvLCBoaSBdLgorLy8vICAgICBJZiB0aGUgdmFsdWUgaXMgbGVzcyB0aGFuIGxvLCByZXR1cm4gbG8uCisvLy8gICAgIElmIHRoZSB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gImhpIiwgcmV0dXJuIGhpLgorLy8vICAgICBPdGhlcndpc2UsIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUuCisvLy8KKy8vLyBccGFyYW0gdmFsICAgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWQKKy8vLyBccGFyYW0gbG8gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIGhpICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UgdG8gYmUgY2xhbXBlZCB0bworLy8vCisgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+IAorICBUIGNvbnN0JiBjbGFtcCAoIGNvbnN0IFQmIHZhbCwgCisgICAgdHlwZW5hbWUgYm9vc3Q6Om1wbDo6aWRlbnRpdHk8VD46OnR5cGUgY29uc3QgJiBsbywgCisgICAgdHlwZW5hbWUgYm9vc3Q6Om1wbDo6aWRlbnRpdHk8VD46OnR5cGUgY29uc3QgJiBoaSApCisgIHsKKyAgICByZXR1cm4gKGNsYW1wKSAoIHZhbCwgbG8sIGhpLCBzdGQ6Omxlc3M8VD4oKSk7CisgIH0gCisKKy8vLyBcZm4gY2xhbXBfcmFuZ2UgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCwgCisvLy8gICAgICAgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGUgY29uc3QgJiBsbywgCisvLy8gICAgICAgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSApCisvLy8gXHJldHVybiBjbGFtcCB0aGUgc2VxdWVuY2Ugb2YgdmFsdWVzIFtmaXJzdCwgbGFzdCkgaW50byBbIGxvLCBoaSBdCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2Ugb2YgdmFsdWVzCisvLy8gXHBhcmFtIGxhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHJhbmdlIG9mIGlucHV0IHZhbHVlcworLy8vIFxwYXJhbSBvdXQgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIGNsYW1wZWQgdmFsdWVzIGludG8KKy8vLyBccGFyYW0gbG8gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIGhpICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UgdG8gYmUgY2xhbXBlZCB0bworLy8vCisgIHRlbXBsYXRlPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPiAKKyAgT3V0cHV0SXRlcmF0b3IgY2xhbXBfcmFuZ2UgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCwKKyAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJbnB1dEl0ZXJhdG9yPjo6dmFsdWVfdHlwZSBjb25zdCAmIGxvLCAKKyAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJbnB1dEl0ZXJhdG9yPjo6dmFsdWVfdHlwZSBjb25zdCAmIGhpICkKKyAgeworICAvLyB0aGlzIGNvdWxkIGFsc28gYmUgd3JpdHRlbiB3aXRoIGJpbmQgYW5kIHN0ZDo6dHJhbnNmb3JtCisgICAgd2hpbGUgKCBmaXJzdCAhPSBsYXN0ICkKKyAgICAgICAgKm91dCsrID0gY2xhbXAgKCAqZmlyc3QrKywgbG8sIGhpICk7CisgICAgcmV0dXJuIG91dDsKKyAgfSAKKworLy8vIFxmbiBjbGFtcF9yYW5nZSAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQsIAorLy8vICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBSYW5nZT46OnR5cGU+Ojp2YWx1ZV90eXBlIGNvbnN0ICYgbG8sCisvLy8gICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSApCisvLy8gXHJldHVybiBjbGFtcCB0aGUgc2VxdWVuY2Ugb2YgdmFsdWVzIFtmaXJzdCwgbGFzdCkgaW50byBbIGxvLCBoaSBdCisvLy8gCisvLy8gXHBhcmFtIHIgICAgIFRoZSByYW5nZSBvZiB2YWx1ZXMgdG8gYmUgY2xhbXBlZAorLy8vIFxwYXJhbSBvdXQgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIGNsYW1wZWQgdmFsdWVzIGludG8KKy8vLyBccGFyYW0gbG8gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIGhpICAgIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UgdG8gYmUgY2xhbXBlZCB0bworLy8vCisgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvcj4gCisgIHR5cGVuYW1lIGJvb3N0OjpkaXNhYmxlX2lmX2M8Ym9vc3Q6OmlzX3NhbWU8UmFuZ2UsIE91dHB1dEl0ZXJhdG9yPjo6dmFsdWUsIE91dHB1dEl0ZXJhdG9yPjo6dHlwZQorICBjbGFtcF9yYW5nZSAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQsCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBsbywgCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSApCisgIHsKKyAgICByZXR1cm4gY2xhbXBfcmFuZ2UgKCBib29zdDo6YmVnaW4gKCByICksIGJvb3N0OjplbmQgKCByICksIG91dCwgbG8sIGhpICk7CisgIH0gCisKKworLy8vIFxmbiBjbGFtcF9yYW5nZSAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3Igb3V0LCAKKy8vLyAgICAgICBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJbnB1dEl0ZXJhdG9yPjo6dmFsdWVfdHlwZSBjb25zdCAmIGxvLCAKKy8vLyAgICAgICBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJbnB1dEl0ZXJhdG9yPjo6dmFsdWVfdHlwZSBjb25zdCAmIGhpLCBQcmVkIHAgKQorLy8vIFxyZXR1cm4gY2xhbXAgdGhlIHNlcXVlbmNlIG9mIHZhbHVlcyBbZmlyc3QsIGxhc3QpIGludG8gWyBsbywgaGkgXQorLy8vICAgICB1c2luZyB0aGUgY29tcGFyaXNvbiBwcmVkaWNhdGUgcC4KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZSBvZiB2YWx1ZXMKKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgcmFuZ2Ugb2YgaW5wdXQgdmFsdWVzCisvLy8gXHBhcmFtIG91dCAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgY2xhbXBlZCB2YWx1ZXMgaW50bworLy8vIFxwYXJhbSBsbyAgICBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlIHRvIGJlIGNsYW1wZWQgdG8KKy8vLyBccGFyYW0gaGkgICAgVGhlIHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIHAgICAgIEEgcHJlZGljYXRlIHRvIHVzZSB0byBjb21wYXJlIHRoZSB2YWx1ZXMuCisvLy8gICAgICAgICAgICAgICAgIHAgKCBhLCBiICkgcmV0dXJucyBhIGJvb2xlYW4uCisKKy8vLworICB0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvciwgdHlwZW5hbWUgUHJlZD4gCisgIE91dHB1dEl0ZXJhdG9yIGNsYW1wX3JhbmdlICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBPdXRwdXRJdGVyYXRvciBvdXQsCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGUgY29uc3QgJiBsbywgCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSwgUHJlZCBwICkKKyAgeworICAvLyB0aGlzIGNvdWxkIGFsc28gYmUgd3JpdHRlbiB3aXRoIGJpbmQgYW5kIHN0ZDo6dHJhbnNmb3JtCisgICAgd2hpbGUgKCBmaXJzdCAhPSBsYXN0ICkKKyAgICAgICAgKm91dCsrID0gY2xhbXAgKCAqZmlyc3QrKywgbG8sIGhpLCBwICk7CisgICAgcmV0dXJuIG91dDsKKyAgfSAKKworLy8vIFxmbiBjbGFtcF9yYW5nZSAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQsIAorLy8vICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBSYW5nZT46OnR5cGU+Ojp2YWx1ZV90eXBlIGNvbnN0ICYgbG8sCisvLy8gICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSwKKy8vLyAgICAgICBQcmVkIHAgKQorLy8vIFxyZXR1cm4gY2xhbXAgdGhlIHNlcXVlbmNlIG9mIHZhbHVlcyBbZmlyc3QsIGxhc3QpIGludG8gWyBsbywgaGkgXQorLy8vICAgICB1c2luZyB0aGUgY29tcGFyaXNvbiBwcmVkaWNhdGUgcC4KKy8vLyAKKy8vLyBccGFyYW0gciAgICAgVGhlIHJhbmdlIG9mIHZhbHVlcyB0byBiZSBjbGFtcGVkCisvLy8gXHBhcmFtIG91dCAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgY2xhbXBlZCB2YWx1ZXMgaW50bworLy8vIFxwYXJhbSBsbyAgICBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlIHRvIGJlIGNsYW1wZWQgdG8KKy8vLyBccGFyYW0gaGkgICAgVGhlIHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZSB0byBiZSBjbGFtcGVkIHRvCisvLy8gXHBhcmFtIHAgICAgIEEgcHJlZGljYXRlIHRvIHVzZSB0byBjb21wYXJlIHRoZSB2YWx1ZXMuCisvLy8gICAgICAgICAgICAgICAgIHAgKCBhLCBiICkgcmV0dXJucyBhIGJvb2xlYW4uCisvLworLy8gIERpc2FibGUgdGhpcyB0ZW1wbGF0ZSBpZiB0aGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgYXJlIHRoZSBzYW1lIHR5cGU7CisvLyAgSW4gdGhhdCBjYXNlLCB0aGUgdXNlciB3aWxsIGdldCB0aGUgdHdvIGl0ZXJhdG9yIHZlcnNpb24uCisgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvciwgdHlwZW5hbWUgUHJlZD4gCisgIHR5cGVuYW1lIGJvb3N0OjpkaXNhYmxlX2lmX2M8Ym9vc3Q6OmlzX3NhbWU8UmFuZ2UsIE91dHB1dEl0ZXJhdG9yPjo6dmFsdWUsIE91dHB1dEl0ZXJhdG9yPjo6dHlwZQorICBjbGFtcF9yYW5nZSAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQsCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBsbywgCisgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT46OnZhbHVlX3R5cGUgY29uc3QgJiBoaSwKKyAgICBQcmVkIHAgKQorICB7CisgICAgcmV0dXJuIGNsYW1wX3JhbmdlICggYm9vc3Q6OmJlZ2luICggciApLCBib29zdDo6ZW5kICggciApLCBvdXQsIGxvLCBoaSwgcCApOworICB9IAorCisKK319CisKKyNlbmRpZiAvLyBCT09TVF9BTEdPUklUSE1fQ0xBTVBfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDExL2FsbF9vZi5ocHAKQEAgLTAsMCArMSw4MyBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAwOC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKyovCisKKy8vLyBcZmlsZSAgYWxsX29mLmhwcAorLy8vIFxicmllZiBUZXN0IHJhbmdlcyB0byBzZWUgaWYgYWxsIGVsZW1lbnRzIG1hdGNoIGEgdmFsdWUgb3IgcHJlZGljYXRlLgorLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9BTExfT0ZfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9BTExfT0ZfSFBQCisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gYWxsX29mICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBQcmVkaWNhdGUgcCApCisvLy8gXHJldHVybiB0cnVlIGlmIGFsbCBlbGVtZW50cyBpbiBbZmlyc3QsIGxhc3QpIHNhdGlzZnkgdGhlIHByZWRpY2F0ZSAncCcKKy8vLyBcbm90ZSByZXR1cm5zIHRydWUgb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHNlcXVlbmNlCisvLy8KKy8vLyBcbm90ZSAgICAgICAgICAgVGhpcyBmdW5jdGlvbiBpcyBwYXJ0IG9mIHRoZSBDKysyMDExIHN0YW5kYXJkIGxpYnJhcnkuCit0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkaWNhdGU+IAorYm9vbCBhbGxfb2YgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoICFwKCpmaXJzdCkpIAorICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgIHJldHVybiB0cnVlOyAKK30gCisKKy8vLyBcZm4gYWxsX29mICggY29uc3QgUmFuZ2UgJnIsIFByZWRpY2F0ZSBwICkKKy8vLyBccmV0dXJuIHRydWUgaWYgYWxsIGVsZW1lbnRzIGluIHRoZSByYW5nZSBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUgJ3AnCisvLy8gXG5vdGUgcmV0dXJucyB0cnVlIG9uIGFuIGVtcHR5IHJhbmdlCisvLy8gCisvLy8gXHBhcmFtIHIgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgUHJlZGljYXRlPiAKK2Jvb2wgYWxsX29mICggY29uc3QgUmFuZ2UgJnIsIFByZWRpY2F0ZSBwICkKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6YWxsX29mICggYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZCAociksIHAgKTsKK30gCisKKy8vLyBcZm4gYWxsX29mX2VxdWFsICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBjb25zdCBUICZ2YWwgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBhbGwgZWxlbWVudHMgaW4gW2ZpcnN0LCBsYXN0KSBhcmUgZXF1YWwgdG8gJ3ZhbCcKKy8vLyBcbm90ZSByZXR1cm5zIHRydWUgb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSB2YWwgICBBIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdAorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBUPiAKK2Jvb2wgYWxsX29mX2VxdWFsICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBjb25zdCBUICZ2YWwgKQoreworICAgIGZvciAoIDsgZmlyc3QgIT0gbGFzdDsgKytmaXJzdCApCisgICAgaWYgKCB2YWwgIT0gKmZpcnN0ICkgCisgICAgICAgIHJldHVybiBmYWxzZTsKKyAgICByZXR1cm4gdHJ1ZTsgCit9IAorCisvLy8gXGZuIGFsbF9vZl9lcXVhbCAoIGNvbnN0IFJhbmdlICZyLCBjb25zdCBUICZ2YWwgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBhbGwgZWxlbWVudHMgaW4gdGhlIHJhbmdlIGFyZSBlcXVhbCB0byAndmFsJworLy8vIFxub3RlIHJldHVybnMgdHJ1ZSBvbiBhbiBlbXB0eSByYW5nZQorLy8vIAorLy8vIFxwYXJhbSByICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSB2YWwgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0CisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBUPiAKK2Jvb2wgYWxsX29mX2VxdWFsICggY29uc3QgUmFuZ2UgJnIsIGNvbnN0IFQgJnZhbCApIAoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjphbGxfb2ZfZXF1YWwgKCBib29zdDo6YmVnaW4gKHIpLCBib29zdDo6ZW5kIChyKSwgdmFsICk7Cit9IAorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3QgYW5kIGFsZ29yaXRobQorCisjZW5kaWYgLy8gQk9PU1RfQUxHT1JJVEhNX0FMTF9PRl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vY3h4MTEvYW55X29mLmhwcApAQCAtMCwwICsxLDg0IEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDA4LTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisgICAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZworKi8KKworLy8vIFxmaWxlCisvLy8gXGJyaWVmIFRlc3QgcmFuZ2VzIHRvIHNlZSBpZiBhbnkgZWxlbWVudHMgbWF0Y2ggYSB2YWx1ZSBvciBwcmVkaWNhdGUuCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0FOWV9PRl9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX0FOWV9PRl9IUFAKKworI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBhbnlfb2YgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFByZWRpY2F0ZSBwICkKKy8vLyBccmV0dXJuIHRydWUgaWYgYW55IG9mIHRoZSBlbGVtZW50cyBpbiBbZmlyc3QsIGxhc3QpIHNhdGlzZnkgdGhlIHByZWRpY2F0ZQorLy8vIFxub3RlIHJldHVybnMgZmFsc2Ugb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHNlcXVlbmNlCisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4gCitib29sIGFueV9vZiAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgUHJlZGljYXRlIHAgKSAKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoIHAoKmZpcnN0KSkgCisgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKKyAgICByZXR1cm4gZmFsc2U7IAorfSAKKworLy8vIFxmbiBhbnlfb2YgKCBjb25zdCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBhbnkgZWxlbWVudHMgaW4gdGhlIHJhbmdlIHNhdGlzZnkgdGhlIHByZWRpY2F0ZSAncCcKKy8vLyBcbm90ZSByZXR1cm5zIGZhbHNlIG9uIGFuIGVtcHR5IHJhbmdlCisvLy8gCisvLy8gXHBhcmFtIHIgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgUHJlZGljYXRlPiAKK2Jvb2wgYW55X29mICggY29uc3QgUmFuZ2UgJnIsIFByZWRpY2F0ZSBwICkKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6YW55X29mIChib29zdDo6YmVnaW4gKHIpLCBib29zdDo6ZW5kIChyKSwgcCk7Cit9IAorCisvLy8gXGZuIGFueV9vZl9lcXVhbCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgY29uc3QgViAmdmFsICkKKy8vLyBccmV0dXJuIHRydWUgaWYgYW55IG9mIHRoZSBlbGVtZW50cyBpbiBbZmlyc3QsIGxhc3QpIGFyZSBlcXVhbCB0byAndmFsJworLy8vIFxub3RlIHJldHVybnMgZmFsc2Ugb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSB2YWwgICBBIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdAorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBWPiAKK2Jvb2wgYW55X29mX2VxdWFsICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBjb25zdCBWICZ2YWwgKSAKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoIHZhbCA9PSAqZmlyc3QgKQorICAgICAgICAgICAgcmV0dXJuIHRydWU7CisgICAgcmV0dXJuIGZhbHNlOyAKK30gCisKKy8vLyBcZm4gYW55X29mX2VxdWFsICggY29uc3QgUmFuZ2UgJnIsIGNvbnN0IFYgJnZhbCApCisvLy8gXHJldHVybiB0cnVlIGlmIGFueSBvZiB0aGUgZWxlbWVudHMgaW4gdGhlIHJhbmdlIGFyZSBlcXVhbCB0byAndmFsJworLy8vIFxub3RlIHJldHVybnMgZmFsc2Ugb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gciAgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHZhbCAgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0CisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBWPiAKK2Jvb2wgYW55X29mX2VxdWFsICggY29uc3QgUmFuZ2UgJnIsIGNvbnN0IFYgJnZhbCApIAoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjphbnlfb2ZfZXF1YWwgKGJvb3N0OjpiZWdpbiAociksIGJvb3N0OjplbmQgKHIpLCB2YWwpOworfQorCit9fSAvLyBuYW1lc3BhY2UgYm9vc3QgYW5kIGFsZ29yaXRobQorCisjZW5kaWYgLy8gQk9PU1RfQUxHT1JJVEhNX0FOWV9PRl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vY3h4MTEvY29weV9pZi5ocHAKQEAgLTAsMCArMSwxMjkgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMDgtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisqLworCisvLy8gXGZpbGUgIGNvcHlfaWYuaHBwCisvLy8gXGJyaWVmIENvcHkgYSBzdWJzZXQgb2YgYSBzZXF1ZW5jZSB0byBhIG5ldyBzZXF1ZW5jZQorLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9DT1BZX0lGX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fQ09QWV9JRl9IUFAKKworI2luY2x1ZGUgPHV0aWxpdHk+ICAgIC8vIGZvciBzdGQ6OnBhaXIsIHN0ZDo6bWFrZV9wYWlyCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLy8gXGZuIGNvcHlfaWYgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIHJlc3VsdCwgUHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBDb3BpZXMgYWxsIHRoZSBlbGVtZW50cyBmcm9tIHRoZSBpbnB1dCByYW5nZSB0aGF0IHNhdGlzZnkgdGhlCisvLy8gcHJlZGljYXRlIHRvIHRoZSBvdXRwdXQgcmFuZ2UuCisvLy8gXHJldHVybiBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSByZXN1bHQgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIHJlc3VsdHMgaW50bworLy8vIFxwYXJhbSBwICAgICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHJhbmdlCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4gCitPdXRwdXRJdGVyYXRvciBjb3B5X2lmICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBPdXRwdXRJdGVyYXRvciByZXN1bHQsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAocCgqZmlyc3QpKQorICAgICAgICAgICAgKnJlc3VsdCsrID0gKmZpcnN0OworICAgIHJldHVybiByZXN1bHQ7Cit9CisKKy8vLyBcZm4gY29weV9pZiAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciByZXN1bHQsIFByZWRpY2F0ZSBwICkKKy8vLyBcYnJpZWYgQ29waWVzIGFsbCB0aGUgZWxlbWVudHMgZnJvbSB0aGUgaW5wdXQgcmFuZ2UgdGhhdCBzYXRpc2Z5IHRoZQorLy8vIHByZWRpY2F0ZSB0byB0aGUgb3V0cHV0IHJhbmdlLgorLy8vIFxyZXR1cm4gVGhlIHVwZGF0ZWQgb3V0cHV0IGl0ZXJhdG9yCisvLy8gCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSByZXN1bHQgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIHJlc3VsdHMgaW50bworLy8vIFxwYXJhbSBwICAgICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHJhbmdlCisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvciwgdHlwZW5hbWUgUHJlZGljYXRlPgorT3V0cHV0SXRlcmF0b3IgY29weV9pZiAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciByZXN1bHQsIFByZWRpY2F0ZSBwICkKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6Y29weV9pZiAoYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZChyKSwgcmVzdWx0LCBwKTsKK30KKworCisvLy8gXGZuIGNvcHlfd2hpbGUgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIHJlc3VsdCwgUHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBDb3BpZXMgYWxsIHRoZSBlbGVtZW50cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IHJhbmdlIHRoYXQKKy8vLyAgICAgc2F0aXNmeSB0aGUgcHJlZGljYXRlIHRvIHRoZSBvdXRwdXQgcmFuZ2UuCisvLy8gXHJldHVybiBUaGUgdXBkYXRlZCBpbnB1dCBhbmQgb3V0cHV0IGl0ZXJhdG9ycworLy8vIAorLy8vIFxwYXJhbSBmaXJzdCAgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIHJlc3VsdCAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgcmVzdWx0cyBpbnRvCisvLy8gXHBhcmFtIHAgICAgICAgIEEgcHJlZGljYXRlIGZvciB0ZXN0aW5nIHRoZSBlbGVtZW50cyBvZiB0aGUgcmFuZ2UKKy8vLwordGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4gCitzdGQ6OnBhaXI8SW5wdXRJdGVyYXRvciwgT3V0cHV0SXRlcmF0b3I+Citjb3B5X3doaWxlICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBPdXRwdXRJdGVyYXRvciByZXN1bHQsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3QgJiYgcCgqZmlyc3QpOyArK2ZpcnN0ICkKKyAgICAgICAgKnJlc3VsdCsrID0gKmZpcnN0OworICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihmaXJzdCwgcmVzdWx0KTsKK30KKworLy8vIFxmbiBjb3B5X3doaWxlICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yIHJlc3VsdCwgUHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBDb3BpZXMgYWxsIHRoZSBlbGVtZW50cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IHJhbmdlIHRoYXQKKy8vLyAgICAgc2F0aXNmeSB0aGUgcHJlZGljYXRlIHRvIHRoZSBvdXRwdXQgcmFuZ2UuCisvLy8gXHJldHVybiBUaGUgdXBkYXRlZCBpbnB1dCBhbmQgb3V0cHV0IGl0ZXJhdG9ycworLy8vIAorLy8vIFxwYXJhbSByICAgICAgICBUaGUgaW5wdXQgcmFuZ2UKKy8vLyBccGFyYW0gcmVzdWx0ICAgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdyaXRlIHRoZSByZXN1bHRzIGludG8KKy8vLyBccGFyYW0gcCAgICAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4KK3N0ZDo6cGFpcjx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Y29uc3QgUmFuZ2U+Ojp0eXBlLCBPdXRwdXRJdGVyYXRvcj4gCitjb3B5X3doaWxlICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yIHJlc3VsdCwgUHJlZGljYXRlIHAgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpjb3B5X3doaWxlIChib29zdDo6YmVnaW4gKHIpLCBib29zdDo6ZW5kKHIpLCByZXN1bHQsIHApOworfQorCisKKy8vLyBcZm4gY29weV91bnRpbCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3IgcmVzdWx0LCBQcmVkaWNhdGUgcCApCisvLy8gXGJyaWVmIENvcGllcyBhbGwgdGhlIGVsZW1lbnRzIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgcmFuZ2UgdGhhdCBkbyBub3QKKy8vLyAgICAgc2F0aXNmeSB0aGUgcHJlZGljYXRlIHRvIHRoZSBvdXRwdXQgcmFuZ2UuCisvLy8gXHJldHVybiBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSByZXN1bHQgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIHJlc3VsdHMgaW50bworLy8vIFxwYXJhbSBwICAgICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHJhbmdlCisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkaWNhdGU+IAorc3RkOjpwYWlyPElucHV0SXRlcmF0b3IsIE91dHB1dEl0ZXJhdG9yPgorY29weV91bnRpbCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3IgcmVzdWx0LCBQcmVkaWNhdGUgcCApCit7CisgICAgZm9yICggOyBmaXJzdCAhPSBsYXN0ICYmICFwKCpmaXJzdCk7ICsrZmlyc3QgKQorICAgICAgICAqcmVzdWx0KysgPSAqZmlyc3Q7CisgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGZpcnN0LCByZXN1bHQpOworfQorCisvLy8gXGZuIGNvcHlfdW50aWwgKCBjb25zdCBSYW5nZSAmciwgT3V0cHV0SXRlcmF0b3IgcmVzdWx0LCBQcmVkaWNhdGUgcCApCisvLy8gXGJyaWVmIENvcGllcyBhbGwgdGhlIGVsZW1lbnRzIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgcmFuZ2UgdGhhdCBkbyBub3QKKy8vLyAgICAgc2F0aXNmeSB0aGUgcHJlZGljYXRlIHRvIHRoZSBvdXRwdXQgcmFuZ2UuCisvLy8gXHJldHVybiBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyAKKy8vLyBccGFyYW0gciAgICAgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHJlc3VsdCAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgcmVzdWx0cyBpbnRvCisvLy8gXHBhcmFtIHAgICAgICAgIEEgcHJlZGljYXRlIGZvciB0ZXN0aW5nIHRoZSBlbGVtZW50cyBvZiB0aGUgcmFuZ2UKKy8vLwordGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkaWNhdGU+CitzdGQ6OnBhaXI8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZSwgT3V0cHV0SXRlcmF0b3I+IAorY29weV91bnRpbCAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciByZXN1bHQsIFByZWRpY2F0ZSBwICkKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6Y29weV91bnRpbCAoYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZChyKSwgcmVzdWx0LCBwKTsKK30KKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0IGFuZCBhbGdvcml0aG0KKworI2VuZGlmICAvLyBCT09TVF9BTEdPUklUSE1fQ09QWV9JRl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vY3h4MTEvY29weV9uLmhwcApAQCAtMCwwICsxLDM1IEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDExLTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorKi8KKworLy8vIFxmaWxlICBjb3B5X24uaHBwCisvLy8gXGJyaWVmIENvcHkgbiBpdGVtcyBmcm9tIG9uZSBzZXF1ZW5jZSB0byBhbm90aGVyCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0NPUFlfTl9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX0NPUFlfTl9IUFAKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gY29weV9uICggSW5wdXRJdGVyYXRvciBmaXJzdCwgU2l6ZSBuLCBPdXRwdXRJdGVyYXRvciByZXN1bHQgKQorLy8vIFxicmllZiBDb3BpZXMgZXhhY3RseSBuIChuID4gMCkgZWxlbWVudHMgZnJvbSB0aGUgcmFuZ2Ugc3RhcnRpbmcgYXQgZmlyc3QgdG8KKy8vLyAgICAgdGhlIHJhbmdlIHN0YXJ0aW5nIGF0IHJlc3VsdC4KKy8vLyBccmV0dXJuICAgICAgICAgVGhlIHVwZGF0ZWQgb3V0cHV0IGl0ZXJhdG9yCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0ICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbiAgICAgICAgVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBjb3B5CisvLy8gXHBhcmFtIHJlc3VsdCAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgcmVzdWx0cyBpbnRvCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGUgPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIFNpemUsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPgorT3V0cHV0SXRlcmF0b3IgY29weV9uICggSW5wdXRJdGVyYXRvciBmaXJzdCwgU2l6ZSBuLCBPdXRwdXRJdGVyYXRvciByZXN1bHQgKQoreworICAgIGZvciAoIDsgbiA+IDA7IC0tbiwgKytmaXJzdCwgKytyZXN1bHQgKQorICAgICAgICAqcmVzdWx0ID0gKmZpcnN0OworICAgIHJldHVybiByZXN1bHQ7Cit9Cit9fSAvLyBuYW1lc3BhY2UgYm9vc3QgYW5kIGFsZ29yaXRobQorCisjZW5kaWYgIC8vIEJPT1NUX0FMR09SSVRITV9DT1BZX0lGX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9jeHgxMS9maW5kX2lmX25vdC5ocHAKQEAgLTAsMCArMSw1MSBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAxMS0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKyovCisKKy8vLyBcZmlsZSAgZmluZF9pZl9ub3QuaHBwCisvLy8gXGJyaWVmIEZpbmQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzZXF1ZW5jZSB0aGF0IGRvZXMgbm90IHNhdGlzZnkgYSBwcmVkaWNhdGUuCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0ZJTkRfSUZfTk9UX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fRklORF9JRl9OT1RfSFBQCisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gZmluZF9pZl9ub3QoSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBQcmVkaWNhdGUgcCkKKy8vLyBcYnJpZWYgRmluZHMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlIHRoYXQgZG9lcyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLgorLy8vIFxyZXR1cm4gICAgICAgICBUaGUgaXRlcmF0b3IgcG9pbnRpbmcgdG8gdGhlIGRlc2lyZWQgZWxlbWVudC4KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHJhbmdlCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgUHJlZGljYXRlPiAKK0lucHV0SXRlcmF0b3IgZmluZF9pZl9ub3QgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoICFwKCpmaXJzdCkpCisgICAgICAgICAgICBicmVhazsKKyAgICByZXR1cm4gZmlyc3Q7Cit9CisKKy8vLyBcZm4gZmluZF9pZl9ub3QgKCBjb25zdCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBGaW5kcyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2VxdWVuY2UgdGhhdCBkb2VzIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuCisvLy8gXHJldHVybiAgICAgICAgIFRoZSBpdGVyYXRvciBwb2ludGluZyB0byB0aGUgZGVzaXJlZCBlbGVtZW50LgorLy8vIAorLy8vIFxwYXJhbSByICAgICAgICBUaGUgaW5wdXQgcmFuZ2UKKy8vLyBccGFyYW0gcCAgICAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgUHJlZGljYXRlPgordHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZSBmaW5kX2lmX25vdCAoIGNvbnN0IFJhbmdlICZyLCBQcmVkaWNhdGUgcCApCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmZpbmRfaWZfbm90IChib29zdDo6YmVnaW4gKHIpLCBib29zdDo6ZW5kKHIpLCBwKTsKK30KKworfX0KKyNlbmRpZiAgLy8gQk9PU1RfQUxHT1JJVEhNX0ZJTkRfSUZfTk9UX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9jeHgxMS9pb3RhLmhwcApAQCAtMCwwICsxLDY1IEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDA4LTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorKi8KKworLy8vIFxmaWxlICBpb3RhLmhwcAorLy8vIFxicmllZiBHZW5lcmF0ZSBhbiBpbmNyZWFzaW5nIHNlcmllcworLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9JT1RBX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fSU9UQV9IUFAKKworI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBpb3RhICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCwgVCB2YWx1ZSApCisvLy8gXGJyaWVmIEdlbmVyYXRlcyBhbiBpbmNyZWFzaW5nIHNlcXVlbmNlIG9mIHZhbHVlcywgYW5kIHN0b3JlcyB0aGVtIGluIFtmaXJzdCwgbGFzdCkKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSB2YWx1ZSAgICBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc2VxdWVuY2UgdG8gYmUgZ2VuZXJhdGVkCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvciwgdHlwZW5hbWUgVD4KK3ZvaWQgaW90YSAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QsIFQgdmFsdWUgKQoreworICAgIGZvciAoIDsgZmlyc3QgIT0gbGFzdDsgKytmaXJzdCwgKyt2YWx1ZSApCisgICAgICAgICpmaXJzdCA9IHZhbHVlOworfQorCisvLy8gXGZuIGlvdGEgKCBSYW5nZSAmciwgVCB2YWx1ZSApCisvLy8gXGJyaWVmIEdlbmVyYXRlcyBhbiBpbmNyZWFzaW5nIHNlcXVlbmNlIG9mIHZhbHVlcywgYW5kIHN0b3JlcyB0aGVtIGluIHRoZSBpbnB1dCBSYW5nZS4KKy8vLyAKKy8vLyBccGFyYW0gciAgICAgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHZhbHVlICAgIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBzZXF1ZW5jZSB0byBiZSBnZW5lcmF0ZWQKKy8vLwordGVtcGxhdGUgPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBUPgordm9pZCBpb3RhICggUmFuZ2UgJnIsIFQgdmFsdWUgKQoreworICAgIGJvb3N0OjphbGdvcml0aG06OmlvdGEgKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSwgdmFsdWUpOworfQorCisKKy8vLyBcZm4gaW90YV9uICggT3V0cHV0SXRlcmF0b3Igb3V0LCBUIHZhbHVlLCBzdGQ6OnNpemVfdCBuICkKKy8vLyBcYnJpZWYgR2VuZXJhdGVzIGFuIGluY3JlYXNpbmcgc2VxdWVuY2Ugb2YgdmFsdWVzLCBhbmQgc3RvcmVzIHRoZW0gaW4gdGhlIGlucHV0IFJhbmdlLgorLy8vIAorLy8vIFxwYXJhbSBvdXQgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIHJlc3VsdHMgaW50bworLy8vIFxwYXJhbSB2YWx1ZSAgICBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc2VxdWVuY2UgdG8gYmUgZ2VuZXJhdGVkCisvLy8gXHBhcmFtIG4gICAgICAgIFRoZSBudW1iZXIgb2YgaXRlbXMgdG8gd3JpdGUKKy8vLwordGVtcGxhdGUgPHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBUPgorT3V0cHV0SXRlcmF0b3IgaW90YV9uICggT3V0cHV0SXRlcmF0b3Igb3V0LCBUIHZhbHVlLCBzdGQ6OnNpemVfdCBuICkKK3sKKyAgICBmb3IgKCA7IG4gPiAwOyAtLW4sICsrdmFsdWUgKQorICAgICAgICAqb3V0KysgPSB2YWx1ZTsKKworICAgIHJldHVybiBvdXQ7Cit9CisKK319CisKKyNlbmRpZiAgLy8gQk9PU1RfQUxHT1JJVEhNX0lPVEFfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDExL2lzX3BhcnRpdGlvbmVkLmhwcApAQCAtMCwwICsxLDU2IEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDExLTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorKi8KKworLy8vIFxmaWxlICBpc19wYXJ0aXRpb25lZC5ocHAKKy8vLyBcYnJpZWYgVGVsbCBpZiBhIHNlcXVlbmNlIGlzIHBhcnRpdGlvbmVkCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0lTX1BBUlRJVElPTkVEX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fSVNfUEFSVElUSU9ORURfSFBQCisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gaXNfcGFydGl0aW9uZWQgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFVuYXJ5UHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBUZXN0cyB0byBzZWUgaWYgYSBzZXF1ZW5jZSBpcyBwYXJ0aXRpb25lZCBhY2NvcmRpbmcgdG8gYSBwcmVkaWNhdGUKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICAgICBUaGUgcHJlZGljYXRlIHRvIHRlc3QgdGhlIHZhbHVlcyB3aXRoCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGUgPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIFVuYXJ5UHJlZGljYXRlPgorYm9vbCBpc19wYXJ0aXRpb25lZCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgVW5hcnlQcmVkaWNhdGUgcCApCit7CisvLyAgUnVuIHRocm91Z2ggdGhlIHBhcnQgdGhhdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoICFwICgqZmlyc3QpKQorICAgICAgICAgICAgYnJlYWs7CisvLyAgTm93IHRoZSBwYXJ0IHRoYXQgZG9lcyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlCisgICAgZm9yICggOyBmaXJzdCAhPSBsYXN0OyArK2ZpcnN0ICkKKyAgICAgICAgaWYgKCBwICgqZmlyc3QpKQorICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgIHJldHVybiB0cnVlOworfQorCisvLy8gXGZuIGlzX3BhcnRpdGlvbmVkICggY29uc3QgUmFuZ2UgJnIsIFVuYXJ5UHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBHZW5lcmF0ZXMgYW4gaW5jcmVhc2luZyBzZXF1ZW5jZSBvZiB2YWx1ZXMsIGFuZCBzdG9yZXMgdGhlbSBpbiB0aGUgaW5wdXQgUmFuZ2UuCisvLy8gCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBwICAgICAgICBUaGUgcHJlZGljYXRlIHRvIHRlc3QgdGhlIHZhbHVlcyB3aXRoCisvLy8KK3RlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgVW5hcnlQcmVkaWNhdGU+Citib29sIGlzX3BhcnRpdGlvbmVkICggY29uc3QgUmFuZ2UgJnIsIFVuYXJ5UHJlZGljYXRlIHAgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjppc19wYXJ0aXRpb25lZCAoYm9vc3Q6OmJlZ2luKHIpLCBib29zdDo6ZW5kKHIpLCBwKTsKK30KKworCit9fQorCisjZW5kaWYgIC8vIEJPT1NUX0FMR09SSVRITV9JU19QQVJUSVRJT05FRF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vY3h4MTEvaXNfcGVybXV0YXRpb24uaHBwCkBAIC0wLDAgKzEsMTg1IEBACisvKgorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMTEtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisqLworCisvLy8gXGZpbGUgIGlzX3Blcm11dGF0aW9uLmhwcAorLy8vIFxicmllZiBJcyBhIHNlcXVlbmNlIGEgcGVybXV0YXRpb24gb2YgYW5vdGhlciBzZXF1ZW5jZQorLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9JU19QRVJNVVRBVElPTjExX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fSVNfUEVSTVVUQVRJT04xMV9IUFAKKworI2luY2x1ZGUgPGFsZ29yaXRobT4gICAgLy8gZm9yIHN0ZDo6ZmluZF9pZiwgY291bnRfaWYsIG1pc21hdGNoCisjaW5jbHVkZSA8dXRpbGl0eT4gICAgICAvLyBmb3Igc3RkOjpwYWlyCisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4gICAvLyBmb3Igc3RkOjplcXVhbF90bworI2luY2x1ZGUgPGl0ZXJhdG9yPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdXRpbGl0eS9lbmFibGVfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX3NhbWUuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxjb25kIERPWFlHRU5fSElERQorbmFtZXNwYWNlIGRldGFpbCB7CisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFByZWRpY2F0ZSwgdHlwZW5hbWUgSXRlcmF0b3I+CisgICAgc3RydWN0IHZhbHVlX3ByZWRpY2F0ZSB7CisgICAgICAgIHZhbHVlX3ByZWRpY2F0ZSAoIFByZWRpY2F0ZSBwLCBJdGVyYXRvciBpdCApIDogcF8gKCBwICksIGl0XyAoIGl0ICkge30KKworICAgICAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgVDE+CisgICAgICAgIGJvb2wgb3BlcmF0b3IgKCkgKCBjb25zdCBUMSAmdDEgKSBjb25zdCB7IHJldHVybiBwXyAoICppdF8sIHQxICk7IH0KKyAgICBwcml2YXRlOgorICAgICAgICBQcmVkaWNhdGUgcF87CisgICAgICAgIEl0ZXJhdG9yIGl0XzsKKyAgICAgICAgfTsKKyAgICAgICAgCisvLyAgUHJlY29uZGl0aW9uczoKKy8vICAxLiBUaGUgc2VxdWVuY2VzIGFyZSB0aGUgc2FtZSBsZW5ndGgKKy8vICAyLiBBbnkgY29tbW9uIGVsZW1lbnRzIG9uIHRoZSBmcm9udCBoYXZlIGJlZW4gcmVtb3ZlZCAobm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGp1c3QgZm9yIHBlcmZvcm1hbmNlKQorICAgIHRlbXBsYXRlPCBjbGFzcyBGb3J3YXJkSXRlcmF0b3IxLCBjbGFzcyBGb3J3YXJkSXRlcmF0b3IyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGUgPgorICAgIGJvb2wgaXNfcGVybXV0YXRpb25faW5uZXIgKCBGb3J3YXJkSXRlcmF0b3IxIGZpcnN0MSwgRm9yd2FyZEl0ZXJhdG9yMSBsYXN0MSwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMiBmaXJzdDIsIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIsCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBwICkgeworICAgICAgICAvLyAgZm9yIGVhY2ggdW5pcXVlIHZhbHVlIGluIHRoZSBzZXF1ZW5jZSBbZmlyc3QxLGxhc3QxKSwgY291bnQgaG93IG1hbnkgdGltZXMKKyAgICAgICAgLy8gIGl0IG9jY3VycywgYW5kIG1ha2Ugc3VyZSBpdCBvY2N1cnMgdGhlIHNhbWUgbnVtYmVyIG9mIHRpbWVzIGluIFtmaXJzdDIsIGxhc3QyKQorICAgICAgICAgICAgZm9yICggRm9yd2FyZEl0ZXJhdG9yMSBpdGVyID0gZmlyc3QxOyBpdGVyICE9IGxhc3QxOyArK2l0ZXIgKSB7CisgICAgICAgICAgICAgICAgdmFsdWVfcHJlZGljYXRlPEJpbmFyeVByZWRpY2F0ZSwgRm9yd2FyZEl0ZXJhdG9yMT4gcHJlZCAoIHAsIGl0ZXIgKTsKKworICAgICAgICAgICAgLyogIEZvciBlYWNoIHZhbHVlIHdlIGhhdmVuJ3Qgc2VlbiB5ZXQuLi4gKi8KKyAgICAgICAgICAgICAgICBpZiAoIHN0ZDo6ZmluZF9pZiAoIGZpcnN0MSwgaXRlciwgcHJlZCApID09IGl0ZXIgKSB7CisgICAgICAgICAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGRlc3RfY291bnQgPSBzdGQ6OmNvdW50X2lmICggZmlyc3QyLCBsYXN0MiwgcHJlZCApOworICAgICAgICAgICAgICAgICAgICBpZiAoIGRlc3RfY291bnQgPT0gMCB8fCBkZXN0X2NvdW50ICE9IChzdGQ6OnNpemVfdCkgc3RkOjpjb3VudF9pZiAoIGl0ZXIsIGxhc3QxLCBwcmVkICkpCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgcmV0dXJuIHRydWU7CisgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgCisKKyAgICB0ZW1wbGF0ZTwgY2xhc3MgRm9yd2FyZEl0ZXJhdG9yMSwgY2xhc3MgRm9yd2FyZEl0ZXJhdG9yMiwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICAgIGJvb2wgaXNfcGVybXV0YXRpb25fdGFnICggRm9yd2FyZEl0ZXJhdG9yMSBmaXJzdDEsIEZvcndhcmRJdGVyYXRvcjEgbGFzdDEsIAorICAgICAgICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IyIGZpcnN0MiwgRm9yd2FyZEl0ZXJhdG9yMiBsYXN0MiwgCisgICAgICAgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBwLAorICAgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OmZvcndhcmRfaXRlcmF0b3JfdGFnLCBzdGQ6OmZvcndhcmRfaXRlcmF0b3JfdGFnICkgeworCisgICAgLy8gIFNraXAgdGhlIGNvbW1vbiBwcmVmaXggKGlmIGFueSkKKyAgICAgICAgd2hpbGUgKCBmaXJzdDEgIT0gbGFzdDEgJiYgZmlyc3QyICE9IGxhc3QyICYmIHAgKCAqZmlyc3QxLCAqZmlyc3QyICkpIHsKKyAgICAgICAgICAgICsrZmlyc3QxOworICAgICAgICAgICAgKytmaXJzdDI7CisgICAgICAgICAgICB9CisgICAgICAgIGlmICggZmlyc3QxICE9IGxhc3QxICYmIGZpcnN0MiAhPSBsYXN0MiApCisgICAgICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppc19wZXJtdXRhdGlvbl9pbm5lciAoIGZpcnN0MSwgbGFzdDEsIGZpcnN0MiwgbGFzdDIsCisgICAgICAgICAgICAgICAgc3RkOjplcXVhbF90bzx0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxGb3J3YXJkSXRlcmF0b3IxPjo6dmFsdWVfdHlwZT4gKCkpOworICAgICAgICByZXR1cm4gZmlyc3QxID09IGxhc3QxICYmIGZpcnN0MiA9PSBsYXN0MjsKKyAgICAgICAgfQorCisgICAgdGVtcGxhdGUgPGNsYXNzIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMSwgY2xhc3MgUmFuZG9tQWNjZXNzSXRlcmF0b3IyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgICAgYm9vbCBpc19wZXJtdXRhdGlvbl90YWcgKCBSYW5kb21BY2Nlc3NJdGVyYXRvcjEgZmlyc3QxLCBSYW5kb21BY2Nlc3NJdGVyYXRvcjEgbGFzdDEsIAorICAgICAgICAgICAgICAgICAgICAgICAgICBSYW5kb21BY2Nlc3NJdGVyYXRvcjIgZmlyc3QyLCBSYW5kb21BY2Nlc3NJdGVyYXRvcjIgbGFzdDIsIAorICAgICAgICAgICAgICAgICAgICAgICAgICBCaW5hcnlQcmVkaWNhdGUgcCwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpyYW5kb21fYWNjZXNzX2l0ZXJhdG9yX3RhZywgc3RkOjpyYW5kb21fYWNjZXNzX2l0ZXJhdG9yX3RhZyApIHsKKyAgICAvLyAgQ2hlYXAgY2hlY2sKKyAgICAgICAgaWYgKCBzdGQ6OmRpc3RhbmNlICggZmlyc3QxLCBsYXN0MSApICE9IHN0ZDo6ZGlzdGFuY2UgKCBmaXJzdDIsIGxhc3QyICkpCisgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgLy8gIFNraXAgdGhlIGNvbW1vbiBwcmVmaXggKGlmIGFueSkKKyAgICAgICAgd2hpbGUgKCBmaXJzdDEgIT0gbGFzdDEgJiYgZmlyc3QyICE9IGxhc3QyICYmIHAgKCAqZmlyc3QxLCAqZmlyc3QyICkpIHsKKyAgICAgICAgICAgICsrZmlyc3QxOworICAgICAgICAgICAgKytmaXJzdDI7CisgICAgICAgICAgICB9CisKKyAgICAgICAgaWYgKCBmaXJzdDEgIT0gbGFzdDEgJiYgZmlyc3QyICE9IGxhc3QyICkKKyAgICAgICAgICAgIHJldHVybiBpc19wZXJtdXRhdGlvbl9pbm5lciAoZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwgcCk7CisgICAgICAgIHJldHVybiBmaXJzdDEgPT0gbGFzdDEgJiYgZmlyc3QyID09IGxhc3QyOworICAgICAgICB9CisKK30KKy8vLyBcZW5kY29uZAorCisvLy8gXGZuIGlzX3Blcm11dGF0aW9uICggRm9yd2FyZEl0ZXJhdG9yMSBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yMSBsYXN0LCBGb3J3YXJkSXRlcmF0b3IyIGZpcnN0MiwgQmluYXJ5UHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBUZXN0cyB0byBzZWUgaWYgdGhlIHNlcXVlbmNlIFtmaXJzdCxsYXN0KSBpcyBhIHBlcm11dGF0aW9uIG9mIHRoZSBzZXF1ZW5jZSBzdGFydGluZyBhdCBmaXJzdDIKKy8vLworLy8vIFxwYXJhbSBmaXJzdDEgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QxICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGZpcnN0MiAgIFRoZSBzdGFydCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlCisvLy8gXHBhcmFtIHAgICAgICAgIFRoZSBwcmVkaWNhdGUgdG8gY29tcGFyZSBlbGVtZW50cyB3aXRoCisvLy8KKy8vLyBcbm90ZSAgICAgICAgICAgVGhpcyBmdW5jdGlvbiBpcyBwYXJ0IG9mIHRoZSBDKysyMDExIHN0YW5kYXJkIGxpYnJhcnkuCit0ZW1wbGF0ZTwgY2xhc3MgRm9yd2FyZEl0ZXJhdG9yMSwgY2xhc3MgRm9yd2FyZEl0ZXJhdG9yMiwgY2xhc3MgQmluYXJ5UHJlZGljYXRlID4KK2Jvb2wgaXNfcGVybXV0YXRpb24gKCBGb3J3YXJkSXRlcmF0b3IxIGZpcnN0MSwgRm9yd2FyZEl0ZXJhdG9yMSBsYXN0MSwKKyAgICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IyIGZpcnN0MiwgQmluYXJ5UHJlZGljYXRlIHAgKQoreworLy8gIFNraXAgdGhlIGNvbW1vbiBwcmVmaXggKGlmIGFueSkKKyAgICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXJhdG9yMSwgRm9yd2FyZEl0ZXJhdG9yMj4gZXEgPSBzdGQ6Om1pc21hdGNoIChmaXJzdDEsIGxhc3QxLCBmaXJzdDIsIHApOworICAgIGZpcnN0MSA9IGVxLmZpcnN0OworICAgIGZpcnN0MiA9IGVxLnNlY29uZDsKKyAgICBpZiAoIGZpcnN0MSAhPSBsYXN0MSApIHsKKyAgICAvLyAgQ3JlYXRlIGxhc3QyCisgICAgICAgIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIgPSBmaXJzdDI7CisgICAgICAgIHN0ZDo6YWR2YW5jZSAoIGxhc3QyLCBzdGQ6OmRpc3RhbmNlIChmaXJzdDEsIGxhc3QxKSk7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmlzX3Blcm11dGF0aW9uX2lubmVyICggZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwgcCApOworICAgICAgICB9CisKKyAgICByZXR1cm4gdHJ1ZTsKK30KKworLy8vIFxmbiBpc19wZXJtdXRhdGlvbiAoIEZvcndhcmRJdGVyYXRvcjEgZmlyc3QsIEZvcndhcmRJdGVyYXRvcjEgbGFzdCwgRm9yd2FyZEl0ZXJhdG9yMiBmaXJzdDIgKQorLy8vIFxicmllZiBUZXN0cyB0byBzZWUgaWYgdGhlIHNlcXVlbmNlIFtmaXJzdCxsYXN0KSBpcyBhIHBlcm11dGF0aW9uIG9mIHRoZSBzZXF1ZW5jZSBzdGFydGluZyBhdCBmaXJzdDIKKy8vLworLy8vIFxwYXJhbSBmaXJzdDEgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QyICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGZpcnN0MiAgIFRoZSBzdGFydCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxMSBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGU8IGNsYXNzIEZvcndhcmRJdGVyYXRvcjEsIGNsYXNzIEZvcndhcmRJdGVyYXRvcjIgPgorYm9vbCBpc19wZXJtdXRhdGlvbiAoIEZvcndhcmRJdGVyYXRvcjEgZmlyc3QxLCBGb3J3YXJkSXRlcmF0b3IxIGxhc3QxLCBGb3J3YXJkSXRlcmF0b3IyIGZpcnN0MiApCit7CisvLyAgSG93IHNob3VsZCBJIGRlYWwgd2l0aCB0aGUgaWRlYSB0aGF0IEZvcndhcmRJdGVyYXRvcjE6OnZhbHVlX3R5cGUKKy8vICBhbmQgRm9yd2FyZEl0ZXJhdG9yMjo6dmFsdWVfdHlwZSBjb3VsZCBiZSBkaWZmZXJlbnQ/IERlZmluZSBteSBvd24gY29tcGFyaXNvbiBwcmVkaWNhdGU/CisvLyAgU2tpcCB0aGUgY29tbW9uIHByZWZpeCAoaWYgYW55KQorICAgIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcmF0b3IxLCBGb3J3YXJkSXRlcmF0b3IyPiBlcSA9IHN0ZDo6bWlzbWF0Y2ggKGZpcnN0MSwgbGFzdDEsIGZpcnN0MiApOworICAgIGZpcnN0MSA9IGVxLmZpcnN0OworICAgIGZpcnN0MiA9IGVxLnNlY29uZDsKKyAgICBpZiAoIGZpcnN0MSAhPSBsYXN0MSApIHsKKyAgICAvLyAgQ3JlYXRlIGxhc3QyCisgICAgICAgIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIgPSBmaXJzdDI7CisgICAgICAgIHN0ZDo6YWR2YW5jZSAoIGxhc3QyLCBzdGQ6OmRpc3RhbmNlIChmaXJzdDEsIGxhc3QxKSk7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmlzX3Blcm11dGF0aW9uX2lubmVyICggZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwKKyAgICAgICAgICAgIHN0ZDo6ZXF1YWxfdG88dHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yMT46OnZhbHVlX3R5cGU+ICgpKTsKKyAgICAgICAgfQorICAgIHJldHVybiB0cnVlOworfQorCisKKy8vLyBcZm4gaXNfcGVybXV0YXRpb24gKCBjb25zdCBSYW5nZSAmciwgRm9yd2FyZEl0ZXJhdG9yIGZpcnN0MiApCisvLy8gXGJyaWVmIFRlc3RzIHRvIHNlZSBpZiB0aGUgc2VxdWVuY2UgW2ZpcnN0LGxhc3QpIGlzIGEgcGVybXV0YXRpb24gb2YgdGhlIHNlcXVlbmNlIHN0YXJ0aW5nIGF0IGZpcnN0MgorLy8vCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBmaXJzdDIgICBUaGUgc3RhcnQgb2YgdGhlIHNlY29uZCBzZXF1ZW5jZQordGVtcGxhdGUgPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3I+Citib29sIGlzX3Blcm11dGF0aW9uICggY29uc3QgUmFuZ2UgJnIsIEZvcndhcmRJdGVyYXRvciBmaXJzdDIgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjppc19wZXJtdXRhdGlvbiAoYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZCAociksIGZpcnN0MiApOworfQorCisvLy8gXGZuIGlzX3Blcm11dGF0aW9uICggY29uc3QgUmFuZ2UgJnIsIEZvcndhcmRJdGVyYXRvciBmaXJzdDIsIEJpbmFyeVByZWRpY2F0ZSBwcmVkICkKKy8vLyBcYnJpZWYgVGVzdHMgdG8gc2VlIGlmIHRoZSBzZXF1ZW5jZSBbZmlyc3QsbGFzdCkgaXMgYSBwZXJtdXRhdGlvbiBvZiB0aGUgc2VxdWVuY2Ugc3RhcnRpbmcgYXQgZmlyc3QyCisvLy8KKy8vLyBccGFyYW0gciAgICAgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIGZpcnN0MiAgIFRoZSBzdGFydCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlCisvLy8gXHBhcmFtIHByZWQgICAgIFRoZSBwcmVkaWNhdGUgdG8gY29tcGFyZSBlbGVtZW50cyB3aXRoCisvLy8KKy8vICBEaXNhYmxlIHRoaXMgdGVtcGxhdGUgd2hlbiB0aGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgYXJlIHRoZSBzYW1lIHR5cGUKKy8vICBUaGF0IHdheSB0aGUgbm9uLXJhbmdlIHZlcnNpb24gd2lsbCBiZSBjaG9zZW4uCit0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2UsIHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvciwgdHlwZW5hbWUgQmluYXJ5UHJlZGljYXRlPgordHlwZW5hbWUgYm9vc3Q6OmRpc2FibGVfaWZfYzxib29zdDo6aXNfc2FtZTxSYW5nZSwgRm9yd2FyZEl0ZXJhdG9yPjo6dmFsdWUsIGJvb2w+Ojp0eXBlCitpc19wZXJtdXRhdGlvbiAoIGNvbnN0IFJhbmdlICZyLCBGb3J3YXJkSXRlcmF0b3IgZmlyc3QyLCBCaW5hcnlQcmVkaWNhdGUgcHJlZCApCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3Blcm11dGF0aW9uIChib29zdDo6YmVnaW4gKHIpLCBib29zdDo6ZW5kIChyKSwgZmlyc3QyLCBwcmVkICk7Cit9CisKK319CisKKyNlbmRpZiAgLy8gQk9PU1RfQUxHT1JJVEhNX0lTX1BFUk1VVEFUSU9OMTFfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDExL2lzX3NvcnRlZC5ocHAKQEAgLTAsMCArMSwyODAgQEAKKy8vICBDb3B5cmlnaHQgKGMpIDIwMTAgTnVvdmF0aW9uIFN5c3RlbSBEZXNpZ25zLCBMTEMKKy8vICAgIEdyYW50IEVyaWNrc29uIDxnZXJpY2tzb25AbnVvdmF0aW9ucy5jb20+CisvLworLy8gIFJld29ya2VkIHNvbWV3aGF0IGJ5IE1hcnNoYWxsIENsb3c7IEF1Z3VzdCAyMDEwCisvLyAgCisvLyAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlCisvLyAgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisvLworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIGxhdGVzdCB2ZXJzaW9uLgorLy8KKworI2lmbmRlZiBCT09TVF9BTEdPUklUSE1fT1JERVJFRF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX09SREVSRURfSFBQCisKKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorI2luY2x1ZGUgPGl0ZXJhdG9yPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lkZW50aXR5LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gaXNfc29ydGVkX3VudGlsICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCwgUHJlZCBwICkKKy8vLyBccmV0dXJuIHRoZSBwb2ludCBpbiB0aGUgc2VxdWVuY2UgW2ZpcnN0LCBsYXN0KSB3aGVyZSB0aGUgZWxlbWVudHMgYXJlIHVub3JkZXJlZAorLy8vICAgICAoYWNjb3JkaW5nIHRvIHRoZSBjb21wYXJpc29uIHByZWRpY2F0ZSAncCcpLgorLy8vIAorLy8vIFxwYXJhbSBmaXJzdCBUaGUgc3RhcnQgb2YgdGhlIHNlcXVlbmNlIHRvIGJlIHRlc3RlZC4KKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UKKy8vLyBccGFyYW0gcCAgICAgQSBiaW5hcnkgcHJlZGljYXRlIHRoYXQgcmV0dXJucyB0cnVlIGlmIHR3byBlbGVtZW50cyBhcmUgb3JkZXJlZC4KKy8vLworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IsIHR5cGVuYW1lIFByZWQ+CisgICAgRm9yd2FyZEl0ZXJhdG9yIGlzX3NvcnRlZF91bnRpbCAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QsIFByZWQgcCApCisgICAgeworICAgICAgICBpZiAoIGZpcnN0ID09IGxhc3QgKSByZXR1cm4gbGFzdDsgIC8vIHRoZSBlbXB0eSBzZXF1ZW5jZSBpcyBvcmRlcmVkCisgICAgICAgIEZvcndhcmRJdGVyYXRvciBuZXh0ID0gZmlyc3Q7CisgICAgICAgIHdoaWxlICggKytuZXh0ICE9IGxhc3QgKQorICAgICAgICB7CisgICAgICAgICAgICBpZiAoIHAgKCAqbmV4dCwgKmZpcnN0ICkpCisgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7CisgICAgICAgICAgICBmaXJzdCA9IG5leHQ7CisgICAgICAgIH0KKyAgICAgICAgcmV0dXJuIGxhc3Q7ICAgIAorICAgIH0KKworLy8vIFxmbiBpc19zb3J0ZWRfdW50aWwgKCBGb3J3YXJkSXRlcmF0b3IgZmlyc3QsIEZvcndhcmRJdGVyYXRvciBsYXN0ICkKKy8vLyBccmV0dXJuIHRoZSBwb2ludCBpbiB0aGUgc2VxdWVuY2UgW2ZpcnN0LCBsYXN0KSB3aGVyZSB0aGUgZWxlbWVudHMgYXJlIHVub3JkZXJlZAorLy8vIAorLy8vIFxwYXJhbSBmaXJzdCBUaGUgc3RhcnQgb2YgdGhlIHNlcXVlbmNlIHRvIGJlIHRlc3RlZC4KKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UKKy8vLworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3I+CisgICAgRm9yd2FyZEl0ZXJhdG9yIGlzX3NvcnRlZF91bnRpbCAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QgKQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxGb3J3YXJkSXRlcmF0b3I+Ojp2YWx1ZV90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjppc19zb3J0ZWRfdW50aWwgKCBmaXJzdCwgbGFzdCwgc3RkOjpsZXNzPHZhbHVlX3R5cGU+KCkpOworICAgIH0KKworCisvLy8gXGZuIGlzX3NvcnRlZCAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QsIFByZWQgcCApCisvLy8gXHJldHVybiB3aGV0aGVyIG9yIG5vdCB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHNvcnRlZAorLy8vIAorLy8vIFxwYXJhbSBmaXJzdCBUaGUgc3RhcnQgb2YgdGhlIHNlcXVlbmNlIHRvIGJlIHRlc3RlZC4KKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UKKy8vLyBccGFyYW0gcCAgICAgQSBiaW5hcnkgcHJlZGljYXRlIHRoYXQgcmV0dXJucyB0cnVlIGlmIHR3byBlbGVtZW50cyBhcmUgb3JkZXJlZC4KKy8vLworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IsIHR5cGVuYW1lIFByZWQ+CisgICAgYm9vbCBpc19zb3J0ZWQgKCBGb3J3YXJkSXRlcmF0b3IgZmlyc3QsIEZvcndhcmRJdGVyYXRvciBsYXN0LCBQcmVkIHAgKQorICAgIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZF91bnRpbCAoZmlyc3QsIGxhc3QsIHApID09IGxhc3Q7CisgICAgfQorCisvLy8gXGZuIGlzX3NvcnRlZCAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QgKQorLy8vIFxyZXR1cm4gd2hldGhlciBvciBub3QgdGhlIGVudGlyZSBzZXF1ZW5jZSBpcyBzb3J0ZWQKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBzZXF1ZW5jZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIGxhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlCisvLy8KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yPgorICAgIGJvb2wgaXNfc29ydGVkICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCApCisgICAgeworICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6aXNfc29ydGVkX3VudGlsIChmaXJzdCwgbGFzdCkgPT0gbGFzdDsKKyAgICB9CisKKy8vLworLy8vIC0tIFJhbmdlIGJhc2VkIHZlcnNpb25zIG9mIHRoZSBDKysxMSBmdW5jdGlvbnMKKy8vLworCisvLy8gXGZuIGlzX3NvcnRlZF91bnRpbCAoIGNvbnN0IFIgJnJhbmdlLCBQcmVkIHAgKQorLy8vIFxyZXR1cm4gdGhlIHBvaW50IGluIHRoZSByYW5nZSBSIHdoZXJlIHRoZSBlbGVtZW50cyBhcmUgdW5vcmRlcmVkCisvLy8gICAgIChhY2NvcmRpbmcgdG8gdGhlIGNvbXBhcmlzb24gcHJlZGljYXRlICdwJykuCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIHAgICAgIEEgYmluYXJ5IHByZWRpY2F0ZSB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0d28gZWxlbWVudHMgYXJlIG9yZGVyZWQuCisvLy8KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUiwgdHlwZW5hbWUgUHJlZD4KKyAgICB0eXBlbmFtZSBib29zdDo6bGF6eV9kaXNhYmxlX2lmX2M8CisgICAgICAgIGJvb3N0Ojppc19zYW1lPFIsIFByZWQ+Ojp2YWx1ZSwgCisgICAgICAgIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBSPiAKKyAgICA+Ojp0eXBlIGlzX3NvcnRlZF91bnRpbCAoIGNvbnN0IFIgJnJhbmdlLCBQcmVkIHAgKQorICAgIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZF91bnRpbCAoIGJvb3N0OjpiZWdpbiAoIHJhbmdlICksIGJvb3N0OjplbmQgKCByYW5nZSApLCBwICk7CisgICAgfQorCisKKy8vLyBcZm4gaXNfc29ydGVkX3VudGlsICggY29uc3QgUiAmcmFuZ2UgKQorLy8vIFxyZXR1cm4gdGhlIHBvaW50IGluIHRoZSByYW5nZSBSIHdoZXJlIHRoZSBlbGVtZW50cyBhcmUgdW5vcmRlcmVkCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUj4KKyAgICB0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Y29uc3QgUj46OnR5cGUgaXNfc29ydGVkX3VudGlsICggY29uc3QgUiAmcmFuZ2UgKQorICAgIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZF91bnRpbCAoIGJvb3N0OjpiZWdpbiAoIHJhbmdlICksIGJvb3N0OjplbmQgKCByYW5nZSApKTsKKyAgICB9CisKKy8vLyBcZm4gaXNfc29ydGVkICggY29uc3QgUiAmcmFuZ2UsIFByZWQgcCApCisvLy8gXHJldHVybiB3aGV0aGVyIG9yIG5vdCB0aGUgZW50aXJlIHJhbmdlIFIgaXMgc29ydGVkCisvLy8gICAgIChhY2NvcmRpbmcgdG8gdGhlIGNvbXBhcmlzb24gcHJlZGljYXRlICdwJykuCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIHAgICAgIEEgYmluYXJ5IHByZWRpY2F0ZSB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0d28gZWxlbWVudHMgYXJlIG9yZGVyZWQuCisvLy8KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUiwgdHlwZW5hbWUgUHJlZD4KKyAgICB0eXBlbmFtZSBib29zdDo6bGF6eV9kaXNhYmxlX2lmX2M8IGJvb3N0Ojppc19zYW1lPFIsIFByZWQ+Ojp2YWx1ZSwgYm9vc3Q6Om1wbDo6aWRlbnRpdHk8Ym9vbD4gPjo6dHlwZQorICAgIGlzX3NvcnRlZCAoIGNvbnN0IFIgJnJhbmdlLCBQcmVkIHAgKQorICAgIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZCAoIGJvb3N0OjpiZWdpbiAoIHJhbmdlICksIGJvb3N0OjplbmQgKCByYW5nZSApLCBwICk7CisgICAgfQorCisKKy8vLyBcZm4gaXNfc29ydGVkICggY29uc3QgUiAmcmFuZ2UgKQorLy8vIFxyZXR1cm4gd2hldGhlciBvciBub3QgdGhlIGVudGlyZSByYW5nZSBSIGlzIHNvcnRlZAorLy8vIAorLy8vIFxwYXJhbSByYW5nZSBUaGUgcmFuZ2UgdG8gYmUgdGVzdGVkLgorLy8vCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFI+CisgICAgYm9vbCBpc19zb3J0ZWQgKCBjb25zdCBSICZyYW5nZSApCisgICAgeworICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6aXNfc29ydGVkICggYm9vc3Q6OmJlZ2luICggcmFuZ2UgKSwgYm9vc3Q6OmVuZCAoIHJhbmdlICkpOworICAgIH0KKworCisvLy8KKy8vLyAtLSBSYW5nZSBiYXNlZCB2ZXJzaW9ucyBvZiB0aGUgQysrMTEgZnVuY3Rpb25zCisvLy8KKworLy8vIFxmbiBpc19pbmNyZWFzaW5nICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCApCisvLy8gXHJldHVybiB0cnVlIGlmIHRoZSBlbnRpcmUgc2VxdWVuY2UgaXMgaW5jcmVhc2luZzsgaS5lLCBlYWNoIGl0ZW0gaXMgZ3JlYXRlciB0aGFuIG9yICAKKy8vLyAgICAgZXF1YWwgdG8gdGhlIHByZXZpb3VzIG9uZS4KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBzZXF1ZW5jZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIGxhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIHNlcXVlbmNlcyB0aGF0IGNvbnRhaW4gaXRlbXMgdGhhdCBjb21wYXJlCisvLy8gICAgIGVxdWFsLiBJZiB0aGF0IGlzIG5vdCB3aGF0IHlvdSBpbnRlbmRlZCwgeW91IHNob3VsZCB1c2UgaXNfc3RyaWN0bHlfaW5jcmVhc2luZyBpbnN0ZWFkLgorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3I+CisgICAgYm9vbCBpc19pbmNyZWFzaW5nICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCApCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPEZvcndhcmRJdGVyYXRvcj46OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZCAoZmlyc3QsIGxhc3QsIHN0ZDo6bGVzczx2YWx1ZV90eXBlPigpKTsKKyAgICB9CisKKworLy8vIFxmbiBpc19pbmNyZWFzaW5nICggY29uc3QgUiAmcmFuZ2UgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIGluY3JlYXNpbmc7IGkuZSwgZWFjaCBpdGVtIGlzIGdyZWF0ZXIgdGhhbiBvciAgCisvLy8gICAgIGVxdWFsIHRvIHRoZSBwcmV2aW91cyBvbmUuCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIHNlcXVlbmNlcyB0aGF0IGNvbnRhaW4gaXRlbXMgdGhhdCBjb21wYXJlCisvLy8gICAgIGVxdWFsLiBJZiB0aGF0IGlzIG5vdCB3aGF0IHlvdSBpbnRlbmRlZCwgeW91IHNob3VsZCB1c2UgaXNfc3RyaWN0bHlfaW5jcmVhc2luZyBpbnN0ZWFkLgorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBSPgorICAgIGJvb2wgaXNfaW5jcmVhc2luZyAoIGNvbnN0IFIgJnJhbmdlICkKKyAgICB7CisgICAgICAgIHJldHVybiBpc19pbmNyZWFzaW5nICggYm9vc3Q6OmJlZ2luICggcmFuZ2UgKSwgYm9vc3Q6OmVuZCAoIHJhbmdlICkpOworICAgIH0KKworCisKKy8vLyBcZm4gaXNfZGVjcmVhc2luZyAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIGRlY3JlYXNpbmc7IGkuZSwgZWFjaCBpdGVtIGlzIGxlc3MgdGhhbiAKKy8vLyAgICAgb3IgZXF1YWwgdG8gdGhlIHByZXZpb3VzIG9uZS4KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBzZXF1ZW5jZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIGxhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIHNlcXVlbmNlcyB0aGF0IGNvbnRhaW4gaXRlbXMgdGhhdCBjb21wYXJlCisvLy8gICAgIGVxdWFsLiBJZiB0aGF0IGlzIG5vdCB3aGF0IHlvdSBpbnRlbmRlZCwgeW91IHNob3VsZCB1c2UgaXNfc3RyaWN0bHlfZGVjcmVhc2luZyBpbnN0ZWFkLgorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3I+CisgICAgYm9vbCBpc19kZWNyZWFzaW5nICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCApCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPEZvcndhcmRJdGVyYXRvcj46OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmlzX3NvcnRlZCAoZmlyc3QsIGxhc3QsIHN0ZDo6Z3JlYXRlcjx2YWx1ZV90eXBlPigpKTsKKyAgICB9CisKKy8vLyBcZm4gaXNfZGVjcmVhc2luZyAoIGNvbnN0IFIgJnJhbmdlICkKKy8vLyBccmV0dXJuIHRydWUgaWYgdGhlIGVudGlyZSBzZXF1ZW5jZSBpcyBkZWNyZWFzaW5nOyBpLmUsIGVhY2ggaXRlbSBpcyBsZXNzIHRoYW4gCisvLy8gICAgIG9yIGVxdWFsIHRvIHRoZSBwcmV2aW91cyBvbmUuCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIHNlcXVlbmNlcyB0aGF0IGNvbnRhaW4gaXRlbXMgdGhhdCBjb21wYXJlCisvLy8gICAgIGVxdWFsLiBJZiB0aGF0IGlzIG5vdCB3aGF0IHlvdSBpbnRlbmRlZCwgeW91IHNob3VsZCB1c2UgaXNfc3RyaWN0bHlfZGVjcmVhc2luZyBpbnN0ZWFkLgorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBSPgorICAgIGJvb2wgaXNfZGVjcmVhc2luZyAoIGNvbnN0IFIgJnJhbmdlICkKKyAgICB7CisgICAgICAgIHJldHVybiBpc19kZWNyZWFzaW5nICggYm9vc3Q6OmJlZ2luICggcmFuZ2UgKSwgYm9vc3Q6OmVuZCAoIHJhbmdlICkpOworICAgIH0KKworCisKKy8vLyBcZm4gaXNfc3RyaWN0bHlfaW5jcmVhc2luZyAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHN0cmljdGx5IGluY3JlYXNpbmc7IGkuZSwgZWFjaCBpdGVtIGlzIGdyZWF0ZXIKKy8vLyAgICAgdGhhbiB0aGUgcHJldmlvdXMgb25lCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0IFRoZSBzdGFydCBvZiB0aGUgc2VxdWVuY2UgdG8gYmUgdGVzdGVkLgorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBzZXF1ZW5jZQorLy8vCisvLy8gXG5vdGUgVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZSBmb3Igc2VxdWVuY2VzIHRoYXQgY29udGFpbiBpdGVtcyB0aGF0IGNvbXBhcmUKKy8vLyAgICAgZXF1YWwuIElmIHRoYXQgaXMgbm90IHdoYXQgeW91IGludGVuZGVkLCB5b3Ugc2hvdWxkIHVzZSBpc19pbmNyZWFzaW5nIGluc3RlYWQuCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvcj4KKyAgICBib29sIGlzX3N0cmljdGx5X2luY3JlYXNpbmcgKCBGb3J3YXJkSXRlcmF0b3IgZmlyc3QsIEZvcndhcmRJdGVyYXRvciBsYXN0ICkKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yPjo6dmFsdWVfdHlwZSB2YWx1ZV90eXBlOworICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6aXNfc29ydGVkIChmaXJzdCwgbGFzdCwgc3RkOjpsZXNzX2VxdWFsPHZhbHVlX3R5cGU+KCkpOworICAgIH0KKworLy8vIFxmbiBpc19zdHJpY3RseV9pbmNyZWFzaW5nICggY29uc3QgUiAmcmFuZ2UgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHN0cmljdGx5IGluY3JlYXNpbmc7IGkuZSwgZWFjaCBpdGVtIGlzIGdyZWF0ZXIKKy8vLyAgICAgdGhhbiB0aGUgcHJldmlvdXMgb25lCisvLy8gCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIGZvciBzZXF1ZW5jZXMgdGhhdCBjb250YWluIGl0ZW1zIHRoYXQgY29tcGFyZQorLy8vICAgICBlcXVhbC4gSWYgdGhhdCBpcyBub3Qgd2hhdCB5b3UgaW50ZW5kZWQsIHlvdSBzaG91bGQgdXNlIGlzX2luY3JlYXNpbmcgaW5zdGVhZC4KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUj4KKyAgICBib29sIGlzX3N0cmljdGx5X2luY3JlYXNpbmcgKCBjb25zdCBSICZyYW5nZSApCisgICAgeworICAgICAgICByZXR1cm4gaXNfc3RyaWN0bHlfaW5jcmVhc2luZyAoIGJvb3N0OjpiZWdpbiAoIHJhbmdlICksIGJvb3N0OjplbmQgKCByYW5nZSApKTsKKyAgICB9CisKKworLy8vIFxmbiBpc19zdHJpY3RseV9kZWNyZWFzaW5nICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCApCisvLy8gXHJldHVybiB0cnVlIGlmIHRoZSBlbnRpcmUgc2VxdWVuY2UgaXMgc3RyaWN0bHkgZGVjcmVhc2luZzsgaS5lLCBlYWNoIGl0ZW0gaXMgbGVzcyB0aGFuCisvLy8gICAgIHRoZSBwcmV2aW91cyBvbmUKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBzZXF1ZW5jZSB0byBiZSB0ZXN0ZWQuCisvLy8gXHBhcmFtIGxhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIGZvciBzZXF1ZW5jZXMgdGhhdCBjb250YWluIGl0ZW1zIHRoYXQgY29tcGFyZQorLy8vICAgICBlcXVhbC4gSWYgdGhhdCBpcyBub3Qgd2hhdCB5b3UgaW50ZW5kZWQsIHlvdSBzaG91bGQgdXNlIGlzX2RlY3JlYXNpbmcgaW5zdGVhZC4KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yPgorICAgIGJvb2wgaXNfc3RyaWN0bHlfZGVjcmVhc2luZyAoIEZvcndhcmRJdGVyYXRvciBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yIGxhc3QgKQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxGb3J3YXJkSXRlcmF0b3I+Ojp2YWx1ZV90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjppc19zb3J0ZWQgKGZpcnN0LCBsYXN0LCBzdGQ6OmdyZWF0ZXJfZXF1YWw8dmFsdWVfdHlwZT4oKSk7CisgICAgfQorCisvLy8gXGZuIGlzX3N0cmljdGx5X2RlY3JlYXNpbmcgKCBjb25zdCBSICZyYW5nZSApCisvLy8gXHJldHVybiB0cnVlIGlmIHRoZSBlbnRpcmUgc2VxdWVuY2UgaXMgc3RyaWN0bHkgZGVjcmVhc2luZzsgaS5lLCBlYWNoIGl0ZW0gaXMgbGVzcyB0aGFuCisvLy8gICAgIHRoZSBwcmV2aW91cyBvbmUKKy8vLyAKKy8vLyBccGFyYW0gcmFuZ2UgVGhlIHJhbmdlIHRvIGJlIHRlc3RlZC4KKy8vLworLy8vIFxub3RlIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UgZm9yIHNlcXVlbmNlcyB0aGF0IGNvbnRhaW4gaXRlbXMgdGhhdCBjb21wYXJlCisvLy8gICAgIGVxdWFsLiBJZiB0aGF0IGlzIG5vdCB3aGF0IHlvdSBpbnRlbmRlZCwgeW91IHNob3VsZCB1c2UgaXNfZGVjcmVhc2luZyBpbnN0ZWFkLgorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBSPgorICAgIGJvb2wgaXNfc3RyaWN0bHlfZGVjcmVhc2luZyAoIGNvbnN0IFIgJnJhbmdlICkKKyAgICB7CisgICAgICAgIHJldHVybiBpc19zdHJpY3RseV9kZWNyZWFzaW5nICggYm9vc3Q6OmJlZ2luICggcmFuZ2UgKSwgYm9vc3Q6OmVuZCAoIHJhbmdlICkpOworICAgIH0KKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfQUxHT1JJVEhNX09SREVSRURfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDExL25vbmVfb2YuaHBwCkBAIC0wLDAgKzEsODIgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMDgtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisqLworCisvLy8gXGZpbGUgIG5vbmVfb2YuaHBwCisvLy8gXGJyaWVmIFRlc3QgcmFuZ2VzIHRvIHNlZSBpZiBubyBlbGVtZW50cyBtYXRjaCBhIHZhbHVlIG9yIHByZWRpY2F0ZS4KKy8vLyBcYXV0aG9yIE1hcnNoYWxsIENsb3cKKworI2lmbmRlZiBCT09TVF9BTEdPUklUSE1fTk9ORV9PRl9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX05PTkVfT0ZfSFBQCisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gbm9uZV9vZiAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBub25lIG9mIHRoZSBlbGVtZW50cyBpbiBbZmlyc3QsIGxhc3QpIHNhdGlzZnkgdGhlIHByZWRpY2F0ZSAncCcKKy8vLyBcbm90ZSByZXR1cm5zIHRydWUgb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHNlcXVlbmNlCisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4gCitib29sIG5vbmVfb2YgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBpZiAoIHAoKmZpcnN0KSkgCisgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgcmV0dXJuIHRydWU7Cit9IAorCisvLy8gXGZuIG5vbmVfb2YgKCBjb25zdCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBub25lIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgcmFuZ2Ugc2F0aXNmeSB0aGUgcHJlZGljYXRlICdwJworLy8vIFxub3RlIHJldHVybnMgdHJ1ZSBvbiBhbiBlbXB0eSByYW5nZQorLy8vIAorLy8vIFxwYXJhbSByICAgICBUaGUgaW5wdXQgcmFuZ2UKKy8vLyBccGFyYW0gcCAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgUHJlZGljYXRlPiAKK2Jvb2wgbm9uZV9vZiAoIGNvbnN0IFJhbmdlICZyLCBQcmVkaWNhdGUgcCApCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06Om5vbmVfb2YgKGJvb3N0OjpiZWdpbiAociksIGJvb3N0OjplbmQgKHIpLCBwICk7Cit9IAorCisvLy8gXGZuIG5vbmVfb2ZfZXF1YWwgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIGNvbnN0IFYgJnZhbCApCisvLy8gXHJldHVybiB0cnVlIGlmIG5vbmUgb2YgdGhlIGVsZW1lbnRzIGluIFtmaXJzdCwgbGFzdCkgYXJlIGVxdWFsIHRvICd2YWwnCisvLy8gXG5vdGUgcmV0dXJucyB0cnVlIG9uIGFuIGVtcHR5IHJhbmdlCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0IFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gdmFsICAgQSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QKKy8vLwordGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgVj4gCitib29sIG5vbmVfb2ZfZXF1YWwgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIGNvbnN0IFYgJnZhbCApIAoreworICAgIGZvciAoIDsgZmlyc3QgIT0gbGFzdDsgKytmaXJzdCApCisgICAgICAgIGlmICggdmFsID09ICpmaXJzdCApCisgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgcmV0dXJuIHRydWU7IAorfSAKKworLy8vIFxmbiBub25lX29mX2VxdWFsICggY29uc3QgUmFuZ2UgJnIsIGNvbnN0IFYgJnZhbCApCisvLy8gXHJldHVybiB0cnVlIGlmIG5vbmUgb2YgdGhlIGVsZW1lbnRzIGluIHRoZSByYW5nZSBhcmUgZXF1YWwgdG8gJ3ZhbCcKKy8vLyBcbm90ZSByZXR1cm5zIHRydWUgb24gYW4gZW1wdHkgcmFuZ2UKKy8vLyAKKy8vLyBccGFyYW0gciAgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHZhbCAgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0CisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBWPiAKK2Jvb2wgbm9uZV9vZl9lcXVhbCAoIGNvbnN0IFJhbmdlICZyLCBjb25zdCBWICYgdmFsICkgCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06Om5vbmVfb2ZfZXF1YWwgKGJvb3N0OjpiZWdpbiAociksIGJvb3N0OjplbmQgKHIpLCB2YWwpOworfSAKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0IGFuZCBhbGdvcml0aG0KKworI2VuZGlmIC8vIEJPT1NUX0FMR09SSVRITV9OT05FX09GX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9jeHgxMS9vbmVfb2YuaHBwCkBAIC0wLDAgKzEsODIgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMDgtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisqLworCisvLy8gXGZpbGUgb25lX29mLmhwcAorLy8vIFxicmllZiBUZXN0IHJhbmdlcyB0byBzZWUgaWYgb25seSBvbmUgZWxlbWVudCBtYXRjaGVzIGEgdmFsdWUgb3IgcHJlZGljYXRlLgorLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9PTkVfT0ZfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9PTkVfT0ZfSFBQCisKKyNpbmNsdWRlIDxhbGdvcml0aG0+ICAgICAgICAgICAgLy8gZm9yIHN0ZDo6ZmluZCBhbmQgc3RkOjpmaW5kX2lmCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL2N4eDExL25vbmVfb2YuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLy8gXGZuIG9uZV9vZiAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgcHJlZGljYXRlICdwJyBpcyB0cnVlIGZvciBleGFjdGx5IG9uZSBpdGVtIGluIFtmaXJzdCwgbGFzdCkuCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0IFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gcCAgICAgQSBwcmVkaWNhdGUgZm9yIHRlc3RpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSBzZXF1ZW5jZQorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkaWNhdGU+IAorYm9vbCBvbmVfb2YgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIFByZWRpY2F0ZSBwICkKK3sKKyAgICBJbnB1dEl0ZXJhdG9yIGkgPSBzdGQ6OmZpbmRfaWYgKGZpcnN0LCBsYXN0LCBwKTsKKyAgICBpZiAoaSA9PSBsYXN0KQorICAgICAgICByZXR1cm4gZmFsc2U7ICAgIC8vIERpZG4ndCBvY2N1ciBhdCBhbGwKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6bm9uZV9vZiAoKytpLCBsYXN0LCBwKTsKK30KKworLy8vIFxmbiBvbmVfb2YgKCBjb25zdCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgcHJlZGljYXRlICdwJyBpcyB0cnVlIGZvciBleGFjdGx5IG9uZSBpdGVtIGluIHRoZSByYW5nZS4KKy8vLyAKKy8vLyBccGFyYW0gciAgICBUaGUgaW5wdXQgcmFuZ2UKKy8vLyBccGFyYW0gcCAgICBBIHByZWRpY2F0ZSBmb3IgdGVzdGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIHJhbmdlCisvLy8KK3RlbXBsYXRlPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBQcmVkaWNhdGU+IAorYm9vbCBvbmVfb2YgKCBjb25zdCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKSAKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6b25lX29mICggYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZCAociksIHAgKTsKK30KKworCisvLy8gXGZuIG9uZV9vZl9lcXVhbCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgY29uc3QgViAmdmFsICkKKy8vLyBccmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlICd2YWwnIGV4aXN0cyBvbmx5IG9uY2UgaW4gW2ZpcnN0LCBsYXN0KS4KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgVGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBsYXN0ICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSB2YWwgICAgICBBIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdAorLy8vCit0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBWPiAKK2Jvb2wgb25lX29mX2VxdWFsICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LCBjb25zdCBWICZ2YWwgKQoreworICAgIElucHV0SXRlcmF0b3IgaSA9IHN0ZDo6ZmluZCAoZmlyc3QsIGxhc3QsIHZhbCk7IC8vIGZpbmQgZmlyc3Qgb2NjdXJyZW5jZSBvZiAndmFsJworICAgIGlmIChpID09IGxhc3QpCisgICAgICAgIHJldHVybiBmYWxzZTsgICAgICAgICAgICAgICAgICAgIC8vIERpZG4ndCBvY2N1ciBhdCBhbGwKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6bm9uZV9vZl9lcXVhbCAoKytpLCBsYXN0LCB2YWwpOworfQorCisvLy8gXGZuIG9uZV9vZl9lcXVhbCAoIGNvbnN0IFJhbmdlICZyLCBjb25zdCBWICZ2YWwgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgJ3ZhbCcgZXhpc3RzIG9ubHkgb25jZSBpbiB0aGUgcmFuZ2UuCisvLy8gCisvLy8gXHBhcmFtIHIgICAgVGhlIGlucHV0IHJhbmdlCisvLy8gXHBhcmFtIHZhbCAgQSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QKKy8vLwordGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UsIHR5cGVuYW1lIFY+IAorYm9vbCBvbmVfb2ZfZXF1YWwgKCBjb25zdCBSYW5nZSAmciwgY29uc3QgViAmdmFsICkKK3sKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6b25lX29mX2VxdWFsICggYm9vc3Q6OmJlZ2luIChyKSwgYm9vc3Q6OmVuZCAociksIHZhbCApOworfSAKKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0IGFuZCBhbGdvcml0aG0KKworI2VuZGlmIC8vIEJPT1NUX0FMR09SSVRITV9BTExfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDExL3BhcnRpdGlvbl9jb3B5LmhwcApAQCAtMCwwICsxLDcwIEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDExLTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorKi8KKworLy8vIFxmaWxlICBwYXJ0aXRpb25fY29weS5ocHAKKy8vLyBcYnJpZWYgQ29weSBhIHN1YnNldCBvZiBhIHNlcXVlbmNlIHRvIGEgbmV3IHNlcXVlbmNlCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX1BBUlRJVElPTl9DT1BZX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fUEFSVElUSU9OX0NPUFlfSFBQCisKKyNpbmNsdWRlIDx1dGlsaXR5PiAgLy8gZm9yIHN0ZDo6cGFpcgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLy8gXGZuIHBhcnRpdGlvbl9jb3B5ICggSW5wdXRJdGVyYXRvciBmaXJzdCwgSW5wdXRJdGVyYXRvciBsYXN0LAorLy8vICAgICBPdXRwdXRJdGVyYXRvcjEgb3V0X3RydWUsIE91dHB1dEl0ZXJhdG9yMiBvdXRfZmFsc2UsIFVuYXJ5UHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBDb3BpZXMgdGhlIGVsZW1lbnRzIHRoYXQgc2F0aXNmeSB0aGUgcHJlZGljYXRlIHAgZnJvbSB0aGUgcmFuZ2UgW2ZpcnN0LCBsYXN0KSAKKy8vLyAgICAgdG8gdGhlIHJhbmdlIGJlZ2lubmluZyBhdCBkX2ZpcnN0X3RydWUsIGFuZAorLy8vICAgICBjb3BpZXMgdGhlIGVsZW1lbnRzIHRoYXQgZG8gbm90IHNhdGlzZnkgcCB0byB0aGUgcmFuZ2UgYmVnaW5uaW5nIGF0IGRfZmlyc3RfZmFsc2UuCisvLy8KKy8vLyAKKy8vLyBccGFyYW0gZmlyc3QgICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIG91dF90cnVlICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIGVsZW1lbnRzIHRoYXQgc2F0aXNmeSB0aGUgcHJlZGljYXRlIGludG8KKy8vLyBccGFyYW0gb3V0X2ZhbHNlIEFuIG91dHB1dCBpdGVyYXRvciB0byB3cml0ZSB0aGUgZWxlbWVudHMgdGhhdCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlIGludG8KKy8vLyBccGFyYW0gcCAgICAgICAgIEEgcHJlZGljYXRlIGZvciBkaXZpZGluZyB0aGUgZWxlbWVudHMgb2YgdGhlIGlucHV0IHNlcXVlbmNlLgorLy8vCisvLy8gXG5vdGUgICAgICAgICAgICBUaGlzIGZ1bmN0aW9uIGlzIHBhcnQgb2YgdGhlIEMrKzIwMTEgc3RhbmRhcmQgbGlicmFyeS4KK3RlbXBsYXRlIDx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yLCAKKyAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3IxLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvcjIsIHR5cGVuYW1lIFVuYXJ5UHJlZGljYXRlPgorc3RkOjpwYWlyPE91dHB1dEl0ZXJhdG9yMSwgT3V0cHV0SXRlcmF0b3IyPgorcGFydGl0aW9uX2NvcHkgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsCisgICAgICAgIE91dHB1dEl0ZXJhdG9yMSBvdXRfdHJ1ZSwgT3V0cHV0SXRlcmF0b3IyIG91dF9mYWxzZSwgVW5hcnlQcmVkaWNhdGUgcCApCit7CisgICAgZm9yICggOyBmaXJzdCAhPSBsYXN0OyArK2ZpcnN0ICkKKyAgICAgICAgaWYgKCBwICgqZmlyc3QpKQorICAgICAgICAgICAgKm91dF90cnVlKysgPSAqZmlyc3Q7CisgICAgICAgIGVsc2UKKyAgICAgICAgICAgICpvdXRfZmFsc2UrKyA9ICpmaXJzdDsKKyAgICByZXR1cm4gc3RkOjpwYWlyPE91dHB1dEl0ZXJhdG9yMSwgT3V0cHV0SXRlcmF0b3IyPiAoIG91dF90cnVlLCBvdXRfZmFsc2UgKTsKK30KKworLy8vIFxmbiBwYXJ0aXRpb25fY29weSAoIGNvbnN0IFJhbmdlICZyLCAKKy8vLyAgICAgT3V0cHV0SXRlcmF0b3IxIG91dF90cnVlLCBPdXRwdXRJdGVyYXRvcjIgb3V0X2ZhbHNlLCBVbmFyeVByZWRpY2F0ZSBwICkKKy8vLyAKKy8vLyBccGFyYW0gciAgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBvdXRfdHJ1ZSAgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdyaXRlIHRoZSBlbGVtZW50cyB0aGF0IHNhdGlzZnkgdGhlIHByZWRpY2F0ZSBpbnRvCisvLy8gXHBhcmFtIG91dF9mYWxzZSBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd3JpdGUgdGhlIGVsZW1lbnRzIHRoYXQgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZSBpbnRvCisvLy8gXHBhcmFtIHAgICAgICAgICBBIHByZWRpY2F0ZSBmb3IgZGl2aWRpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZS4KKy8vLwordGVtcGxhdGUgPHR5cGVuYW1lIFJhbmdlLCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvcjEsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yMiwgCisgICAgICAgICAgICB0eXBlbmFtZSBVbmFyeVByZWRpY2F0ZT4KK3N0ZDo6cGFpcjxPdXRwdXRJdGVyYXRvcjEsIE91dHB1dEl0ZXJhdG9yMj4KK3BhcnRpdGlvbl9jb3B5ICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yMSBvdXRfdHJ1ZSwgT3V0cHV0SXRlcmF0b3IyIG91dF9mYWxzZSwgCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuYXJ5UHJlZGljYXRlIHAgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpwYXJ0aXRpb25fY29weSAKKyAgICAgICAgICAgICAgICAgICAgICAoYm9vc3Q6OmJlZ2luKHIpLCBib29zdDo6ZW5kKHIpLCBvdXRfdHJ1ZSwgb3V0X2ZhbHNlLCBwICk7Cit9CisKK319IC8vIG5hbWVzcGFjZSBib29zdCBhbmQgYWxnb3JpdGhtCisKKyNlbmRpZiAgLy8gQk9PU1RfQUxHT1JJVEhNX1BBUlRJVElPTl9DT1BZX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9jeHgxMS9wYXJ0aXRpb25fcG9pbnQuaHBwCkBAIC0wLDAgKzEsNjUgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMTEtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisqLworCisvLy8gXGZpbGUgIHBhcnRpdGlvbl9wb2ludC5ocHAKKy8vLyBcYnJpZWYgRmluZCB0aGUgcGFydGl0aW9uIHBvaW50IGluIGEgc2VxdWVuY2UKKy8vLyBcYXV0aG9yIE1hcnNoYWxsIENsb3cKKworI2lmbmRlZiBCT09TVF9BTEdPUklUSE1fUEFSVElUSU9OX1BPSU5UX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fUEFSVElUSU9OX1BPSU5UX0hQUAorCisjaW5jbHVkZSA8aXRlcmF0b3I+ICAgIC8vIGZvciBzdGQ6OmRpc3RhbmNlLCBhZHZhbmNlCisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gcGFydGl0aW9uX3BvaW50ICggRm9yd2FyZEl0ZXJhdG9yIGZpcnN0LCBGb3J3YXJkSXRlcmF0b3IgbGFzdCwgUHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBHaXZlbiBhIHBhcnRpdGlvbmVkIHJhbmdlLCByZXR1cm5zIHRoZSBwYXJ0aXRpb24gcG9pbnQsIGkuZSwgdGhlIGZpcnN0IGVsZW1lbnQgCisvLy8gICAgIHRoYXQgZG9lcyBub3Qgc2F0aXNmeSBwCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0ICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gcCAgICAgICAgVGhlIHByZWRpY2F0ZSB0byB0ZXN0IHRoZSB2YWx1ZXMgd2l0aAorLy8vIFxub3RlICAgICAgICAgICBUaGlzIGZ1bmN0aW9uIGlzIHBhcnQgb2YgdGhlIEMrKzIwMTEgc3RhbmRhcmQgbGlicmFyeS4KK3RlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IsIHR5cGVuYW1lIFByZWRpY2F0ZT4KK0ZvcndhcmRJdGVyYXRvciBwYXJ0aXRpb25fcG9pbnQgKCBGb3J3YXJkSXRlcmF0b3IgZmlyc3QsIEZvcndhcmRJdGVyYXRvciBsYXN0LCBQcmVkaWNhdGUgcCApCit7CisgICAgc3RkOjpzaXplX3QgZGlzdCA9IHN0ZDo6ZGlzdGFuY2UgKCBmaXJzdCwgbGFzdCApOworICAgIHdoaWxlICggZmlyc3QgIT0gbGFzdCApIHsKKyAgICAgICAgc3RkOjpzaXplX3QgZDIgPSBkaXN0IC8gMjsKKyAgICAgICAgRm9yd2FyZEl0ZXJhdG9yIHJldF92YWwgPSBmaXJzdDsKKyAgICAgICAgc3RkOjphZHZhbmNlIChyZXRfdmFsLCBkMik7CisgICAgICAgIGlmIChwICgqcmV0X3ZhbCkpIHsKKyAgICAgICAgICAgIGZpcnN0ID0gKytyZXRfdmFsOworICAgICAgICAgICAgZGlzdCAtPSBkMiArIDE7CisgICAgICAgICAgICB9CisgICAgICAgIGVsc2UgeworICAgICAgICAgICAgbGFzdCA9IHJldF92YWw7CisgICAgICAgICAgICBkaXN0ID0gZDI7CisgICAgICAgICAgICB9CisgICAgICAgIH0KKyAgICByZXR1cm4gZmlyc3Q7Cit9CisKKy8vLyBcZm4gcGFydGl0aW9uX3BvaW50ICggUmFuZ2UgJnIsIFByZWRpY2F0ZSBwICkKKy8vLyBcYnJpZWYgR2l2ZW4gYSBwYXJ0aXRpb25lZCByYW5nZSwgcmV0dXJucyB0aGUgcGFydGl0aW9uIHBvaW50CisvLy8gCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBwICAgICAgICBUaGUgcHJlZGljYXRlIHRvIHRlc3QgdGhlIHZhbHVlcyB3aXRoCisvLy8KK3RlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgUHJlZGljYXRlPgordHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPFJhbmdlPjo6dHlwZSBwYXJ0aXRpb25fcG9pbnQgKCBSYW5nZSAmciwgUHJlZGljYXRlIHAgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpwYXJ0aXRpb25fcG9pbnQgKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSwgcCk7Cit9CisKKworfX0KKworI2VuZGlmICAvLyBCT09TVF9BTEdPUklUSE1fUEFSVElUSU9OX1BPSU5UX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9jeHgxNC9lcXVhbC5ocHAKQEAgLTAsMCArMSw5OCBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAwOC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKyovCisKKy8vLyBcZmlsZSAgZXF1YWwuaHBwCisvLy8gXGJyaWVmIFRlc3QgcmFuZ2VzIHRvIGlmIHRoZXkgYXJlIGVxdWFsCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0VRVUFMX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fRVFVQUxfSFBQCisKKyNpbmNsdWRlIDxhbGdvcml0aG0+ICAgIC8vIGZvciBzdGQ6OmVxdWFsCisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4gICAvLyBmb3Igc3RkOjpiaW5hcnlfZnVuY3Rpb24KKyNpbmNsdWRlIDxpdGVyYXRvcj4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKK25hbWVzcGFjZSBkZXRhaWwgeworCisgICAgdGVtcGxhdGUgPGNsYXNzIFQxLCBjbGFzcyBUMj4KKyAgICBzdHJ1Y3QgZXEgOiBwdWJsaWMgc3RkOjpiaW5hcnlfZnVuY3Rpb248VDEsIFQyLCBib29sPiB7CisgICAgICAgIGJvb2wgb3BlcmF0b3IgKCkgKCBjb25zdCBUMSYgdjEsIGNvbnN0IFQyJiB2MiApIGNvbnN0IHsgcmV0dXJuIHYxID09IHYyIDt9CisgICAgICAgIH07CisgICAgCisgICAgdGVtcGxhdGUgPGNsYXNzIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMSwgY2xhc3MgUmFuZG9tQWNjZXNzSXRlcmF0b3IyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgICAgYm9vbCBlcXVhbCAoIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMSBmaXJzdDEsIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMSBsYXN0MSwgCisgICAgICAgICAgICAgICAgIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMiBmaXJzdDIsIFJhbmRvbUFjY2Vzc0l0ZXJhdG9yMiBsYXN0MiwgQmluYXJ5UHJlZGljYXRlIHByZWQsCisgICAgICAgICAgICAgICAgIHN0ZDo6cmFuZG9tX2FjY2Vzc19pdGVyYXRvcl90YWcsIHN0ZDo6cmFuZG9tX2FjY2Vzc19pdGVyYXRvcl90YWcgKQorICAgIHsKKyAgICAvLyAgUmFuZG9tLWFjY2VzcyBpdGVyYXRvcnMgbGV0IGlzIGNoZWNrIHRoZSBzaXplcyBpbiBjb25zdGFudCB0aW1lCisgICAgICAgIGlmICggc3RkOjpkaXN0YW5jZSAoIGZpcnN0MSwgbGFzdDEgKSAhPSBzdGQ6OmRpc3RhbmNlICggZmlyc3QyLCBsYXN0MiApKQorICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgIC8vIElmIHdlIGtub3cgdGhhdCB0aGUgc2VxdWVuY2VzIGFyZSB0aGUgc2FtZSBzaXplLCB0aGUgb3JpZ2luYWwgdmVyc2lvbiBpcyBmaW5lCisgICAgICAgIHJldHVybiBzdGQ6OmVxdWFsICggZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBwcmVkICk7CisgICAgfQorCisgICAgdGVtcGxhdGUgPGNsYXNzIElucHV0SXRlcmF0b3IxLCBjbGFzcyBJbnB1dEl0ZXJhdG9yMiwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICAgIGJvb2wgZXF1YWwgKCBJbnB1dEl0ZXJhdG9yMSBmaXJzdDEsIElucHV0SXRlcmF0b3IxIGxhc3QxLCAKKyAgICAgICAgICAgICAgICAgSW5wdXRJdGVyYXRvcjIgZmlyc3QyLCBJbnB1dEl0ZXJhdG9yMiBsYXN0MiwgQmluYXJ5UHJlZGljYXRlIHByZWQsCisgICAgICAgICAgICAgICAgIHN0ZDo6aW5wdXRfaXRlcmF0b3JfdGFnLCBzdGQ6OmlucHV0X2l0ZXJhdG9yX3RhZyApCisgICAgeworICAgIGZvciAoOyBmaXJzdDEgIT0gbGFzdDEgJiYgZmlyc3QyICE9IGxhc3QyOyArK2ZpcnN0MSwgKytmaXJzdDIgKQorICAgICAgICBpZiAoICFwcmVkKCpmaXJzdDEsICpmaXJzdDIgKSkKKyAgICAgICAgICAgIHJldHVybiBmYWxzZTsKKworICAgIHJldHVybiBmaXJzdDEgPT0gbGFzdDEgJiYgZmlyc3QyID09IGxhc3QyOworICAgIH0KK30KKworLy8vIFxmbiBlcXVhbCAoIElucHV0SXRlcmF0b3IxIGZpcnN0MSwgSW5wdXRJdGVyYXRvcjEgbGFzdDEsIAorLy8vICAgICAgICAgICAgIElucHV0SXRlcmF0b3IyIGZpcnN0MiwgSW5wdXRJdGVyYXRvcjIgbGFzdDIsCisvLy8gICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIHByZWQgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiBhbGwgZWxlbWVudHMgaW4gdGhlIHR3byByYW5nZXMgYXJlIGVxdWFsCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0MSAgICBUaGUgc3RhcnQgb2YgdGhlIGZpcnN0IHJhbmdlLgorLy8vIFxwYXJhbSBsYXN0MSAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZmlyc3QgcmFuZ2UuCisvLy8gXHBhcmFtIGZpcnN0MiAgICBUaGUgc3RhcnQgb2YgdGhlIHNlY29uZCByYW5nZS4KKy8vLyBccGFyYW0gbGFzdDIgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlY29uZCByYW5nZS4KKy8vLyBccGFyYW0gcHJlZCAgICAgIEEgcHJlZGljYXRlIGZvciBjb21wYXJpbmcgdGhlIGVsZW1lbnRzIG9mIHRoZSByYW5nZXMKK3RlbXBsYXRlIDxjbGFzcyBJbnB1dEl0ZXJhdG9yMSwgY2xhc3MgSW5wdXRJdGVyYXRvcjIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KK2Jvb2wgZXF1YWwgKCBJbnB1dEl0ZXJhdG9yMSBmaXJzdDEsIElucHV0SXRlcmF0b3IxIGxhc3QxLCAKKyAgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yMiBmaXJzdDIsIElucHV0SXRlcmF0b3IyIGxhc3QyLCBCaW5hcnlQcmVkaWNhdGUgcHJlZCApCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6ZXF1YWwgKCAKKyAgICAgICAgZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwgcHJlZCwKKyAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcjE+OjppdGVyYXRvcl9jYXRlZ29yeSAoKSwKKyAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcjI+OjppdGVyYXRvcl9jYXRlZ29yeSAoKSk7Cit9CisKKy8vLyBcZm4gZXF1YWwgKCBJbnB1dEl0ZXJhdG9yMSBmaXJzdDEsIElucHV0SXRlcmF0b3IxIGxhc3QxLCAKKy8vLyAgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yMiBmaXJzdDIsIElucHV0SXRlcmF0b3IyIGxhc3QyICkKKy8vLyBccmV0dXJuIHRydWUgaWYgYWxsIGVsZW1lbnRzIGluIHRoZSB0d28gcmFuZ2VzIGFyZSBlcXVhbAorLy8vIAorLy8vIFxwYXJhbSBmaXJzdDEgICAgVGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCByYW5nZS4KKy8vLyBccGFyYW0gbGFzdDEgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGZpcnN0IHJhbmdlLgorLy8vIFxwYXJhbSBmaXJzdDIgICAgVGhlIHN0YXJ0IG9mIHRoZSBzZWNvbmQgcmFuZ2UuCisvLy8gXHBhcmFtIGxhc3QyICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBzZWNvbmQgcmFuZ2UuCit0ZW1wbGF0ZSA8Y2xhc3MgSW5wdXRJdGVyYXRvcjEsIGNsYXNzIElucHV0SXRlcmF0b3IyPgorYm9vbCBlcXVhbCAoIElucHV0SXRlcmF0b3IxIGZpcnN0MSwgSW5wdXRJdGVyYXRvcjEgbGFzdDEsIAorICAgICAgICAgICAgIElucHV0SXRlcmF0b3IyIGZpcnN0MiwgSW5wdXRJdGVyYXRvcjIgbGFzdDIgKQoreworICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmVxdWFsICgKKyAgICAgICAgZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwKKyAgICAgICAgYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjplcTwKKyAgICAgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPElucHV0SXRlcmF0b3IxPjo6dmFsdWVfdHlwZSwKKyAgICAgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPElucHV0SXRlcmF0b3IyPjo6dmFsdWVfdHlwZT4gKCksCisgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPElucHV0SXRlcmF0b3IxPjo6aXRlcmF0b3JfY2F0ZWdvcnkgKCksCisgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPElucHV0SXRlcmF0b3IyPjo6aXRlcmF0b3JfY2F0ZWdvcnkgKCkpOworfQorCisvLyAgVGhlcmUgYXJlIGFscmVhZHkgcmFuZ2UtYmFzZWQgdmVyc2lvbnMgb2YgdGhlc2UuCisKK319IC8vIG5hbWVzcGFjZSBib29zdCBhbmQgYWxnb3JpdGhtCisKKyNlbmRpZiAvLyBCT09TVF9BTEdPUklUSE1fRVFVQUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL2N4eDE0L2lzX3Blcm11dGF0aW9uLmhwcApAQCAtMCwwICsxLDc5IEBACisvKgorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMTQuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorKi8KKworLy8vIFxmaWxlICBpc19wZXJtdXRhdGlvbi5ocHAKKy8vLyBcYnJpZWYgSXMgYSBzZXF1ZW5jZSBhIHBlcm11dGF0aW9uIG9mIGFub3RoZXIgc2VxdWVuY2UgKGZvdXIgaXRlcmF0b3IgdmVyc2lvbnMpCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0lTX1BFUk1VVEFUSU9OMTRfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9JU19QRVJNVVRBVElPTjE0X0hQUAorCisjaW5jbHVkZSA8dXRpbGl0eT4gICAgICAvLyBmb3Igc3RkOjpwYWlyCisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4gICAvLyBmb3Igc3RkOjplcXVhbF90bworI2luY2x1ZGUgPGl0ZXJhdG9yPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL2N4eDExL2lzX3Blcm11dGF0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vY3h4MTQvbWlzbWF0Y2guaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBpc19wZXJtdXRhdGlvbiAoIEZvcndhcmRJdGVyYXRvcjEgZmlyc3QsIEZvcndhcmRJdGVyYXRvcjEgbGFzdCwgCisvLy8gICAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMiBmaXJzdDIsIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIgKQorLy8vIFxicmllZiBUZXN0cyB0byBzZWUgaWYgdGhlIHNlcXVlbmNlIFtmaXJzdCxsYXN0KSBpcyBhIHBlcm11dGF0aW9uIG9mIHRoZSBzZXF1ZW5jZSBzdGFydGluZyBhdCBmaXJzdDIKKy8vLworLy8vIFxwYXJhbSBmaXJzdDEgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QyICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGZpcnN0MiAgIFRoZSBzdGFydCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QxICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlY29uZCBzZXF1ZW5jZQorLy8vIFxub3RlICAgICAgICAgICBUaGlzIGZ1bmN0aW9uIGlzIHBhcnQgb2YgdGhlIEMrKzIwMTQgc3RhbmRhcmQgbGlicmFyeS4KK3RlbXBsYXRlPCBjbGFzcyBGb3J3YXJkSXRlcmF0b3IxLCBjbGFzcyBGb3J3YXJkSXRlcmF0b3IyID4KK2Jvb2wgaXNfcGVybXV0YXRpb24gKCBGb3J3YXJkSXRlcmF0b3IxIGZpcnN0MSwgRm9yd2FyZEl0ZXJhdG9yMSBsYXN0MSwgCisgICAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMiBmaXJzdDIsIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIgKQoreworLy8gIEhvdyBzaG91bGQgSSBkZWFsIHdpdGggdGhlIGlkZWEgdGhhdCBGb3J3YXJkSXRlcmF0b3IxOjp2YWx1ZV90eXBlCisvLyAgYW5kIEZvcndhcmRJdGVyYXRvcjI6OnZhbHVlX3R5cGUgY291bGQgYmUgZGlmZmVyZW50PyBEZWZpbmUgbXkgb3duIGNvbXBhcmlzb24gcHJlZGljYXRlPworICAgIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcmF0b3IxLCBGb3J3YXJkSXRlcmF0b3IyPiBlcSA9IGJvb3N0OjphbGdvcml0aG06Om1pc21hdGNoCisgICAgICAgICggZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiApOworICAgIGlmICggZXEuZmlyc3QgPT0gbGFzdDEgJiYgZXEuc2Vjb25kID09IGxhc3QyKQorICAgICAgICByZXR1cm4gdHJ1ZTsKKyAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppc19wZXJtdXRhdGlvbl90YWcgKAorICAgICAgICBlcS5maXJzdCwgbGFzdDEsIGVxLnNlY29uZCwgbGFzdDIsIAorICAgICAgICBzdGQ6OmVxdWFsX3RvPHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPEZvcndhcmRJdGVyYXRvcjE+Ojp2YWx1ZV90eXBlPiAoKSwKKyAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yMT46Oml0ZXJhdG9yX2NhdGVnb3J5ICgpLAorICAgICAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxGb3J3YXJkSXRlcmF0b3IyPjo6aXRlcmF0b3JfY2F0ZWdvcnkgKCkpOworfQorCisvLy8gXGZuIGlzX3Blcm11dGF0aW9uICggRm9yd2FyZEl0ZXJhdG9yMSBmaXJzdCwgRm9yd2FyZEl0ZXJhdG9yMSBsYXN0LCAKKy8vLyAgICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IyIGZpcnN0MiwgRm9yd2FyZEl0ZXJhdG9yMiBsYXN0MiwgCisvLy8gICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIHAgKQorLy8vIFxicmllZiBUZXN0cyB0byBzZWUgaWYgdGhlIHNlcXVlbmNlIFtmaXJzdCxsYXN0KSBpcyBhIHBlcm11dGF0aW9uIG9mIHRoZSBzZXF1ZW5jZSBzdGFydGluZyBhdCBmaXJzdDIKKy8vLworLy8vIFxwYXJhbSBmaXJzdDEgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QxICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGZpcnN0MiAgIFRoZSBzdGFydCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QyICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlY29uZCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwcmVkICAgICBUaGUgcHJlZGljYXRlIHRvIGNvbXBhcmUgZWxlbWVudHMgd2l0aAorLy8vCisvLy8gXG5vdGUgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgQysrMjAxNCBzdGFuZGFyZCBsaWJyYXJ5LgordGVtcGxhdGU8IGNsYXNzIEZvcndhcmRJdGVyYXRvcjEsIGNsYXNzIEZvcndhcmRJdGVyYXRvcjIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZSA+Citib29sIGlzX3Blcm11dGF0aW9uICggRm9yd2FyZEl0ZXJhdG9yMSBmaXJzdDEsIEZvcndhcmRJdGVyYXRvcjEgbGFzdDEsCisgICAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMiBmaXJzdDIsIEZvcndhcmRJdGVyYXRvcjIgbGFzdDIsIAorICAgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBwcmVkICkKK3sKKyAgICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXJhdG9yMSwgRm9yd2FyZEl0ZXJhdG9yMj4gZXEgPSBib29zdDo6YWxnb3JpdGhtOjptaXNtYXRjaAorICAgICAgICAoIGZpcnN0MSwgbGFzdDEsIGZpcnN0MiwgbGFzdDIsIHByZWQgKTsKKyAgICBpZiAoIGVxLmZpcnN0ID09IGxhc3QxICYmIGVxLnNlY29uZCA9PSBsYXN0MikKKyAgICAgICAgcmV0dXJuIHRydWU7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6aXNfcGVybXV0YXRpb25fdGFnICgKKyAgICAgICAgZmlyc3QxLCBsYXN0MSwgZmlyc3QyLCBsYXN0MiwgcHJlZCwgCisgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPEZvcndhcmRJdGVyYXRvcjE+OjppdGVyYXRvcl9jYXRlZ29yeSAoKSwKKyAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yMj46Oml0ZXJhdG9yX2NhdGVnb3J5ICgpKTsKK30KKworfX0KKworI2VuZGlmICAvLyBCT09TVF9BTEdPUklUSE1fSVNfUEVSTVVUQVRJT04xNF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vY3h4MTQvbWlzbWF0Y2guaHBwCkBAIC0wLDAgKzEsNjQgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMDgtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFMTAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRTEwLnR4dCkKKyovCisKKy8vLyBcZmlsZSAgbWlzbWF0Y2guaHBwCisvLy8gXGJyaWVmIEZpbmQgdGhlIGZpcnN0IG1pc21hdGNoZWQgZWxlbWVudCBpbiBhIHNlcXVlbmNlCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX01JU01BVENIX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fTUlTTUFUQ0hfSFBQCisKKyNpbmNsdWRlIDx1dGlsaXR5PiAgICAgIC8vIGZvciBzdGQ6OnBhaXIKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vLyBcZm4gbWlzbWF0Y2ggKCBJbnB1dEl0ZXJhdG9yMSBmaXJzdDEsIElucHV0SXRlcmF0b3IxIGxhc3QxLCAKKy8vLyAgICAgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yMiBmaXJzdDIsIElucHV0SXRlcmF0b3IyIGxhc3QyLAorLy8vICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBwcmVkICkKKy8vLyBccmV0dXJuIGEgcGFpciBvZiBpdGVyYXRvcnMgcG9pbnRpbmcgdG8gdGhlIGZpcnN0IGVsZW1lbnRzIGluIHRoZSBzZXF1ZW5jZSB0aGF0IGRvIG5vdCBtYXRjaAorLy8vIAorLy8vIFxwYXJhbSBmaXJzdDEgICAgVGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCByYW5nZS4KKy8vLyBccGFyYW0gbGFzdDEgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGZpcnN0IHJhbmdlLgorLy8vIFxwYXJhbSBmaXJzdDIgICAgVGhlIHN0YXJ0IG9mIHRoZSBzZWNvbmQgcmFuZ2UuCisvLy8gXHBhcmFtIGxhc3QyICAgICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBzZWNvbmQgcmFuZ2UuCisvLy8gXHBhcmFtIHByZWQgICAgICBBIHByZWRpY2F0ZSBmb3IgY29tcGFyaW5nIHRoZSBlbGVtZW50cyBvZiB0aGUgcmFuZ2VzCit0ZW1wbGF0ZSA8Y2xhc3MgSW5wdXRJdGVyYXRvcjEsIGNsYXNzIElucHV0SXRlcmF0b3IyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CitzdGQ6OnBhaXI8SW5wdXRJdGVyYXRvcjEsIElucHV0SXRlcmF0b3IyPiBtaXNtYXRjaCAoCisgICAgICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3IxIGZpcnN0MSwgSW5wdXRJdGVyYXRvcjEgbGFzdDEsCisgICAgICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3IyIGZpcnN0MiwgSW5wdXRJdGVyYXRvcjIgbGFzdDIsCisgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBwcmVkICkKK3sKKyAgICBmb3IgKDsgZmlyc3QxICE9IGxhc3QxICYmIGZpcnN0MiAhPSBsYXN0MjsgKytmaXJzdDEsICsrZmlyc3QyKQorICAgICAgICBpZiAoICFwcmVkICggKmZpcnN0MSwgKmZpcnN0MiApKQorICAgICAgICAgICAgYnJlYWs7CisgICAgcmV0dXJuIHN0ZDo6cGFpcjxJbnB1dEl0ZXJhdG9yMSwgSW5wdXRJdGVyYXRvcjI+KGZpcnN0MSwgZmlyc3QyKTsKK30KKworLy8vIFxmbiBtaXNtYXRjaCAoIElucHV0SXRlcmF0b3IxIGZpcnN0MSwgSW5wdXRJdGVyYXRvcjEgbGFzdDEsIAorLy8vICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3IyIGZpcnN0MiwgSW5wdXRJdGVyYXRvcjIgbGFzdDIgKQorLy8vIFxyZXR1cm4gYSBwYWlyIG9mIGl0ZXJhdG9ycyBwb2ludGluZyB0byB0aGUgZmlyc3QgZWxlbWVudHMgaW4gdGhlIHNlcXVlbmNlIHRoYXQgZG8gbm90IG1hdGNoCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0MSAgICBUaGUgc3RhcnQgb2YgdGhlIGZpcnN0IHJhbmdlLgorLy8vIFxwYXJhbSBsYXN0MSAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZmlyc3QgcmFuZ2UuCisvLy8gXHBhcmFtIGZpcnN0MiAgICBUaGUgc3RhcnQgb2YgdGhlIHNlY29uZCByYW5nZS4KKy8vLyBccGFyYW0gbGFzdDIgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIHNlY29uZCByYW5nZS4KK3RlbXBsYXRlIDxjbGFzcyBJbnB1dEl0ZXJhdG9yMSwgY2xhc3MgSW5wdXRJdGVyYXRvcjI+CitzdGQ6OnBhaXI8SW5wdXRJdGVyYXRvcjEsIElucHV0SXRlcmF0b3IyPiBtaXNtYXRjaCAoCisgICAgICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3IxIGZpcnN0MSwgSW5wdXRJdGVyYXRvcjEgbGFzdDEsCisgICAgICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3IyIGZpcnN0MiwgSW5wdXRJdGVyYXRvcjIgbGFzdDIgKQoreworICAgIGZvciAoOyBmaXJzdDEgIT0gbGFzdDEgJiYgZmlyc3QyICE9IGxhc3QyOyArK2ZpcnN0MSwgKytmaXJzdDIpCisgICAgICAgIGlmICggKmZpcnN0MSAhPSAqZmlyc3QyICkKKyAgICAgICAgICAgIGJyZWFrOworICAgIHJldHVybiBzdGQ6OnBhaXI8SW5wdXRJdGVyYXRvcjEsIElucHV0SXRlcmF0b3IyPihmaXJzdDEsIGZpcnN0Mik7Cit9CisKKy8vICBUaGVyZSBhcmUgYWxyZWFkeSByYW5nZS1iYXNlZCB2ZXJzaW9ucyBvZiB0aGVzZS4KKworfX0gLy8gbmFtZXNwYWNlIGJvb3N0IGFuZCBhbGdvcml0aG0KKworI2VuZGlmIC8vIEJPT1NUX0FMR09SSVRITV9NSVNNQVRDSF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vZ2F0aGVyLmhwcApAQCAtMCwwICsxLDEyMyBAQAorLyogCisgICAgQ29weXJpZ2h0IDIwMDggQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQKKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyBSZXZpc2lvbiBoaXN0b3J5OgorICAgSmFudWFyeSAyMDA4IG10YyBWZXJzaW9uIGZvciBBZG9iZSBTb3VyY2UgTGlicmFyeQorICAgSmFudWFyeSAyMDEzIG10YyBWZXJzaW9uIGZvciBCb29zdC5BbGdvcml0aG0KKworKi8KKworLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworCisvKiEKK1xhdXRob3IgTWFyc2hhbGwgQ2xvdworXGRhdGUgICAgSmFudWFyeSAyMDA4CisqLworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9HQVRIRVJfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9HQVRIRVJfSFBQCisKKyNpbmNsdWRlIDxhbGdvcml0aG0+ICAgICAgICAgICAgICAgIC8vIGZvciBzdGQ6OnN0YWJsZV9wYXJ0aXRpb24KKyNpbmNsdWRlIDxmdW5jdGlvbmFsPgorCisjaW5jbHVkZSA8Ym9vc3QvYmluZC5ocHA+ICAgICAgICAgICAvLyBmb3IgYm9vc3Q6OmJpbmQKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+ICAgIC8vIGZvciBib29zdDo6YmVnaW4ocmFuZ2UpCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4gICAgICAvLyBmb3IgYm9vc3Q6OmVuZChyYW5nZSkKKworCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisvKiEKKyAgICBcZGVmZ3JvdXAgZ2F0aGVyIGdhdGhlcgorICAgIFxpbmdyb3VwIG11dGF0aW5nX2FsZ29yaXRobQorCisgICAgXGMgZ2F0aGVyKCkgdGFrZXMgYSBjb2xsZWN0aW9uIG9mIGVsZW1lbnRzIGRlZmluZWQgYnkgYSBwYWlyIG9mIGl0ZXJhdG9ycyBhbmQgbW92ZXMKKyAgICB0aGUgb25lcyBzYXRpc2Z5aW5nIGEgcHJlZGljYXRlIHRvIHRoZW0gdG8gYSBwb3NpdGlvbiAoY2FsbGVkIHRoZSBwaXZvdCkgd2l0aGluCisgICAgdGhlIHNlcXVlbmNlLiBUaGUgYWxnb3JpdGhtIGlzIHN0YWJsZS4gVGhlIHJlc3VsdCBpcyBhIHBhaXIgb2YgaXRlcmF0b3JzIHRoYXQKKyAgICBjb250YWlucyB0aGUgaXRlbXMgdGhhdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuCisKKyAgICBHaXZlbiBhbiBzZXF1ZW5jZSBjb250YWluaW5nOgorICAgIDxwcmU+CisgICAgMCAxIDIgMyA0IDUgNiA3IDggOQorICAgIDwvcHJlPgorCisgICAgYSBjYWxsIHRvIGdhdGhlciAoIGFyciwgYXJyICsgMTAsIGFyciArIDQsIElzRXZlbiAoKSkgd2lsbCByZXN1bHQgaW46CisKKyAgICA8cHJlPgorICAgIDEgMyAwIDIgNCA2IDggNSA3IDkKKyAgICAgICAgfC0tLXwtLS0tLXwKKyAgICAgIGZpcnN0IHwgIHNlY29uZAorICAgICAgICAgIHBpdm90CisgICAgPC9wcmU+CisKKworICAgIFRoZSBwcm9ibGVtIGlzIGJyb2tlbiBkb3duIGludG8gdHdvIGJhc2ljIHN0ZXBzLCBuYW1lbHksIG1vdmluZyB0aGUgaXRlbXMgYmVmb3JlIHRoZSBwaXZvdAorICAgIGFuZCB0aGVuIG1vdmluZyB0aGUgaXRlbXMgZnJvbSB0aGUgcGl2b3QgdG8gdGhlIGVuZC4gVGhlc2UgIm1vdmVzIiBhcmUgZG9uZSB3aXRoIGNhbGxzIHRvCisgICAgc3RhYmxlX3BhcnRpdGlvbi4KKworICAgIFxwYXIgU3RvcmFnZSBSZXF1aXJlbWVudHM6CisKKyAgICBUaGUgYWxnb3JpdGhtIHVzZXMgc3RhYmxlX3BhcnRpdGlvbiwgd2hpY2ggd2lsbCBhdHRlbXB0IHRvIGFsbG9jYXRlIHRlbXBvcmFyeSBtZW1vcnksCisgICAgYnV0IHdpbGwgd29yayBpbi1zaXR1IGlmIHRoZXJlIGlzIG5vbmUgYXZhaWxhYmxlLgorCisgICAgXHBhciBUaW1lIENvbXBsZXhpdHk6CisKKyAgICBJZiB0aGVyZSBpcyBzdWZmaWNpZW50IG1lbW9yeSBhdmFpbGFibGUsIHRoZSBydW4gdGltZSBpcyBsaW5lYXIgaW4gPGNvZGU+TjwvY29kZT4uCisgICAgSWYgdGhlcmUgaXMgbm90IGFueSBtZW1vcnkgYXZhaWxhYmxlLCB0aGVuIHRoZSBydW4gdGltZSBpcyA8Y29kZT5PKE4gbG9nIE4pPC9jb2RlPi4KKyovCisKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworLyohCisgICAgXGluZ3JvdXAgZ2F0aGVyCisgICAgXGJyaWVmIGl0ZXJhdG9yLWJhc2VkIGdhdGhlciBpbXBsZW1lbnRhdGlvbgorKi8KKwordGVtcGxhdGUgPAorICAgIHR5cGVuYW1lIEJpZGlyZWN0aW9uYWxJdGVyYXRvciwgIC8vIEl0ZXIgbW9kZWxzIEJpZGlyZWN0aW9uYWxJdGVyYXRvcgorICAgIHR5cGVuYW1lIFByZWQ+ICAgICAgICAgICAgICAgICAgIC8vIFByZWQgbW9kZWxzIFVuYXJ5UHJlZGljYXRlCitzdGQ6OnBhaXI8QmlkaXJlY3Rpb25hbEl0ZXJhdG9yLCBCaWRpcmVjdGlvbmFsSXRlcmF0b3I+IGdhdGhlciAKKyAgICAgICAgKCBCaWRpcmVjdGlvbmFsSXRlcmF0b3IgZmlyc3QsIEJpZGlyZWN0aW9uYWxJdGVyYXRvciBsYXN0LCBCaWRpcmVjdGlvbmFsSXRlcmF0b3IgcGl2b3QsIFByZWQgcHJlZCApCit7CisvLyAgVGhlIGZpcnN0IGNhbGwgcGFydGl0aW9ucyBldmVyeXRoaW5nIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIHBpdm90IGVsZW1lbnQsCisvLyAgd2hpbGUgdGhlIHNlY29uZCBjYWxsIHBhcnRpdGlvbnMgdGhlIHJlc3Qgb2YgdGhlIHNlcXVlbmNlLgorICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpciAoCisgICAgICAgIHN0ZDo6c3RhYmxlX3BhcnRpdGlvbiAoIGZpcnN0LCBwaXZvdCwgIWJvb3N0OjpiaW5kPGJvb2w+ICggcHJlZCwgXzEgKSksCisgICAgICAgIHN0ZDo6c3RhYmxlX3BhcnRpdGlvbiAoIHBpdm90LCBsYXN0LCAgIGJvb3N0OjpiaW5kPGJvb2w+ICggcHJlZCwgXzEgKSkpOworfQorCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKKy8qIQorICAgIFxpbmdyb3VwIGdhdGhlcgorICAgIFxicmllZiByYW5nZS1iYXNlZCBnYXRoZXIgaW1wbGVtZW50YXRpb24KKyovCisKK3RlbXBsYXRlIDwKKyAgICB0eXBlbmFtZSBCaWRpcmVjdGlvbmFsUmFuZ2UsICAgIC8vCisgICAgdHlwZW5hbWUgUHJlZD4gICAgICAgICAgICAgICAgICAvLyBQcmVkIG1vZGVscyBVbmFyeVByZWRpY2F0ZQorc3RkOjpwYWlyPAorICAgIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBCaWRpcmVjdGlvbmFsUmFuZ2U+Ojp0eXBlLAorICAgIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBCaWRpcmVjdGlvbmFsUmFuZ2U+Ojp0eXBlPgorZ2F0aGVyICgKKyAgICBjb25zdCBCaWRpcmVjdGlvbmFsUmFuZ2UgJnJhbmdlLAorICAgIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBCaWRpcmVjdGlvbmFsUmFuZ2U+Ojp0eXBlIHBpdm90LAorICAgIFByZWQgcHJlZCApCit7CisgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmdhdGhlciAoIGJvb3N0OjpiZWdpbiAoIHJhbmdlICksIGJvb3N0OjplbmQgKCByYW5nZSApLCBwaXZvdCwgcHJlZCApOworfQorCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK319ICAvLyBuYW1lc3BhY2UKKworLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworCisjZW5kaWYKKwpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9oZXguaHBwCkBAIC0wLDAgKzEsMzI1IEBACisvKgorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMTEtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyAgIFRoYW5rcyB0byBOZXZpbiBmb3IgaGlzIGNvbW1lbnRzL2hlbHAuCisqLworCisvKgorICAgIEdlbmVyYWwgcHJvYmxlbSAtIHR1cm4gYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgc2VxdWVuY2Ugb2YgaGV4YWRlY2ltYWwgY2hhcmFjdGVycy4KKyAgICAtIGFuZCBiYWNrLgorKi8KKworLy8vIFxmaWxlICBoZXguaHBwCisvLy8gXGJyaWVmIENvbnZlcnQgc2VxdWVuY2Ugb2YgaW50ZWdyYWwgdHlwZXMgaW50byBhIHNlcXVlbmNlIG9mIGhleGFkZWNpbWFsCisvLy8gICAgIGNoYXJhY3RlcnMgYW5kIGJhY2suIEJhc2VkIG9uIHRoZSBNeVNRTCBmdW5jdGlvbnMgSEVYIGFuZCBVTkhFWAorLy8vIFxhdXRob3IgTWFyc2hhbGwgQ2xvdworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9IRVhIUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX0hFWEhQUAorCisjaW5jbHVkZSA8aXRlcmF0b3I+ICAgICAvLyBmb3Igc3RkOjppdGVyYXRvcl90cmFpdHMKKyNpbmNsdWRlIDxzdGRleGNlcHQ+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9leGNlcHRpb24vZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9leGNlcHRpb24vaW5mby5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdGhyb3dfZXhjZXB0aW9uLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19pbnRlZ3JhbC5ocHA+CisKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8qIQorICAgIFxzdHJ1Y3QgaGV4X2RlY29kZV9lcnJvcgorICAgIFxicmllZiAgQmFzZSBleGNlcHRpb24gY2xhc3MgZm9yIGFsbCBoZXggZGVjb2RpbmcgZXJyb3JzCisqLyAvKiEKKyAgICBcc3RydWN0IG5vbl9oZXhfaW5wdXQKKyAgICBcYnJpZWYgIFRocm93biB3aGVuIGEgbm9uLWhleCB2YWx1ZSAoMC05LCBBLUYpIGVuY291bnRlcmVkIHdoZW4gZGVjb2RpbmcuCisgICAgICAgICAgICAgICAgQ29udGFpbnMgdGhlIG9mZmVuZGluZyBjaGFyYWN0ZXIKKyovIC8qIQorICAgIFxzdHJ1Y3Qgbm90X2Vub3VnaF9pbnB1dAorICAgIFxicmllZiAgVGhyb3duIHdoZW4gdGhlIGlucHV0IHNlcXVlbmNlIHVuZXhwZWN0ZWRseSBlbmRzCisKKyovCitzdHJ1Y3QgaGV4X2RlY29kZV9lcnJvciA6IHZpcnR1YWwgYm9vc3Q6OmV4Y2VwdGlvbiwgdmlydHVhbCBzdGQ6OmV4Y2VwdGlvbiB7fTsKK3N0cnVjdCBub3RfZW5vdWdoX2lucHV0IDogdmlydHVhbCBoZXhfZGVjb2RlX2Vycm9yIHt9Oworc3RydWN0IG5vbl9oZXhfaW5wdXQgICAgOiB2aXJ0dWFsIGhleF9kZWNvZGVfZXJyb3Ige307Cit0eXBlZGVmIGJvb3N0OjplcnJvcl9pbmZvPHN0cnVjdCBiYWRfY2hhcl8sY2hhcj4gYmFkX2NoYXI7CisKK25hbWVzcGFjZSBkZXRhaWwgeworLy8vIFxjb25kIERPWFlHRU5fSElERQorCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFQsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPgorICAgIE91dHB1dEl0ZXJhdG9yIGVuY29kZV9vbmUgKCBUIHZhbCwgT3V0cHV0SXRlcmF0b3Igb3V0LCBjb25zdCBjaGFyICogaGV4RGlnaXRzICkgeworICAgICAgICBjb25zdCBzdGQ6OnNpemVfdCBudW1faGV4X2RpZ2l0cyA9ICAyICogc2l6ZW9mICggVCApOworICAgICAgICBjaGFyIHJlcyBbIG51bV9oZXhfZGlnaXRzIF07CisgICAgICAgIGNoYXIgICpwID0gcmVzICsgbnVtX2hleF9kaWdpdHM7CisgICAgICAgIGZvciAoIHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbnVtX2hleF9kaWdpdHM7ICsraSwgdmFsID4+PSA0ICkKKyAgICAgICAgICAgICotLXAgPSBoZXhEaWdpdHMgWyB2YWwgJiAweDBGIF07CisgICAgICAgIHJldHVybiBzdGQ6OmNvcHkgKCByZXMsIHJlcyArIG51bV9oZXhfZGlnaXRzLCBvdXQgKTsKKyAgICAgICAgfQorCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFQ+CisgICAgdW5zaWduZWQgY2hhciBoZXhfY2hhcl90b19pbnQgKCBUIHZhbCApIHsKKyAgICAgICAgY2hhciBjID0gc3RhdGljX2Nhc3Q8Y2hhcj4gKCB2YWwgKTsKKyAgICAgICAgdW5zaWduZWQgcmV0dmFsID0gMDsKKyAgICAgICAgaWYgICAgICAoIGMgPj0gJzAnICYmIGMgPD0gJzknICkgcmV0dmFsID0gYyAtICcwJzsKKyAgICAgICAgZWxzZSBpZiAoIGMgPj0gJ0EnICYmIGMgPD0gJ0YnICkgcmV0dmFsID0gYyAtICdBJyArIDEwOworICAgICAgICBlbHNlIGlmICggYyA+PSAnYScgJiYgYyA8PSAnZicgKSByZXR2YWwgPSBjIC0gJ2EnICsgMTA7CisgICAgICAgIGVsc2UgQk9PU1RfVEhST1dfRVhDRVBUSU9OIChub25faGV4X2lucHV0KCkgPDwgYmFkX2NoYXIgKGMpKTsKKyAgICAgICAgcmV0dXJuIHJldHZhbDsKKyAgICAgICAgfQorCisvLyAgTXkgb3duIGl0ZXJhdG9yX3RyYWl0cyBjbGFzcy4KKy8vICBJdCBpcyBoZXJlIHNvIHRoYXQgSSBjYW4gInJlYWNoIGluc2lkZSIgc29tZSBraW5kcyBvZiBvdXRwdXQgaXRlcmF0b3JzCisvLyAgICAgIGFuZCBnZXQgdGhlIHR5cGUgdG8gd3JpdGUuCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIEl0ZXJhdG9yPgorICAgIHN0cnVjdCBoZXhfaXRlcmF0b3JfdHJhaXRzIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJdGVyYXRvcj46OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQ29udGFpbmVyPgorICAgIHN0cnVjdCBoZXhfaXRlcmF0b3JfdHJhaXRzPCBzdGQ6OmJhY2tfaW5zZXJ0X2l0ZXJhdG9yPENvbnRhaW5lcj4gPiB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgQ29udGFpbmVyOjp2YWx1ZV90eXBlIHZhbHVlX3R5cGU7CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIENvbnRhaW5lcj4KKyAgICBzdHJ1Y3QgaGV4X2l0ZXJhdG9yX3RyYWl0czwgc3RkOjpmcm9udF9pbnNlcnRfaXRlcmF0b3I8Q29udGFpbmVyPiA+IHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBDb250YWluZXI6OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgQ29udGFpbmVyPgorICAgIHN0cnVjdCBoZXhfaXRlcmF0b3JfdHJhaXRzPCBzdGQ6Omluc2VydF9pdGVyYXRvcjxDb250YWluZXI+ID4geworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIENvbnRhaW5lcjo6dmFsdWVfdHlwZSB2YWx1ZV90eXBlOworICAgIH07CisKKy8vICBvc3RyZWFtX2l0ZXJhdG9ycyBoYXZlIHRocmVlIHRlbXBsYXRlIHBhcmFtZXRlcnMuCisvLyAgVGhlIGZpcnN0IG9uZSBpcyB0aGUgb3V0cHV0IHR5cGUsIHRoZSBzZWNvbmQgb25lIGlzIHRoZSBjaGFyYWN0ZXIgdHlwZSBvZgorLy8gIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSwgdGhlIHRoaXJkIGlzIHRoZSBjaGFyYWN0ZXIgdHJhaXRzLgorLy8gICAgICBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGZpcnN0IG9uZS4KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBjaGFyVHlwZSwgdHlwZW5hbWUgdHJhaXRzPgorICAgIHN0cnVjdCBoZXhfaXRlcmF0b3JfdHJhaXRzPCBzdGQ6Om9zdHJlYW1faXRlcmF0b3I8VCwgY2hhclR5cGUsIHRyYWl0cz4gPiB7CisgICAgICAgIHR5cGVkZWYgVCB2YWx1ZV90eXBlOworICAgIH07CisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgSXRlcmF0b3I+CisgICAgYm9vbCBpdGVyX2VuZCAoIEl0ZXJhdG9yIGN1cnJlbnQsIEl0ZXJhdG9yIGxhc3QgKSB7IHJldHVybiBjdXJyZW50ID09IGxhc3Q7IH0KKworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBUPgorICAgIGJvb2wgcHRyX2VuZCAoIGNvbnN0IFQqIHB0ciwgY29uc3QgVCogLyplbmQqLyApIHsgcmV0dXJuICpwdHIgPT0gJ1wwJzsgfQorCisvLyAgV2hhdCBjYW4gd2UgYXNzdW1lIGhlcmUgYWJvdXQgdGhlIGlucHV0cz8KKy8vICAgICAgaXMgc3RkOjppdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGUgYWx3YXlzICdjaGFyJyA/CisvLyAgQ291bGQgaXQgYmUgd2NoYXJfdCwgc2F5PyBEb2VzIGl0IG1hdHRlcj8KKy8vICAgICAgV2UgYXJlIGFzc3VtaW5nIEFTQ0lJIGZvciB0aGUgdmFsdWVzIC0gYnV0IHdoYXQgYWJvdXQgdGhlIHN0b3JhZ2U/CisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yLCB0eXBlbmFtZSBFbmRQcmVkPgorICAgIHR5cGVuYW1lIGJvb3N0OjplbmFibGVfaWY8Ym9vc3Q6OmlzX2ludGVncmFsPHR5cGVuYW1lIGhleF9pdGVyYXRvcl90cmFpdHM8T3V0cHV0SXRlcmF0b3I+Ojp2YWx1ZV90eXBlPiwgT3V0cHV0SXRlcmF0b3I+Ojp0eXBlCisgICAgZGVjb2RlX29uZSAoIElucHV0SXRlcmF0b3IgJmZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCwgRW5kUHJlZCBwcmVkICkgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGhleF9pdGVyYXRvcl90cmFpdHM8T3V0cHV0SXRlcmF0b3I+Ojp2YWx1ZV90eXBlIFQ7CisgICAgICAgIFQgcmVzICgwKTsKKworICAgIC8vICBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGdldCBjYW4gcmVhZCB0aGF0IG1hbnkgY2hhcnMgaGVyZS4KKyAgICAgICAgZm9yICggc3RkOjpzaXplX3QgaSA9IDA7IGkgPCAyICogc2l6ZW9mICggVCApOyArK2ksICsrZmlyc3QgKSB7CisgICAgICAgICAgICBpZiAoIHByZWQgKCBmaXJzdCwgbGFzdCApKQorICAgICAgICAgICAgICAgIEJPT1NUX1RIUk9XX0VYQ0VQVElPTiAobm90X2Vub3VnaF9pbnB1dCAoKSk7CisgICAgICAgICAgICByZXMgPSAoIDE2ICogcmVzICkgKyBoZXhfY2hhcl90b19pbnQgKCpmaXJzdCk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgKm91dCA9IHJlczsKKyAgICAgICAgcmV0dXJuICsrb3V0OworICAgICAgICB9CisvLy8gXGVuZGNvbmQKKyAgICB9CisKKworLy8vIFxmbiBoZXggKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgaGV4YWRlY2ltYWwgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycy4KKy8vLworLy8vIFxwYXJhbSBmaXJzdCAgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGxhc3QgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIG91dCAgICAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB0aGUgcmVzdWx0cyBpbnRvCisvLy8gXHJldHVybiAgICAgICAgIFRoZSB1cGRhdGVkIG91dHB1dCBpdGVyYXRvcgorLy8vIFxub3RlICAgICAgICAgICBCYXNlZCBvbiB0aGUgTXlTUUwgZnVuY3Rpb24gb2YgdGhlIHNhbWUgbmFtZQordGVtcGxhdGUgPHR5cGVuYW1lIElucHV0SXRlcmF0b3IsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPgordHlwZW5hbWUgYm9vc3Q6OmVuYWJsZV9pZjxib29zdDo6aXNfaW50ZWdyYWw8dHlwZW5hbWUgZGV0YWlsOjpoZXhfaXRlcmF0b3JfdHJhaXRzPElucHV0SXRlcmF0b3I+Ojp2YWx1ZV90eXBlPiwgT3V0cHV0SXRlcmF0b3I+Ojp0eXBlCitoZXggKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCApIHsKKyAgICBmb3IgKCA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QgKQorICAgICAgICBvdXQgPSBkZXRhaWw6OmVuY29kZV9vbmUgKCAqZmlyc3QsIG91dCwgIjAxMjM0NTY3ODlBQkNERUYiICk7CisgICAgcmV0dXJuIG91dDsKKyAgICB9CisKKworLy8vIFxmbiBoZXhfbG93ZXIgKCBJbnB1dEl0ZXJhdG9yIGZpcnN0LCBJbnB1dEl0ZXJhdG9yIGxhc3QsIE91dHB1dEl0ZXJhdG9yIG91dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgbG93ZXIgY2FzZSBoZXhhZGVjaW1hbCBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzLgorLy8vCisvLy8gXHBhcmFtIGZpcnN0ICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gb3V0ICAgICAgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHRoZSByZXN1bHRzIGludG8KKy8vLyBccmV0dXJuICAgICAgICAgVGhlIHVwZGF0ZWQgb3V0cHV0IGl0ZXJhdG9yCisvLy8gXG5vdGUgICAgICAgICAgIEJhc2VkIG9uIHRoZSBNeVNRTCBmdW5jdGlvbiBvZiB0aGUgc2FtZSBuYW1lCit0ZW1wbGF0ZSA8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3I+Cit0eXBlbmFtZSBib29zdDo6ZW5hYmxlX2lmPGJvb3N0Ojppc19pbnRlZ3JhbDx0eXBlbmFtZSBkZXRhaWw6OmhleF9pdGVyYXRvcl90cmFpdHM8SW5wdXRJdGVyYXRvcj46OnZhbHVlX3R5cGU+LCBPdXRwdXRJdGVyYXRvcj46OnR5cGUKK2hleF9sb3dlciAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3Igb3V0ICkgeworICAgIGZvciAoIDsgZmlyc3QgIT0gbGFzdDsgKytmaXJzdCApCisgICAgICAgIG91dCA9IGRldGFpbDo6ZW5jb2RlX29uZSAoICpmaXJzdCwgb3V0LCAiMDEyMzQ1Njc4OWFiY2RlZiIgKTsKKyAgICByZXR1cm4gb3V0OworICAgIH0KKworCisvLy8gXGZuIGhleCAoIGNvbnN0IFQgKnB0ciwgT3V0cHV0SXRlcmF0b3Igb3V0ICkKKy8vLyBcYnJpZWYgICBDb252ZXJ0cyBhIHNlcXVlbmNlIG9mIGludGVncmFsIHR5cGVzIGludG8gYSBoZXhhZGVjaW1hbCBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzLgorLy8vCisvLy8gXHBhcmFtIHB0ciAgICAgIEEgcG9pbnRlciB0byBhIDAtdGVybWluYXRlZCBzZXF1ZW5jZSBvZiBkYXRhLgorLy8vIFxwYXJhbSBvdXQgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gdGhlIHJlc3VsdHMgaW50bworLy8vIFxyZXR1cm4gICAgICAgICBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyBcbm90ZSAgICAgICAgICAgQmFzZWQgb24gdGhlIE15U1FMIGZ1bmN0aW9uIG9mIHRoZSBzYW1lIG5hbWUKK3RlbXBsYXRlIDx0eXBlbmFtZSBULCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvcj4KK3R5cGVuYW1lIGJvb3N0OjplbmFibGVfaWY8Ym9vc3Q6OmlzX2ludGVncmFsPFQ+LCBPdXRwdXRJdGVyYXRvcj46OnR5cGUKK2hleCAoIGNvbnN0IFQgKnB0ciwgT3V0cHV0SXRlcmF0b3Igb3V0ICkgeworICAgIHdoaWxlICggKnB0ciApCisgICAgICAgIG91dCA9IGRldGFpbDo6ZW5jb2RlX29uZSAoICpwdHIrKywgb3V0LCAiMDEyMzQ1Njc4OUFCQ0RFRiIgKTsKKyAgICByZXR1cm4gb3V0OworICAgIH0KKworCisvLy8gXGZuIGhleF9sb3dlciAoIGNvbnN0IFQgKnB0ciwgT3V0cHV0SXRlcmF0b3Igb3V0ICkKKy8vLyBcYnJpZWYgICBDb252ZXJ0cyBhIHNlcXVlbmNlIG9mIGludGVncmFsIHR5cGVzIGludG8gYSBsb3dlciBjYXNlIGhleGFkZWNpbWFsIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMuCisvLy8KKy8vLyBccGFyYW0gcHRyICAgICAgQSBwb2ludGVyIHRvIGEgMC10ZXJtaW5hdGVkIHNlcXVlbmNlIG9mIGRhdGEuCisvLy8gXHBhcmFtIG91dCAgICAgIEFuIG91dHB1dCBpdGVyYXRvciB0byB0aGUgcmVzdWx0cyBpbnRvCisvLy8gXHJldHVybiAgICAgICAgIFRoZSB1cGRhdGVkIG91dHB1dCBpdGVyYXRvcgorLy8vIFxub3RlICAgICAgICAgICBCYXNlZCBvbiB0aGUgTXlTUUwgZnVuY3Rpb24gb2YgdGhlIHNhbWUgbmFtZQordGVtcGxhdGUgPHR5cGVuYW1lIFQsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPgordHlwZW5hbWUgYm9vc3Q6OmVuYWJsZV9pZjxib29zdDo6aXNfaW50ZWdyYWw8VD4sIE91dHB1dEl0ZXJhdG9yPjo6dHlwZQoraGV4X2xvd2VyICggY29uc3QgVCAqcHRyLCBPdXRwdXRJdGVyYXRvciBvdXQgKSB7CisgICAgd2hpbGUgKCAqcHRyICkKKyAgICAgICAgb3V0ID0gZGV0YWlsOjplbmNvZGVfb25lICggKnB0cisrLCBvdXQsICIwMTIzNDU2Nzg5YWJjZGVmIiApOworICAgIHJldHVybiBvdXQ7CisgICAgfQorCisKKy8vLyBcZm4gaGV4ICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yIG91dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgaGV4YWRlY2ltYWwgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycy4KKy8vLworLy8vIFxwYXJhbSByICAgICAgICBUaGUgaW5wdXQgcmFuZ2UKKy8vLyBccGFyYW0gb3V0ICAgICAgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHRoZSByZXN1bHRzIGludG8KKy8vLyBccmV0dXJuICAgICAgICAgVGhlIHVwZGF0ZWQgb3V0cHV0IGl0ZXJhdG9yCisvLy8gXG5vdGUgICAgICAgICAgIEJhc2VkIG9uIHRoZSBNeVNRTCBmdW5jdGlvbiBvZiB0aGUgc2FtZSBuYW1lCit0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2UsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yPgordHlwZW5hbWUgYm9vc3Q6OmVuYWJsZV9pZjxib29zdDo6aXNfaW50ZWdyYWw8dHlwZW5hbWUgZGV0YWlsOjpoZXhfaXRlcmF0b3JfdHJhaXRzPHR5cGVuYW1lIFJhbmdlOjppdGVyYXRvcj46OnZhbHVlX3R5cGU+LCBPdXRwdXRJdGVyYXRvcj46OnR5cGUKK2hleCAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQgKSB7CisgICAgcmV0dXJuIGhleCAoYm9vc3Q6OmJlZ2luKHIpLCBib29zdDo6ZW5kKHIpLCBvdXQpOworfQorCisKKy8vLyBcZm4gaGV4X2xvd2VyICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yIG91dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgbG93ZXIgY2FzZSBoZXhhZGVjaW1hbCBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzLgorLy8vCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBvdXQgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gdGhlIHJlc3VsdHMgaW50bworLy8vIFxyZXR1cm4gICAgICAgICBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyBcbm90ZSAgICAgICAgICAgQmFzZWQgb24gdGhlIE15U1FMIGZ1bmN0aW9uIG9mIHRoZSBzYW1lIG5hbWUKK3RlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3I+Cit0eXBlbmFtZSBib29zdDo6ZW5hYmxlX2lmPGJvb3N0Ojppc19pbnRlZ3JhbDx0eXBlbmFtZSBkZXRhaWw6OmhleF9pdGVyYXRvcl90cmFpdHM8dHlwZW5hbWUgUmFuZ2U6Oml0ZXJhdG9yPjo6dmFsdWVfdHlwZT4sIE91dHB1dEl0ZXJhdG9yPjo6dHlwZQoraGV4X2xvd2VyICggY29uc3QgUmFuZ2UgJnIsIE91dHB1dEl0ZXJhdG9yIG91dCApIHsKKyAgICByZXR1cm4gaGV4X2xvd2VyIChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQociksIG91dCk7Cit9CisKKworLy8vIFxmbiB1bmhleCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3Igb3V0ICkKKy8vLyBcYnJpZWYgICBDb252ZXJ0cyBhIHNlcXVlbmNlIG9mIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgaW50byBhIHNlcXVlbmNlIG9mIGludGVnZXJzLgorLy8vCisvLy8gXHBhcmFtIGZpcnN0ICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gbGFzdCAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gb3V0ICAgICAgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHRoZSByZXN1bHRzIGludG8KKy8vLyBccmV0dXJuICAgICAgICAgVGhlIHVwZGF0ZWQgb3V0cHV0IGl0ZXJhdG9yCisvLy8gXG5vdGUgICAgICAgICAgIEJhc2VkIG9uIHRoZSBNeVNRTCBmdW5jdGlvbiBvZiB0aGUgc2FtZSBuYW1lCit0ZW1wbGF0ZSA8dHlwZW5hbWUgSW5wdXRJdGVyYXRvciwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3I+CitPdXRwdXRJdGVyYXRvciB1bmhleCAoIElucHV0SXRlcmF0b3IgZmlyc3QsIElucHV0SXRlcmF0b3IgbGFzdCwgT3V0cHV0SXRlcmF0b3Igb3V0ICkgeworICAgIHdoaWxlICggZmlyc3QgIT0gbGFzdCApCisgICAgICAgIG91dCA9IGRldGFpbDo6ZGVjb2RlX29uZSAoIGZpcnN0LCBsYXN0LCBvdXQsIGRldGFpbDo6aXRlcl9lbmQ8SW5wdXRJdGVyYXRvcj4gKTsKKyAgICByZXR1cm4gb3V0OworICAgIH0KKworCisvLy8gXGZuIHVuaGV4ICggY29uc3QgVCAqcHRyLCBPdXRwdXRJdGVyYXRvciBvdXQgKQorLy8vIFxicmllZiAgIENvbnZlcnRzIGEgc2VxdWVuY2Ugb2YgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBpbnRvIGEgc2VxdWVuY2Ugb2YgaW50ZWdlcnMuCisvLy8KKy8vLyBccGFyYW0gcHRyICAgICAgQSBwb2ludGVyIHRvIGEgbnVsbC10ZXJtaW5hdGVkIGlucHV0IHNlcXVlbmNlLgorLy8vIFxwYXJhbSBvdXQgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gdGhlIHJlc3VsdHMgaW50bworLy8vIFxyZXR1cm4gICAgICAgICBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyBcbm90ZSAgICAgICAgICAgQmFzZWQgb24gdGhlIE15U1FMIGZ1bmN0aW9uIG9mIHRoZSBzYW1lIG5hbWUKK3RlbXBsYXRlIDx0eXBlbmFtZSBULCB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvcj4KK091dHB1dEl0ZXJhdG9yIHVuaGV4ICggY29uc3QgVCAqcHRyLCBPdXRwdXRJdGVyYXRvciBvdXQgKSB7CisvLyAgSWYgd2UgcnVuIGludG8gdGhlIHRlcm1pbmF0b3Igd2hpbGUgZGVjb2RpbmcsIHdlIHdpbGwgdGhyb3cgYQorLy8gICAgICBtYWxmb3JtZWQgaW5wdXQgZXhjZXB0aW9uLiBJdCB3b3VsZCBiZSBuaWNlciB0byB0aHJvdyBhICdOb3QgZW5vdWdoIGlucHV0JworLy8gICAgICBleGNlcHRpb24gLSBidXQgaG93IG11Y2ggZXh0cmEgd29yayB3b3VsZCB0aGF0IHJlcXVpcmU/CisgICAgd2hpbGUgKCAqcHRyICkKKyAgICAgICAgb3V0ID0gZGV0YWlsOjpkZWNvZGVfb25lICggcHRyLCAoY29uc3QgVCAqKSBOVUxMLCBvdXQsIGRldGFpbDo6cHRyX2VuZDxUPiApOworICAgIHJldHVybiBvdXQ7CisgICAgfQorCisKKy8vLyBcZm4gT3V0cHV0SXRlcmF0b3IgdW5oZXggKCBjb25zdCBSYW5nZSAmciwgT3V0cHV0SXRlcmF0b3Igb3V0ICkKKy8vLyBcYnJpZWYgICBDb252ZXJ0cyBhIHNlcXVlbmNlIG9mIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMgaW50byBhIHNlcXVlbmNlIG9mIGludGVnZXJzLgorLy8vCisvLy8gXHBhcmFtIHIgICAgICAgIFRoZSBpbnB1dCByYW5nZQorLy8vIFxwYXJhbSBvdXQgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gdGhlIHJlc3VsdHMgaW50bworLy8vIFxyZXR1cm4gICAgICAgICBUaGUgdXBkYXRlZCBvdXRwdXQgaXRlcmF0b3IKKy8vLyBcbm90ZSAgICAgICAgICAgQmFzZWQgb24gdGhlIE15U1FMIGZ1bmN0aW9uIG9mIHRoZSBzYW1lIG5hbWUKK3RlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZSwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3I+CitPdXRwdXRJdGVyYXRvciB1bmhleCAoIGNvbnN0IFJhbmdlICZyLCBPdXRwdXRJdGVyYXRvciBvdXQgKSB7CisgICAgcmV0dXJuIHVuaGV4IChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQociksIG91dCk7CisgICAgfQorCisKKy8vLyBcZm4gU3RyaW5nIGhleCAoIGNvbnN0IFN0cmluZyAmaW5wdXQgKQorLy8vIFxicmllZiAgIENvbnZlcnRzIGEgc2VxdWVuY2Ugb2YgaW50ZWdyYWwgdHlwZXMgaW50byBhIGhleGFkZWNpbWFsIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMuCisvLy8KKy8vLyBccGFyYW0gaW5wdXQgICAgQSBjb250YWluZXIgdG8gYmUgY29udmVydGVkCisvLy8gXHJldHVybiAgICAgICAgIEEgY29udGFpbmVyIHdpdGggdGhlIGVuY29kZWQgdGV4dAordGVtcGxhdGU8dHlwZW5hbWUgU3RyaW5nPgorU3RyaW5nIGhleCAoIGNvbnN0IFN0cmluZyAmaW5wdXQgKSB7CisgICAgU3RyaW5nIG91dHB1dDsKKyAgICBvdXRwdXQucmVzZXJ2ZSAoaW5wdXQuc2l6ZSAoKSAqICgyICogc2l6ZW9mICh0eXBlbmFtZSBTdHJpbmc6OnZhbHVlX3R5cGUpKSk7CisgICAgKHZvaWQpIGhleCAoaW5wdXQsIHN0ZDo6YmFja19pbnNlcnRlciAob3V0cHV0KSk7CisgICAgcmV0dXJuIG91dHB1dDsKKyAgICB9CisKKworLy8vIFxmbiBTdHJpbmcgaGV4X2xvd2VyICggY29uc3QgU3RyaW5nICZpbnB1dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBpbnRlZ3JhbCB0eXBlcyBpbnRvIGEgbG93ZXIgY2FzZSBoZXhhZGVjaW1hbCBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzLgorLy8vCisvLy8gXHBhcmFtIGlucHV0ICAgIEEgY29udGFpbmVyIHRvIGJlIGNvbnZlcnRlZAorLy8vIFxyZXR1cm4gICAgICAgICBBIGNvbnRhaW5lciB3aXRoIHRoZSBlbmNvZGVkIHRleHQKK3RlbXBsYXRlPHR5cGVuYW1lIFN0cmluZz4KK1N0cmluZyBoZXhfbG93ZXIgKCBjb25zdCBTdHJpbmcgJmlucHV0ICkgeworICAgIFN0cmluZyBvdXRwdXQ7CisgICAgb3V0cHV0LnJlc2VydmUgKGlucHV0LnNpemUgKCkgKiAoMiAqIHNpemVvZiAodHlwZW5hbWUgU3RyaW5nOjp2YWx1ZV90eXBlKSkpOworICAgICh2b2lkKSBoZXhfbG93ZXIgKGlucHV0LCBzdGQ6OmJhY2tfaW5zZXJ0ZXIgKG91dHB1dCkpOworICAgIHJldHVybiBvdXRwdXQ7CisgICAgfQorCisKKy8vLyBcZm4gU3RyaW5nIHVuaGV4ICggY29uc3QgU3RyaW5nICZpbnB1dCApCisvLy8gXGJyaWVmICAgQ29udmVydHMgYSBzZXF1ZW5jZSBvZiBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJzIGludG8gYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzLgorLy8vCisvLy8gXHBhcmFtIGlucHV0ICAgIEEgY29udGFpbmVyIHRvIGJlIGNvbnZlcnRlZAorLy8vIFxyZXR1cm4gICAgICAgICBBIGNvbnRhaW5lciB3aXRoIHRoZSBkZWNvZGVkIHRleHQKK3RlbXBsYXRlPHR5cGVuYW1lIFN0cmluZz4KK1N0cmluZyB1bmhleCAoIGNvbnN0IFN0cmluZyAmaW5wdXQgKSB7CisgICAgU3RyaW5nIG91dHB1dDsKKyAgICBvdXRwdXQucmVzZXJ2ZSAoaW5wdXQuc2l6ZSAoKSAvICgyICogc2l6ZW9mICh0eXBlbmFtZSBTdHJpbmc6OnZhbHVlX3R5cGUpKSk7CisgICAgKHZvaWQpIHVuaGV4IChpbnB1dCwgc3RkOjpiYWNrX2luc2VydGVyIChvdXRwdXQpKTsKKyAgICByZXR1cm4gb3V0cHV0OworICAgIH0KKworfX0KKworI2VuZGlmIC8vIEJPT1NUX0FMR09SSVRITV9IRVhIUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vaXNfcGFsaW5kcm9tZS5ocHAKQEAgLTAsMCArMSwxNjEgQEAKKy8qCisgIENvcHlyaWdodCAoYykgQWxleGFuZGVyIFphaXRzZXYgPHphbWF6YW40aWtAZ21haWwuY29tPiwgMjAxNgorCisgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZQorICBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgbGF0ZXN0IHZlcnNpb24uCisqLworCisvLy8gXGZpbGUgIGlzX3BhbGluZHJvbWUuaHBwCisvLy8gXGJyaWVmIENoZWNrcyB0aGUgaW5wdXQgc2VxdWVuY2Ugb24gcGFsaW5kcm9tZS4KKy8vLyBcYXV0aG9yIEFsZXhhbmRlciBaYWl0c2V2CisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0lTX1BBTElORFJPTUVfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9JU19QQUxJTkRST01FX0hQUAorCisjaW5jbHVkZSA8aXRlcmF0b3I+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxjc3RyaW5nPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7ICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBpc19wYWxpbmRyb21lICggQmlkaXJlY3Rpb25hbEl0ZXJhdG9yIGJlZ2luLCBCaWRpcmVjdGlvbmFsSXRlcmF0b3IgZW5kLCBQcmVkaWNhdGUgcCApCisvLy8gXHJldHVybiB0cnVlIGlmIHRoZSBlbnRpcmUgc2VxdWVuY2UgaXMgcGFsaW5kcm9tZQorLy8vCisvLy8gXHBhcmFtIGJlZ2luICAgIFRoZSBzdGFydCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLyBccGFyYW0gZW5kCQlPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzZXF1ZW5jZQorLy8vIFxwYXJhbSBwICAgICAgICBBIHByZWRpY2F0ZSB1c2VkIHRvIGNvbXBhcmUgdGhlIHZhbHVlcy4KKy8vLworLy8vIFxub3RlIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBmb3IgZW1wdHkgc2VxdWVuY2VzIGFuZCBmb3IgcGFsaW5kcm9tZXMuCisvLy8gICAgIEZvciBvdGhlciBzZXF1ZW5jZXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuCisvLy8gICAgIENvbXBsZXhpdHk6IE8oTikuCit0ZW1wbGF0ZSA8dHlwZW5hbWUgQmlkaXJlY3Rpb25hbEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkaWNhdGU+Citib29sIGlzX3BhbGluZHJvbWUoQmlkaXJlY3Rpb25hbEl0ZXJhdG9yIGJlZ2luLCBCaWRpcmVjdGlvbmFsSXRlcmF0b3IgZW5kLCBQcmVkaWNhdGUgcCApCit7CisgICAgaWYoYmVnaW4gPT0gZW5kKQorICAgIHsKKyAgICAgICAgcmV0dXJuIHRydWU7CisgICAgfQorCisgICAgLS1lbmQ7CisgICAgd2hpbGUoYmVnaW4gIT0gZW5kKQorICAgIHsKKyAgICAgICAgaWYoIXAoKmJlZ2luLCAqZW5kKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgICAgICB9CisgICAgICAgICsrYmVnaW47CisgICAgICAgIGlmKGJlZ2luID09IGVuZCkKKyAgICAgICAgeworICAgICAgICAgICAgYnJlYWs7CisgICAgICAgIH0KKyAgICAgICAgLS1lbmQ7CisgICAgfQorICAgIHJldHVybiB0cnVlOworfQorCisvLy8gXGZuIGlzX3BhbGluZHJvbWUgKCBCaWRpcmVjdGlvbmFsSXRlcmF0b3IgYmVnaW4sIEJpZGlyZWN0aW9uYWxJdGVyYXRvciBlbmQgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHBhbGluZHJvbWUKKy8vLworLy8vIFxwYXJhbSBiZWdpbiAgICBUaGUgc3RhcnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlCisvLy8gXHBhcmFtIGVuZAkJT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UKKy8vLworLy8vIFxub3RlIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBmb3IgZW1wdHkgc2VxdWVuY2VzIGFuZCBmb3IgcGFsaW5kcm9tZXMuCisvLy8gICAgIEZvciBvdGhlciBzZXF1ZW5jZXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuCisvLy8gICAgIENvbXBsZXhpdHk6IE8oTikuCit0ZW1wbGF0ZSA8dHlwZW5hbWUgQmlkaXJlY3Rpb25hbEl0ZXJhdG9yPgorYm9vbCBpc19wYWxpbmRyb21lKEJpZGlyZWN0aW9uYWxJdGVyYXRvciBiZWdpbiwgQmlkaXJlY3Rpb25hbEl0ZXJhdG9yIGVuZCkKK3sKKyAgICBpZihiZWdpbiA9PSBlbmQpCisgICAgeworICAgICAgICByZXR1cm4gdHJ1ZTsKKyAgICB9CisKKyAgICAtLWVuZDsKKyAgICB3aGlsZShiZWdpbiAhPSBlbmQpCisgICAgeworICAgICAgICBpZighKCpiZWdpbiA9PSAqZW5kKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgICAgICB9CisgICAgICAgICsrYmVnaW47CisgICAgICAgIGlmKGJlZ2luID09IGVuZCkKKyAgICAgICAgeworICAgICAgICAgICAgYnJlYWs7CisgICAgICAgIH0KKyAgICAgICAgLS1lbmQ7CisgICAgfQorICAgIHJldHVybiB0cnVlOworfQorCisvLy8gXGZuIGlzX3BhbGluZHJvbWUgKCBjb25zdCBSJiByYW5nZSApCisvLy8gXHJldHVybiB0cnVlIGlmIHRoZSBlbnRpcmUgc2VxdWVuY2UgaXMgcGFsaW5kcm9tZQorLy8vCisvLy8gXHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0byBiZSB0ZXN0ZWQuCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIGVtcHR5IHNlcXVlbmNlcyBhbmQgZm9yIHBhbGluZHJvbWVzLgorLy8vICAgICBGb3Igb3RoZXIgc2VxdWVuY2VzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLgorLy8vICAgICBDb21wbGV4aXR5OiBPKE4pLgordGVtcGxhdGUgPHR5cGVuYW1lIFI+Citib29sIGlzX3BhbGluZHJvbWUoY29uc3QgUiYgcmFuZ2UpCit7CisgICAgcmV0dXJuIGlzX3BhbGluZHJvbWUoYm9vc3Q6OmJlZ2luKHJhbmdlKSwgYm9vc3Q6OmVuZChyYW5nZSkpOworfQorCisvLy8gXGZuIGlzX3BhbGluZHJvbWUgKCBjb25zdCBSJiByYW5nZSwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHBhbGluZHJvbWUKKy8vLworLy8vIFxwYXJhbSByYW5nZSBUaGUgcmFuZ2UgdG8gYmUgdGVzdGVkLgorLy8vIFxwYXJhbSBwICAgICBBIHByZWRpY2F0ZSB1c2VkIHRvIGNvbXBhcmUgdGhlIHZhbHVlcy4KKy8vLworLy8vIFxub3RlIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBmb3IgZW1wdHkgc2VxdWVuY2VzIGFuZCBmb3IgcGFsaW5kcm9tZXMuCisvLy8gICAgIEZvciBvdGhlciBzZXF1ZW5jZXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuCisvLy8gICAgIENvbXBsZXhpdHk6IE8oTikuCit0ZW1wbGF0ZSA8dHlwZW5hbWUgUiwgdHlwZW5hbWUgUHJlZGljYXRlPgorYm9vbCBpc19wYWxpbmRyb21lKGNvbnN0IFImIHJhbmdlLCBQcmVkaWNhdGUgcCkKK3sKKyAgICByZXR1cm4gaXNfcGFsaW5kcm9tZShib29zdDo6YmVnaW4ocmFuZ2UpLCBib29zdDo6ZW5kKHJhbmdlKSwgcCk7Cit9CisKKworLy8vIFxmbiBpc19wYWxpbmRyb21lICggY29uc3QgY2hhciogc3RyICkKKy8vLyBccmV0dXJuIHRydWUgaWYgdGhlIGVudGlyZSBzZXF1ZW5jZSBpcyBwYWxpbmRyb21lCisvLy8KKy8vLyBccGFyYW0gc3RyIEMtc3RyaW5nIHRvIGJlIHRlc3RlZC4KKy8vLworLy8vIFxub3RlIFRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZSBmb3IgZW1wdHkgc2VxdWVuY2VzIGFuZCBmb3IgcGFsaW5kcm9tZXMuCisvLy8gICAgIEZvciBvdGhlciBzZXF1ZW5jZXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UuCisvLy8gICAgIENvbXBsZXhpdHk6IE8oTikuCitib29sIGlzX3BhbGluZHJvbWUoY29uc3QgY2hhciogc3RyKQoreworICAgIGlmKCFzdHIpCisJICAgIHJldHVybiB0cnVlOworICAgIHJldHVybiBpc19wYWxpbmRyb21lKHN0ciwgc3RyICsgc3RybGVuKHN0cikpOworfQorCisKKy8vLyBcZm4gaXNfcGFsaW5kcm9tZSAoIGNvbnN0IGNoYXIqIHN0ciwgUHJlZGljYXRlIHAgKQorLy8vIFxyZXR1cm4gdHJ1ZSBpZiB0aGUgZW50aXJlIHNlcXVlbmNlIGlzIHBhbGluZHJvbWUKKy8vLworLy8vIFxwYXJhbSBzdHIgQy1zdHJpbmcgdG8gYmUgdGVzdGVkLgorLy8vIFxwYXJhbSBwICAgQSBwcmVkaWNhdGUgdXNlZCB0byBjb21wYXJlIHRoZSB2YWx1ZXMuCisvLy8KKy8vLyBcbm90ZSBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWUgZm9yIGVtcHR5IHNlcXVlbmNlcyBhbmQgZm9yIHBhbGluZHJvbWVzLgorLy8vICAgICBGb3Igb3RoZXIgc2VxdWVuY2VzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLgorLy8vICAgICBDb21wbGV4aXR5OiBPKE4pLgordGVtcGxhdGU8dHlwZW5hbWUgUHJlZGljYXRlPgorYm9vbCBpc19wYWxpbmRyb21lKGNvbnN0IGNoYXIqIHN0ciwgUHJlZGljYXRlIHApCit7CisgICAgaWYoIXN0cikKKwkgICAgcmV0dXJuIHRydWU7CisgICAgcmV0dXJuIGlzX3BhbGluZHJvbWUoc3RyLCBzdHIgKyBzdHJsZW4oc3RyKSwgcCk7Cit9CisKK319CisKKyNlbmRpZiAvLyBCT09TVF9BTEdPUklUSE1fSVNfUEFMSU5EUk9NRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vbWlubWF4LmhwcApAQCAtMCwwICsxLDQ3IEBACisvLyAgKEMpIENvcHlyaWdodCBIZXJ2ZSBCcm9ubmltYW5uIDIwMDQuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworLy8gZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8qCisgUmV2aXNpb24gaGlzdG9yeToKKyAgIDEgSnVseSAyMDA0CisgICAgICBTcGxpdCB0aGUgY29kZSBpbnRvIHR3byBoZWFkZXJzIHRvIGxlc3NlbiBkZXBlbmRlbmNlIG9uCisgICAgICBCb29zdC50dXBsZS4gKEhlcnZlKQorICAgMjYgSnVuZSAyMDA0CisgICAgICBBZGRlZCB0aGUgY29kZSBmb3IgdGhlIGJvb3N0IG1pbm1heCBsaWJyYXJ5LiAoSGVydmUpCisqLworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9NSU5NQVhfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9NSU5NQVhfSFBQCisKKy8qIFBST1BPU0VEIFNUQU5EQVJEIEVYVEVOU0lPTlM6CisgKgorICogbWlubWF4KGEsIGIpCisgKiBFZmZlY3Q6IChiPGEpID8gc3RkOjptYWtlX3BhaXIoYixhKSA6IHN0ZDo6bWFrZV9wYWlyKGEsYik7CisgKgorICogbWlubWF4KGEsIGIsIGNvbXApCisgKiBFZmZlY3Q6IGNvbXAoYixhKSA/IHN0ZDo6bWFrZV9wYWlyKGIsYSkgOiBzdGQ6Om1ha2VfcGFpcihhLGIpOworICoKKyAqLworCisjaW5jbHVkZSA8Ym9vc3QvdHVwbGUvdHVwbGUuaHBwPiAvLyBmb3IgdXNpbmcgcGFpcnMgd2l0aCBib29zdDo6Y3JlZgorI2luY2x1ZGUgPGJvb3N0L3JlZi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIFQ+CisgIHR1cGxlPCBUIGNvbnN0JiwgVCBjb25zdCYgPgorICBtaW5tYXgoVCBjb25zdCYgYSwgVCBjb25zdCYgYikgeworICAgIHJldHVybiAoYjxhKSA/IG1ha2VfdHVwbGUoY3JlZihiKSxjcmVmKGEpKSA6IG1ha2VfdHVwbGUoY3JlZihhKSxjcmVmKGIpKTsKKyAgfQorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBULCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgIHR1cGxlPCBUIGNvbnN0JiwgVCBjb25zdCYgPgorICBtaW5tYXgoVCBjb25zdCYgYSwgVCBjb25zdCYgYiwgQmluYXJ5UHJlZGljYXRlIGNvbXApIHsKKyAgICByZXR1cm4gY29tcChiLGEpID8gbWFrZV90dXBsZShjcmVmKGIpLGNyZWYoYSkpIDogbWFrZV90dXBsZShjcmVmKGEpLGNyZWYoYikpOworICB9CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAvLyBCT09TVF9BTEdPUklUSE1fTUlOTUFYX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9taW5tYXhfZWxlbWVudC5ocHAKQEAgLTAsMCArMSw1NTMgQEAKKy8vICAoQykgQ29weXJpZ2h0IEhlcnZlIEJyb25uaW1hbm4gMjAwNC4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisvLyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLyoKKyBSZXZpc2lvbiBoaXN0b3J5OgorICAgMSBKdWx5IDIwMDQKKyAgICAgIFNwbGl0IHRoZSBjb2RlIGludG8gdHdvIGhlYWRlcnMgdG8gbGVzc2VuIGRlcGVuZGVuY2Ugb24KKyAgICAgIEJvb3N0LnR1cGxlLiAoSGVydmUpCisgICAyNiBKdW5lIDIwMDQKKyAgICAgIEFkZGVkIHRoZSBjb2RlIGZvciB0aGUgYm9vc3QgbWlubWF4IGxpYnJhcnkuIChIZXJ2ZSkKKyovCisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX01JTk1BWF9FTEVNRU5UX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fTUlOTUFYX0VMRU1FTlRfSFBQCisKKy8qIFBST1BPU0VEIFNUQU5EQVJEIEVYVEVOU0lPTlM6CisgKgorICogbWlubWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QpCisgKiBFZmZlY3Q6IHN0ZDo6bWFrZV9wYWlyKCBzdGQ6Om1pbl9lbGVtZW50KGZpcnN0LCBsYXN0KSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6bWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QpICk7CisgKgorICogbWlubWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApCisgKiBFZmZlY3Q6IHN0ZDo6bWFrZV9wYWlyKCBzdGQ6Om1pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6bWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApICk7CisgKi8KKworI2luY2x1ZGUgPHV0aWxpdHk+IC8vIGZvciBzdGQ6OnBhaXIgYW5kIHN0ZDo6bWFrZV9wYWlyCisKK25hbWVzcGFjZSBib29zdCB7CisKKyAgbmFtZXNwYWNlIGRldGFpbCB7ICAvLyBmb3Igb2J0YWluaW5nIGEgdW5pZm9ybSB2ZXJzaW9uIG9mIG1pbm1heF9lbGVtZW50CisgICAgLy8gdGhhdCBjb21waWxlcyB3aXRoIFZDKysgNi4wIC0tIGF2b2lkIHRoZSBpdGVyYXRvcl90cmFpdHMgYnkKKyAgICAvLyBoYXZpbmcgY29tcGFyaXNvbiBvYmplY3Qgb3ZlciBpdGVyYXRvciwgbm90IG92ZXIgZGVyZWZlcmVuY2VkIHZhbHVlCisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgSXRlcmF0b3I+CisgICAgc3RydWN0IGxlc3Nfb3Zlcl9pdGVyIHsKKyAgICAgIGJvb2wgb3BlcmF0b3IoKShJdGVyYXRvciBjb25zdCYgaXQxLAorICAgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yIGNvbnN0JiBpdDIpIGNvbnN0IHsgcmV0dXJuICppdDEgPCAqaXQyOyB9CisgICAgfTsKKworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBJdGVyYXRvciwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICAgIHN0cnVjdCBiaW5hcnlfcHJlZF9vdmVyX2l0ZXIgeworICAgICAgZXhwbGljaXQgYmluYXJ5X3ByZWRfb3Zlcl9pdGVyKEJpbmFyeVByZWRpY2F0ZSBjb25zdCYgcCApIDogbV9wKCBwICkge30KKyAgICAgIGJvb2wgb3BlcmF0b3IoKShJdGVyYXRvciBjb25zdCYgaXQxLAorICAgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yIGNvbnN0JiBpdDIpIGNvbnN0IHsgcmV0dXJuIG1fcCgqaXQxLCAqaXQyKTsgfQorICAgIHByaXZhdGU6CisgICAgICBCaW5hcnlQcmVkaWNhdGUgbV9wOworICAgIH07CisKKyAgICAvLyBjb21tb24gYmFzZSBmb3IgdGhlIHR3byBtaW5tYXhfZWxlbWVudCBvdmVybG9hZHMKKworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlciwgY2xhc3MgQ29tcGFyZSA+CisgICAgc3RkOjpwYWlyPEZvcndhcmRJdGVyLEZvcndhcmRJdGVyPgorICAgIGJhc2ljX21pbm1heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LCBDb21wYXJlIGNvbXApCisgICAgeworICAgICAgaWYgKGZpcnN0ID09IGxhc3QpCisgICAgICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihsYXN0LGxhc3QpOworCisgICAgICBGb3J3YXJkSXRlciBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgICBGb3J3YXJkSXRlciBtYXhfcmVzdWx0ID0gZmlyc3Q7CisKKyAgICAgIC8vIGlmIG9ubHkgb25lIGVsZW1lbnQKKyAgICAgIEZvcndhcmRJdGVyIHNlY29uZCA9IGZpcnN0OyArK3NlY29uZDsKKyAgICAgIGlmIChzZWNvbmQgPT0gbGFzdCkKKyAgICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKG1pbl9yZXN1bHQsIG1heF9yZXN1bHQpOworCisgICAgICAvLyB0cmVhdCBmaXJzdCBwYWlyIHNlcGFyYXRlbHkgKG9ubHkgb25lIGNvbXBhcmlzb24gZm9yIGZpcnN0IHR3byBlbGVtZW50cykKKyAgICAgIEZvcndhcmRJdGVyIHBvdGVudGlhbF9taW5fcmVzdWx0ID0gbGFzdDsKKyAgICAgIGlmIChjb21wKGZpcnN0LCBzZWNvbmQpKQorICAgICAgICBtYXhfcmVzdWx0ID0gc2Vjb25kOworICAgICAgZWxzZSB7CisgICAgICAgIG1pbl9yZXN1bHQgPSBzZWNvbmQ7CisgICAgICAgIHBvdGVudGlhbF9taW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgICB9CisKKyAgICAgIC8vIHRoZW4gZWFjaCBlbGVtZW50IGJ5IHBhaXJzLCB3aXRoIGF0IG1vc3QgMyBjb21wYXJpc29ucyBwZXIgcGFpcgorICAgICAgZmlyc3QgPSArK3NlY29uZDsgaWYgKGZpcnN0ICE9IGxhc3QpICsrc2Vjb25kOworICAgICAgd2hpbGUgKHNlY29uZCAhPSBsYXN0KSB7CisgICAgICAgIGlmIChjb21wKGZpcnN0LCBzZWNvbmQpKSB7CisgICAgICAgICAgaWYgKGNvbXAoZmlyc3QsIG1pbl9yZXN1bHQpKSB7CisgICAgICAgICAgICBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgICAgICAgICBwb3RlbnRpYWxfbWluX3Jlc3VsdCA9IGxhc3Q7CisgICAgICAgICAgfQorICAgICAgICAgIGlmIChjb21wKG1heF9yZXN1bHQsIHNlY29uZCkpCisgICAgICAgICAgICBtYXhfcmVzdWx0ID0gc2Vjb25kOworICAgICAgICB9IGVsc2UgeworICAgICAgICAgIGlmIChjb21wKHNlY29uZCwgbWluX3Jlc3VsdCkpIHsKKyAgICAgICAgICAgIG1pbl9yZXN1bHQgPSBzZWNvbmQ7CisgICAgICAgICAgICBwb3RlbnRpYWxfbWluX3Jlc3VsdCA9IGZpcnN0OworICAgICAgICAgIH0KKyAgICAgICAgICBpZiAoY29tcChtYXhfcmVzdWx0LCBmaXJzdCkpCisgICAgICAgICAgICBtYXhfcmVzdWx0ID0gZmlyc3Q7CisgICAgICAgIH0KKyAgICAgICAgZmlyc3QgPSArK3NlY29uZDsKKyAgICAgICAgaWYgKGZpcnN0ICE9IGxhc3QpICsrc2Vjb25kOworICAgICAgfQorCisgICAgICAvLyBpZiBvZGQgbnVtYmVyIG9mIGVsZW1lbnRzLCB0cmVhdCBsYXN0IGVsZW1lbnQKKyAgICAgIGlmIChmaXJzdCAhPSBsYXN0KSB7IC8vIG9kZCBudW1iZXIgb2YgZWxlbWVudHMKKyAgICAgICAgaWYgKGNvbXAoZmlyc3QsIG1pbl9yZXN1bHQpKSB7CisgICAgICAgICAgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgICAgICAgIHBvdGVudGlhbF9taW5fcmVzdWx0ID0gbGFzdDsKKyAgICAgICAgICB9CisgICAgICAgIGVsc2UgaWYgKGNvbXAobWF4X3Jlc3VsdCwgZmlyc3QpKQorICAgICAgICAgIG1heF9yZXN1bHQgPSBmaXJzdDsKKyAgICAgIH0KKworICAgICAgLy8gcmVzb2x2ZSBtaW5fcmVzdWx0IGJlaW5nIGluY29ycmVjdCB3aXRoIG9uZSBleHRyYSBjb21wYXJpc29uCisgICAgICAvLyAoaW4gd2hpY2ggY2FzZSBwb3RlbnRpYWxfbWluX3Jlc3VsdCBpcyBuZWNlc3NhcmlseSB0aGUgY29ycmVjdCByZXN1bHQpCisgICAgICBpZiAocG90ZW50aWFsX21pbl9yZXN1bHQgIT0gbGFzdAorICAgICAgICAmJiAhY29tcChtaW5fcmVzdWx0LCBwb3RlbnRpYWxfbWluX3Jlc3VsdCkpCisgICAgICAgIG1pbl9yZXN1bHQgPSBwb3RlbnRpYWxfbWluX3Jlc3VsdDsKKworICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKG1pbl9yZXN1bHQsbWF4X3Jlc3VsdCk7CisgICAgfQorCisgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcj4KKyAgc3RkOjpwYWlyPEZvcndhcmRJdGVyLEZvcndhcmRJdGVyPgorICBtaW5tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCkKKyAgeworICAgIHJldHVybiBkZXRhaWw6OmJhc2ljX21pbm1heF9lbGVtZW50KGZpcnN0LCBsYXN0LAorICAgICAgICAgICAgIGRldGFpbDo6bGVzc19vdmVyX2l0ZXI8Rm9yd2FyZEl0ZXI+KCkgKTsKKyAgfQorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlciwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIG1pbm1heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LCBCaW5hcnlQcmVkaWNhdGUgY29tcCkKKyAgeworICAgIHJldHVybiBkZXRhaWw6OmJhc2ljX21pbm1heF9lbGVtZW50KGZpcnN0LCBsYXN0LAorICAgICAgICAgICAgIGRldGFpbDo6YmluYXJ5X3ByZWRfb3Zlcl9pdGVyPEZvcndhcmRJdGVyLEJpbmFyeVByZWRpY2F0ZT4oY29tcCkgKTsKKyAgfQorCit9CisKKy8qIFBST1BPU0VEIEJPT1NUIEVYVEVOU0lPTlMKKyAqIEluIHRoZSBkZXNjcmlwdGlvbiBiZWxvdywgW3JmaXJzdCxybGFzdCkgZGVub3RlcyB0aGUgcmV2ZXJzZWQgcmFuZ2UKKyAqIG9mIFtmaXJzdCxsYXN0KS4gRXZlbiB0aG91Z2ggdGhlIGl0ZXJhdG9yIHR5cGUgb2YgZmlyc3QgYW5kIGxhc3QgbWF5CisgKiBiZSBvbmx5IGEgRm9yd2FyZCBJdGVyYXRvciwgaXQgaXMgcG9zc2libGUgdG8gZXhwbGFpbiB0aGUgc2VtYW50aWNzCisgKiBieSBhc3N1bWluZyB0aGF0IGl0IGlzIGEgQmlkaXJlY3Rpb25hbCBJdGVyYXRvci4gSW4gdGhlIHNlcXVlbCwKKyAqIHJldmVyc2UoRm9yd2FyZEl0ZXJhdG9yJikgcmV0dXJucyB0aGUgcmV2ZXJzZV9pdGVyYXRvciBhZGFwdG9yLgorICogVGhpcyBpcyBub3QgaG93IHRoZSBmdW5jdGlvbnMgd291bGQgYmUgaW1wbGVtZW50ZWQhCisgKgorICogZmlyc3RfbWluX2VsZW1lbnQoZmlyc3QsIGxhc3QpCisgKiBFZmZlY3Q6IHN0ZDo6bWluX2VsZW1lbnQoZmlyc3QsIGxhc3QpOworICoKKyAqIGZpcnN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKQorICogRWZmZWN0OiBzdGQ6Om1pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKTsKKyAqCisgKiBsYXN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0KQorICogRWZmZWN0OiByZXZlcnNlKCBzdGQ6Om1pbl9lbGVtZW50KHJldmVyc2UobGFzdCksIHJldmVyc2UoZmlyc3QpKSApOworICoKKyAqIGxhc3RfbWluX2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApCisgKiBFZmZlY3Q6IHJldmVyc2UoIHN0ZDo6bWluX2VsZW1lbnQocmV2ZXJzZShsYXN0KSwgcmV2ZXJzZShmaXJzdCksIGNvbXApICk7CisgKgorICogZmlyc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QpCisgKiBFZmZlY3Q6IHN0ZDo6bWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QpOworICoKKyAqIGZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKQorICogRWZmZWN0OiBtYXhfZWxlbWVudChmaXJzdCwgbGFzdCk7CisgKgorICogbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCkKKyAqIEVmZmVjdDogcmV2ZXJzZSggc3RkOjptYXhfZWxlbWVudChyZXZlcnNlKGxhc3QpLCByZXZlcnNlKGZpcnN0KSkgKTsKKyAqCisgKiBsYXN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKQorICogRWZmZWN0OiByZXZlcnNlKCBzdGQ6Om1heF9lbGVtZW50KHJldmVyc2UobGFzdCksIHJldmVyc2UoZmlyc3QpLCBjb21wKSApOworICoKKyAqIGZpcnN0X21pbl9maXJzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCkKKyAqIEVmZmVjdDogc3RkOjptYWtlX3BhaXIoIGZpcnN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0KSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0KSApOworICoKKyAqIGZpcnN0X21pbl9maXJzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwgY29tcCkKKyAqIEVmZmVjdDogc3RkOjptYWtlX3BhaXIoIGZpcnN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKSApOworICoKKyAqIGZpcnN0X21pbl9sYXN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0KQorICogRWZmZWN0OiBzdGQ6Om1ha2VfcGFpciggZmlyc3RfbWluX2VsZW1lbnQoZmlyc3QsIGxhc3QpLAorICogICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCkgKTsKKyAqCisgKiBmaXJzdF9taW5fbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwgY29tcCkKKyAqIEVmZmVjdDogc3RkOjptYWtlX3BhaXIoIGZpcnN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApICk7CisgKgorICogbGFzdF9taW5fZmlyc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QpCisgKiBFZmZlY3Q6IHN0ZDo6bWFrZV9wYWlyKCBsYXN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0KSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0KSApOworICoKKyAqIGxhc3RfbWluX2ZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKQorICogRWZmZWN0OiBzdGQ6Om1ha2VfcGFpciggbGFzdF9taW5fZWxlbWVudChmaXJzdCwgbGFzdCwgY29tcCksCisgKiAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwgY29tcCkgKTsKKyAqCisgKiBsYXN0X21pbl9sYXN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0KQorICogRWZmZWN0OiBzdGQ6Om1ha2VfcGFpciggbGFzdF9taW5fZWxlbWVudChmaXJzdCwgbGFzdCksCisgKiAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0KSApOworICoKKyAqIGxhc3RfbWluX2xhc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApCisgKiBFZmZlY3Q6IHN0ZDo6bWFrZV9wYWlyKCBsYXN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0LCBjb21wKSwKKyAqICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApICk7CisgKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKworICAvLyBNaW5fZWxlbWVudCBhbmQgbWF4X2VsZW1lbnQgdmFyaWFudHMKKworICBuYW1lc3BhY2UgZGV0YWlsIHsgIC8vIGNvbW1vbiBiYXNlIGZvciB0aGUgb3ZlcmxvYWRzCisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgIEZvcndhcmRJdGVyCisgIGJhc2ljX2ZpcnN0X21pbl9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LAorICAgICAgICAgICAgICAgICAgICAgICAgICBCaW5hcnlQcmVkaWNhdGUgY29tcCkKKyAgeworICAgIGlmIChmaXJzdCA9PSBsYXN0KSByZXR1cm4gbGFzdDsKKyAgICBGb3J3YXJkSXRlciBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgd2hpbGUgKCsrZmlyc3QgIT0gbGFzdCkKKyAgICAgIGlmIChjb21wKGZpcnN0LCBtaW5fcmVzdWx0KSkKKyAgICAgICAgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgIHJldHVybiBtaW5fcmVzdWx0OworICB9CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgIEZvcndhcmRJdGVyCisgIGJhc2ljX2xhc3RfbWluX2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsCisgICAgICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICBpZiAoZmlyc3QgPT0gbGFzdCkgcmV0dXJuIGxhc3Q7CisgICAgRm9yd2FyZEl0ZXIgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgIHdoaWxlICgrK2ZpcnN0ICE9IGxhc3QpCisgICAgICBpZiAoIWNvbXAobWluX3Jlc3VsdCwgZmlyc3QpKQorICAgICAgICBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgcmV0dXJuIG1pbl9yZXN1bHQ7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgYmFzaWNfZmlyc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsCisgICAgICAgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBjb21wKQorICB7CisgICAgaWYgKGZpcnN0ID09IGxhc3QpIHJldHVybiBsYXN0OworICAgIEZvcndhcmRJdGVyIG1heF9yZXN1bHQgPSBmaXJzdDsKKyAgICB3aGlsZSAoKytmaXJzdCAhPSBsYXN0KQorICAgICAgaWYgKGNvbXAobWF4X3Jlc3VsdCwgZmlyc3QpKQorICAgICAgICBtYXhfcmVzdWx0ID0gZmlyc3Q7CisgICAgcmV0dXJuIG1heF9yZXN1bHQ7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgYmFzaWNfbGFzdF9tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCwKKyAgICAgICAgICAgICAgICAgICAgICAgICBCaW5hcnlQcmVkaWNhdGUgY29tcCkKKyAgeworICAgIGlmIChmaXJzdCA9PSBsYXN0KSByZXR1cm4gbGFzdDsKKyAgICBGb3J3YXJkSXRlciBtYXhfcmVzdWx0ID0gZmlyc3Q7CisgICAgd2hpbGUgKCsrZmlyc3QgIT0gbGFzdCkKKyAgICAgIGlmICghY29tcChmaXJzdCwgbWF4X3Jlc3VsdCkpCisgICAgICAgIG1heF9yZXN1bHQgPSBmaXJzdDsKKyAgICByZXR1cm4gbWF4X3Jlc3VsdDsKKyAgfQorCisgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcj4KKyAgRm9yd2FyZEl0ZXIKKyAgZmlyc3RfbWluX2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QpCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19maXJzdF9taW5fZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgZmlyc3RfbWluX2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsIEJpbmFyeVByZWRpY2F0ZSBjb21wKQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfZmlyc3RfbWluX2VsZW1lbnQoZmlyc3QsIGxhc3QsCisgICAgICAgICAgICAgZGV0YWlsOjpiaW5hcnlfcHJlZF9vdmVyX2l0ZXI8Rm9yd2FyZEl0ZXIsQmluYXJ5UHJlZGljYXRlPihjb21wKSApOworICB9CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyPgorICBGb3J3YXJkSXRlcgorICBsYXN0X21pbl9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0KQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfbGFzdF9taW5fZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgbGFzdF9taW5fZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCwgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19sYXN0X21pbl9lbGVtZW50KGZpcnN0LCBsYXN0LAorICAgICAgICAgICAgIGRldGFpbDo6YmluYXJ5X3ByZWRfb3Zlcl9pdGVyPEZvcndhcmRJdGVyLEJpbmFyeVByZWRpY2F0ZT4oY29tcCkgKTsKKyAgfQorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcj4KKyAgRm9yd2FyZEl0ZXIKKyAgZmlyc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QpCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19maXJzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgZmlyc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsIEJpbmFyeVByZWRpY2F0ZSBjb21wKQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfZmlyc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsCisgICAgICAgICAgICAgZGV0YWlsOjpiaW5hcnlfcHJlZF9vdmVyX2l0ZXI8Rm9yd2FyZEl0ZXIsQmluYXJ5UHJlZGljYXRlPihjb21wKSApOworICB9CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyPgorICBGb3J3YXJkSXRlcgorICBsYXN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0KQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgRm9yd2FyZEl0ZXIKKyAgbGFzdF9tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCwgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19sYXN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LAorICAgICAgICAgICAgIGRldGFpbDo6YmluYXJ5X3ByZWRfb3Zlcl9pdGVyPEZvcndhcmRJdGVyLEJpbmFyeVByZWRpY2F0ZT4oY29tcCkgKTsKKyAgfQorCisKKyAgLy8gTWlubWF4X2VsZW1lbnQgdmFyaWFudHMgLS0gY29tbWVudHMgcmVtb3ZlZAorCisgIG5hbWVzcGFjZSBkZXRhaWwgeworCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlciwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIGJhc2ljX2ZpcnN0X21pbl9sYXN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LAorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCaW5hcnlQcmVkaWNhdGUgY29tcCkKKyAgeworICAgIGlmIChmaXJzdCA9PSBsYXN0KQorICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGxhc3QsbGFzdCk7CisKKyAgICBGb3J3YXJkSXRlciBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgRm9yd2FyZEl0ZXIgbWF4X3Jlc3VsdCA9IGZpcnN0OworCisgICAgRm9yd2FyZEl0ZXIgc2Vjb25kID0gKytmaXJzdDsKKyAgICBpZiAoc2Vjb25kID09IGxhc3QpCisgICAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIobWluX3Jlc3VsdCwgbWF4X3Jlc3VsdCk7CisKKyAgICBpZiAoY29tcChzZWNvbmQsIG1pbl9yZXN1bHQpKQorICAgICAgbWluX3Jlc3VsdCA9IHNlY29uZDsKKyAgICBlbHNlCisgICAgICBtYXhfcmVzdWx0ID0gc2Vjb25kOworCisgICAgZmlyc3QgPSArK3NlY29uZDsgaWYgKGZpcnN0ICE9IGxhc3QpICsrc2Vjb25kOworICAgIHdoaWxlIChzZWNvbmQgIT0gbGFzdCkgeworICAgICAgaWYgKCFjb21wKHNlY29uZCwgZmlyc3QpKSB7CisgICAgICAgIGlmIChjb21wKGZpcnN0LCBtaW5fcmVzdWx0KSkKKyAgICAgICAgICAgICAgICAgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgICAgICBpZiAoIWNvbXAoc2Vjb25kLCBtYXhfcmVzdWx0KSkKKyAgICAgICAgICBtYXhfcmVzdWx0ID0gc2Vjb25kOworICAgICAgfSBlbHNlIHsKKyAgICAgICAgaWYgKGNvbXAoc2Vjb25kLCBtaW5fcmVzdWx0KSkKKyAgICAgICAgICBtaW5fcmVzdWx0ID0gc2Vjb25kOworICAgICAgICBpZiAoIWNvbXAoZmlyc3QsIG1heF9yZXN1bHQpKQorICAgICAgICAgICAgICBtYXhfcmVzdWx0ID0gZmlyc3Q7CisgICAgICB9CisgICAgICBmaXJzdCA9ICsrc2Vjb25kOyBpZiAoZmlyc3QgIT0gbGFzdCkgKytzZWNvbmQ7CisgICAgfQorCisgICAgaWYgKGZpcnN0ICE9IGxhc3QpIHsKKyAgICAgIGlmIChjb21wKGZpcnN0LCBtaW5fcmVzdWx0KSkKKyAgICAgICAgIG1pbl9yZXN1bHQgPSBmaXJzdDsKKyAgICAgIGVsc2UgaWYgKCFjb21wKGZpcnN0LCBtYXhfcmVzdWx0KSkKKyAgICAgICAgICAgICAgIG1heF9yZXN1bHQgPSBmaXJzdDsKKyAgICB9CisKKyAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIobWluX3Jlc3VsdCwgbWF4X3Jlc3VsdCk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgc3RkOjpwYWlyPEZvcndhcmRJdGVyLEZvcndhcmRJdGVyPgorICBiYXNpY19sYXN0X21pbl9maXJzdF9tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICBpZiAoZmlyc3QgPT0gbGFzdCkgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGxhc3QsbGFzdCk7CisKKyAgICBGb3J3YXJkSXRlciBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgRm9yd2FyZEl0ZXIgbWF4X3Jlc3VsdCA9IGZpcnN0OworCisgICAgRm9yd2FyZEl0ZXIgc2Vjb25kID0gKytmaXJzdDsKKyAgICBpZiAoc2Vjb25kID09IGxhc3QpCisgICAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIobWluX3Jlc3VsdCwgbWF4X3Jlc3VsdCk7CisKKyAgICBpZiAoY29tcChtYXhfcmVzdWx0LCBzZWNvbmQpKQorICAgICAgbWF4X3Jlc3VsdCA9IHNlY29uZDsKKyAgICBlbHNlCisgICAgICBtaW5fcmVzdWx0ID0gc2Vjb25kOworCisgICAgZmlyc3QgPSArK3NlY29uZDsgaWYgKGZpcnN0ICE9IGxhc3QpICsrc2Vjb25kOworICAgIHdoaWxlIChzZWNvbmQgIT0gbGFzdCkgIHsKKyAgICAgIGlmIChjb21wKGZpcnN0LCBzZWNvbmQpKSB7CisgICAgICAgIGlmICghY29tcChtaW5fcmVzdWx0LCBmaXJzdCkpCisgICAgICAgICAgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgICAgICBpZiAoY29tcChtYXhfcmVzdWx0LCBzZWNvbmQpKQorICAgICAgICAgIG1heF9yZXN1bHQgPSBzZWNvbmQ7CisgICAgICB9IGVsc2UgeworICAgICAgICBpZiAoIWNvbXAobWluX3Jlc3VsdCwgc2Vjb25kKSkKKyAgICAgICAgICBtaW5fcmVzdWx0ID0gc2Vjb25kOworICAgICAgICBpZiAoY29tcChtYXhfcmVzdWx0LCBmaXJzdCkpCisgICAgICAgICAgbWF4X3Jlc3VsdCA9IGZpcnN0OworICAgICAgfQorICAgICAgZmlyc3QgPSArK3NlY29uZDsgaWYgKGZpcnN0ICE9IGxhc3QpICsrc2Vjb25kOworICAgIH0KKworICAgIGlmIChmaXJzdCAhPSBsYXN0KSB7CisgICAgICBpZiAoIWNvbXAobWluX3Jlc3VsdCwgZmlyc3QpKQorICAgICAgICBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgICBlbHNlIGlmIChjb21wKG1heF9yZXN1bHQsIGZpcnN0KSkKKyAgICAgICAgbWF4X3Jlc3VsdCA9IGZpcnN0OworICAgIH0KKworICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihtaW5fcmVzdWx0LCBtYXhfcmVzdWx0KTsKKyAgfQorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlciwgY2xhc3MgQmluYXJ5UHJlZGljYXRlPgorICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIGJhc2ljX2xhc3RfbWluX2xhc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICBpZiAoZmlyc3QgPT0gbGFzdCkgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGxhc3QsbGFzdCk7CisKKyAgICBGb3J3YXJkSXRlciBtaW5fcmVzdWx0ID0gZmlyc3Q7CisgICAgRm9yd2FyZEl0ZXIgbWF4X3Jlc3VsdCA9IGZpcnN0OworCisgICAgRm9yd2FyZEl0ZXIgc2Vjb25kID0gZmlyc3Q7ICsrc2Vjb25kOworICAgIGlmIChzZWNvbmQgPT0gbGFzdCkKKyAgICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihtaW5fcmVzdWx0LG1heF9yZXN1bHQpOworCisgICAgRm9yd2FyZEl0ZXIgcG90ZW50aWFsX21heF9yZXN1bHQgPSBsYXN0OworICAgIGlmIChjb21wKGZpcnN0LCBzZWNvbmQpKQorICAgICAgbWF4X3Jlc3VsdCA9IHNlY29uZDsKKyAgICBlbHNlIHsKKyAgICAgIG1pbl9yZXN1bHQgPSBzZWNvbmQ7CisgICAgICBwb3RlbnRpYWxfbWF4X3Jlc3VsdCA9IHNlY29uZDsKKyAgICB9CisKKyAgICBmaXJzdCA9ICsrc2Vjb25kOyBpZiAoZmlyc3QgIT0gbGFzdCkgKytzZWNvbmQ7CisgICAgd2hpbGUgKHNlY29uZCAhPSBsYXN0KSB7CisgICAgICBpZiAoY29tcChmaXJzdCwgc2Vjb25kKSkgeworICAgICAgICBpZiAoIWNvbXAobWluX3Jlc3VsdCwgZmlyc3QpKQorICAgICAgICAgIG1pbl9yZXN1bHQgPSBmaXJzdDsKKyAgICAgICAgaWYgKCFjb21wKHNlY29uZCwgbWF4X3Jlc3VsdCkpIHsKKyAgICAgICAgICBtYXhfcmVzdWx0ID0gc2Vjb25kOworICAgICAgICAgIHBvdGVudGlhbF9tYXhfcmVzdWx0ID0gbGFzdDsKKyAgICAgICAgfQorICAgICAgfSBlbHNlIHsKKyAgICAgICAgaWYgKCFjb21wKG1pbl9yZXN1bHQsIHNlY29uZCkpCisgICAgICAgICAgbWluX3Jlc3VsdCA9IHNlY29uZDsKKyAgICAgICAgaWYgKCFjb21wKGZpcnN0LCBtYXhfcmVzdWx0KSkgeworICAgICAgICAgIG1heF9yZXN1bHQgPSBmaXJzdDsKKyAgICAgICAgICBwb3RlbnRpYWxfbWF4X3Jlc3VsdCA9IHNlY29uZDsKKyAgICAgICAgfQorICAgICAgfQorICAgICAgZmlyc3QgPSArK3NlY29uZDsKKyAgICAgIGlmIChmaXJzdCAhPSBsYXN0KSArK3NlY29uZDsKKyAgICB9CisKKyAgICBpZiAoZmlyc3QgIT0gbGFzdCkgeworICAgICAgaWYgKCFjb21wKG1pbl9yZXN1bHQsIGZpcnN0KSkKKyAgICAgICAgbWluX3Jlc3VsdCA9IGZpcnN0OworICAgICAgaWYgKCFjb21wKGZpcnN0LCBtYXhfcmVzdWx0KSkgeworICAgICAgICBtYXhfcmVzdWx0ID0gZmlyc3Q7CisgICAgICAgICAgICAgICBwb3RlbnRpYWxfbWF4X3Jlc3VsdCA9IGxhc3Q7CisgICAgICB9CisgICAgfQorCisgICAgaWYgKHBvdGVudGlhbF9tYXhfcmVzdWx0ICE9IGxhc3QKKyAgICAgICAgJiYgIWNvbXAocG90ZW50aWFsX21heF9yZXN1bHQsIG1heF9yZXN1bHQpKQorICAgICAgbWF4X3Jlc3VsdCA9IHBvdGVudGlhbF9tYXhfcmVzdWx0OworCisgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKG1pbl9yZXN1bHQsbWF4X3Jlc3VsdCk7CisgIH0KKworICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXI+CisgIGlubGluZSBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIGZpcnN0X21pbl9maXJzdF9tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCkKKyAgeworICAgIHJldHVybiBtaW5tYXhfZWxlbWVudChmaXJzdCwgbGFzdCk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgaW5saW5lIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcixGb3J3YXJkSXRlcj4KKyAgZmlyc3RfbWluX2ZpcnN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LAorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICByZXR1cm4gbWlubWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsIGNvbXApOworICB9CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyPgorICBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIGZpcnN0X21pbl9sYXN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0KQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfZmlyc3RfbWluX2xhc3RfbWF4X2VsZW1lbnQoZmlyc3QsIGxhc3QsCisgICAgICAgICAgICAgZGV0YWlsOjpsZXNzX292ZXJfaXRlcjxGb3J3YXJkSXRlcj4oKSApOworICB9CisKKyAgdGVtcGxhdGUgPHR5cGVuYW1lIEZvcndhcmRJdGVyLCBjbGFzcyBCaW5hcnlQcmVkaWNhdGU+CisgIGlubGluZSBzdGQ6OnBhaXI8Rm9yd2FyZEl0ZXIsRm9yd2FyZEl0ZXI+CisgIGZpcnN0X21pbl9sYXN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0LAorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmluYXJ5UHJlZGljYXRlIGNvbXApCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19maXJzdF9taW5fbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6OmJpbmFyeV9wcmVkX292ZXJfaXRlcjxGb3J3YXJkSXRlcixCaW5hcnlQcmVkaWNhdGU+KGNvbXApICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXI+CisgIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcixGb3J3YXJkSXRlcj4KKyAgbGFzdF9taW5fZmlyc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QpCisgIHsKKyAgICByZXR1cm4gZGV0YWlsOjpiYXNpY19sYXN0X21pbl9maXJzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgaW5saW5lIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcixGb3J3YXJkSXRlcj4KKyAgbGFzdF9taW5fZmlyc3RfbWF4X2VsZW1lbnQoRm9yd2FyZEl0ZXIgZmlyc3QsIEZvcndhcmRJdGVyIGxhc3QsCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCaW5hcnlQcmVkaWNhdGUgY29tcCkKKyAgeworICAgIHJldHVybiBkZXRhaWw6OmJhc2ljX2xhc3RfbWluX2ZpcnN0X21heF9lbGVtZW50KGZpcnN0LCBsYXN0LAorICAgICAgICAgICAgIGRldGFpbDo6YmluYXJ5X3ByZWRfb3Zlcl9pdGVyPEZvcndhcmRJdGVyLEJpbmFyeVByZWRpY2F0ZT4oY29tcCkgKTsKKyAgfQorCisgIHRlbXBsYXRlIDx0eXBlbmFtZSBGb3J3YXJkSXRlcj4KKyAgc3RkOjpwYWlyPEZvcndhcmRJdGVyLEZvcndhcmRJdGVyPgorICBsYXN0X21pbl9sYXN0X21heF9lbGVtZW50KEZvcndhcmRJdGVyIGZpcnN0LCBGb3J3YXJkSXRlciBsYXN0KQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfbGFzdF9taW5fbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6Omxlc3Nfb3Zlcl9pdGVyPEZvcndhcmRJdGVyPigpICk7CisgIH0KKworICB0ZW1wbGF0ZSA8dHlwZW5hbWUgRm9yd2FyZEl0ZXIsIGNsYXNzIEJpbmFyeVByZWRpY2F0ZT4KKyAgaW5saW5lIHN0ZDo6cGFpcjxGb3J3YXJkSXRlcixGb3J3YXJkSXRlcj4KKyAgbGFzdF9taW5fbGFzdF9tYXhfZWxlbWVudChGb3J3YXJkSXRlciBmaXJzdCwgRm9yd2FyZEl0ZXIgbGFzdCwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJpbmFyeVByZWRpY2F0ZSBjb21wKQorICB7CisgICAgcmV0dXJuIGRldGFpbDo6YmFzaWNfbGFzdF9taW5fbGFzdF9tYXhfZWxlbWVudChmaXJzdCwgbGFzdCwKKyAgICAgICAgICAgICBkZXRhaWw6OmJpbmFyeV9wcmVkX292ZXJfaXRlcjxGb3J3YXJkSXRlcixCaW5hcnlQcmVkaWNhdGU+KGNvbXApICk7CisgIH0KKworfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmIC8vIEJPT1NUX0FMR09SSVRITV9NSU5NQVhfRUxFTUVOVF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc2VhcmNoaW5nL2JveWVyX21vb3JlLmhwcApAQCAtMCwwICsxLDI3MiBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAxMC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworICAgIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cDovL3d3dy5ib29zdC5vcmcKKyovCisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0JPWUVSX01PT1JFX1NFQVJDSF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX0JPWUVSX01PT1JFX1NFQVJDSF9IUFAKKworI2luY2x1ZGUgPGl0ZXJhdG9yPiAgICAgLy8gZm9yIHN0ZDo6aXRlcmF0b3JfdHJhaXRzCisKKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc2VhcmNoaW5nL2RldGFpbC9ibV90cmFpdHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zZWFyY2hpbmcvZGV0YWlsL2RlYnVnZ2luZy5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvKgorICAgIEEgdGVtcGxhdGVkIHZlcnNpb24gb2YgdGhlIGJveWVyLW1vb3JlIHNlYXJjaGluZyBhbGdvcml0aG0uCisgICAgCitSZWZlcmVuY2VzOgorICAgIGh0dHA6Ly93d3cuY3MudXRleGFzLmVkdS91c2Vycy9tb29yZS9iZXN0LWlkZWFzL3N0cmluZy1zZWFyY2hpbmcvCisgICAgaHR0cDovL3d3dy5jcy51dGV4YXMuZWR1L35tb29yZS9wdWJsaWNhdGlvbnMvZnN0cnBvcy5wZGYKKyAgICAKK0V4cGxhbmF0aW9uczoKKyAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JveWVyJUUyJTgwJTkzTW9vcmVfc3RyaW5nX3NlYXJjaF9hbGdvcml0aG0KKyAgICBodHRwOi8vd3d3Lm1vdnNkLmNvbS9ibS5odG0KKyAgICBodHRwOi8vd3d3LmNzLnVjZGF2aXMuZWR1L35ndXNmaWVsZC9jczIyNGYwOS9ibm90ZXMucGRmCisKK1RoZSBCb3llci1Nb29yZSBzZWFyY2ggYWxnb3JpdGhtIHVzZXMgdHdvIHRhYmxlcywgYSAiYmFkIGNoYXJhY3RlciIgdGFibGUKK3RvIHRlbGwgaG93IGZhciB0byBza2lwIGFoZWFkIHdoZW4gaXQgaGl0cyBhIGNoYXJhY3RlciB0aGF0IGlzIG5vdCBpbiB0aGUgcGF0dGVybiwKK2FuZCBhICJnb29kIGNoYXJhY3RlciIgdGFibGUgdG8gdGVsbCBob3cgZmFyIHRvIHNraXAgYWhlYWQgd2hlbiBpdCBoaXRzIGEKK21pc21hdGNoIG9uIGEgY2hhcmFjdGVyIHRoYXQgX2lzXyBpbiB0aGUgcGF0dGVybi4KKworUmVxdWlyZW1lbnRzOgorICAgICAgICAqIFJhbmRvbSBhY2Nlc3MgaXRlcmF0b3JzCisgICAgICAgICogVGhlIHR3byBpdGVyYXRvciB0eXBlcyAocGF0SXRlciBhbmQgY29ycHVzSXRlcikgbXVzdCAKKyAgICAgICAgICAgICJwb2ludCB0byIgdGhlIHNhbWUgdW5kZXJseWluZyB0eXBlIGFuZCBiZSBjb21wYXJhYmxlLgorICAgICAgICAqIEFkZGl0aW9uYWwgcmVxdWlyZW1lbnRzIG1heSBiZSBpbXBvc2VkIGJ1dCB0aGUgc2tpcCB0YWJsZSwgc3VjaCBhczoKKyAgICAgICAgKiogTnVtZXJpYyB0eXBlIChhcnJheS1iYXNlZCBza2lwIHRhYmxlKQorICAgICAgICAqKiBIYXNoYWJsZSB0eXBlIChtYXAtYmFzZWQgc2tpcCB0YWJsZSkKKyovCisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgcGF0SXRlciwgdHlwZW5hbWUgdHJhaXRzID0gZGV0YWlsOjpCTV90cmFpdHM8cGF0SXRlcj4gPgorICAgIGNsYXNzIGJveWVyX21vb3JlIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxwYXRJdGVyPjo6ZGlmZmVyZW5jZV90eXBlIGRpZmZlcmVuY2VfdHlwZTsKKyAgICBwdWJsaWM6CisgICAgICAgIGJveWVyX21vb3JlICggcGF0SXRlciBmaXJzdCwgcGF0SXRlciBsYXN0ICkgCisgICAgICAgICAgICAgICAgOiBwYXRfZmlyc3QgKCBmaXJzdCApLCBwYXRfbGFzdCAoIGxhc3QgKSwKKyAgICAgICAgICAgICAgICAgIGtfcGF0dGVybl9sZW5ndGggKCBzdGQ6OmRpc3RhbmNlICggcGF0X2ZpcnN0LCBwYXRfbGFzdCApKSwKKyAgICAgICAgICAgICAgICAgIHNraXBfICgga19wYXR0ZXJuX2xlbmd0aCwgLTEgKSwKKyAgICAgICAgICAgICAgICAgIHN1ZmZpeF8gKCBrX3BhdHRlcm5fbGVuZ3RoICsgMSApCisgICAgICAgICAgICB7CisgICAgICAgICAgICB0aGlzLT5idWlsZF9za2lwX3RhYmxlICAgKCBmaXJzdCwgbGFzdCApOworICAgICAgICAgICAgdGhpcy0+YnVpbGRfc3VmZml4X3RhYmxlICggZmlyc3QsIGxhc3QgKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIAorICAgICAgICB+Ym95ZXJfbW9vcmUgKCkge30KKyAgICAgICAgCisgICAgICAgIC8vLyBcZm4gb3BlcmF0b3IgKCBjb3JwdXNJdGVyIGNvcnB1c19maXJzdCwgY29ycHVzSXRlciBjb3JwdXNfbGFzdCApCisgICAgICAgIC8vLyBcYnJpZWYgU2VhcmNoZXMgdGhlIGNvcnB1cyBmb3IgdGhlIHBhdHRlcm4gdGhhdCB3YXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yCisgICAgICAgIC8vLyAKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBkYXRhIHRvIHNlYXJjaCAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSB0byBzZWFyY2gKKyAgICAgICAgLy8vCisgICAgICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBjb3JwdXNJdGVyPgorICAgICAgICBzdGQ6OnBhaXI8Y29ycHVzSXRlciwgY29ycHVzSXRlcj4KKyAgICAgICAgb3BlcmF0b3IgKCkgKCBjb3JwdXNJdGVyIGNvcnB1c19maXJzdCwgY29ycHVzSXRlciBjb3JwdXNfbGFzdCApIGNvbnN0IHsKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQgKCggYm9vc3Q6OmlzX3NhbWU8CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxwYXRJdGVyPjo6dmFsdWVfdHlwZSwgCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxjb3JwdXNJdGVyPjo6dmFsdWVfdHlwZT46OnZhbHVlICkpOworCisgICAgICAgICAgICBpZiAoIGNvcnB1c19maXJzdCA9PSBjb3JwdXNfbGFzdCApIHJldHVybiBzdGQ6Om1ha2VfcGFpcihjb3JwdXNfbGFzdCwgY29ycHVzX2xhc3QpOyAgIC8vIGlmIG5vdGhpbmcgdG8gc2VhcmNoLCB3ZSBkaWRuJ3QgZmluZCBpdCEKKyAgICAgICAgICAgIGlmICggICAgcGF0X2ZpcnN0ID09ICAgIHBhdF9sYXN0ICkgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19maXJzdCwgY29ycHVzX2ZpcnN0KTsgLy8gZW1wdHkgcGF0dGVybiBtYXRjaGVzIGF0IHN0YXJ0CisKKyAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2VfdHlwZSBrX2NvcnB1c19sZW5ndGggID0gc3RkOjpkaXN0YW5jZSAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICAgICAgLy8gIElmIHRoZSBwYXR0ZXJuIGlzIGxhcmdlciB0aGFuIHRoZSBjb3JwdXMsIHdlIGNhbid0IGZpbmQgaXQhCisgICAgICAgICAgICBpZiAoIGtfY29ycHVzX2xlbmd0aCA8IGtfcGF0dGVybl9sZW5ndGggKSAKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIoY29ycHVzX2xhc3QsIGNvcnB1c19sYXN0KTsKKworICAgICAgICAvLyAgRG8gdGhlIHNlYXJjaCAKKyAgICAgICAgICAgIHJldHVybiB0aGlzLT5kb19zZWFyY2ggKCBjb3JwdXNfZmlyc3QsIGNvcnB1c19sYXN0ICk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICAKKyAgICAgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFJhbmdlPgorICAgICAgICBzdGQ6OnBhaXI8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPFJhbmdlPjo6dHlwZSwgdHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPFJhbmdlPjo6dHlwZT4KKyAgICAgICAgb3BlcmF0b3IgKCkgKCBSYW5nZSAmciApIGNvbnN0IHsKKyAgICAgICAgICAgIHJldHVybiAoKnRoaXMpIChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQocikpOworICAgICAgICAgICAgfQorCisgICAgcHJpdmF0ZToKKy8vLyBcY29uZCBET1hZR0VOX0hJREUKKyAgICAgICAgcGF0SXRlciBwYXRfZmlyc3QsIHBhdF9sYXN0OworICAgICAgICBjb25zdCBkaWZmZXJlbmNlX3R5cGUga19wYXR0ZXJuX2xlbmd0aDsKKyAgICAgICAgdHlwZW5hbWUgdHJhaXRzOjpza2lwX3RhYmxlX3Qgc2tpcF87CisgICAgICAgIHN0ZDo6dmVjdG9yIDxkaWZmZXJlbmNlX3R5cGU+IHN1ZmZpeF87CisKKyAgICAgICAgLy8vIFxmbiBvcGVyYXRvciAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0LCBQcmVkIHAgKQorICAgICAgICAvLy8gXGJyaWVmIFNlYXJjaGVzIHRoZSBjb3JwdXMgZm9yIHRoZSBwYXR0ZXJuIHRoYXQgd2FzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvcgorICAgICAgICAvLy8gCisgICAgICAgIC8vLyBccGFyYW0gY29ycHVzX2ZpcnN0IFRoZSBzdGFydCBvZiB0aGUgZGF0YSB0byBzZWFyY2ggKFJhbmRvbSBBY2Nlc3MgSXRlcmF0b3IpCisgICAgICAgIC8vLyBccGFyYW0gY29ycHVzX2xhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoCisgICAgICAgIC8vLyBccGFyYW0gcCAgICAgICAgICAgIEEgcHJlZGljYXRlIHVzZWQgZm9yIHRoZSBzZWFyY2ggY29tcGFyaXNvbnMuCisgICAgICAgIC8vLworICAgICAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgY29ycHVzSXRlcj4KKyAgICAgICAgc3RkOjpwYWlyPGNvcnB1c0l0ZXIsIGNvcnB1c0l0ZXI+CisgICAgICAgIGRvX3NlYXJjaCAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0ICkgY29uc3QgeworICAgICAgICAvKiAgLS0tLSBEbyB0aGUgbWF0Y2hpbmcgLS0tLSAqLworICAgICAgICAgICAgY29ycHVzSXRlciBjdXJQb3MgPSBjb3JwdXNfZmlyc3Q7CisgICAgICAgICAgICBjb25zdCBjb3JwdXNJdGVyIGxhc3RQb3MgPSBjb3JwdXNfbGFzdCAtIGtfcGF0dGVybl9sZW5ndGg7CisgICAgICAgICAgICBkaWZmZXJlbmNlX3R5cGUgaiwgaywgbTsKKworICAgICAgICAgICAgd2hpbGUgKCBjdXJQb3MgPD0gbGFzdFBvcyApIHsKKyAgICAgICAgLyogIHdoaWxlICggc3RkOjpkaXN0YW5jZSAoIGN1clBvcywgY29ycHVzX2xhc3QgKSA+PSBrX3BhdHRlcm5fbGVuZ3RoICkgeyAqLworICAgICAgICAgICAgLy8gIERvIHdlIG1hdGNoIHJpZ2h0IHdoZXJlIHdlIGFyZT8KKyAgICAgICAgICAgICAgICBqID0ga19wYXR0ZXJuX2xlbmd0aDsKKyAgICAgICAgICAgICAgICB3aGlsZSAoIHBhdF9maXJzdCBbai0xXSA9PSBjdXJQb3MgW2otMV0gKSB7CisgICAgICAgICAgICAgICAgICAgIGotLTsKKyAgICAgICAgICAgICAgICAvLyAgV2UgbWF0Y2hlZCAtIHdlJ3JlIGRvbmUhCisgICAgICAgICAgICAgICAgICAgIGlmICggaiA9PSAwICkKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihjdXJQb3MsIGN1clBvcyArIGtfcGF0dGVybl9sZW5ndGgpOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgCisgICAgICAgICAgICAvLyAgU2luY2Ugd2UgZGlkbid0IG1hdGNoLCBmaWd1cmUgb3V0IGhvdyBmYXIgdG8gc2tpcCBmb3J3YXJkCisgICAgICAgICAgICAgICAgayA9IHNraXBfIFsgY3VyUG9zIFsgaiAtIDEgXV07CisgICAgICAgICAgICAgICAgbSA9IGogLSBrIC0gMTsKKyAgICAgICAgICAgICAgICBpZiAoIGsgPCBqICYmIG0gPiBzdWZmaXhfIFsgaiBdICkKKyAgICAgICAgICAgICAgICAgICAgY3VyUG9zICs9IG07CisgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICBjdXJQb3MgKz0gc3VmZml4XyBbIGogXTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgIAorICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19sYXN0LCBjb3JwdXNfbGFzdCk7ICAgICAvLyBXZSBkaWRuJ3QgZmluZCBhbnl0aGluZworICAgICAgICAgICAgfQorCisKKyAgICAgICAgdm9pZCBidWlsZF9za2lwX3RhYmxlICggcGF0SXRlciBmaXJzdCwgcGF0SXRlciBsYXN0ICkgeworICAgICAgICAgICAgZm9yICggc3RkOjpzaXplX3QgaSA9IDA7IGZpcnN0ICE9IGxhc3Q7ICsrZmlyc3QsICsraSApCisgICAgICAgICAgICAgICAgc2tpcF8uaW5zZXJ0ICggKmZpcnN0LCBpICk7CisgICAgICAgICAgICB9CisgICAgICAgIAorCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEl0ZXIsIHR5cGVuYW1lIENvbnRhaW5lcj4KKyAgICAgICAgdm9pZCBjb21wdXRlX2JtX3ByZWZpeCAoIEl0ZXIgcGF0X2ZpcnN0LCBJdGVyIHBhdF9sYXN0LCBDb250YWluZXIgJnByZWZpeCApIHsKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6c2l6ZV90IGNvdW50ID0gc3RkOjpkaXN0YW5jZSAoIHBhdF9maXJzdCwgcGF0X2xhc3QgKTsKKyAgICAgICAgICAgIEJPT1NUX0FTU0VSVCAoIGNvdW50ID4gMCApOworICAgICAgICAgICAgQk9PU1RfQVNTRVJUICggcHJlZml4LnNpemUgKCkgPT0gY291bnQgKTsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgIHByZWZpeFswXSA9IDA7CisgICAgICAgICAgICBzdGQ6OnNpemVfdCBrID0gMDsKKyAgICAgICAgICAgIGZvciAoIHN0ZDo6c2l6ZV90IGkgPSAxOyBpIDwgY291bnQ7ICsraSApIHsKKyAgICAgICAgICAgICAgICBCT09TVF9BU1NFUlQgKCBrIDwgY291bnQgKTsKKyAgICAgICAgICAgICAgICB3aGlsZSAoIGsgPiAwICYmICggcGF0X2ZpcnN0W2tdICE9IHBhdF9maXJzdFtpXSApKSB7CisgICAgICAgICAgICAgICAgICAgIEJPT1NUX0FTU0VSVCAoIGsgPCBjb3VudCApOworICAgICAgICAgICAgICAgICAgICBrID0gcHJlZml4IFsgayAtIDEgXTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICBpZiAoIHBhdF9maXJzdFtrXSA9PSBwYXRfZmlyc3RbaV0gKQorICAgICAgICAgICAgICAgICAgICBrKys7CisgICAgICAgICAgICAgICAgcHJlZml4IFsgaSBdID0gazsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAgICAgICAgdm9pZCBidWlsZF9zdWZmaXhfdGFibGUgKCBwYXRJdGVyIHBhdF9maXJzdCwgcGF0SXRlciBwYXRfbGFzdCApIHsKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6c2l6ZV90IGNvdW50ID0gKHN0ZDo6c2l6ZV90KSBzdGQ6OmRpc3RhbmNlICggcGF0X2ZpcnN0LCBwYXRfbGFzdCApOworICAgICAgICAgICAgCisgICAgICAgICAgICBpZiAoIGNvdW50ID4gMCApIHsgIC8vIGVtcHR5IHBhdHRlcm4KKyAgICAgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxwYXRJdGVyPjo6dmFsdWVfdHlwZT4gcmV2ZXJzZWQoY291bnQpOworICAgICAgICAgICAgICAgICh2b2lkKSBzdGQ6OnJldmVyc2VfY29weSAoIHBhdF9maXJzdCwgcGF0X2xhc3QsIHJldmVyc2VkLmJlZ2luICgpKTsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICBzdGQ6OnZlY3RvcjxkaWZmZXJlbmNlX3R5cGU+IHByZWZpeCAoY291bnQpOworICAgICAgICAgICAgICAgIGNvbXB1dGVfYm1fcHJlZml4ICggcGF0X2ZpcnN0LCBwYXRfbGFzdCwgcHJlZml4ICk7CisgICAgICAgIAorICAgICAgICAgICAgICAgIHN0ZDo6dmVjdG9yPGRpZmZlcmVuY2VfdHlwZT4gcHJlZml4X3JldmVyc2VkIChjb3VudCk7CisgICAgICAgICAgICAgICAgY29tcHV0ZV9ibV9wcmVmaXggKCByZXZlcnNlZC5iZWdpbiAoKSwgcmV2ZXJzZWQuZW5kICgpLCBwcmVmaXhfcmV2ZXJzZWQgKTsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICBmb3IgKCBzdGQ6OnNpemVfdCBpID0gMDsgaSA8PSBjb3VudDsgaSsrICkKKyAgICAgICAgICAgICAgICAgICAgc3VmZml4X1tpXSA9IGNvdW50IC0gcHJlZml4IFtjb3VudC0xXTsKKyAgICAgICAgIAorICAgICAgICAgICAgICAgIGZvciAoIHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgY291bnQ7IGkrKyApIHsKKyAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RkOjpzaXplX3QgICAgIGogPSBjb3VudCAtIHByZWZpeF9yZXZlcnNlZFtpXTsKKyAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlmZmVyZW5jZV90eXBlIGsgPSBpIC0gICAgIHByZWZpeF9yZXZlcnNlZFtpXSArIDE7CisgICAgICAgICAKKyAgICAgICAgICAgICAgICAgICAgaWYgKHN1ZmZpeF9bal0gPiBrKQorICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4X1tqXSA9IGs7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisvLy8gXGVuZGNvbmQKKyAgICAgICAgfTsKKworCisvKiAgVHdvIHJhbmdlcyBhcyBpbnB1dHMgZ2l2ZXMgdXMgZm91ciBwb3NzaWJpbGl0aWVzOyB3aXRoIDIsMywzLDQgcGFyYW1ldGVycworICAgIFVzZSBhIGJpdCBvZiBUTVAgdG8gZGlzYW1iaWd1YXRlIHRoZSAzLWFyZ3VtZW50IHRlbXBsYXRlcyAqLworCisvLy8gXGZuIGJveWVyX21vb3JlX3NlYXJjaCAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0LCAKKy8vLyAgICAgICBwYXRJdGVyIHBhdF9maXJzdCwgcGF0SXRlciBwYXRfbGFzdCApCisvLy8gXGJyaWVmIFNlYXJjaGVzIHRoZSBjb3JwdXMgZm9yIHRoZSBwYXR0ZXJuLgorLy8vIAorLy8vIFxwYXJhbSBjb3JwdXNfZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBkYXRhIHRvIHNlYXJjaCAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKy8vLyBccGFyYW0gY29ycHVzX2xhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoCisvLy8gXHBhcmFtIHBhdF9maXJzdCAgICBUaGUgc3RhcnQgb2YgdGhlIHBhdHRlcm4gdG8gc2VhcmNoIGZvciAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKy8vLyBccGFyYW0gcGF0X2xhc3QgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoIGZvcgorLy8vCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIHBhdEl0ZXIsIHR5cGVuYW1lIGNvcnB1c0l0ZXI+CisgICAgc3RkOjpwYWlyPGNvcnB1c0l0ZXIsIGNvcnB1c0l0ZXI+IGJveWVyX21vb3JlX3NlYXJjaCAoIAorICAgICAgICAgICAgICAgICAgY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIAorICAgICAgICAgICAgICAgICAgcGF0SXRlciBwYXRfZmlyc3QsIHBhdEl0ZXIgcGF0X2xhc3QgKQorICAgIHsKKyAgICAgICAgYm95ZXJfbW9vcmU8cGF0SXRlcj4gYm0gKCBwYXRfZmlyc3QsIHBhdF9sYXN0ICk7CisgICAgICAgIHJldHVybiBibSAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICB9CisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUGF0dGVyblJhbmdlLCB0eXBlbmFtZSBjb3JwdXNJdGVyPgorICAgIHN0ZDo6cGFpcjxjb3JwdXNJdGVyLCBjb3JwdXNJdGVyPiBib3llcl9tb29yZV9zZWFyY2ggKCAKKyAgICAgICAgY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIGNvbnN0IFBhdHRlcm5SYW5nZSAmcGF0dGVybiApCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBQYXR0ZXJuUmFuZ2U+Ojp0eXBlIHBhdHRlcm5faXRlcmF0b3I7CisgICAgICAgIGJveWVyX21vb3JlPHBhdHRlcm5faXRlcmF0b3I+IGJtICggYm9vc3Q6OmJlZ2luKHBhdHRlcm4pLCBib29zdDo6ZW5kIChwYXR0ZXJuKSk7CisgICAgICAgIHJldHVybiBibSAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICB9CisgICAgCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIHBhdEl0ZXIsIHR5cGVuYW1lIENvcnB1c1JhbmdlPgorICAgIHR5cGVuYW1lIGJvb3N0OjpkaXNhYmxlX2lmX2M8CisgICAgICAgIGJvb3N0Ojppc19zYW1lPENvcnB1c1JhbmdlLCBwYXRJdGVyPjo6dmFsdWUsIAorICAgICAgICBzdGQ6OnBhaXI8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPENvcnB1c1JhbmdlPjo6dHlwZSwgdHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPENvcnB1c1JhbmdlPjo6dHlwZT4gPgorICAgIDo6dHlwZQorICAgIGJveWVyX21vb3JlX3NlYXJjaCAoIENvcnB1c1JhbmdlICZjb3JwdXMsIHBhdEl0ZXIgcGF0X2ZpcnN0LCBwYXRJdGVyIHBhdF9sYXN0ICkKKyAgICB7CisgICAgICAgIGJveWVyX21vb3JlPHBhdEl0ZXI+IGJtICggcGF0X2ZpcnN0LCBwYXRfbGFzdCApOworICAgICAgICByZXR1cm4gYm0gKGJvb3N0OjpiZWdpbiAoY29ycHVzKSwgYm9vc3Q6OmVuZCAoY29ycHVzKSk7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBQYXR0ZXJuUmFuZ2UsIHR5cGVuYW1lIENvcnB1c1JhbmdlPgorICAgIHN0ZDo6cGFpcjx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Q29ycHVzUmFuZ2U+Ojp0eXBlLCB0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Q29ycHVzUmFuZ2U+Ojp0eXBlPgorICAgIGJveWVyX21vb3JlX3NlYXJjaCAoIENvcnB1c1JhbmdlICZjb3JwdXMsIGNvbnN0IFBhdHRlcm5SYW5nZSAmcGF0dGVybiApCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBQYXR0ZXJuUmFuZ2U+Ojp0eXBlIHBhdHRlcm5faXRlcmF0b3I7CisgICAgICAgIGJveWVyX21vb3JlPHBhdHRlcm5faXRlcmF0b3I+IGJtICggYm9vc3Q6OmJlZ2luKHBhdHRlcm4pLCBib29zdDo6ZW5kIChwYXR0ZXJuKSk7CisgICAgICAgIHJldHVybiBibSAoYm9vc3Q6OmJlZ2luIChjb3JwdXMpLCBib29zdDo6ZW5kIChjb3JwdXMpKTsKKyAgICB9CisKKworICAgIC8vICBDcmVhdG9yIGZ1bmN0aW9ucyAtLSB0YWtlIGEgcGF0dGVybiByYW5nZSwgcmV0dXJuIGFuIG9iamVjdAorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZT4KKyAgICBib29zdDo6YWxnb3JpdGhtOjpib3llcl9tb29yZTx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Y29uc3QgUmFuZ2U+Ojp0eXBlPgorICAgIG1ha2VfYm95ZXJfbW9vcmUgKCBjb25zdCBSYW5nZSAmciApIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmJveWVyX21vb3JlCisgICAgICAgICAgICA8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT4gKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSk7CisgICAgICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2U+CisgICAgYm9vc3Q6OmFsZ29yaXRobTo6Ym95ZXJfbW9vcmU8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPFJhbmdlPjo6dHlwZT4KKyAgICBtYWtlX2JveWVyX21vb3JlICggUmFuZ2UgJnIgKSB7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpib3llcl9tb29yZQorICAgICAgICAgICAgPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxSYW5nZT46OnR5cGU+IChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQocikpOworICAgICAgICB9CisKK319CisKKyNlbmRpZiAgLy8gIEJPT1NUX0FMR09SSVRITV9CT1lFUl9NT09SRV9TRUFSQ0hfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3NlYXJjaGluZy9ib3llcl9tb29yZV9ob3JzcG9vbC5ocHAKQEAgLTAsMCArMSwyMDIgQEAKKy8qIAorICAgQ29weXJpZ2h0IChjKSBNYXJzaGFsbCBDbG93IDIwMTAtMjAxMi4KKworICAgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZworICAgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdCBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnCisqLworCisjaWZuZGVmIEJPT1NUX0FMR09SSVRITV9CT1lFUl9NT09SRV9IT1JTUE9PT0xfU0VBUkNIX0hQUAorI2RlZmluZSBCT09TVF9BTEdPUklUSE1fQk9ZRVJfTU9PUkVfSE9SU1BPT09MX1NFQVJDSF9IUFAKKworI2luY2x1ZGUgPGl0ZXJhdG9yPiAgICAgLy8gZm9yIHN0ZDo6aXRlcmF0b3JfdHJhaXRzCisKKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc2VhcmNoaW5nL2RldGFpbC9ibV90cmFpdHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zZWFyY2hpbmcvZGV0YWlsL2RlYnVnZ2luZy5ocHA+CisKKy8vICNkZWZpbmUgIEJPT1NUX0FMR09SSVRITV9CT1lFUl9NT09SRV9IT1JTUE9PTF9ERUJVR19IUFAKKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8qCisgICAgQSB0ZW1wbGF0ZWQgdmVyc2lvbiBvZiB0aGUgYm95ZXItbW9vcmUtaG9yc3Bvb2wgc2VhcmNoaW5nIGFsZ29yaXRobS4KKyAgICAKKyAgICBSZXF1aXJlbWVudHM6CisgICAgICAgICogUmFuZG9tIGFjY2VzcyBpdGVyYXRvcnMKKyAgICAgICAgKiBUaGUgdHdvIGl0ZXJhdG9yIHR5cGVzIChwYXRJdGVyIGFuZCBjb3JwdXNJdGVyKSBtdXN0IAorICAgICAgICAgICAgInBvaW50IHRvIiB0aGUgc2FtZSB1bmRlcmx5aW5nIHR5cGUuCisgICAgICAgICogQWRkaXRpb25hbCByZXF1aXJlbWVudHMgbWF5IGJlIGltcG9zZWQgYnV5IHRoZSBza2lwIHRhYmxlLCBzdWNoIGFzOgorICAgICAgICAqKiBOdW1lcmljIHR5cGUgKGFycmF5LWJhc2VkIHNraXAgdGFibGUpCisgICAgICAgICoqIEhhc2hhYmxlIHR5cGUgKG1hcC1iYXNlZCBza2lwIHRhYmxlKQorCitodHRwOi8vd3d3LWlnbS51bml2LW1sdi5mci8lN0VsZWNyb3Evc3RyaW5nL25vZGUxOC5odG1sCisKKyovCisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgcGF0SXRlciwgdHlwZW5hbWUgdHJhaXRzID0gZGV0YWlsOjpCTV90cmFpdHM8cGF0SXRlcj4gPgorICAgIGNsYXNzIGJveWVyX21vb3JlX2hvcnNwb29sIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxwYXRJdGVyPjo6ZGlmZmVyZW5jZV90eXBlIGRpZmZlcmVuY2VfdHlwZTsKKyAgICBwdWJsaWM6CisgICAgICAgIGJveWVyX21vb3JlX2hvcnNwb29sICggcGF0SXRlciBmaXJzdCwgcGF0SXRlciBsYXN0ICkgCisgICAgICAgICAgICAgICAgOiBwYXRfZmlyc3QgKCBmaXJzdCApLCBwYXRfbGFzdCAoIGxhc3QgKSwKKyAgICAgICAgICAgICAgICAgIGtfcGF0dGVybl9sZW5ndGggKCBzdGQ6OmRpc3RhbmNlICggcGF0X2ZpcnN0LCBwYXRfbGFzdCApKSwKKyAgICAgICAgICAgICAgICAgIHNraXBfICgga19wYXR0ZXJuX2xlbmd0aCwga19wYXR0ZXJuX2xlbmd0aCApIHsKKyAgICAgICAgICAgICAgICAgIAorICAgICAgICAvLyAgQnVpbGQgdGhlIHNraXAgdGFibGUKKyAgICAgICAgICAgIHN0ZDo6c2l6ZV90IGkgPSAwOworICAgICAgICAgICAgaWYgKCBmaXJzdCAhPSBsYXN0ICkgICAgLy8gZW1wdHkgcGF0dGVybj8KKyAgICAgICAgICAgICAgICBmb3IgKCBwYXRJdGVyIGl0ZXIgPSBmaXJzdDsgaXRlciAhPSBsYXN0LTE7ICsraXRlciwgKytpICkKKyAgICAgICAgICAgICAgICAgICAgc2tpcF8uaW5zZXJ0ICggKml0ZXIsIGtfcGF0dGVybl9sZW5ndGggLSAxIC0gaSApOworI2lmZGVmIEJPT1NUX0FMR09SSVRITV9CT1lFUl9NT09SRV9IT1JTUE9PTF9ERUJVR19IUFAKKyAgICAgICAgICAgIHNraXBfLlByaW50U2tpcFRhYmxlICgpOworI2VuZGlmCisgICAgICAgICAgICB9CisgICAgICAgICAgICAKKyAgICAgICAgfmJveWVyX21vb3JlX2hvcnNwb29sICgpIHt9CisgICAgICAgIAorICAgICAgICAvLy8gXGZuIG9wZXJhdG9yICggY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QpCisgICAgICAgIC8vLyBcYnJpZWYgU2VhcmNoZXMgdGhlIGNvcnB1cyBmb3IgdGhlIHBhdHRlcm4gdGhhdCB3YXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yCisgICAgICAgIC8vLyAKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBkYXRhIHRvIHNlYXJjaCAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSB0byBzZWFyY2gKKyAgICAgICAgLy8vCisgICAgICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBjb3JwdXNJdGVyPgorICAgICAgICBzdGQ6OnBhaXI8Y29ycHVzSXRlciwgY29ycHVzSXRlcj4KKyAgICAgICAgb3BlcmF0b3IgKCkgKCBjb3JwdXNJdGVyIGNvcnB1c19maXJzdCwgY29ycHVzSXRlciBjb3JwdXNfbGFzdCApIGNvbnN0IHsKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQgKCggYm9vc3Q6OmlzX3NhbWU8CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8cGF0SXRlcj46OnZhbHVlX3R5cGUsIAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPGNvcnB1c0l0ZXI+Ojp2YWx1ZV90eXBlPjo6dmFsdWUgKSk7CisKKyAgICAgICAgICAgIGlmICggY29ycHVzX2ZpcnN0ID09IGNvcnB1c19sYXN0ICkgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19sYXN0LCBjb3JwdXNfbGFzdCk7ICAgLy8gaWYgbm90aGluZyB0byBzZWFyY2gsIHdlIGRpZG4ndCBmaW5kIGl0IQorICAgICAgICAgICAgaWYgKCAgICBwYXRfZmlyc3QgPT0gICAgcGF0X2xhc3QgKSByZXR1cm4gc3RkOjptYWtlX3BhaXIoY29ycHVzX2ZpcnN0LCBjb3JwdXNfZmlyc3QpOyAvLyBlbXB0eSBwYXR0ZXJuIG1hdGNoZXMgYXQgc3RhcnQKKworICAgICAgICAgICAgY29uc3QgZGlmZmVyZW5jZV90eXBlIGtfY29ycHVzX2xlbmd0aCAgPSBzdGQ6OmRpc3RhbmNlICggY29ycHVzX2ZpcnN0LCBjb3JwdXNfbGFzdCApOworICAgICAgICAvLyAgSWYgdGhlIHBhdHRlcm4gaXMgbGFyZ2VyIHRoYW4gdGhlIGNvcnB1cywgd2UgY2FuJ3QgZmluZCBpdCEKKyAgICAgICAgICAgIGlmICgga19jb3JwdXNfbGVuZ3RoIDwga19wYXR0ZXJuX2xlbmd0aCApCisgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19sYXN0LCBjb3JwdXNfbGFzdCk7CisgICAgCisgICAgICAgIC8vICBEbyB0aGUgc2VhcmNoIAorICAgICAgICAgICAgcmV0dXJuIHRoaXMtPmRvX3NlYXJjaCAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIAorICAgICAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2U+CisgICAgICAgIHN0ZDo6cGFpcjx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8UmFuZ2U+Ojp0eXBlLCB0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8UmFuZ2U+Ojp0eXBlPgorICAgICAgICBvcGVyYXRvciAoKSAoIFJhbmdlICZyICkgY29uc3QgeworICAgICAgICAgICAgcmV0dXJuICgqdGhpcykgKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSk7CisgICAgICAgICAgICB9CisKKyAgICBwcml2YXRlOgorLy8vIFxjb25kIERPWFlHRU5fSElERQorICAgICAgICBwYXRJdGVyIHBhdF9maXJzdCwgcGF0X2xhc3Q7CisgICAgICAgIGNvbnN0IGRpZmZlcmVuY2VfdHlwZSBrX3BhdHRlcm5fbGVuZ3RoOworICAgICAgICB0eXBlbmFtZSB0cmFpdHM6OnNraXBfdGFibGVfdCBza2lwXzsKKworICAgICAgICAvLy8gXGZuIGRvX3NlYXJjaCAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0ICkKKyAgICAgICAgLy8vIFxicmllZiBTZWFyY2hlcyB0aGUgY29ycHVzIGZvciB0aGUgcGF0dGVybiB0aGF0IHdhcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3IKKyAgICAgICAgLy8vIAorICAgICAgICAvLy8gXHBhcmFtIGNvcnB1c19maXJzdCBUaGUgc3RhcnQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoIChSYW5kb20gQWNjZXNzIEl0ZXJhdG9yKQorICAgICAgICAvLy8gXHBhcmFtIGNvcnB1c19sYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBkYXRhIHRvIHNlYXJjaAorICAgICAgICAvLy8gXHBhcmFtIGtfY29ycHVzX2xlbmd0aCBUaGUgbGVuZ3RoIG9mIHRoZSBjb3JwdXMgdG8gc2VhcmNoCisgICAgICAgIC8vLworICAgICAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgY29ycHVzSXRlcj4KKyAgICAgICAgc3RkOjpwYWlyPGNvcnB1c0l0ZXIsIGNvcnB1c0l0ZXI+CisgICAgICAgIGRvX3NlYXJjaCAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0ICkgY29uc3QgeworICAgICAgICAgICAgY29ycHVzSXRlciBjdXJQb3MgPSBjb3JwdXNfZmlyc3Q7CisgICAgICAgICAgICBjb25zdCBjb3JwdXNJdGVyIGxhc3RQb3MgPSBjb3JwdXNfbGFzdCAtIGtfcGF0dGVybl9sZW5ndGg7CisgICAgICAgICAgICB3aGlsZSAoIGN1clBvcyA8PSBsYXN0UG9zICkgeworICAgICAgICAgICAgLy8gIERvIHdlIG1hdGNoIHJpZ2h0IHdoZXJlIHdlIGFyZT8KKyAgICAgICAgICAgICAgICBzdGQ6OnNpemVfdCBqID0ga19wYXR0ZXJuX2xlbmd0aCAtIDE7CisgICAgICAgICAgICAgICAgd2hpbGUgKCBwYXRfZmlyc3QgW2pdID09IGN1clBvcyBbal0gKSB7CisgICAgICAgICAgICAgICAgLy8gIFdlIG1hdGNoZWQgLSB3ZSdyZSBkb25lIQorICAgICAgICAgICAgICAgICAgICBpZiAoIGogPT0gMCApCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIoY3VyUG9zLCBjdXJQb3MgKyBrX3BhdHRlcm5fbGVuZ3RoKTsKKyAgICAgICAgICAgICAgICAgICAgai0tOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgIAorICAgICAgICAgICAgICAgIGN1clBvcyArPSBza2lwXyBbIGN1clBvcyBbIGtfcGF0dGVybl9sZW5ndGggLSAxIF1dOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIAorICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19sYXN0LCBjb3JwdXNfbGFzdCk7CisgICAgICAgICAgICB9CisvLyBcZW5kY29uZAorICAgICAgICB9OworCisvKiAgVHdvIHJhbmdlcyBhcyBpbnB1dHMgZ2l2ZXMgdXMgZm91ciBwb3NzaWJpbGl0aWVzOyB3aXRoIDIsMywzLDQgcGFyYW1ldGVycworICAgIFVzZSBhIGJpdCBvZiBUTVAgdG8gZGlzYW1iaWd1YXRlIHRoZSAzLWFyZ3VtZW50IHRlbXBsYXRlcyAqLworCisvLy8gXGZuIGJveWVyX21vb3JlX2hvcnNwb29sX3NlYXJjaCAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0LCAKKy8vLyAgICAgICBwYXRJdGVyIHBhdF9maXJzdCwgcGF0SXRlciBwYXRfbGFzdCApCisvLy8gXGJyaWVmIFNlYXJjaGVzIHRoZSBjb3JwdXMgZm9yIHRoZSBwYXR0ZXJuLgorLy8vIAorLy8vIFxwYXJhbSBjb3JwdXNfZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBkYXRhIHRvIHNlYXJjaCAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKy8vLyBccGFyYW0gY29ycHVzX2xhc3QgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoCisvLy8gXHBhcmFtIHBhdF9maXJzdCAgICBUaGUgc3RhcnQgb2YgdGhlIHBhdHRlcm4gdG8gc2VhcmNoIGZvciAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKy8vLyBccGFyYW0gcGF0X2xhc3QgICAgIE9uZSBwYXN0IHRoZSBlbmQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoIGZvcgorLy8vCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIHBhdEl0ZXIsIHR5cGVuYW1lIGNvcnB1c0l0ZXI+CisgICAgc3RkOjpwYWlyPGNvcnB1c0l0ZXIsIGNvcnB1c0l0ZXI+IGJveWVyX21vb3JlX2hvcnNwb29sX3NlYXJjaCAoIAorICAgICAgICAgICAgICAgICAgY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIAorICAgICAgICAgICAgICAgICAgcGF0SXRlciBwYXRfZmlyc3QsIHBhdEl0ZXIgcGF0X2xhc3QgKQorICAgIHsKKyAgICAgICAgYm95ZXJfbW9vcmVfaG9yc3Bvb2w8cGF0SXRlcj4gYm1oICggcGF0X2ZpcnN0LCBwYXRfbGFzdCApOworICAgICAgICByZXR1cm4gYm1oICggY29ycHVzX2ZpcnN0LCBjb3JwdXNfbGFzdCApOworICAgIH0KKworICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBQYXR0ZXJuUmFuZ2UsIHR5cGVuYW1lIGNvcnB1c0l0ZXI+CisgICAgc3RkOjpwYWlyPGNvcnB1c0l0ZXIsIGNvcnB1c0l0ZXI+IGJveWVyX21vb3JlX2hvcnNwb29sX3NlYXJjaCAoIAorICAgICAgICBjb3JwdXNJdGVyIGNvcnB1c19maXJzdCwgY29ycHVzSXRlciBjb3JwdXNfbGFzdCwgY29uc3QgUGF0dGVyblJhbmdlICZwYXR0ZXJuICkKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFBhdHRlcm5SYW5nZT46OnR5cGUgcGF0dGVybl9pdGVyYXRvcjsKKyAgICAgICAgYm95ZXJfbW9vcmVfaG9yc3Bvb2w8cGF0dGVybl9pdGVyYXRvcj4gYm1oICggYm9vc3Q6OmJlZ2luKHBhdHRlcm4pLCBib29zdDo6ZW5kIChwYXR0ZXJuKSk7CisgICAgICAgIHJldHVybiBibWggKCBjb3JwdXNfZmlyc3QsIGNvcnB1c19sYXN0ICk7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBwYXRJdGVyLCB0eXBlbmFtZSBDb3JwdXNSYW5nZT4KKyAgICB0eXBlbmFtZSBib29zdDo6ZGlzYWJsZV9pZl9jPAorICAgICAgICBib29zdDo6aXNfc2FtZTxDb3JwdXNSYW5nZSwgcGF0SXRlcj46OnZhbHVlLCAKKyAgICAgICAgc3RkOjpwYWlyPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGUsIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGU+ID4KKyAgICA6OnR5cGUKKyAgICBib3llcl9tb29yZV9ob3JzcG9vbF9zZWFyY2ggKCBDb3JwdXNSYW5nZSAmY29ycHVzLCBwYXRJdGVyIHBhdF9maXJzdCwgcGF0SXRlciBwYXRfbGFzdCApCisgICAgeworICAgICAgICBib3llcl9tb29yZV9ob3JzcG9vbDxwYXRJdGVyPiBibWggKCBwYXRfZmlyc3QsIHBhdF9sYXN0ICk7CisgICAgICAgIHJldHVybiBibSAoYm9vc3Q6OmJlZ2luIChjb3JwdXMpLCBib29zdDo6ZW5kIChjb3JwdXMpKTsKKyAgICB9CisgICAgCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFBhdHRlcm5SYW5nZSwgdHlwZW5hbWUgQ29ycHVzUmFuZ2U+CisgICAgc3RkOjpwYWlyPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGUsIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGU+CisgICAgYm95ZXJfbW9vcmVfaG9yc3Bvb2xfc2VhcmNoICggQ29ycHVzUmFuZ2UgJmNvcnB1cywgY29uc3QgUGF0dGVyblJhbmdlICZwYXR0ZXJuICkKKyAgICB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFBhdHRlcm5SYW5nZT46OnR5cGUgcGF0dGVybl9pdGVyYXRvcjsKKyAgICAgICAgYm95ZXJfbW9vcmVfaG9yc3Bvb2w8cGF0dGVybl9pdGVyYXRvcj4gYm1oICggYm9vc3Q6OmJlZ2luKHBhdHRlcm4pLCBib29zdDo6ZW5kIChwYXR0ZXJuKSk7CisgICAgICAgIHJldHVybiBibWggKGJvb3N0OjpiZWdpbiAoY29ycHVzKSwgYm9vc3Q6OmVuZCAoY29ycHVzKSk7CisgICAgfQorCisKKyAgICAvLyAgQ3JlYXRvciBmdW5jdGlvbnMgLS0gdGFrZSBhIHBhdHRlcm4gcmFuZ2UsIHJldHVybiBhbiBvYmplY3QKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2U+CisgICAgYm9vc3Q6OmFsZ29yaXRobTo6Ym95ZXJfbW9vcmVfaG9yc3Bvb2w8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT4KKyAgICBtYWtlX2JveWVyX21vb3JlX2hvcnNwb29sICggY29uc3QgUmFuZ2UgJnIgKSB7CisgICAgICAgIHJldHVybiBib29zdDo6YWxnb3JpdGhtOjpib3llcl9tb29yZV9ob3JzcG9vbAorICAgICAgICAgICAgPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBSYW5nZT46OnR5cGU+IChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQocikpOworICAgICAgICB9CisgICAgCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFJhbmdlPgorICAgIGJvb3N0OjphbGdvcml0aG06OmJveWVyX21vb3JlX2hvcnNwb29sPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxSYW5nZT46OnR5cGU+CisgICAgbWFrZV9ib3llcl9tb29yZV9ob3JzcG9vbCAoIFJhbmdlICZyICkgeworICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6Ym95ZXJfbW9vcmVfaG9yc3Bvb2wKKyAgICAgICAgICAgIDx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8UmFuZ2U+Ojp0eXBlPiAoYm9vc3Q6OmJlZ2luKHIpLCBib29zdDo6ZW5kKHIpKTsKKyAgICAgICAgfQorCit9fQorCisjZW5kaWYgIC8vICBCT09TVF9BTEdPUklUSE1fQk9ZRVJfTU9PUkVfSE9SU1BPT09MX1NFQVJDSF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc2VhcmNoaW5nL2RldGFpbC9ibV90cmFpdHMuaHBwCkBAIC0wLDAgKzEsMTEzIEBACisvKiAKKyAgIENvcHlyaWdodCAoYykgTWFyc2hhbGwgQ2xvdyAyMDEwLTIwMTIuCisKKyAgIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcKKyAgIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisgICAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZworKi8KKworI2lmbmRlZiBCT09TVF9BTEdPUklUSE1fU0VBUkNIX0RFVEFJTF9CTV9UUkFJVFNfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9TRUFSQ0hfREVUQUlMX0JNX1RSQUlUU19IUFAKKworI2luY2x1ZGUgPGNsaW1pdHM+ICAgICAgLy8gZm9yIENIQVJfQklUCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGl0ZXJhdG9yPiAgICAgLy8gZm9yIHN0ZDo6aXRlcmF0b3JfdHJhaXRzCisKKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9tYWtlX3Vuc2lnbmVkLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19pbnRlZ3JhbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX3BvaW50ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcnJheS5ocHA+CisjaWZkZWYgQk9PU1RfTk9fQ1hYMTFfSERSX1VOT1JERVJFRF9NQVAKKyNpbmNsdWRlIDxib29zdC91bm9yZGVyZWRfbWFwLmhwcD4KKyNlbHNlCisjaW5jbHVkZSA8dW5vcmRlcmVkX21hcD4KKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3NlYXJjaGluZy9kZXRhaWwvZGVidWdnaW5nLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgbmFtZXNwYWNlIGFsZ29yaXRobSB7IG5hbWVzcGFjZSBkZXRhaWwgeworCisvLworLy8gIERlZmF1bHQgaW1wbGVtZW50YXRpb25zIG9mIHRoZSBza2lwIHRhYmxlcyBmb3IgQi1NIGFuZCBCLU0tSAorLy8KKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBrZXlfdHlwZSwgdHlwZW5hbWUgdmFsdWVfdHlwZSwgYm9vbCAvKnVzZUFycmF5Ki8+IGNsYXNzIHNraXBfdGFibGU7CisKKy8vICBHZW5lcmFsIGNhc2UgZm9yIGRhdGEgc2VhcmNoaW5nIG90aGVyIHRoYW4gYnl0ZXM7IHVzZSBhIG1hcAorICAgIHRlbXBsYXRlPHR5cGVuYW1lIGtleV90eXBlLCB0eXBlbmFtZSB2YWx1ZV90eXBlPgorICAgIGNsYXNzIHNraXBfdGFibGU8a2V5X3R5cGUsIHZhbHVlX3R5cGUsIGZhbHNlPiB7CisgICAgcHJpdmF0ZToKKyNpZmRlZiBCT09TVF9OT19DWFgxMV9IRFJfVU5PUkRFUkVEX01BUAorICAgICAgICB0eXBlZGVmIGJvb3N0Ojp1bm9yZGVyZWRfbWFwPGtleV90eXBlLCB2YWx1ZV90eXBlPiBza2lwX21hcDsKKyNlbHNlCisgICAgICAgIHR5cGVkZWYgc3RkOjp1bm9yZGVyZWRfbWFwPGtleV90eXBlLCB2YWx1ZV90eXBlPiBza2lwX21hcDsKKyNlbmRpZgorICAgICAgICBjb25zdCB2YWx1ZV90eXBlIGtfZGVmYXVsdF92YWx1ZTsKKyAgICAgICAgc2tpcF9tYXAgc2tpcF87CisgICAgICAgIAorICAgIHB1YmxpYzoKKyAgICAgICAgc2tpcF90YWJsZSAoIHN0ZDo6c2l6ZV90IHBhdFNpemUsIHZhbHVlX3R5cGUgZGVmYXVsdF92YWx1ZSApIAorICAgICAgICAgICAgOiBrX2RlZmF1bHRfdmFsdWUgKCBkZWZhdWx0X3ZhbHVlICksIHNraXBfICggcGF0U2l6ZSApIHt9CisgICAgICAgIAorICAgICAgICB2b2lkIGluc2VydCAoIGtleV90eXBlIGtleSwgdmFsdWVfdHlwZSB2YWwgKSB7CisgICAgICAgICAgICBza2lwXyBbIGtleSBdID0gdmFsOyAgICAvLyBXb3VsZCBza2lwXy5pbnNlcnQgKHZhbCkgYmUgYmV0dGVyIGhlcmU/CisgICAgICAgICAgICB9CisKKyAgICAgICAgdmFsdWVfdHlwZSBvcGVyYXRvciBbXSAoIGtleV90eXBlIGtleSApIGNvbnN0IHsKKyAgICAgICAgICAgIHR5cGVuYW1lIHNraXBfbWFwOjpjb25zdF9pdGVyYXRvciBpdCA9IHNraXBfLmZpbmQgKCBrZXkgKTsKKyAgICAgICAgICAgIHJldHVybiBpdCA9PSBza2lwXy5lbmQgKCkgPyBrX2RlZmF1bHRfdmFsdWUgOiBpdC0+c2Vjb25kOworICAgICAgICAgICAgfQorICAgICAgICAgICAgCisgICAgICAgIHZvaWQgUHJpbnRTa2lwVGFibGUgKCkgY29uc3QgeworICAgICAgICAgICAgc3RkOjpjb3V0IDw8ICJCTShIKSBTa2lwIFRhYmxlIDx1bm9yZGVyZWRfbWFwPjoiIDw8IHN0ZDo6ZW5kbDsKKyAgICAgICAgICAgIGZvciAoIHR5cGVuYW1lIHNraXBfbWFwOjpjb25zdF9pdGVyYXRvciBpdCA9IHNraXBfLmJlZ2luICgpOyBpdCAhPSBza2lwXy5lbmQgKCk7ICsraXQgKQorICAgICAgICAgICAgICAgIGlmICggaXQtPnNlY29uZCAhPSBrX2RlZmF1bHRfdmFsdWUgKQorICAgICAgICAgICAgICAgICAgICBzdGQ6OmNvdXQgPDwgIiAgIiA8PCBpdC0+Zmlyc3QgPDwgIjogIiA8PCBpdC0+c2Vjb25kIDw8IHN0ZDo6ZW5kbDsKKyAgICAgICAgICAgIHN0ZDo6Y291dCA8PCBzdGQ6OmVuZGw7CisgICAgICAgICAgICB9CisgICAgICAgIH07CisgICAgICAgIAorICAgIAorLy8gIFNwZWNpYWwgY2FzZSBzbWFsbCBudW1lcmljIHZhbHVlczsgdXNlIGFuIGFycmF5CisgICAgdGVtcGxhdGU8dHlwZW5hbWUga2V5X3R5cGUsIHR5cGVuYW1lIHZhbHVlX3R5cGU+CisgICAgY2xhc3Mgc2tpcF90YWJsZTxrZXlfdHlwZSwgdmFsdWVfdHlwZSwgdHJ1ZT4geworICAgIHByaXZhdGU6CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYm9vc3Q6Om1ha2VfdW5zaWduZWQ8a2V5X3R5cGU+Ojp0eXBlIHVuc2lnbmVkX2tleV90eXBlOworICAgICAgICB0eXBlZGVmIGJvb3N0OjphcnJheTx2YWx1ZV90eXBlLCAxVSA8PCAoQ0hBUl9CSVQgKiBzaXplb2Yoa2V5X3R5cGUpKT4gc2tpcF9tYXA7CisgICAgICAgIHNraXBfbWFwIHNraXBfOworICAgICAgICBjb25zdCB2YWx1ZV90eXBlIGtfZGVmYXVsdF92YWx1ZTsKKyAgICBwdWJsaWM6CisgICAgICAgIHNraXBfdGFibGUgKCBzdGQ6OnNpemVfdCAvKnBhdFNpemUqLywgdmFsdWVfdHlwZSBkZWZhdWx0X3ZhbHVlICkgOiBrX2RlZmF1bHRfdmFsdWUgKCBkZWZhdWx0X3ZhbHVlICkgeworICAgICAgICAgICAgc3RkOjpmaWxsX24gKCBza2lwXy5iZWdpbigpLCBza2lwXy5zaXplKCksIGRlZmF1bHRfdmFsdWUgKTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgCisgICAgICAgIHZvaWQgaW5zZXJ0ICgga2V5X3R5cGUga2V5LCB2YWx1ZV90eXBlIHZhbCApIHsKKyAgICAgICAgICAgIHNraXBfIFsgc3RhdGljX2Nhc3Q8dW5zaWduZWRfa2V5X3R5cGU+ICgga2V5ICkgXSA9IHZhbDsKKyAgICAgICAgICAgIH0KKworICAgICAgICB2YWx1ZV90eXBlIG9wZXJhdG9yIFtdICgga2V5X3R5cGUga2V5ICkgY29uc3QgeworICAgICAgICAgICAgcmV0dXJuIHNraXBfIFsgc3RhdGljX2Nhc3Q8dW5zaWduZWRfa2V5X3R5cGU+ICgga2V5ICkgXTsKKyAgICAgICAgICAgIH0KKworICAgICAgICB2b2lkIFByaW50U2tpcFRhYmxlICgpIGNvbnN0IHsKKyAgICAgICAgICAgIHN0ZDo6Y291dCA8PCAiQk0oSCkgU2tpcCBUYWJsZSA8Ym9vc3Q6YXJyYXk+OiIgPDwgc3RkOjplbmRsOworICAgICAgICAgICAgZm9yICggdHlwZW5hbWUgc2tpcF9tYXA6OmNvbnN0X2l0ZXJhdG9yIGl0ID0gc2tpcF8uYmVnaW4gKCk7IGl0ICE9IHNraXBfLmVuZCAoKTsgKytpdCApCisgICAgICAgICAgICAgICAgaWYgKCAqaXQgIT0ga19kZWZhdWx0X3ZhbHVlICkKKyAgICAgICAgICAgICAgICAgICAgc3RkOjpjb3V0IDw8ICIgICIgPDwgc3RkOjpkaXN0YW5jZSAoc2tpcF8uYmVnaW4gKCksIGl0KSA8PCAiOiAiIDw8ICppdCA8PCBzdGQ6OmVuZGw7CisgICAgICAgICAgICBzdGQ6OmNvdXQgPDwgc3RkOjplbmRsOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgSXRlcmF0b3I+CisgICAgc3RydWN0IEJNX3RyYWl0cyB7CisgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SXRlcmF0b3I+OjpkaWZmZXJlbmNlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJdGVyYXRvcj46OnZhbHVlX3R5cGUga2V5X3R5cGU7CisgICAgICAgIHR5cGVkZWYgYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpza2lwX3RhYmxlPGtleV90eXBlLCB2YWx1ZV90eXBlLCAKKyAgICAgICAgICAgICAgICBib29zdDo6aXNfaW50ZWdyYWw8a2V5X3R5cGU+Ojp2YWx1ZSAmJiAoc2l6ZW9mKGtleV90eXBlKT09MSk+IHNraXBfdGFibGVfdDsKKyAgICAgICAgfTsKKworfX19IC8vIG5hbWVzcGFjZXMKKworI2VuZGlmICAvLyAgQk9PU1RfQUxHT1JJVEhNX1NFQVJDSF9ERVRBSUxfQk1fVFJBSVRTX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zZWFyY2hpbmcvZGV0YWlsL2RlYnVnZ2luZy5ocHAKQEAgLTAsMCArMSwzMCBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAxMC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworICAgIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cDovL3d3dy5ib29zdC5vcmcKKyovCisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX1NFQVJDSF9ERVRBSUxfREVCVUdfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9TRUFSQ0hfREVUQUlMX0RFQlVHX0hQUAorCisjaW5jbHVkZSA8aW9zdHJlYW0+CisvLy8gXGNvbmQgRE9YWUdFTl9ISURFCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geyBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gIERlYnVnZ2luZyBzdXBwb3J0CisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIEl0ZXI+CisgICAgdm9pZCBQcmludFRhYmxlICggSXRlciBmaXJzdCwgSXRlciBsYXN0ICkgeworICAgICAgICBzdGQ6OmNvdXQgPDwgc3RkOjpkaXN0YW5jZSAoIGZpcnN0LCBsYXN0ICkgPDwgIjogeyAiOworICAgICAgICBmb3IgKCBJdGVyIGl0ZXIgPSBmaXJzdDsgaXRlciAhPSBsYXN0OyArK2l0ZXIgKQorICAgICAgICAgICAgc3RkOjpjb3V0IDw8ICppdGVyIDw8ICIgIjsKKyAgICAgICAgc3RkOjpjb3V0IDw8ICJ9IiA8PCBzdGQ6OmVuZGw7CisgICAgICAgIH0KKyAgICAKK319fQorLy8vIFxlbmRjb25kCisKKyNlbmRpZiAgLy8gIEJPT1NUX0FMR09SSVRITV9TRUFSQ0hfREVUQUlMX0RFQlVHX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zZWFyY2hpbmcva251dGhfbW9ycmlzX3ByYXR0LmhwcApAQCAtMCwwICsxLDI2MyBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAxMC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworICAgIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cDovL3d3dy5ib29zdC5vcmcKKyovCisKKyNpZm5kZWYgQk9PU1RfQUxHT1JJVEhNX0tOVVRIX01PUlJJU19QUkFUVF9TRUFSQ0hfSFBQCisjZGVmaW5lIEJPT1NUX0FMR09SSVRITV9LTlVUSF9NT1JSSVNfUFJBVFRfU0VBUkNIX0hQUAorCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPGl0ZXJhdG9yPiAgICAgLy8gZm9yIHN0ZDo6aXRlcmF0b3JfdHJhaXRzCisKKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC91dGlsaXR5L2VuYWJsZV9pZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfc2FtZS5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc2VhcmNoaW5nL2RldGFpbC9kZWJ1Z2dpbmcuaHBwPgorCisvLyAjZGVmaW5lICBCT09TVF9BTEdPUklUSE1fS05VVEhfTU9SUklTX1BSQVRUX0RFQlVHCisKK25hbWVzcGFjZSBib29zdCB7IG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAjZGVmaW5lICBORVdfS01QCisKKy8qCisgICAgQSB0ZW1wbGF0ZWQgdmVyc2lvbiBvZiB0aGUgS251dGgtTW9ycmlzLVByYXR0IHNlYXJjaGluZyBhbGdvcml0aG0uCisgICAgCisgICAgUmVxdWlyZW1lbnRzOgorICAgICAgICAqIFJhbmRvbS1hY2Nlc3MgaXRlcmF0b3JzCisgICAgICAgICogVGhlIHR3byBpdGVyYXRvciB0eXBlcyAoSTEgYW5kIEkyKSBtdXN0ICJwb2ludCB0byIgdGhlIHNhbWUgdW5kZXJseWluZyB0eXBlLgorCisgICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LbnV0aC1Nb3JyaXMtUHJhdHRfYWxnb3JpdGhtCisgICAgaHR0cDovL3d3dy5pbmYuZmgtZmxlbnNidXJnLmRlL2xhbmcvYWxnb3JpdGhtZW4vcGF0dGVybi9rbXBlbi5odG0KKyovCisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgcGF0SXRlcj4KKyAgICBjbGFzcyBrbnV0aF9tb3JyaXNfcHJhdHQgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHN0ZDo6aXRlcmF0b3JfdHJhaXRzPHBhdEl0ZXI+OjpkaWZmZXJlbmNlX3R5cGUgZGlmZmVyZW5jZV90eXBlOworICAgIHB1YmxpYzoKKyAgICAgICAga251dGhfbW9ycmlzX3ByYXR0ICggcGF0SXRlciBmaXJzdCwgcGF0SXRlciBsYXN0ICkgCisgICAgICAgICAgICAgICAgOiBwYXRfZmlyc3QgKCBmaXJzdCApLCBwYXRfbGFzdCAoIGxhc3QgKSwgCisgICAgICAgICAgICAgICAgICBrX3BhdHRlcm5fbGVuZ3RoICggc3RkOjpkaXN0YW5jZSAoIHBhdF9maXJzdCwgcGF0X2xhc3QgKSksCisgICAgICAgICAgICAgICAgICBza2lwXyAoIGtfcGF0dGVybl9sZW5ndGggKyAxICkgeworI2lmZGVmIE5FV19LTVAKKyAgICAgICAgICAgIHByZUttcCAoIHBhdF9maXJzdCwgcGF0X2xhc3QgKTsKKyNlbHNlCisgICAgICAgICAgICBpbml0X3NraXBfdGFibGUgKCBwYXRfZmlyc3QsIHBhdF9sYXN0ICk7CisjZW5kaWYKKyNpZmRlZiBCT09TVF9BTEdPUklUSE1fS05VVEhfTU9SUklTX1BSQVRUX0RFQlVHCisgICAgICAgICAgICBkZXRhaWw6OlByaW50VGFibGUgKCBza2lwXy5iZWdpbiAoKSwgc2tpcF8uZW5kICgpKTsKKyNlbmRpZgorICAgICAgICAgICAgfQorICAgICAgICAgICAgCisgICAgICAgIH5rbnV0aF9tb3JyaXNfcHJhdHQgKCkge30KKyAgICAgICAgCisgICAgICAgIC8vLyBcZm4gb3BlcmF0b3IgKCBjb3JwdXNJdGVyIGNvcnB1c19maXJzdCwgY29ycHVzSXRlciBjb3JwdXNfbGFzdCwgUHJlZCBwICkKKyAgICAgICAgLy8vIFxicmllZiBTZWFyY2hlcyB0aGUgY29ycHVzIGZvciB0aGUgcGF0dGVybiB0aGF0IHdhcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3IKKyAgICAgICAgLy8vIAorICAgICAgICAvLy8gXHBhcmFtIGNvcnB1c19maXJzdCBUaGUgc3RhcnQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoIChSYW5kb20gQWNjZXNzIEl0ZXJhdG9yKQorICAgICAgICAvLy8gXHBhcmFtIGNvcnB1c19sYXN0ICBPbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBkYXRhIHRvIHNlYXJjaAorICAgICAgICAvLy8gXHBhcmFtIHAgICAgICAgICAgICBBIHByZWRpY2F0ZSB1c2VkIGZvciB0aGUgc2VhcmNoIGNvbXBhcmlzb25zLgorICAgICAgICAvLy8KKyAgICAgICAgdGVtcGxhdGUgPHR5cGVuYW1lIGNvcnB1c0l0ZXI+CisgICAgICAgIHN0ZDo6cGFpcjxjb3JwdXNJdGVyLCBjb3JwdXNJdGVyPgorICAgICAgICBvcGVyYXRvciAoKSAoIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0ICkgY29uc3QgeworICAgICAgICAgICAgQk9PU1RfU1RBVElDX0FTU0VSVCAoKCBib29zdDo6aXNfc2FtZTwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxwYXRJdGVyPjo6dmFsdWVfdHlwZSwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8Y29ycHVzSXRlcj46OnZhbHVlX3R5cGU+Ojp2YWx1ZSApKTsKKworICAgICAgICAgICAgaWYgKCBjb3JwdXNfZmlyc3QgPT0gY29ycHVzX2xhc3QgKSByZXR1cm4gc3RkOjptYWtlX3BhaXIoY29ycHVzX2xhc3QsIGNvcnB1c19sYXN0KTsgICAvLyBpZiBub3RoaW5nIHRvIHNlYXJjaCwgd2UgZGlkbid0IGZpbmQgaXQhCisgICAgICAgICAgICBpZiAoICAgIHBhdF9maXJzdCA9PSAgICBwYXRfbGFzdCApIHJldHVybiBzdGQ6Om1ha2VfcGFpcihjb3JwdXNfZmlyc3QsIGNvcnB1c19maXJzdCk7IC8vIGVtcHR5IHBhdHRlcm4gbWF0Y2hlcyBhdCBzdGFydAorCisgICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlX3R5cGUga19jb3JwdXNfbGVuZ3RoID0gc3RkOjpkaXN0YW5jZSAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICAgICAgLy8gIElmIHRoZSBwYXR0ZXJuIGlzIGxhcmdlciB0aGFuIHRoZSBjb3JwdXMsIHdlIGNhbid0IGZpbmQgaXQhCisgICAgICAgICAgICBpZiAoIGtfY29ycHVzX2xlbmd0aCA8IGtfcGF0dGVybl9sZW5ndGggKSAKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjptYWtlX3BhaXIoY29ycHVzX2xhc3QsIGNvcnB1c19sYXN0KTsKKworICAgICAgICAgICAgcmV0dXJuIGRvX3NlYXJjaCAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QsIGtfY29ycHVzX2xlbmd0aCApOworICAgICAgICAgICAgfQorICAgIAorICAgICAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2U+CisgICAgICAgIHN0ZDo6cGFpcjx0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8UmFuZ2U+Ojp0eXBlLCB0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8UmFuZ2U+Ojp0eXBlPgorICAgICAgICBvcGVyYXRvciAoKSAoIFJhbmdlICZyICkgY29uc3QgeworICAgICAgICAgICAgcmV0dXJuICgqdGhpcykgKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSk7CisgICAgICAgICAgICB9CisKKyAgICBwcml2YXRlOgorLy8vIFxjb25kIERPWFlHRU5fSElERQorICAgICAgICBwYXRJdGVyIHBhdF9maXJzdCwgcGF0X2xhc3Q7CisgICAgICAgIGNvbnN0IGRpZmZlcmVuY2VfdHlwZSBrX3BhdHRlcm5fbGVuZ3RoOworICAgICAgICBzdGQ6OnZlY3RvciA8ZGlmZmVyZW5jZV90eXBlPiBza2lwXzsKKworICAgICAgICAvLy8gXGZuIG9wZXJhdG9yICggY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIFByZWQgcCApCisgICAgICAgIC8vLyBcYnJpZWYgU2VhcmNoZXMgdGhlIGNvcnB1cyBmb3IgdGhlIHBhdHRlcm4gdGhhdCB3YXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yCisgICAgICAgIC8vLyAKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfZmlyc3QgVGhlIHN0YXJ0IG9mIHRoZSBkYXRhIHRvIHNlYXJjaCAoUmFuZG9tIEFjY2VzcyBJdGVyYXRvcikKKyAgICAgICAgLy8vIFxwYXJhbSBjb3JwdXNfbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSB0byBzZWFyY2gKKyAgICAgICAgLy8vIFxwYXJhbSBwICAgICAgICAgICAgQSBwcmVkaWNhdGUgdXNlZCBmb3IgdGhlIHNlYXJjaCBjb21wYXJpc29ucy4KKyAgICAgICAgLy8vCisgICAgICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBjb3JwdXNJdGVyPgorICAgICAgICBzdGQ6OnBhaXI8Y29ycHVzSXRlciwgY29ycHVzSXRlcj4KKyAgICAgICAgZG9fc2VhcmNoICggY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIAorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZV90eXBlIGtfY29ycHVzX2xlbmd0aCApIGNvbnN0IHsKKyAgICAgICAgICAgIGRpZmZlcmVuY2VfdHlwZSBtYXRjaF9zdGFydCA9IDA7ICAvLyBwb3NpdGlvbiBpbiB0aGUgY29ycHVzIHRoYXQgd2UncmUgbWF0Y2hpbmcKKyAgICAgICAgICAgIAorI2lmZGVmIE5FV19LTVAKKyAgICAgICAgICAgIGludCBwYXR0ZXJuSWR4ID0gMDsKKyAgICAgICAgICAgIHdoaWxlICggbWF0Y2hfc3RhcnQgPCBrX2NvcnB1c19sZW5ndGggKSB7CisgICAgICAgICAgICAgICAgd2hpbGUgKCBwYXR0ZXJuSWR4ID4gLTEgJiYgcGF0X2ZpcnN0W3BhdHRlcm5JZHhdICE9IGNvcnB1c19maXJzdCBbbWF0Y2hfc3RhcnRdICkKKyAgICAgICAgICAgICAgICAgICAgcGF0dGVybklkeCA9IHNraXBfIFtwYXR0ZXJuSWR4XTsgLy88LS0tIFNoaWZ0aW5nIHRoZSBwYXR0ZXJuIG9uIG1pc21hdGNoCisKKyAgICAgICAgICAgICAgICBwYXR0ZXJuSWR4Kys7CisgICAgICAgICAgICAgICAgbWF0Y2hfc3RhcnQrKzsgLy88LS0tIGNvcnB1cyBpcyBhbHdheXMgaW5jcmVhc2VkIGJ5IDEKKworICAgICAgICAgICAgICAgIGlmICggcGF0dGVybklkeCA+PSAoaW50KSBrX3BhdHRlcm5fbGVuZ3RoICkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvcnB1c19maXJzdCArIG1hdGNoX3N0YXJ0IC0gcGF0dGVybklkeDsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAKKyNlbHNlCisvLyAgQXQgdGhpcyBwb2ludCwgd2Uga25vdzoKKy8vICAgICAgICAgIGtfcGF0dGVybl9sZW5ndGggPD0ga19jb3JwdXNfbGVuZ3RoCisvLyAgICAgICAgICBmb3IgYWxsIGVsZW1lbnRzIG9mIHNraXAsIGl0IGhvbGRzIC0xIC4uIGtfcGF0dGVybl9sZW5ndGgKKy8vICAgICAgCisvLyAgICAgICAgICBJbiB0aGUgbG9vcCwgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGludmFyaWFudHMKKy8vICAgICAgICAgICAgICBpZHggaXMgaW4gdGhlIHJhbmdlIDAgLi4ga19wYXR0ZXJuX2xlbmd0aAorLy8gICAgICAgICAgICAgIG1hdGNoX3N0YXJ0IGlzIGluIHRoZSByYW5nZSAwIC4uIGtfY29ycHVzX2xlbmd0aCAtIGtfcGF0dGVybl9sZW5ndGggKyAxCisKKyAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2VfdHlwZSBsYXN0X21hdGNoID0ga19jb3JwdXNfbGVuZ3RoIC0ga19wYXR0ZXJuX2xlbmd0aDsKKyAgICAgICAgICAgIGRpZmZlcmVuY2VfdHlwZSBpZHggPSAwOyAgICAgICAgICAvLyBwb3NpdGlvbiBpbiB0aGUgcGF0dGVybiB3ZSdyZSBjb21wYXJpbmcKKworICAgICAgICAgICAgd2hpbGUgKCBtYXRjaF9zdGFydCA8PSBsYXN0X21hdGNoICkgeworICAgICAgICAgICAgICAgIHdoaWxlICggcGF0X2ZpcnN0IFsgaWR4IF0gPT0gY29ycHVzX2ZpcnN0IFsgbWF0Y2hfc3RhcnQgKyBpZHggXSApIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKCArK2lkeCA9PSBrX3BhdHRlcm5fbGVuZ3RoICkKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6Om1ha2VfcGFpcihjb3JwdXNfZmlyc3QgKyBtYXRjaF9zdGFydCwgY29ycHVzX2ZpcnN0ICsgbWF0Y2hfc3RhcnQgKyBrX3BhdHRlcm5fbGVuZ3RoKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgLy8gIEZpZ3VyZSBvdXQgd2hlcmUgdG8gc3RhcnQgc2VhcmNoaW5nIGFnYWluCisgICAgICAgICAgIC8vICAgYXNzZXJ0ICggaWR4IC0gc2tpcF8gWyBpZHggXSA+IDAgKTsgLy8gd2UncmUgYWx3YXlzIG1vdmluZyBmb3J3YXJkCisgICAgICAgICAgICAgICAgbWF0Y2hfc3RhcnQgKz0gaWR4IC0gc2tpcF8gWyBpZHggXTsKKyAgICAgICAgICAgICAgICBpZHggPSBza2lwXyBbIGlkeCBdID49IDAgPyBza2lwXyBbIGlkeCBdIDogMDsKKyAgICAgICAgICAgLy8gICBhc3NlcnQgKCBpZHggPj0gMCAmJiBpZHggPCBrX3BhdHRlcm5fbGVuZ3RoICk7CisgICAgICAgICAgICAgICAgfQorI2VuZGlmCisgICAgICAgICAgICAgICAgCisgICAgICAgIC8vICBXZSBkaWRuJ3QgZmluZCBhbnl0aGluZworICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bWFrZV9wYWlyKGNvcnB1c19sYXN0LCBjb3JwdXNfbGFzdCk7CisgICAgICAgICAgICB9CisgICAgCisKKyAgICAgICAgdm9pZCBwcmVLbXAgKCBwYXRJdGVyIGZpcnN0LCBwYXRJdGVyIGxhc3QgKSB7CisgICAgICAgICAgIGNvbnN0IC8qc3RkOjpzaXplX3QqLyBpbnQgY291bnQgPSBzdGQ6OmRpc3RhbmNlICggZmlyc3QsIGxhc3QgKTsKKyAgICAgICAgCisgICAgICAgICAgIGludCBpLCBqOworICAgICAgICAKKyAgICAgICAgICAgaSA9IDA7CisgICAgICAgICAgIGogPSBza2lwX1swXSA9IC0xOworICAgICAgICAgICB3aGlsZSAoaSA8IGNvdW50KSB7CisgICAgICAgICAgICAgIHdoaWxlIChqID4gLTEgJiYgZmlyc3RbaV0gIT0gZmlyc3Rbal0pCisgICAgICAgICAgICAgICAgIGogPSBza2lwX1tqXTsKKyAgICAgICAgICAgICAgaSsrOworICAgICAgICAgICAgICBqKys7CisgICAgICAgICAgICAgIGlmIChmaXJzdFtpXSA9PSBmaXJzdFtqXSkKKyAgICAgICAgICAgICAgICAgc2tpcF9baV0gPSBza2lwX1tqXTsKKyAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICBza2lwX1tpXSA9IGo7CisgICAgICAgICAgIH0KKyAgICAgICAgfQorCisKKyAgICAgICAgdm9pZCBpbml0X3NraXBfdGFibGUgKCBwYXRJdGVyIGZpcnN0LCBwYXRJdGVyIGxhc3QgKSB7CisgICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlX3R5cGUgY291bnQgPSBzdGQ6OmRpc3RhbmNlICggZmlyc3QsIGxhc3QgKTsKKyAgICAKKyAgICAgICAgICAgIGludCBqOworICAgICAgICAgICAgc2tpcF8gWyAwIF0gPSAtMTsKKyAgICAgICAgICAgIGZvciAoIGludCBpID0gMTsgaSA8PSBjb3VudDsgKytpICkgeworICAgICAgICAgICAgICAgIGogPSBza2lwXyBbIGkgLSAxIF07CisgICAgICAgICAgICAgICAgd2hpbGUgKCBqID49IDAgKSB7CisgICAgICAgICAgICAgICAgICAgIGlmICggZmlyc3QgWyBqIF0gPT0gZmlyc3QgWyBpIC0gMSBdICkKKyAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOworICAgICAgICAgICAgICAgICAgICBqID0gc2tpcF8gWyBqIF07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBza2lwXyBbIGkgXSA9IGogKyAxOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKy8vIFxlbmRjb25kCisgICAgICAgIH07CisKKworLyogIFR3byByYW5nZXMgYXMgaW5wdXRzIGdpdmVzIHVzIGZvdXIgcG9zc2liaWxpdGllczsgd2l0aCAyLDMsMyw0IHBhcmFtZXRlcnMKKyAgICBVc2UgYSBiaXQgb2YgVE1QIHRvIGRpc2FtYmlndWF0ZSB0aGUgMy1hcmd1bWVudCB0ZW1wbGF0ZXMgKi8KKworLy8vIFxmbiBrbnV0aF9tb3JyaXNfcHJhdHRfc2VhcmNoICggY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIAorLy8vICAgICAgIHBhdEl0ZXIgcGF0X2ZpcnN0LCBwYXRJdGVyIHBhdF9sYXN0ICkKKy8vLyBcYnJpZWYgU2VhcmNoZXMgdGhlIGNvcnB1cyBmb3IgdGhlIHBhdHRlcm4uCisvLy8gCisvLy8gXHBhcmFtIGNvcnB1c19maXJzdCBUaGUgc3RhcnQgb2YgdGhlIGRhdGEgdG8gc2VhcmNoIChSYW5kb20gQWNjZXNzIEl0ZXJhdG9yKQorLy8vIFxwYXJhbSBjb3JwdXNfbGFzdCAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSB0byBzZWFyY2gKKy8vLyBccGFyYW0gcGF0X2ZpcnN0ICAgIFRoZSBzdGFydCBvZiB0aGUgcGF0dGVybiB0byBzZWFyY2ggZm9yIChSYW5kb20gQWNjZXNzIEl0ZXJhdG9yKQorLy8vIFxwYXJhbSBwYXRfbGFzdCAgICAgT25lIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSB0byBzZWFyY2ggZm9yCisvLy8KKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgcGF0SXRlciwgdHlwZW5hbWUgY29ycHVzSXRlcj4KKyAgICBzdGQ6OnBhaXI8Y29ycHVzSXRlciwgY29ycHVzSXRlcj4ga251dGhfbW9ycmlzX3ByYXR0X3NlYXJjaCAoIAorICAgICAgICAgICAgICAgICAgY29ycHVzSXRlciBjb3JwdXNfZmlyc3QsIGNvcnB1c0l0ZXIgY29ycHVzX2xhc3QsIAorICAgICAgICAgICAgICAgICAgcGF0SXRlciBwYXRfZmlyc3QsIHBhdEl0ZXIgcGF0X2xhc3QgKQorICAgIHsKKyAgICAgICAga251dGhfbW9ycmlzX3ByYXR0PHBhdEl0ZXI+IGttcCAoIHBhdF9maXJzdCwgcGF0X2xhc3QgKTsKKyAgICAgICAgcmV0dXJuIGttcCAoIGNvcnB1c19maXJzdCwgY29ycHVzX2xhc3QgKTsKKyAgICB9CisKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUGF0dGVyblJhbmdlLCB0eXBlbmFtZSBjb3JwdXNJdGVyPgorICAgIHN0ZDo6cGFpcjxjb3JwdXNJdGVyLCBjb3JwdXNJdGVyPiBrbnV0aF9tb3JyaXNfcHJhdHRfc2VhcmNoICggCisgICAgICAgIGNvcnB1c0l0ZXIgY29ycHVzX2ZpcnN0LCBjb3JwdXNJdGVyIGNvcnB1c19sYXN0LCBjb25zdCBQYXR0ZXJuUmFuZ2UgJnBhdHRlcm4gKQorICAgIHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBib29zdDo6cmFuZ2VfaXRlcmF0b3I8Y29uc3QgUGF0dGVyblJhbmdlPjo6dHlwZSBwYXR0ZXJuX2l0ZXJhdG9yOworICAgICAgICBrbnV0aF9tb3JyaXNfcHJhdHQ8cGF0dGVybl9pdGVyYXRvcj4ga21wICggYm9vc3Q6OmJlZ2luKHBhdHRlcm4pLCBib29zdDo6ZW5kIChwYXR0ZXJuKSk7CisgICAgICAgIHJldHVybiBrbXAgKCBjb3JwdXNfZmlyc3QsIGNvcnB1c19sYXN0ICk7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBwYXRJdGVyLCB0eXBlbmFtZSBDb3JwdXNSYW5nZT4KKyAgICB0eXBlbmFtZSBib29zdDo6ZGlzYWJsZV9pZl9jPAorICAgICAgICBib29zdDo6aXNfc2FtZTxDb3JwdXNSYW5nZSwgcGF0SXRlcj46OnZhbHVlLCAKKyAgICAgICAgc3RkOjpwYWlyPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGUsIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGU+ID4KKyAgICA6OnR5cGUKKyAgICBrbnV0aF9tb3JyaXNfcHJhdHRfc2VhcmNoICggQ29ycHVzUmFuZ2UgJmNvcnB1cywgcGF0SXRlciBwYXRfZmlyc3QsIHBhdEl0ZXIgcGF0X2xhc3QgKQorICAgIHsKKyAgICAgICAga251dGhfbW9ycmlzX3ByYXR0PHBhdEl0ZXI+IGttcCAoIHBhdF9maXJzdCwgcGF0X2xhc3QgKTsKKyAgICAgICAgcmV0dXJuIGttcCAoYm9vc3Q6OmJlZ2luIChjb3JwdXMpLCBib29zdDo6ZW5kIChjb3JwdXMpKTsKKyAgICB9CisgICAgCisgICAgdGVtcGxhdGUgPHR5cGVuYW1lIFBhdHRlcm5SYW5nZSwgdHlwZW5hbWUgQ29ycHVzUmFuZ2U+CisgICAgc3RkOjpwYWlyPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGUsIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxDb3JwdXNSYW5nZT46OnR5cGU+CisgICAga251dGhfbW9ycmlzX3ByYXR0X3NlYXJjaCAoIENvcnB1c1JhbmdlICZjb3JwdXMsIGNvbnN0IFBhdHRlcm5SYW5nZSAmcGF0dGVybiApCisgICAgeworICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxjb25zdCBQYXR0ZXJuUmFuZ2U+Ojp0eXBlIHBhdHRlcm5faXRlcmF0b3I7CisgICAgICAgIGtudXRoX21vcnJpc19wcmF0dDxwYXR0ZXJuX2l0ZXJhdG9yPiBrbXAgKCBib29zdDo6YmVnaW4ocGF0dGVybiksIGJvb3N0OjplbmQgKHBhdHRlcm4pKTsKKyAgICAgICAgcmV0dXJuIGttcCAoYm9vc3Q6OmJlZ2luIChjb3JwdXMpLCBib29zdDo6ZW5kIChjb3JwdXMpKTsKKyAgICB9CisKKworICAgIC8vICBDcmVhdG9yIGZ1bmN0aW9ucyAtLSB0YWtlIGEgcGF0dGVybiByYW5nZSwgcmV0dXJuIGFuIG9iamVjdAorICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBSYW5nZT4KKyAgICBib29zdDo6YWxnb3JpdGhtOjprbnV0aF9tb3JyaXNfcHJhdHQ8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT4KKyAgICBtYWtlX2tudXRoX21vcnJpc19wcmF0dCAoIGNvbnN0IFJhbmdlICZyICkgeworICAgICAgICByZXR1cm4gYm9vc3Q6OmFsZ29yaXRobTo6a251dGhfbW9ycmlzX3ByYXR0CisgICAgICAgICAgICA8dHlwZW5hbWUgYm9vc3Q6OnJhbmdlX2l0ZXJhdG9yPGNvbnN0IFJhbmdlPjo6dHlwZT4gKGJvb3N0OjpiZWdpbihyKSwgYm9vc3Q6OmVuZChyKSk7CisgICAgICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgUmFuZ2U+CisgICAgYm9vc3Q6OmFsZ29yaXRobTo6a251dGhfbW9ycmlzX3ByYXR0PHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxSYW5nZT46OnR5cGU+CisgICAgbWFrZV9rbnV0aF9tb3JyaXNfcHJhdHQgKCBSYW5nZSAmciApIHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjphbGdvcml0aG06OmtudXRoX21vcnJpc19wcmF0dAorICAgICAgICAgICAgPHR5cGVuYW1lIGJvb3N0OjpyYW5nZV9pdGVyYXRvcjxSYW5nZT46OnR5cGU+IChib29zdDo6YmVnaW4ociksIGJvb3N0OjplbmQocikpOworICAgICAgICB9Cit9fQorCisjZW5kaWYgIC8vIEJPT1NUX0FMR09SSVRITV9LTlVUSF9NT1JSSVNfUFJBVFRfU0VBUkNIX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zb3J0X3N1YnJhbmdlLmhwcApAQCAtMCwwICsxLDEwOSBAQAorLyogCisgICBDb3B5cmlnaHQgKGMpIE1hcnNoYWxsIENsb3cgMjAwOC0yMDEyLgorCisgICBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nCisgICBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworIFJldmlzaW9uIGhpc3Rvcnk6CisgICAyOCBTZXAgMjAxNSBtdGMgRmlyc3QgdmVyc2lvbgorICAgCisqLworCisvLy8gXGZpbGUgc29ydF9zdWJyYW5nZS5ocHAKKy8vLyBcYnJpZWYgU29ydCBhIHN1YnJhbmdlCisvLy8gXGF1dGhvciBNYXJzaGFsbCBDbG93CisvLy8KKy8vLyBTdWdnZXN0ZWQgYnkgU2VhbiBQYXJlbnQgaW4gaGlzIENwcENvbiAyMDE1IGtleW5vdGUKKworI2lmbmRlZiBCT09TVF9BTEdPUklUSE1fU09SVF9TVUJSQU5HRV9IUFAKKyNkZWZpbmUgQk9PU1RfQUxHT1JJVEhNX1NPUlRfU1VCUkFOR0VfSFBQCisKKyNpbmNsdWRlIDxmdW5jdGlvbmFsPiAgICAgICAvLyBGb3Igc3RkOjpsZXNzCisjaW5jbHVkZSA8aXRlcmF0b3I+ICAgICAgICAgLy8gRm9yIHN0ZDo6aXRlcmF0b3JfdHJhaXRzCisjaW5jbHVkZSA8YWxnb3JpdGhtPiAgICAgICAgLy8gRm9yIG50aF9lbGVtZW50IGFuZCBwYXJ0aWFsX3NvcnQKKworI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeyBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8vIFxmbiBzb3J0X3N1YnJhbmdlICggVCBjb25zdCYgdmFsLCAKKy8vLyAgICAgICAgICAgICAgIEl0ZXJhdG9yIGZpcnN0LCAgICAgSXRlcmF0b3IgbGFzdCwgCisvLy8gICAgICAgICAgICAgICBJdGVyYXRvciBzdWJfZmlyc3QsIEl0ZXJhdG9yIHN1Yl9sYXN0LCAKKy8vLyAgICAgICAgICAgICAgIFByZWQgcCApCisvLy8gXGJyaWVmIFNvcnQgdGhlIHN1YnJhbmdlIFtzdWJfZmlyc3QsIHN1Yl9sYXN0KSB0aGF0IGlzIGluc2lkZQorLy8vICAgICB0aGUgcmFuZ2UgW2ZpcnN0LCBsYXN0KSBhcyBpZiB5b3UgaGFkIHNvcnRlZCB0aGUgZW50aXJlIHJhbmdlLgorLy8vIAorLy8vIFxwYXJhbSBmaXJzdCAgICAgICBUaGUgc3RhcnQgb2YgdGhlIGxhcmdlciByYW5nZQorLy8vIFxwYXJhbSBsYXN0ICAgICAgICBUaGUgZW5kIG9mIHRoZSBsYXJnZXIgcmFuZ2UKKy8vLyBccGFyYW0gc3ViX2ZpcnN0ICAgVGhlIHN0YXJ0IG9mIHRoZSBzdWIgcmFuZ2UKKy8vLyBccGFyYW0gc3ViX2xhc3QgICAgVGhlIGVuZCBvZiB0aGUgc3ViIHJhbmdlCisvLy8gXHBhcmFtIHAgICAgICAgICAgIEEgcHJlZGljYXRlIHRvIHVzZSB0byBjb21wYXJlIHRoZSB2YWx1ZXMuCisvLy8gICAgICAgICAgICAgICAgICAgICAgICBwICggYSwgYiApIHJldHVybnMgYSBib29sZWFuLgorLy8vCisgIHRlbXBsYXRlPHR5cGVuYW1lIEl0ZXJhdG9yLCB0eXBlbmFtZSBQcmVkPiAKKyAgdm9pZCBzb3J0X3N1YnJhbmdlICgKKyAgCUl0ZXJhdG9yIGZpcnN0LCAgICAgSXRlcmF0b3IgbGFzdCwgCisgIAlJdGVyYXRvciBzdWJfZmlyc3QsIEl0ZXJhdG9yIHN1Yl9sYXN0LAorICAJUHJlZCBwKQorICB7CisgIAlpZiAoc3ViX2ZpcnN0ID09IHN1Yl9sYXN0KSByZXR1cm47IC8vIHRoZSBlbXB0eSBzdWItcmFuZ2UgaXMgYWxyZWFkeSBzb3J0ZWQuCisgIAkKKyAgCWlmIChzdWJfZmlyc3QgIT0gZmlyc3QpIHsgLy8gc3ViLXJhbmdlIGlzIGF0IHRoZSBzdGFydCwgZG9uJ3QgbmVlZCB0byBwYXJ0aXRpb24KKyAgCQkodm9pZCkgc3RkOjpudGhfZWxlbWVudChmaXJzdCwgc3ViX2ZpcnN0LCBsYXN0LCBwKTsKKyAgCQkrK3N1Yl9maXJzdDsKKyAgCQl9CisgIAlzdGQ6OnBhcnRpYWxfc29ydChzdWJfZmlyc3QsIHN1Yl9sYXN0LCBsYXN0LCBwKTsKKyAgfQorCisKKworICB0ZW1wbGF0ZTx0eXBlbmFtZSBJdGVyYXRvcj4gCisgIHZvaWQgc29ydF9zdWJyYW5nZSAoSXRlcmF0b3IgZmlyc3QsIEl0ZXJhdG9yIGxhc3QsIEl0ZXJhdG9yIHN1Yl9maXJzdCwgSXRlcmF0b3Igc3ViX2xhc3QpCisgIHsKKyAgCXR5cGVkZWYgdHlwZW5hbWUgc3RkOjppdGVyYXRvcl90cmFpdHM8SXRlcmF0b3I+Ojp2YWx1ZV90eXBlIHZhbHVlX3R5cGU7CisgIAlyZXR1cm4gc29ydF9zdWJyYW5nZShmaXJzdCwgbGFzdCwgc3ViX2ZpcnN0LCBzdWJfbGFzdCwgc3RkOjpsZXNzPHZhbHVlX3R5cGU+KCkpOworICB9CisKKy8vLyByYW5nZSB2ZXJzaW9ucz8KKworCisvLy8gXGZuIHBhcnRpdGlvbl9zdWJyYW5nZSAoIFQgY29uc3QmIHZhbCwgCisvLy8gICAgICAgICAgICAgICBJdGVyYXRvciBmaXJzdCwgICAgIEl0ZXJhdG9yIGxhc3QsIAorLy8vICAgICAgICAgICAgICAgSXRlcmF0b3Igc3ViX2ZpcnN0LCBJdGVyYXRvciBzdWJfbGFzdCwgCisvLy8gICAgICAgICAgICAgICBQcmVkIHAgKQorLy8vIFxicmllZiBHYXRoZXIgdGhlIGVsZW1lbnRzIG9mIHRoZSBzdWJyYW5nZSBbc3ViX2ZpcnN0LCBzdWJfbGFzdCkgdGhhdCBpcyAKKy8vLyAgICAgaW5zaWRlIHRoZSByYW5nZSBbZmlyc3QsIGxhc3QpIGFzIGlmIHlvdSBoYWQgc29ydGVkIHRoZSBlbnRpcmUgcmFuZ2UuCisvLy8gCisvLy8gXHBhcmFtIGZpcnN0ICAgICAgIFRoZSBzdGFydCBvZiB0aGUgbGFyZ2VyIHJhbmdlCisvLy8gXHBhcmFtIGxhc3QgICAgICAgIFRoZSBlbmQgb2YgdGhlIGxhcmdlciByYW5nZQorLy8vIFxwYXJhbSBzdWJfZmlyc3QgICBUaGUgc3RhcnQgb2YgdGhlIHN1YiByYW5nZQorLy8vIFxwYXJhbSBzdWJfbGFzdCAgICBUaGUgZW5kIG9mIHRoZSBzdWIgcmFuZ2UKKy8vLyBccGFyYW0gcCAgICAgICAgICAgQSBwcmVkaWNhdGUgdG8gdXNlIHRvIGNvbXBhcmUgdGhlIHZhbHVlcy4KKy8vLyAgICAgICAgICAgICAgICAgICAgICAgIHAgKCBhLCBiICkgcmV0dXJucyBhIGJvb2xlYW4uCisvLy8KKyAgdGVtcGxhdGU8dHlwZW5hbWUgSXRlcmF0b3IsIHR5cGVuYW1lIFByZWQ+IAorICB2b2lkIHBhcnRpdGlvbl9zdWJyYW5nZSAoCisgIAlJdGVyYXRvciBmaXJzdCwgICAgIEl0ZXJhdG9yIGxhc3QsIAorICAJSXRlcmF0b3Igc3ViX2ZpcnN0LCBJdGVyYXRvciBzdWJfbGFzdCwKKyAgCVByZWQgcCkKKyAgeworICAJaWYgKHN1Yl9maXJzdCAhPSBmaXJzdCkgeworICAJCSh2b2lkKSBzdGQ6Om50aF9lbGVtZW50KGZpcnN0LCBzdWJfZmlyc3QsIGxhc3QsIHApOworICAJCSsrc3ViX2ZpcnN0OworICAJCX0KKyAgCQorICAJaWYgKHN1Yl9sYXN0ICE9IGxhc3QpCisgIAkJKHZvaWQpIHN0ZDo6bnRoX2VsZW1lbnQoc3ViX2ZpcnN0LCBzdWJfbGFzdCwgbGFzdCwgcCk7CisgIH0KKworICB0ZW1wbGF0ZTx0eXBlbmFtZSBJdGVyYXRvcj4gCisgIHZvaWQgcGFydGl0aW9uX3N1YnJhbmdlIChJdGVyYXRvciBmaXJzdCwgSXRlcmF0b3IgbGFzdCwgSXRlcmF0b3Igc3ViX2ZpcnN0LCBJdGVyYXRvciBzdWJfbGFzdCkKKyAgeworICAJdHlwZWRlZiB0eXBlbmFtZSBzdGQ6Oml0ZXJhdG9yX3RyYWl0czxJdGVyYXRvcj46OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgCXJldHVybiBwYXJ0aXRpb25fc3VicmFuZ2UoZmlyc3QsIGxhc3QsIHN1Yl9maXJzdCwgc3ViX2xhc3QsIHN0ZDo6bGVzczx2YWx1ZV90eXBlPigpKTsKKyAgfQorCit9fQorCisjZW5kaWYgLy8gQk9PU1RfQUxHT1JJVEhNX1NPUlRfU1VCUkFOR0VfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy5ocHAKQEAgLTAsMCArMSwzMSBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgc3RyaW5nX2FsZ28uaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwNC4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfQUxHT19IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0FMR09fSFBQCisKKy8qISBcZmlsZQorICAgIEN1bXVsYXRpdmUgaW5jbHVkZSBmb3Igc3RyaW5nX2FsZ28gbGlicmFyeQorKi8KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkX2NvbnRhaW5lcnNfdHJhaXRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL3RyaW0uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY2FzZV9jb252LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL3ByZWRpY2F0ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL3NwbGl0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2pvaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvcmVwbGFjZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9lcmFzZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jbGFzc2lmaWNhdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kX2l0ZXJhdG9yLmhwcD4KKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19BTEdPX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvY2FzZV9jb252LmhwcApAQCAtMCwwICsxLDE3NiBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgY2FzZV9jb252LmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0NBU0VfQ09OVl9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NBU0VfQ09OVl9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxhbGdvcml0aG0+CisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3RyYW5zZm9ybV9pdGVyYXRvci5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9hc19saXRlcmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS92YWx1ZV90eXBlLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2Nhc2VfY29udi5ocHA+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgc2VxdWVuY2UgY2FzZS1jb252ZXJzaW9uIGFsZ29yaXRobXMuCisgICAgQWxnb3JpdGhtcyBjb252ZXJ0IGVhY2ggZWxlbWVudCBpbiB0aGUgaW5wdXQgc2VxdWVuY2UgdG8gdGhlCisgICAgZGVzaXJlZCBjYXNlIHVzaW5nIHByb3ZpZGVkIGxvY2FsZXMuCisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgdG9fbG93ZXIgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgQ29udmVydCB0byBsb3dlciBjYXNlCisgICAgICAgIC8qIQorICAgICAgICAgICAgRWFjaCBlbGVtZW50IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBjb252ZXJ0ZWQgdG8gbG93ZXIKKyAgICAgICAgICAgIGNhc2UuIFRoZSByZXN1bHQgaXMgYSBjb3B5IG9mIHRoZSBpbnB1dCBjb252ZXJ0ZWQgdG8gbG93ZXIgY2FzZS4KKyAgICAgICAgICAgIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2Ugb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCByYW5nZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjb252ZXJzaW9uCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAgICAgICAgIAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCAKKyAgICAgICAgdG9fbG93ZXJfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyYW5zZm9ybV9yYW5nZV9jb3B5KCAKKyAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpLAorICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRvX2xvd2VyRjwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgcmFuZ2VfdmFsdWU8UmFuZ2VUPjo6dHlwZSA+KExvYykpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIENvbnZlcnQgdG8gbG93ZXIgY2FzZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdG9fbG93ZXJfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0cmFuc2Zvcm1fcmFuZ2VfY29weTxTZXF1ZW5jZVQ+KAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0b19sb3dlckY8CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFNlcXVlbmNlVD46OnR5cGUgPihMb2MpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBDb252ZXJ0IHRvIGxvd2VyIGNhc2UKKyAgICAgICAgLyohCisgICAgICAgICAgICBFYWNoIGVsZW1lbnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlIGlzIGNvbnZlcnRlZCB0byBsb3dlcgorICAgICAgICAgICAgY2FzZS4gVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSByYW5nZQorICAgICAgICAgICAgXHBhcmFtIExvYyBhIGxvY2FsZSB1c2VkIGZvciBjb252ZXJzaW9uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFdyaXRhYmxlUmFuZ2VUPgorICAgICAgICBpbmxpbmUgdm9pZCB0b19sb3dlciggCisgICAgICAgICAgICBXcml0YWJsZVJhbmdlVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6dHJhbnNmb3JtX3JhbmdlKAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0b19sb3dlckY8CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFdyaXRhYmxlUmFuZ2VUPjo6dHlwZSA+KExvYykpOworICAgICAgICB9CisgICAgICAgIAorLy8gIHRvX3VwcGVyICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIENvbnZlcnQgdG8gdXBwZXIgY2FzZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIEVhY2ggZWxlbWVudCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UgaXMgY29udmVydGVkIHRvIHVwcGVyCisgICAgICAgICAgICBjYXNlLiBUaGUgcmVzdWx0IGlzIGEgY29weSBvZiB0aGUgaW5wdXQgY29udmVydGVkIHRvIHVwcGVyIGNhc2UuCisgICAgICAgICAgICBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCByYW5nZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjb252ZXJzaW9uCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCAKKyAgICAgICAgdG9fdXBwZXJfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyYW5zZm9ybV9yYW5nZV9jb3B5KCAKKyAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpLAorICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRvX3VwcGVyRjwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgcmFuZ2VfdmFsdWU8UmFuZ2VUPjo6dHlwZSA+KExvYykpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIENvbnZlcnQgdG8gdXBwZXIgY2FzZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdG9fdXBwZXJfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0cmFuc2Zvcm1fcmFuZ2VfY29weTxTZXF1ZW5jZVQ+KAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0b191cHBlckY8CisgICAgICAgICAgICAgICAgICAgIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFNlcXVlbmNlVD46OnR5cGUgPihMb2MpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBDb252ZXJ0IHRvIHVwcGVyIGNhc2UKKyAgICAgICAgLyohCisgICAgICAgICAgICBFYWNoIGVsZW1lbnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlIGlzIGNvbnZlcnRlZCB0byB1cHBlcgorICAgICAgICAgICAgY2FzZS4gVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgcmFuZ2UKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgYSBsb2NhbGUgdXNlZCBmb3IgY29udmVyc2lvbgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBXcml0YWJsZVJhbmdlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdG9fdXBwZXIoIAorICAgICAgICAgICAgV3JpdGFibGVSYW5nZVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyYW5zZm9ybV9yYW5nZSgKKyAgICAgICAgICAgICAgICA6OmJvb3N0Ojphc19saXRlcmFsKElucHV0KSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6dG9fdXBwZXJGPAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSByYW5nZV92YWx1ZTxXcml0YWJsZVJhbmdlVD46OnR5cGUgPihMb2MpKTsKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIG5hbWVzIHRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OnRvX2xvd2VyOworICAgIHVzaW5nIGFsZ29yaXRobTo6dG9fbG93ZXJfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OnRvX3VwcGVyOworICAgIHVzaW5nIGFsZ29yaXRobTo6dG9fdXBwZXJfY29weTsKKworfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfQ0FTRV9DT05WX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvY2xhc3NpZmljYXRpb24uaHBwCkBAIC0wLDAgKzEsMzEyIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBjbGFzc2lmaWNhdGlvbi5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19DTEFTU0lGSUNBVElPTl9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NMQVNTSUZJQ0FUSU9OX0hQUAorCisjaW5jbHVkZSA8YWxnb3JpdGhtPgorI2luY2x1ZGUgPGxvY2FsZT4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS92YWx1ZV90eXBlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9hc19saXRlcmFsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9jbGFzc2lmaWNhdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9wcmVkaWNhdGVfZmFjYWRlLmhwcD4KKworCisvKiEgXGZpbGUKKyAgICBDbGFzc2lmaWNhdGlvbiBwcmVkaWNhdGVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgbGlicmFyeSB0byBnaXZlIAorICAgIHNvbWUgbW9yZSBjb252ZW5pZW5jZSB3aGVuIHVzaW5nIGFsZ29yaXRobXMgbGlrZSBcYyB0cmltKCkgYW5kIFxjIGFsbCgpLiAKKyAgICBUaGV5IHdyYXAgZnVuY3Rpb25hbGl0eSBvZiBTVEwgY2xhc3NpZmljYXRpb24gZnVuY3Rpb25zICggZS5nLiBcYyBzdGQ6Omlzc3BhY2UoKSApCisgICAgaW50byBnZW5lcmljIGZ1bmN0b3JzLiAKKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBjbGFzc2lmaWNhdGlvbiBmdW5jdG9yIGdlbmVyYXRvciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlLiBUaGlzIHByZWRpY2F0ZSBob2xkcyBpZiB0aGUgaW5wdXQgaXMKKyAgICAgICAgICAgIG9mIHNwZWNpZmllZCBcYyBzdGQ6OmN0eXBlIGNhdGVnb3J5LgorCisgICAgICAgICAgICBccGFyYW0gVHlwZSBBIFxjIHN0ZDo6Y3R5cGUgY2F0ZWdvcnkKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2xhc3NpZmljYXRpb24KKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlIAorICAgICAgICAqLworICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19jbGFzc2lmaWVkRgorICAgICAgICBpc19jbGFzc2lmaWVkKHN0ZDo6Y3R5cGVfYmFzZTo6bWFzayBUeXBlLCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGKFR5cGUsIExvYyk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgaXNfc3BhY2UgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSBmb3IgdGhlIFxjIGN0eXBlX2Jhc2U6OnNwYWNlIGNhdGVnb3J5LiAgIAorCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZQorICAgICAgICAqLworICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19jbGFzc2lmaWVkRiAKKyAgICAgICAgaXNfc3BhY2UoY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppc19jbGFzc2lmaWVkRihzdGQ6OmN0eXBlX2Jhc2U6OnNwYWNlLCBMb2MpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIGlzX2FsbnVtIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdCB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgZm9yIHRoZSBcYyBjdHlwZV9iYXNlOjphbG51bSBjYXRlZ29yeS4gICAKKworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgCisgICAgICAgICovCisgICAgICAgIGlubGluZSBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGIAorICAgICAgICBpc19hbG51bShjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGKHN0ZDo6Y3R5cGVfYmFzZTo6YWxudW0sIExvYyk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgaXNfYWxwaGEgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSBmb3IgdGhlIFxjIGN0eXBlX2Jhc2U6OmFscGhhIGNhdGVnb3J5LiAgIAorCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgaW5saW5lIGRldGFpbDo6aXNfY2xhc3NpZmllZEYgCisgICAgICAgIGlzX2FscGhhKGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6aXNfY2xhc3NpZmllZEYoc3RkOjpjdHlwZV9iYXNlOjphbHBoYSwgTG9jKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBpc19jbnRybCBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlIGZvciB0aGUgXGMgY3R5cGVfYmFzZTo6Y250cmwgY2F0ZWdvcnkuICAgCisKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2xhc3NpZmljYXRpb24KKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlIAorICAgICAgICAqLworICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19jbGFzc2lmaWVkRiAKKyAgICAgICAgaXNfY250cmwoY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppc19jbGFzc2lmaWVkRihzdGQ6OmN0eXBlX2Jhc2U6OmNudHJsLCBMb2MpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIGlzX2RpZ2l0IHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdCB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgZm9yIHRoZSBcYyBjdHlwZV9iYXNlOjpkaWdpdCBjYXRlZ29yeS4gICAKKworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgCisgICAgICAgICovCisgICAgICAgIGlubGluZSBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGIAorICAgICAgICBpc19kaWdpdChjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGKHN0ZDo6Y3R5cGVfYmFzZTo6ZGlnaXQsIExvYyk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgaXNfZ3JhcGggcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSBmb3IgdGhlIFxjIGN0eXBlX2Jhc2U6OmdyYXBoIGNhdGVnb3J5LiAgIAorCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgaW5saW5lIGRldGFpbDo6aXNfY2xhc3NpZmllZEYKKyAgICAgICAgaXNfZ3JhcGgoY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppc19jbGFzc2lmaWVkRihzdGQ6OmN0eXBlX2Jhc2U6OmdyYXBoLCBMb2MpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIGlzX2xvd2VyIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdCB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgZm9yIHRoZSBcYyBjdHlwZV9iYXNlOjpsb3dlciBjYXRlZ29yeS4gICAKKworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgaW5saW5lIGRldGFpbDo6aXNfY2xhc3NpZmllZEYgCisgICAgICAgIGlzX2xvd2VyKGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6aXNfY2xhc3NpZmllZEYoc3RkOjpjdHlwZV9iYXNlOjpsb3dlciwgTG9jKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBpc19wcmludCBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlIGZvciB0aGUgXGMgY3R5cGVfYmFzZTo6cHJpbnQgY2F0ZWdvcnkuICAgCisKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2xhc3NpZmljYXRpb24KKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIGlzX2NsYXNzaWZpZWQgcHJlZGljYXRlIAorICAgICAgICAqLworICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19jbGFzc2lmaWVkRiAKKyAgICAgICAgaXNfcHJpbnQoY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppc19jbGFzc2lmaWVkRihzdGQ6OmN0eXBlX2Jhc2U6OnByaW50LCBMb2MpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIGlzX3B1bmN0IHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdCB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgZm9yIHRoZSBcYyBjdHlwZV9iYXNlOjpwdW5jdCBjYXRlZ29yeS4gICAKKworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaXNfY2xhc3NpZmllZCBwcmVkaWNhdGUgCisgICAgICAgICovCisgICAgICAgIGlubGluZSBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGIAorICAgICAgICBpc19wdW5jdChjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGKHN0ZDo6Y3R5cGVfYmFzZTo6cHVuY3QsIExvYyk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgaXNfdXBwZXIgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSBmb3IgdGhlIFxjIGN0eXBlX2Jhc2U6OnVwcGVyIGNhdGVnb3J5LiAgIAorCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgaW5saW5lIGRldGFpbDo6aXNfY2xhc3NpZmllZEYgCisgICAgICAgIGlzX3VwcGVyKGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6aXNfY2xhc3NpZmllZEYoc3RkOjpjdHlwZV9iYXNlOjp1cHBlciwgTG9jKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBpc194ZGlnaXQgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSBmb3IgdGhlIFxjIGN0eXBlX2Jhc2U6OnhkaWdpdCBjYXRlZ29yeS4gIAorCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpc19jbGFzc2lmaWVkIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgaW5saW5lIGRldGFpbDo6aXNfY2xhc3NpZmllZEYgCisgICAgICAgIGlzX3hkaWdpdChjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OmlzX2NsYXNzaWZpZWRGKHN0ZDo6Y3R5cGVfYmFzZTo6eGRpZ2l0LCBMb2MpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIGlzX2FueV9vZiBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGlzX2FueV9vZiBwcmVkaWNhdGUuIFRoZSBwcmVkaWNhdGUgaG9sZHMgaWYgdGhlIGlucHV0CisgICAgICAgICAgICBpcyBpbmNsdWRlZCBpbiB0aGUgc3BlY2lmaWVkIHNldCBvZiBjaGFyYWN0ZXJzLgorCisgICAgICAgICAgICBccGFyYW0gU2V0IEEgc2V0IG9mIGNoYXJhY3RlcnMgdG8gYmUgcmVjb2duaXplZAorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaXNfYW55X29mIHByZWRpY2F0ZSAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19hbnlfb2ZGPAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX3ZhbHVlPFJhbmdlVD46OnR5cGU+IAorICAgICAgICBpc19hbnlfb2YoIGNvbnN0IFJhbmdlVCYgU2V0ICkKKyAgICAgICAgeworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+IGxpdF9zZXQoYm9vc3Q6OmFzX2xpdGVyYWwoU2V0KSk7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppc19hbnlfb2ZGPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV92YWx1ZTxSYW5nZVQ+Ojp0eXBlPihsaXRfc2V0KTsgCisgICAgICAgIH0KKworICAgICAgICAvLyEgaXNfZnJvbV9yYW5nZSBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGlzX2Zyb21fcmFuZ2UgcHJlZGljYXRlLiBUaGUgcHJlZGljYXRlIGhvbGRzIGlmIHRoZSBpbnB1dAorICAgICAgICAgICAgaXMgaW5jbHVkZWQgaW4gdGhlIHNwZWNpZmllZCByYW5nZS4gKGkuZS4gRnJvbSA8PSBDaCA8PSBUbyApCisKKyAgICAgICAgICAgIFxwYXJhbSBGcm9tIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UKKyAgICAgICAgICAgIFxwYXJhbSBUbyBUaGUgZW5kIG9mIHRoZSByYW5nZQorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaXNfZnJvbV9yYW5nZSBwcmVkaWNhdGUgCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIENoYXJUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjppc19mcm9tX3JhbmdlRjxDaGFyVD4gaXNfZnJvbV9yYW5nZShDaGFyVCBGcm9tLCBDaGFyVCBUbykKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6aXNfZnJvbV9yYW5nZUY8Q2hhclQ+KEZyb20sVG8pOyAKKyAgICAgICAgfQorICAgICAgICAKKyAgICAgICAgLy8gcHJlZGljYXRlIGNvbWJpbmF0b3JzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIHByZWRpY2F0ZSAnYW5kJyBjb21wb3NpdGlvbiBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGNsYXNzX2FuZCBwcmVkaWNhdGUuIFRoaXMgcHJlZGljYXRlIGNhbiBiZSB1c2VkCisgICAgICAgICAgICB0byBsb2dpY2FsbHkgY29tYmluZSB0d28gY2xhc3NpZmljYXRpb24gcHJlZGljYXRlcy4gXGMgY2xhc3NfYW5kIGhvbGRzLAorICAgICAgICAgICAgaWYgYm90aCBwcmVkaWNhdGVzIHJldHVybiB0cnVlLgorCisgICAgICAgICAgICBccGFyYW0gUHJlZDEgVGhlIGZpcnN0IHByZWRpY2F0ZQorICAgICAgICAgICAgXHBhcmFtIFByZWQyIFRoZSBzZWNvbmQgcHJlZGljYXRlCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBjbGFzc19hbmQgcHJlZGljYXRlICAgICAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUHJlZDFULCB0eXBlbmFtZSBQcmVkMlQ+CisgICAgICAgIGlubGluZSBkZXRhaWw6OnByZWRfYW5kRjxQcmVkMVQsIFByZWQyVD4KKyAgICAgICAgb3BlcmF0b3ImJiggCisgICAgICAgICAgICBjb25zdCBwcmVkaWNhdGVfZmFjYWRlPFByZWQxVD4mIFByZWQxLCAKKyAgICAgICAgICAgIGNvbnN0IHByZWRpY2F0ZV9mYWNhZGU8UHJlZDJUPiYgUHJlZDIgKQorICAgICAgICB7ICAgIAorICAgICAgICAgICAgLy8gRG9pbmcgdGhlIHN0YXRpY19jYXN0IHdpdGggdGhlIHBvaW50ZXIgaW5zdGVhZCBvZiB0aGUgcmVmZXJlbmNlCisgICAgICAgICAgICAvLyBpcyBhIHdvcmthcm91bmQgZm9yIHNvbWUgY29tcGlsZXJzIHdoaWNoIGhhdmUgcHJvYmxlbXMgd2l0aAorICAgICAgICAgICAgLy8gc3RhdGljX2Nhc3QncyBvZiB0ZW1wbGF0ZSByZWZlcmVuY2VzLCBpLmUuIENXOC4gL2dyYWZpay8KKyAgICAgICAgICAgIHJldHVybiBkZXRhaWw6OnByZWRfYW5kRjxQcmVkMVQsUHJlZDJUPigKKyAgICAgICAgICAgICAgICAqc3RhdGljX2Nhc3Q8Y29uc3QgUHJlZDFUKj4oJlByZWQxKSwgCisgICAgICAgICAgICAgICAgKnN0YXRpY19jYXN0PGNvbnN0IFByZWQyVCo+KCZQcmVkMikgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBwcmVkaWNhdGUgJ29yJyBjb21wb3NpdGlvbiBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGNsYXNzX29yIHByZWRpY2F0ZS4gVGhpcyBwcmVkaWNhdGUgY2FuIGJlIHVzZWQKKyAgICAgICAgICAgIHRvIGxvZ2ljYWxseSBjb21iaW5lIHR3byBjbGFzc2lmaWNhdGlvbiBwcmVkaWNhdGVzLiBcYyBjbGFzc19vciBob2xkcywKKyAgICAgICAgICAgIGlmIG9uZSBvZiB0aGUgcHJlZGljYXRlcyByZXR1cm4gdHJ1ZS4KKworICAgICAgICAgICAgXHBhcmFtIFByZWQxIFRoZSBmaXJzdCBwcmVkaWNhdGUKKyAgICAgICAgICAgIFxwYXJhbSBQcmVkMiBUaGUgc2Vjb25kIHByZWRpY2F0ZQorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgY2xhc3Nfb3IgcHJlZGljYXRlICAgICAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUHJlZDFULCB0eXBlbmFtZSBQcmVkMlQ+CisgICAgICAgIGlubGluZSBkZXRhaWw6OnByZWRfb3JGPFByZWQxVCwgUHJlZDJUPgorICAgICAgICBvcGVyYXRvcnx8KCAKKyAgICAgICAgICAgIGNvbnN0IHByZWRpY2F0ZV9mYWNhZGU8UHJlZDFUPiYgUHJlZDEsIAorICAgICAgICAgICAgY29uc3QgcHJlZGljYXRlX2ZhY2FkZTxQcmVkMlQ+JiBQcmVkMiApCisgICAgICAgIHsgICAgCisgICAgICAgICAgICAvLyBEb2luZyB0aGUgc3RhdGljX2Nhc3Qgd2l0aCB0aGUgcG9pbnRlciBpbnN0ZWFkIG9mIHRoZSByZWZlcmVuY2UKKyAgICAgICAgICAgIC8vIGlzIGEgd29ya2Fyb3VuZCBmb3Igc29tZSBjb21waWxlcnMgd2hpY2ggaGF2ZSBwcm9ibGVtcyB3aXRoCisgICAgICAgICAgICAvLyBzdGF0aWNfY2FzdCdzIG9mIHRlbXBsYXRlIHJlZmVyZW5jZXMsIGkuZS4gQ1c4LiAvZ3JhZmlrLworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6cHJlZF9vckY8UHJlZDFULFByZWQyVD4oCisgICAgICAgICAgICAgICAgKnN0YXRpY19jYXN0PGNvbnN0IFByZWQxVCo+KCZQcmVkMSksIAorICAgICAgICAgICAgICAgICpzdGF0aWNfY2FzdDxjb25zdCBQcmVkMlQqPigmUHJlZDIpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBwcmVkaWNhdGUgbmVnYXRpb24gb3BlcmF0b3IKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGNsYXNzX25vdCBwcmVkaWNhdGUuIFRoaXMgcHJlZGljYXRlIHJlcHJlc2VudHMgYSBuZWdhdGlvbi4gCisgICAgICAgICAgICBcYyBjbGFzc19vciBob2xkcyBpZiBvZiB0aGUgcHJlZGljYXRlcyByZXR1cm4gZmFsc2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBQcmVkIFRoZSBwcmVkaWNhdGUgdG8gYmUgbmVnYXRlZAorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgY2xhc3Nfbm90IHByZWRpY2F0ZSAgICAgCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFByZWRUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjpwcmVkX25vdEY8UHJlZFQ+CisgICAgICAgIG9wZXJhdG9yISggY29uc3QgcHJlZGljYXRlX2ZhY2FkZTxQcmVkVD4mIFByZWQgKQorICAgICAgICB7CisgICAgICAgICAgICAvLyBEb2luZyB0aGUgc3RhdGljX2Nhc3Qgd2l0aCB0aGUgcG9pbnRlciBpbnN0ZWFkIG9mIHRoZSByZWZlcmVuY2UKKyAgICAgICAgICAgIC8vIGlzIGEgd29ya2Fyb3VuZCBmb3Igc29tZSBjb21waWxlcnMgd2hpY2ggaGF2ZSBwcm9ibGVtcyB3aXRoCisgICAgICAgICAgICAvLyBzdGF0aWNfY2FzdCdzIG9mIHRlbXBsYXRlIHJlZmVyZW5jZXMsIGkuZS4gQ1c4LiAvZ3JhZmlrLworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6cHJlZF9ub3RGPFByZWRUPigqc3RhdGljX2Nhc3Q8Y29uc3QgUHJlZFQqPigmUHJlZCkpOyAKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIG5hbWVzIHRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2NsYXNzaWZpZWQ7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc19zcGFjZTsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2FsbnVtOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfYWxwaGE7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc19jbnRybDsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2RpZ2l0OworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfZ3JhcGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc19sb3dlcjsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX3VwcGVyOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfcHJpbnQ7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc19wdW5jdDsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX3hkaWdpdDsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2FueV9vZjsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2Zyb21fcmFuZ2U7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX1BSRURJQ0FURV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbXBhcmUuaHBwCkBAIC0wLDAgKzEsMTk5IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBjb21wYXJlLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDA2LgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19DT01QQVJFX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfQ09NUEFSRV9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxsb2NhbGU+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgZWxlbWVudCBjb21wYXJpc29uIHByZWRpY2F0ZXMuIE1hbnkgYWxnb3JpdGhtcyBpbiB0aGlzIGxpYnJhcnkgY2FuCisgICAgdGFrZSBhbiBhZGRpdGlvbmFsIGFyZ3VtZW50IHdpdGggYSBwcmVkaWNhdGUgdXNlZCB0byBjb21wYXJlIGVsZW1lbnRzLgorICAgIFRoaXMgbWFrZXMgaXQgcG9zc2libGUsIGZvciBpbnN0YW5jZSwgdG8gaGF2ZSBjYXNlIGluc2Vuc2l0aXZlIHZlcnNpb25zCisgICAgb2YgdGhlIGFsZ29yaXRobXMuCisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisgICAgICAgIC8vICBpc19lcXVhbCBmdW5jdG9yICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIGlzX2VxdWFsIGZ1bmN0b3IKKyAgICAgICAgLyohCisgICAgICAgICAgICBTdGFuZGFyZCBTVEwgZXF1YWxfdG8gb25seSBoYW5kbGUgY29tcGFyaXNvbiBiZXR3ZWVuIGFyZ3VtZW50cworICAgICAgICAgICAgb2YgdGhlIHNhbWUgdHlwZS4gVGhpcyBpcyBhIGxlc3MgcmVzdHJpY3RpdmUgdmVyc2lvbiB3aGljaCB3cmFwcyBvcGVyYXRvciA9PS4KKyAgICAgICAgKi8KKyAgICAgICAgc3RydWN0IGlzX2VxdWFsCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vISBGdW5jdGlvbiBvcGVyYXRvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ29tcGFyZSB0d28gb3BlcmFuZHMgZm9yIGVxdWFsaXR5CisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFQxLCB0eXBlbmFtZSBUMiA+CisgICAgICAgICAgICAgICAgYm9vbCBvcGVyYXRvcigpKCBjb25zdCBUMSYgQXJnMSwgY29uc3QgVDImIEFyZzIgKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJldHVybiBBcmcxPT1BcmcyOworICAgICAgICAgICAgfQorICAgICAgICB9OworCisgICAgICAgIC8vISBjYXNlIGluc2Vuc2l0aXZlIHZlcnNpb24gb2YgaXNfZXF1YWwKKyAgICAgICAgLyohCisgICAgICAgICAgICBDYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24gcHJlZGljYXRlLiBDb21wYXJpc29uIGlzIGRvbmUgdXNpbmcKKyAgICAgICAgICAgIHNwZWNpZmllZCBsb2NhbGVzLgorICAgICAgICAqLworICAgICAgICBzdHJ1Y3QgaXNfaWVxdWFsCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vISBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgXHBhcmFtIExvYyBsb2NhbGVzIHVzZWQgZm9yIGNvbXBhcmlzb24KKyAgICAgICAgICAgICovCisgICAgICAgICAgICBpc19pZXF1YWwoIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApIDoKKyAgICAgICAgICAgICAgICBtX0xvYyggTG9jICkge30KKworICAgICAgICAgICAgLy8hIEZ1bmN0aW9uIG9wZXJhdG9yCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDb21wYXJlIHR3byBvcGVyYW5kcy4gQ2FzZSBpcyBpZ25vcmVkLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUMSwgdHlwZW5hbWUgVDIgPgorICAgICAgICAgICAgICAgIGJvb2wgb3BlcmF0b3IoKSggY29uc3QgVDEmIEFyZzEsIGNvbnN0IFQyJiBBcmcyICkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChfX0JPUkxBTkRDX18pICYmIChfX0JPUkxBTkRDX18gPj0gMHg1NjApICYmIChfX0JPUkxBTkRDX18gPD0gMHg1NjQpICYmICFkZWZpbmVkKF9VU0VfT0xEX1JXX1NUTCkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dG91cHBlcihBcmcxKT09c3RkOjp0b3VwcGVyKEFyZzIpOworICAgICAgICAgICAgICAgICNlbHNlCisgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6OnRvdXBwZXI8VDE+KEFyZzEsbV9Mb2MpPT1zdGQ6OnRvdXBwZXI8VDI+KEFyZzIsbV9Mb2MpOworICAgICAgICAgICAgICAgICNlbmRpZgorICAgICAgICAgICAgfQorCisgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICBzdGQ6OmxvY2FsZSBtX0xvYzsKKyAgICAgICAgfTsKKworICAgICAgICAvLyAgaXNfbGVzcyBmdW5jdG9yICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIGlzX2xlc3MgZnVuY3RvcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnZlbmllbnQgdmVyc2lvbiBvZiBzdGFuZGFyZCBzdGQ6Omxlc3MuIE9wZXJhdGlvbiBpcyB0ZW1wbGF0ZWQsIHRoZXJlZm9yZSBpdCBpcyAKKyAgICAgICAgICAgIG5vdCByZXF1aXJlZCB0byBzcGVjaWZ5IHRoZSBleGFjdCB0eXBlcyB1cG9uIHRoZSBjb25zdHJ1Y3Rpb24KKyAgICAgICAgICovCisgICAgICAgIHN0cnVjdCBpc19sZXNzCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vISBGdW5jdG9yIG9wZXJhdGlvbgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ29tcGFyZSB0d28gb3BlcmFuZHMgdXNpbmcgPiBvcGVyYXRvcgorICAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgVDEsIHR5cGVuYW1lIFQyID4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIGNvbnN0IFQxJiBBcmcxLCBjb25zdCBUMiYgQXJnMiApIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIEFyZzE8QXJnMjsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworCisgICAgICAgIC8vISBjYXNlIGluc2Vuc2l0aXZlIHZlcnNpb24gb2YgaXNfbGVzcworICAgICAgICAvKiEKKyAgICAgICAgICAgIENhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbiBwcmVkaWNhdGUuIENvbXBhcmlzb24gaXMgZG9uZSB1c2luZworICAgICAgICAgICAgc3BlY2lmaWVkIGxvY2FsZXMuCisgICAgICAgICovCisgICAgICAgIHN0cnVjdCBpc19pbGVzcworICAgICAgICB7CisgICAgICAgICAgICAvLyEgQ29uc3RydWN0b3IKKyAgICAgICAgICAgIC8qIQorICAgICAgICAgICAgICAgIFxwYXJhbSBMb2MgbG9jYWxlcyB1c2VkIGZvciBjb21wYXJpc29uCisgICAgICAgICAgICAqLworICAgICAgICAgICAgaXNfaWxlc3MoIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApIDoKKyAgICAgICAgICAgICAgICBtX0xvYyggTG9jICkge30KKworICAgICAgICAgICAgLy8hIEZ1bmN0aW9uIG9wZXJhdG9yCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDb21wYXJlIHR3byBvcGVyYW5kcy4gQ2FzZSBpcyBpZ25vcmVkLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUMSwgdHlwZW5hbWUgVDIgPgorICAgICAgICAgICAgICAgIGJvb2wgb3BlcmF0b3IoKSggY29uc3QgVDEmIEFyZzEsIGNvbnN0IFQyJiBBcmcyICkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChfX0JPUkxBTkRDX18pICYmIChfX0JPUkxBTkRDX18gPj0gMHg1NjApICYmIChfX0JPUkxBTkRDX18gPD0gMHg1NjQpICYmICFkZWZpbmVkKF9VU0VfT0xEX1JXX1NUTCkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dG91cHBlcihBcmcxKTxzdGQ6OnRvdXBwZXIoQXJnMik7CisgICAgICAgICAgICAgICAgI2Vsc2UKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dG91cHBlcjxUMT4oQXJnMSxtX0xvYyk8c3RkOjp0b3VwcGVyPFQyPihBcmcyLG1fTG9jKTsKKyAgICAgICAgICAgICAgICAjZW5kaWYKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgc3RkOjpsb2NhbGUgbV9Mb2M7CisgICAgICAgIH07CisKKyAgICAgICAgLy8gIGlzX25vdF9ncmVhdGVyIGZ1bmN0b3IgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgaXNfbm90X2dyZWF0ZXIgZnVuY3RvcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnZlbmllbnQgdmVyc2lvbiBvZiBzdGFuZGFyZCBzdGQ6Om5vdF9ncmVhdGVyX3RvLiBPcGVyYXRpb24gaXMgdGVtcGxhdGVkLCB0aGVyZWZvcmUgaXQgaXMgCisgICAgICAgICAgICBub3QgcmVxdWlyZWQgdG8gc3BlY2lmeSB0aGUgZXhhY3QgdHlwZXMgdXBvbiB0aGUgY29uc3RydWN0aW9uCisgICAgICAgICAqLworICAgICAgICBzdHJ1Y3QgaXNfbm90X2dyZWF0ZXIKKyAgICAgICAgeworICAgICAgICAgICAgLy8hIEZ1bmN0b3Igb3BlcmF0aW9uCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDb21wYXJlIHR3byBvcGVyYW5kcyB1c2luZyA+IG9wZXJhdG9yCisgICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUMSwgdHlwZW5hbWUgVDIgPgorICAgICAgICAgICAgICAgIGJvb2wgb3BlcmF0b3IoKSggY29uc3QgVDEmIEFyZzEsIGNvbnN0IFQyJiBBcmcyICkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gQXJnMTw9QXJnMjsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKworCisgICAgICAgIC8vISBjYXNlIGluc2Vuc2l0aXZlIHZlcnNpb24gb2YgaXNfbm90X2dyZWF0ZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24gcHJlZGljYXRlLiBDb21wYXJpc29uIGlzIGRvbmUgdXNpbmcKKyAgICAgICAgICAgIHNwZWNpZmllZCBsb2NhbGVzLgorICAgICAgICAqLworICAgICAgICBzdHJ1Y3QgaXNfbm90X2lncmVhdGVyCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vISBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgXHBhcmFtIExvYyBsb2NhbGVzIHVzZWQgZm9yIGNvbXBhcmlzb24KKyAgICAgICAgICAgICovCisgICAgICAgICAgICBpc19ub3RfaWdyZWF0ZXIoIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApIDoKKyAgICAgICAgICAgICAgICBtX0xvYyggTG9jICkge30KKworICAgICAgICAgICAgLy8hIEZ1bmN0aW9uIG9wZXJhdG9yCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDb21wYXJlIHR3byBvcGVyYW5kcy4gQ2FzZSBpcyBpZ25vcmVkLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUMSwgdHlwZW5hbWUgVDIgPgorICAgICAgICAgICAgICAgIGJvb2wgb3BlcmF0b3IoKSggY29uc3QgVDEmIEFyZzEsIGNvbnN0IFQyJiBBcmcyICkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChfX0JPUkxBTkRDX18pICYmIChfX0JPUkxBTkRDX18gPj0gMHg1NjApICYmIChfX0JPUkxBTkRDX18gPD0gMHg1NjQpICYmICFkZWZpbmVkKF9VU0VfT0xEX1JXX1NUTCkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dG91cHBlcihBcmcxKTw9c3RkOjp0b3VwcGVyKEFyZzIpOworICAgICAgICAgICAgICAgICNlbHNlCisgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6OnRvdXBwZXI8VDE+KEFyZzEsbV9Mb2MpPD1zdGQ6OnRvdXBwZXI8VDI+KEFyZzIsbV9Mb2MpOworICAgICAgICAgICAgICAgICNlbmRpZgorICAgICAgICAgICAgfQorCisgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICBzdGQ6OmxvY2FsZSBtX0xvYzsKKyAgICAgICAgfTsKKworCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIG5hbWVzIHRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2VxdWFsOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfaWVxdWFsOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfbGVzczsKKyAgICB1c2luZyBhbGdvcml0aG06OmlzX2lsZXNzOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXNfbm90X2dyZWF0ZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc19ub3RfaWdyZWF0ZXI7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfQ09NUEFSRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmNlcHQuaHBwCkBAIC0wLDAgKzEsODMgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IGNvbmNlcHQuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfQ09OQ0VQVF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NPTkNFUFRfSFBQCisKKyNpbmNsdWRlIDxib29zdC9jb25jZXB0X2NoZWNrLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworLyohIFxmaWxlIAorICAgIERlZmluZXMgY29uY2VwdHMgdXNlZCBpbiBzdHJpbmdfYWxnbyBsaWJyYXJ5CisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisgICAgICAgIC8vISBGaW5kZXIgY29uY2VwdAorICAgICAgICAvKiEKKyAgICAgICAgICAgIERlZmluZXMgdGhlIEZpbmRlciBjb25jZXB0LiBGaW5kZXIgaXMgYSBmdW5jdG9yIHdoaWNoIHNlbGVjdHMKKyAgICAgICAgICAgIGFuIGFyYml0cmFyeSBwYXJ0IG9mIGEgc3RyaW5nLiBTZWFyY2ggaXMgcGVyZm9ybWVkIG9uCisgICAgICAgICAgICB0aGUgcmFuZ2Ugc3BlY2lmaWVkIGJ5IHN0YXJ0aW5nIGFuZCBlbmRpbmcgaXRlcmF0b3JzLgorCisgICAgICAgICAgICBSZXN1bHQgb2YgdGhlIGZpbmQgb3BlcmF0aW9uIG11c3QgYmUgY29udmVydGlibGUgdG8gaXRlcmF0b3JfcmFuZ2UuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQsIHR5cGVuYW1lIEl0ZXJhdG9yVD4KKyAgICAgICAgc3RydWN0IEZpbmRlckNvbmNlcHQKKyAgICAgICAgeworICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxJdGVyYXRvclQ+IHJhbmdlOworICAgICAgICBwdWJsaWM6CisgICAgICAgICAgICB2b2lkIGNvbnN0cmFpbnRzKCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyAgICAgICAgICAgICAgICByPSgqcEYpKGksaSk7CisgICAgICAgICAgICB9CisgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICByYW5nZSByOworICAgICAgICAgICAgSXRlcmF0b3JUIGk7CisgICAgICAgICAgICBGaW5kZXJUKiBwRjsgICAgCisgICAgICAgIH07IC8vIEZpbmRlcl9jb25jZXB0CisKKyAgICAgICAgCisgICAgICAgIC8vISBGb3JtYXR0ZXIgY29uY2VwdAorICAgICAgICAvKiEKKyAgICAgICAgICAgIERlZmluZXMgdGhlIEZvcm1hdHRlciBjb25jZXB0LiBGb3JtYXR0ZXIgaXMgYSBmdW5jdG9yLCB3aGljaAorICAgICAgICAgICAgdGFrZXMgYSByZXN1bHQgZnJvbSBhIGZpbmRlciBvcGVyYXRpb24gYW5kIHRyYW5zZm9ybXMgaXQKKyAgICAgICAgICAgIGluIGEgc3BlY2lmaWMgd2F5LgorCisgICAgICAgICAgICBSZXN1bHQgbXVzdCBiZSBhIGNvbnRhaW5lciBzdXBwb3J0ZWQgYnkgY29udGFpbmVyX3RyYWl0cywgCisgICAgICAgICAgICBvciBhIHJlZmVyZW5jZSB0byBpdC4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRm9ybWF0dGVyVCwgdHlwZW5hbWUgRmluZGVyVCwgdHlwZW5hbWUgSXRlcmF0b3JUPgorICAgICAgICBzdHJ1Y3QgRm9ybWF0dGVyQ29uY2VwdAorICAgICAgICB7CisgICAgICAgIHB1YmxpYzoKKyAgICAgICAgICAgIHZvaWQgY29uc3RyYWludHMoKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKCgqcEZvKSggKCpwRikoaSxpKSApKTsKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoKCpwRm8pKCAoKnBGKShpLGkpICkpOworICAgICAgICAgICAgfQorICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgSXRlcmF0b3JUIGk7CisgICAgICAgICAgICBGaW5kZXJUKiBwRjsKKyAgICAgICAgICAgIEZvcm1hdHRlclQgKnBGbzsKKyAgICAgICAgfTsgLy8gRm9ybWF0dGVyQ29uY2VwdDsKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfQ09OQ0VQVF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHAKQEAgLTAsMCArMSwyOCBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgY29uZmlnLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0NPTkZJR19IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NPTkZJR19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL3dvcmthcm91bmQuaHBwPgorCisjaWZkZWYgQk9PU1RfU1RSSU5HX0RFRFVDRURfVFlQRU5BTUUKKyMgICBlcnJvciAibWFjcm8gYWxyZWFkeSBkZWZpbmVkISIKKyNlbmRpZgorCisjZGVmaW5lIEJPT1NUX1NUUklOR19UWVBFTkFNRSBCT09TVF9ERURVQ0VEX1RZUEVOQU1FCisKKy8vIE1ldHJvd2Vya3Mgd29ya2Fyb3VuZAorI2lmIEJPT1NUX1dPUktBUk9VTkQoX19NV0VSS1NfXywgPD0gMHgzMDAzKSAvLyA4LngKKyNwcmFnbWEgcGFyc2VfZnVuY190ZW1wbCBvZmYKKyNlbmRpZgorCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19DT05GSUdfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25zdGFudHMuaHBwCkBAIC0wLDAgKzEsMzYgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IGNvbnN0YW50cy5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19DT05TVEFOVFNfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19DT05TVEFOVFNfSFBQCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKyAgICAvLyEgVG9rZW4gY29tcHJlc3Npb24gbW9kZSAKKyAgICAvKiEKKyAgICAgICAgU3BlY2lmaWVzIHRva2VuIGNvbXByZXNzaW9uIG1vZGUgZm9yIHRoZSB0b2tlbl9maW5kZXIuCisgICAgKi8KKyAgICBlbnVtIHRva2VuX2NvbXByZXNzX21vZGVfdHlwZQorICAgIHsKKyAgICAgICAgdG9rZW5fY29tcHJlc3Nfb24sICAgIC8vITwgQ29tcHJlc3MgYWRqYWNlbnQgdG9rZW5zCisgICAgICAgIHRva2VuX2NvbXByZXNzX29mZiAgLy8hPCBEbyBub3QgY29tcHJlc3MgYWRqYWNlbnQgdG9rZW5zCisgICAgfTsKKyAgICAKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KKworICAgIC8vIHB1bGwgdGhlIG5hbWVzIHRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OnRva2VuX2NvbXByZXNzX29uOworICAgIHVzaW5nIGFsZ29yaXRobTo6dG9rZW5fY29tcHJlc3Nfb2ZmOworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19DT05TVEFOVFNfSFBQCisKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9jYXNlX2NvbnYuaHBwCkBAIC0wLDAgKzEsMTIzIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBzdHJpbmdfZnVuY3QuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfQ0FTRV9DT05WX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NBU0VfQ09OVl9ERVRBSUxfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisKKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9tYWtlX3Vuc2lnbmVkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKyAgICAgICAgbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vICBjYXNlIGNvbnZlcnNpb24gZnVuY3RvcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA+PSAxNDAwKQorI3ByYWdtYSB3YXJuaW5nKHB1c2gpCisjcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTo0NTEyKSAvL2Fzc2lnbm1lbnQgb3BlcmF0b3IgY291bGQgbm90IGJlIGdlbmVyYXRlZAorI2VuZGlmCisKKyAgICAgICAgICAgIC8vIGEgdG9sb3dlciBmdW5jdG9yCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgIHN0cnVjdCB0b19sb3dlckYgOiBwdWJsaWMgc3RkOjp1bmFyeV9mdW5jdGlvbjxDaGFyVCwgQ2hhclQ+CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IKKyAgICAgICAgICAgICAgICB0b19sb3dlckYoIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2MgKSA6IG1fTG9jKCAmTG9jICkge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIENoYXJUIG9wZXJhdG9yICgpKCBDaGFyVCBDaCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChfX0JPUkxBTkRDX18pICYmIChfX0JPUkxBTkRDX18gPj0gMHg1NjApICYmIChfX0JPUkxBTkRDX18gPD0gMHg1NjQpICYmICFkZWZpbmVkKF9VU0VfT0xEX1JXX1NUTCkKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6OnRvbG93ZXIoIHN0YXRpY19jYXN0PHR5cGVuYW1lIGJvb3N0OjptYWtlX3Vuc2lnbmVkIDxDaGFyVD46OnR5cGU+ICggQ2ggKSk7CisgICAgICAgICAgICAgICAgICAgICNlbHNlCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjp0b2xvd2VyPENoYXJUPiggQ2gsICptX0xvYyApOworICAgICAgICAgICAgICAgICAgICAjZW5kaWYKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlKiBtX0xvYzsKKyAgICAgICAgICAgIH07CisKKyAgICAgICAgICAgIC8vIGEgdG91cHBlciBmdW5jdG9yCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgIHN0cnVjdCB0b191cHBlckYgOiBwdWJsaWMgc3RkOjp1bmFyeV9mdW5jdGlvbjxDaGFyVCwgQ2hhclQ+CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IKKyAgICAgICAgICAgICAgICB0b191cHBlckYoIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2MgKSA6IG1fTG9jKCAmTG9jICkge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIENoYXJUIG9wZXJhdG9yICgpKCBDaGFyVCBDaCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChfX0JPUkxBTkRDX18pICYmIChfX0JPUkxBTkRDX18gPj0gMHg1NjApICYmIChfX0JPUkxBTkRDX18gPD0gMHg1NjQpICYmICFkZWZpbmVkKF9VU0VfT0xEX1JXX1NUTCkKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6OnRvdXBwZXIoIHN0YXRpY19jYXN0PHR5cGVuYW1lIGJvb3N0OjptYWtlX3Vuc2lnbmVkIDxDaGFyVD46OnR5cGU+ICggQ2ggKSk7CisgICAgICAgICAgICAgICAgICAgICNlbHNlCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjp0b3VwcGVyPENoYXJUPiggQ2gsICptX0xvYyApOworICAgICAgICAgICAgICAgICAgICAjZW5kaWYKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlKiBtX0xvYzsKKyAgICAgICAgICAgIH07CisKKyNpZiBCT09TVF9XT1JLQVJPVU5EKEJPT1NUX01TVkMsID49IDE0MDApCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKy8vIGFsZ29yaXRobSBpbXBsZW1lbnRhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCisKKyAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBhIHJhbmdlCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsIHR5cGVuYW1lIFJhbmdlVCwgdHlwZW5hbWUgRnVuY3RvclQ+CisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgdHJhbnNmb3JtX3JhbmdlX2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgICAgIEZ1bmN0b3JUIEZ1bmN0b3IpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dHJhbnNmb3JtKCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4oSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6ZW5kKElucHV0KSwgCisgICAgICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICAgICAgRnVuY3Rvcik7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBhIHJhbmdlIChpbi1wbGFjZSkKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVCwgdHlwZW5hbWUgRnVuY3RvclQ+CisgICAgICAgICAgICB2b2lkIHRyYW5zZm9ybV9yYW5nZSgKKyAgICAgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgICAgIEZ1bmN0b3JUIEZ1bmN0b3IpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgc3RkOjp0cmFuc2Zvcm0oIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4oSW5wdXQpLAorICAgICAgICAgICAgICAgICAgICBGdW5jdG9yKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIEZ1bmN0b3JUPgorICAgICAgICAgICAgaW5saW5lIFNlcXVlbmNlVCB0cmFuc2Zvcm1fcmFuZ2VfY29weSggCisgICAgICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwgCisgICAgICAgICAgICAgICAgRnVuY3RvclQgRnVuY3RvcikKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gU2VxdWVuY2VUKAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjptYWtlX3RyYW5zZm9ybV9pdGVyYXRvcigKKyAgICAgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKElucHV0KSwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZ1bmN0b3IpLAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjptYWtlX3RyYW5zZm9ybV9pdGVyYXRvcigKKyAgICAgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICAgICAgRnVuY3RvcikpOworICAgICAgICAgICAgfQorCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19DQVNFX0NPTlZfREVUQUlMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2NsYXNzaWZpY2F0aW9uLmhwcApAQCAtMCwwICsxLDM1MyBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgY2xhc3NpZmljYXRpb24uaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vIAorLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0NMQVNTSUZJQ0FUSU9OX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0NMQVNTSUZJQ0FUSU9OX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxhbGdvcml0aG0+CisjaW5jbHVkZSA8ZnVuY3Rpb25hbD4KKyNpbmNsdWRlIDxsb2NhbGU+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvcHJlZGljYXRlX2ZhY2FkZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2NvbnN0LmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKyAgICAgICAgbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vICBjbGFzc2lmaWNhdGlvbiBmdW5jdG9ycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgIC8vIGlzX2NsYXNzaWZpZWQgZnVuY3RvcgorICAgICAgICAgICAgc3RydWN0IGlzX2NsYXNzaWZpZWRGIDoKKyAgICAgICAgICAgICAgICBwdWJsaWMgcHJlZGljYXRlX2ZhY2FkZTxpc19jbGFzc2lmaWVkRj4KKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBCb29zdC5SZXN1bHRPZiBzdXBwb3J0CisgICAgICAgICAgICAgICAgdHlwZWRlZiBib29sIHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IgZnJvbSBhIGxvY2FsZQorICAgICAgICAgICAgICAgIGlzX2NsYXNzaWZpZWRGKHN0ZDo6Y3R5cGVfYmFzZTo6bWFzayBUeXBlLCBzdGQ6OmxvY2FsZSBjb25zdCAmIExvYyA9IHN0ZDo6bG9jYWxlKCkpIDoKKyAgICAgICAgICAgICAgICAgICAgbV9UeXBlKFR5cGUpLCBtX0xvY2FsZShMb2MpIHt9CisgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgQ2hhclQ+CisgICAgICAgICAgICAgICAgYm9vbCBvcGVyYXRvcigpKCBDaGFyVCBDaCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RkOjp1c2VfZmFjZXQ8IHN0ZDo6Y3R5cGU8Q2hhclQ+ID4obV9Mb2NhbGUpLmlzKCBtX1R5cGUsIENoICk7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgI2lmIGRlZmluZWQoX19CT1JMQU5EQ19fKSAmJiAoX19CT1JMQU5EQ19fID49IDB4NTYwKSAmJiAoX19CT1JMQU5EQ19fIDw9IDB4NTgyKSAmJiAhZGVmaW5lZChfVVNFX09MRF9SV19TVEwpCisgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlPD4KKyAgICAgICAgICAgICAgICAgICAgYm9vbCBvcGVyYXRvcigpKCBjaGFyIGNvbnN0IENoICkgY29uc3QKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6dXNlX2ZhY2V0PCBzdGQ6OmN0eXBlPGNoYXI+ID4obV9Mb2NhbGUpLmlzKCBtX1R5cGUsIENoICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAjZW5kaWYKKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBzdGQ6OmN0eXBlX2Jhc2U6Om1hc2sgbV9UeXBlOworICAgICAgICAgICAgICAgIHN0ZDo6bG9jYWxlIG1fTG9jYWxlOworICAgICAgICAgICAgfTsKKworCisgICAgICAgICAgICAvLyBpc19hbnlfb2YgZnVuY3RvcgorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICByZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIGZyb20gdGhlIHNwZWNpZmllZCBzZXQKKyAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgIHN0cnVjdCBpc19hbnlfb2ZGIDoKKyAgICAgICAgICAgICAgICBwdWJsaWMgcHJlZGljYXRlX2ZhY2FkZTxpc19hbnlfb2ZGPENoYXJUPiA+CisgICAgICAgICAgICB7CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIC8vIHNldCBjYW5ub3Qgb3BlcmF0ZSBvbiBjb25zdCB2YWx1ZS10eXBlCisgICAgICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSA6OmJvb3N0OjpyZW1vdmVfY29uc3Q8Q2hhclQ+Ojp0eXBlIHNldF92YWx1ZV90eXBlOworCisgICAgICAgICAgICBwdWJsaWM6ICAgICAKKyAgICAgICAgICAgICAgICAvLyBCb29zdC5SZXN1bHRPZiBzdXBwb3J0CisgICAgICAgICAgICAgICAgdHlwZWRlZiBib29sIHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgICAgICAgICAgaXNfYW55X29mRiggY29uc3QgUmFuZ2VUJiBSYW5nZSApIDogbV9TaXplKDApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgbV9TdG9yYWdlLm1fZHluU2V0PTA7CisKKyAgICAgICAgICAgICAgICAgICAgc3RkOjpzaXplX3QgU2l6ZT06OmJvb3N0OjpkaXN0YW5jZShSYW5nZSk7CisgICAgICAgICAgICAgICAgICAgIG1fU2l6ZT1TaXplOworICAgICAgICAgICAgICAgICAgICBzZXRfdmFsdWVfdHlwZSogU3RvcmFnZT0wOworCisgICAgICAgICAgICAgICAgICAgIGlmKHVzZV9maXhlZF9zdG9yYWdlKG1fU2l6ZSkpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBmaXhlZCBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlPSZtX1N0b3JhZ2UubV9maXhTZXRbMF07CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgZHluYW1pYyBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgICAgICBtX1N0b3JhZ2UubV9keW5TZXQ9bmV3IHNldF92YWx1ZV90eXBlW21fU2l6ZV07CisgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlPW1fU3RvcmFnZS5tX2R5blNldDsKKyAgICAgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBmaXhlZCBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgIDo6c3RkOjpjb3B5KDo6Ym9vc3Q6OmJlZ2luKFJhbmdlKSwgOjpib29zdDo6ZW5kKFJhbmdlKSwgU3RvcmFnZSk7CisgICAgICAgICAgICAgICAgICAgIDo6c3RkOjpzb3J0KFN0b3JhZ2UsIFN0b3JhZ2UrbV9TaXplKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBDb3B5IGNvbnN0cnVjdG9yCisgICAgICAgICAgICAgICAgaXNfYW55X29mRihjb25zdCBpc19hbnlfb2ZGJiBPdGhlcikgOiBtX1NpemUoT3RoZXIubV9TaXplKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gUHJlcGFyZSBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgIG1fU3RvcmFnZS5tX2R5blNldD0wOyAgICAgICAgICAgICAgIAorICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRfdmFsdWVfdHlwZSogU3JjU3RvcmFnZT0wOworICAgICAgICAgICAgICAgICAgICBzZXRfdmFsdWVfdHlwZSogRGVzdFN0b3JhZ2U9MDsKKworICAgICAgICAgICAgICAgICAgICBpZih1c2VfZml4ZWRfc3RvcmFnZShtX1NpemUpKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgZml4ZWQgc3RvcmFnZQorICAgICAgICAgICAgICAgICAgICAgICAgRGVzdFN0b3JhZ2U9Jm1fU3RvcmFnZS5tX2ZpeFNldFswXTsKKyAgICAgICAgICAgICAgICAgICAgICAgIFNyY1N0b3JhZ2U9Jk90aGVyLm1fU3RvcmFnZS5tX2ZpeFNldFswXTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBkeW5hbWljIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fU3RvcmFnZS5tX2R5blNldD1uZXcgc2V0X3ZhbHVlX3R5cGVbbV9TaXplXTsKKyAgICAgICAgICAgICAgICAgICAgICAgIERlc3RTdG9yYWdlPW1fU3RvcmFnZS5tX2R5blNldDsKKyAgICAgICAgICAgICAgICAgICAgICAgIFNyY1N0b3JhZ2U9T3RoZXIubV9TdG9yYWdlLm1fZHluU2V0OworICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGZpeGVkIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgOjpzdGQ6Om1lbWNweShEZXN0U3RvcmFnZSwgU3JjU3RvcmFnZSwgc2l6ZW9mKHNldF92YWx1ZV90eXBlKSptX1NpemUpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIERlc3RydWN0b3IKKyAgICAgICAgICAgICAgICB+aXNfYW55X29mRigpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpZighdXNlX2ZpeGVkX3N0b3JhZ2UobV9TaXplKSAmJiBtX1N0b3JhZ2UubV9keW5TZXQhPTApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBbXSBtX1N0b3JhZ2UubV9keW5TZXQ7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBBc3NpZ25tZW50CisgICAgICAgICAgICAgICAgaXNfYW55X29mRiYgb3BlcmF0b3I9KGNvbnN0IGlzX2FueV9vZkYmIE90aGVyKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHNlbGYgYXNzaWdubWVudAorICAgICAgICAgICAgICAgICAgICBpZih0aGlzPT0mT3RoZXIpIHJldHVybiAqdGhpczsKKworICAgICAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIHN0b3JhZ2UgICAgICAgICAgICAgCisgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldF92YWx1ZV90eXBlKiBTcmNTdG9yYWdlOworICAgICAgICAgICAgICAgICAgICBzZXRfdmFsdWVfdHlwZSogRGVzdFN0b3JhZ2U7CisKKyAgICAgICAgICAgICAgICAgICAgaWYodXNlX2ZpeGVkX3N0b3JhZ2UoT3RoZXIubV9TaXplKSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGZpeGVkIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgICAgIERlc3RTdG9yYWdlPSZtX1N0b3JhZ2UubV9maXhTZXRbMF07CisgICAgICAgICAgICAgICAgICAgICAgICBTcmNTdG9yYWdlPSZPdGhlci5tX1N0b3JhZ2UubV9maXhTZXRbMF07CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBvbGQgc3RvcmFnZSBpZiB3YXMgcHJlc2VudAorICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXVzZV9maXhlZF9zdG9yYWdlKG1fU2l6ZSkgJiYgbV9TdG9yYWdlLm1fZHluU2V0IT0wKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBbXSBtX1N0b3JhZ2UubV9keW5TZXQ7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBuZXcgc2l6ZQorICAgICAgICAgICAgICAgICAgICAgICAgbV9TaXplPU90aGVyLm1fU2l6ZTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyIHVzZXMgZHluYW1pYyBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgICAgICBTcmNTdG9yYWdlPU90aGVyLm1fU3RvcmFnZS5tX2R5blNldDsKKworICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hhdCBraW5kIG9mIHN0b3JhZ2UgYXJlIHdlIHVzaW5nIHJpZ2h0IG5vdworICAgICAgICAgICAgICAgICAgICAgICAgaWYodXNlX2ZpeGVkX3N0b3JhZ2UobV9TaXplKSkKKyAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2luZyBmaXhlZCBzdG9yYWdlLCBhbGxvY2F0ZSBuZXcKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRfdmFsdWVfdHlwZSogcFRlbXA9bmV3IHNldF92YWx1ZV90eXBlW090aGVyLm1fU2l6ZV07CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzdFN0b3JhZ2U9cFRlbXA7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgbV9TdG9yYWdlLm1fZHluU2V0PXBUZW1wOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1fU2l6ZT1PdGhlci5tX1NpemU7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNpbmcgZHluYW1pYyBzdG9yYWdlLCBjaGVjayBpZiBjYW4gcmV1c2UKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtX1N0b3JhZ2UubV9keW5TZXQhPTAgJiYgbV9TaXplPj1PdGhlci5tX1NpemUgJiYgbV9TaXplPE90aGVyLm1fU2l6ZSoyKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV1c2UgdGhlIGN1cnJlbnQgc3RvcmFnZQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXN0U3RvcmFnZT1tX1N0b3JhZ2UubV9keW5TZXQ7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1fU2l6ZT1PdGhlci5tX1NpemU7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG9jYXRlIHRoZSBuZXcgb25lCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldF92YWx1ZV90eXBlKiBwVGVtcD1uZXcgc2V0X3ZhbHVlX3R5cGVbT3RoZXIubV9TaXplXTsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzdFN0b3JhZ2U9cFRlbXA7CisgICAgICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIG9sZCBzdG9yYWdlIGlmIG5lY2Vzc2FyeQorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtX1N0b3JhZ2UubV9keW5TZXQhPTApCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBbXSBtX1N0b3JhZ2UubV9keW5TZXQ7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIG5ldyBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1fU3RvcmFnZS5tX2R5blNldD1wVGVtcDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IG5ldyBzaXplCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1fU2l6ZT1PdGhlci5tX1NpemU7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgLy8gQ29weSB0aGUgZGF0YQorICAgICAgICAgICAgICAgICAgICA6OnN0ZDo6bWVtY3B5KERlc3RTdG9yYWdlLCBTcmNTdG9yYWdlLCBzaXplb2Yoc2V0X3ZhbHVlX3R5cGUpKm1fU2l6ZSk7CisKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuICp0aGlzOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIENoYXIyVD4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIENoYXIyVCBDaCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRfdmFsdWVfdHlwZSogU3RvcmFnZT0KKyAgICAgICAgICAgICAgICAgICAgICAgICh1c2VfZml4ZWRfc3RvcmFnZShtX1NpemUpKQorICAgICAgICAgICAgICAgICAgICAgICAgPyAmbV9TdG9yYWdlLm1fZml4U2V0WzBdCisgICAgICAgICAgICAgICAgICAgICAgICA6IG1fU3RvcmFnZS5tX2R5blNldDsKKworICAgICAgICAgICAgICAgICAgICByZXR1cm4gOjpzdGQ6OmJpbmFyeV9zZWFyY2goU3RvcmFnZSwgU3RvcmFnZSttX1NpemUsIENoKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzaXplIGlzIGVsaWdpYmxlIGZvciBmaXhlZCBzdG9yYWdlCisgICAgICAgICAgICAgICAgc3RhdGljIGJvb2wgdXNlX2ZpeGVkX3N0b3JhZ2Uoc3RkOjpzaXplX3Qgc2l6ZSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaXplPD1zaXplb2Yoc2V0X3ZhbHVlX3R5cGUqKSoyOworICAgICAgICAgICAgICAgIH0KKworCisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIC8vIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAvLyBUaGUgYWN0dWFsIHVzZWQgc3RvcmFnZSBpcyBzZWxlY3RlZCBvbiB0aGUgdHlwZQorICAgICAgICAgICAgICAgIHVuaW9uCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBzZXRfdmFsdWVfdHlwZSogbV9keW5TZXQ7CisgICAgICAgICAgICAgICAgICAgIHNldF92YWx1ZV90eXBlIG1fZml4U2V0W3NpemVvZihzZXRfdmFsdWVfdHlwZSopKjJdOworICAgICAgICAgICAgICAgIH0gCisgICAgICAgICAgICAgICAgbV9TdG9yYWdlOworICAgICAgICAKKyAgICAgICAgICAgICAgICAvLyBzdG9yYWdlIHNpemUKKyAgICAgICAgICAgICAgICA6OnN0ZDo6c2l6ZV90IG1fU2l6ZTsKKyAgICAgICAgICAgIH07CisKKyAgICAgICAgICAgIC8vIGlzX2Zyb21fcmFuZ2UgZnVuY3RvcgorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICByZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIGZyb20gdGhlIHNwZWNpZmllZCByYW5nZS4KKyAgICAgICAgICAgICAgICAoaS5lLiB4Pj1Gcm9tICYmIHg+PVRvKQorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIENoYXJUPgorICAgICAgICAgICAgc3RydWN0IGlzX2Zyb21fcmFuZ2VGIDoKKyAgICAgICAgICAgICAgICBwdWJsaWMgcHJlZGljYXRlX2ZhY2FkZTwgaXNfZnJvbV9yYW5nZUY8Q2hhclQ+ID4KKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBCb29zdC5SZXN1bHRPZiBzdXBwb3J0CisgICAgICAgICAgICAgICAgdHlwZWRlZiBib29sIHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IKKyAgICAgICAgICAgICAgICBpc19mcm9tX3JhbmdlRiggQ2hhclQgRnJvbSwgQ2hhclQgVG8gKSA6IG1fRnJvbShGcm9tKSwgbV9UbyhUbykge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIENoYXIyVD4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIENoYXIyVCBDaCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBtX0Zyb20gPD0gQ2ggKSAmJiAoIENoIDw9IG1fVG8gKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgQ2hhclQgbV9Gcm9tOworICAgICAgICAgICAgICAgIENoYXJUIG1fVG87CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICAvLyBjbGFzc19hbmQgY29tcG9zaXRpb24gcHJlZGljYXRlCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBQcmVkMVQsIHR5cGVuYW1lIFByZWQyVD4KKyAgICAgICAgICAgIHN0cnVjdCBwcmVkX2FuZEYgOgorICAgICAgICAgICAgICAgIHB1YmxpYyBwcmVkaWNhdGVfZmFjYWRlPCBwcmVkX2FuZEY8UHJlZDFULFByZWQyVD4gPgorICAgICAgICAgICAgeworICAgICAgICAgICAgcHVibGljOgorCisgICAgICAgICAgICAgICAgLy8gQm9vc3QuUmVzdWx0T2Ygc3VwcG9ydAorICAgICAgICAgICAgICAgIHR5cGVkZWYgYm9vbCByZXN1bHRfdHlwZTsKKworICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdG9yCisgICAgICAgICAgICAgICAgcHJlZF9hbmRGKCBQcmVkMVQgUHJlZDEsIFByZWQyVCBQcmVkMiApIDoKKyAgICAgICAgICAgICAgICAgICAgbV9QcmVkMShQcmVkMSksIG1fUHJlZDIoUHJlZDIpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIENoYXJUIENoICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBtX1ByZWQxKENoKSAmJiBtX1ByZWQyKENoKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgUHJlZDFUIG1fUHJlZDE7CisgICAgICAgICAgICAgICAgUHJlZDJUIG1fUHJlZDI7CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICAvLyBjbGFzc19vciBjb21wb3NpdGlvbiBwcmVkaWNhdGUKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFByZWQxVCwgdHlwZW5hbWUgUHJlZDJUPgorICAgICAgICAgICAgc3RydWN0IHByZWRfb3JGIDoKKyAgICAgICAgICAgICAgICBwdWJsaWMgcHJlZGljYXRlX2ZhY2FkZTwgcHJlZF9vckY8UHJlZDFULFByZWQyVD4gPgorICAgICAgICAgICAgeworICAgICAgICAgICAgcHVibGljOgorICAgICAgICAgICAgICAgIC8vIEJvb3N0LlJlc3VsdE9mIHN1cHBvcnQKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGJvb2wgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgICAgIHByZWRfb3JGKCBQcmVkMVQgUHJlZDEsIFByZWQyVCBQcmVkMiApIDoKKyAgICAgICAgICAgICAgICAgICAgbV9QcmVkMShQcmVkMSksIG1fUHJlZDIoUHJlZDIpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIENoYXJUIENoICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBtX1ByZWQxKENoKSB8fCBtX1ByZWQyKENoKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgUHJlZDFUIG1fUHJlZDE7CisgICAgICAgICAgICAgICAgUHJlZDJUIG1fUHJlZDI7CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICAvLyBjbGFzc19ub3QgY29tcG9zaXRpb24gcHJlZGljYXRlCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgUHJlZFQgPgorICAgICAgICAgICAgc3RydWN0IHByZWRfbm90RiA6CisgICAgICAgICAgICAgICAgcHVibGljIHByZWRpY2F0ZV9mYWNhZGU8IHByZWRfbm90RjxQcmVkVD4gPgorICAgICAgICAgICAgeworICAgICAgICAgICAgcHVibGljOgorICAgICAgICAgICAgICAgIC8vIEJvb3N0LlJlc3VsdE9mIHN1cHBvcnQKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGJvb2wgcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgICAgIHByZWRfbm90RiggUHJlZFQgUHJlZCApIDogbV9QcmVkKFByZWQpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBDaGFyVD4KKyAgICAgICAgICAgICAgICBib29sIG9wZXJhdG9yKCkoIENoYXJUIENoICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiAhbV9QcmVkKENoKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgUHJlZFQgbV9QcmVkOworICAgICAgICAgICAgfTsKKworICAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfQ0xBU1NJRklDQVRJT05fREVUQUlMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2ZpbmRfZm9ybWF0LmhwcApAQCAtMCwwICsxLDIwNCBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgZmluZF9mb3JtYXQuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vIAorLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9jb25zdF9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2ZpbmRfZm9ybWF0X3N0b3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9yZXBsYWNlX3N0b3JhZ2UuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gZmluZF9mb3JtYXRfY29weSAoaXRlcmF0b3IgdmFyaWFudCkgaW1wbGVtZW50YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRSZXN1bHRUID4KKyAgICAgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZmluZF9mb3JtYXRfY29weV9pbXBsMigKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgICAgIGNvbnN0IElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQsCisgICAgICAgICAgICAgICAgY29uc3QgRm9ybWF0UmVzdWx0VCYgRm9ybWF0UmVzdWx0ICkKKyAgICAgICAgICAgIHsgICAgICAgCisgICAgICAgICAgICAgICAgdHlwZWRlZiBmaW5kX2Zvcm1hdF9zdG9yZTwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8SW5wdXRUPjo6dHlwZSwgCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0UmVzdWx0VCA+IHN0b3JlX3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3RvcmUgZm9yIHRoZSBmaW5kIHJlc3VsdAorICAgICAgICAgICAgICAgIHN0b3JlX3R5cGUgTSggRmluZFJlc3VsdCwgRm9ybWF0UmVzdWx0LCBGb3JtYXR0ZXIgKTsKKworICAgICAgICAgICAgICAgIGlmICggIU0gKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggbm90IGZvdW5kIC0gcmV0dXJuIG9yaWdpbmFsIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgICAgIE91dHB1dCA9IHN0ZDo6Y29weSggOjpib29zdDo6YmVnaW4oSW5wdXQpLCA6OmJvb3N0OjplbmQoSW5wdXQpLCBPdXRwdXQgKTsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE91dHB1dDsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBDb3B5IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgT3V0cHV0ID0gc3RkOjpjb3B5KCA6OmJvb3N0OjpiZWdpbihJbnB1dCksIDo6Ym9vc3Q6OmJlZ2luKE0pLCBPdXRwdXQgKTsKKyAgICAgICAgICAgICAgICAvLyBGb3JtYXQgZmluZCByZXN1bHQKKyAgICAgICAgICAgICAgICAvLyBDb3B5IGZvcm1hdHRlZCByZXN1bHQKKyAgICAgICAgICAgICAgICBPdXRwdXQgPSBzdGQ6OmNvcHkoIDo6Ym9vc3Q6OmJlZ2luKE0uZm9ybWF0X3Jlc3VsdCgpKSwgOjpib29zdDo6ZW5kKE0uZm9ybWF0X3Jlc3VsdCgpKSwgT3V0cHV0ICk7CisgICAgICAgICAgICAgICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgc2VxdWVuY2UKKyAgICAgICAgICAgICAgICBPdXRwdXQgPSBzdGQ6OmNvcHkoIE0uZW5kKCksIDo6Ym9vc3Q6OmVuZChJbnB1dCksIE91dHB1dCApOworCisgICAgICAgICAgICAgICAgcmV0dXJuIE91dHB1dDsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCA+CisgICAgICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGZpbmRfZm9ybWF0X2NvcHlfaW1wbCgKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgICAgIGNvbnN0IElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQgKQorICAgICAgICAgICAgeyAgIAorICAgICAgICAgICAgICAgIGlmKCA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6Y2hlY2tfZmluZF9yZXN1bHQoSW5wdXQsIEZpbmRSZXN1bHQpICkgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfZm9ybWF0X2NvcHlfaW1wbDIoIAorICAgICAgICAgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgICAgICAgICBGaW5kUmVzdWx0LAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0dGVyKEZpbmRSZXN1bHQpICk7CisgICAgICAgICAgICAgICAgfSBlbHNlIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6Y29weSggOjpib29zdDo6YmVnaW4oSW5wdXQpLCA6OmJvb3N0OjplbmQoSW5wdXQpLCBPdXRwdXQgKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAKKy8vIGZpbmRfZm9ybWF0X2NvcHkgaW1wbGVtZW50YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsIAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRmluZFJlc3VsdFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0UmVzdWx0VCA+CisgICAgICAgICAgICBpbmxpbmUgSW5wdXRUIGZpbmRfZm9ybWF0X2NvcHlfaW1wbDIoCisgICAgICAgICAgICAgICAgY29uc3QgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICBjb25zdCBGaW5kUmVzdWx0VCYgRmluZFJlc3VsdCwKKyAgICAgICAgICAgICAgICBjb25zdCBGb3JtYXRSZXN1bHRUJiBGb3JtYXRSZXN1bHQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBmaW5kX2Zvcm1hdF9zdG9yZTwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8SW5wdXRUPjo6dHlwZSwgCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0UmVzdWx0VCA+IHN0b3JlX3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3RvcmUgZm9yIHRoZSBmaW5kIHJlc3VsdAorICAgICAgICAgICAgICAgIHN0b3JlX3R5cGUgTSggRmluZFJlc3VsdCwgRm9ybWF0UmVzdWx0LCBGb3JtYXR0ZXIgKTsKKworICAgICAgICAgICAgICAgIGlmICggIU0gKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggbm90IGZvdW5kIC0gcmV0dXJuIG9yaWdpbmFsIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgICAgIHJldHVybiBJbnB1dFQoIElucHV0ICk7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgSW5wdXRUIE91dHB1dDsKKyAgICAgICAgICAgICAgICAvLyBDb3B5IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppbnNlcnQoIE91dHB1dCwgOjpib29zdDo6ZW5kKE91dHB1dCksIDo6Ym9vc3Q6OmJlZ2luKElucHV0KSwgTS5iZWdpbigpICk7CisgICAgICAgICAgICAgICAgLy8gQ29weSBmb3JtYXR0ZWQgcmVzdWx0CisgICAgICAgICAgICAgICAgYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppbnNlcnQoIE91dHB1dCwgOjpib29zdDo6ZW5kKE91dHB1dCksIE0uZm9ybWF0X3Jlc3VsdCgpICk7CisgICAgICAgICAgICAgICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgc2VxdWVuY2UKKyAgICAgICAgICAgICAgICBib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6Omluc2VydCggT3V0cHV0LCA6OmJvb3N0OjplbmQoT3V0cHV0KSwgTS5lbmQoKSwgOjpib29zdDo6ZW5kKElucHV0KSApOworCisgICAgICAgICAgICAgICAgcmV0dXJuIE91dHB1dDsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIElucHV0VCwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCA+CisgICAgICAgICAgICBpbmxpbmUgSW5wdXRUIGZpbmRfZm9ybWF0X2NvcHlfaW1wbCgKKyAgICAgICAgICAgICAgICBjb25zdCBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgIEZvcm1hdHRlclQgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIGNvbnN0IEZpbmRSZXN1bHRUJiBGaW5kUmVzdWx0KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKCA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6Y2hlY2tfZmluZF9yZXN1bHQoSW5wdXQsIEZpbmRSZXN1bHQpICkgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfZm9ybWF0X2NvcHlfaW1wbDIoCisgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZpbmRSZXN1bHQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXIoRmluZFJlc3VsdCkgKTsKKyAgICAgICAgICAgICAgICB9IGVsc2UgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gSW5wdXQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgLy8gcmVwbGFjZSBpbXBsZW1lbnRhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKyAgICAgICAgCisgICAgICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRSZXN1bHRUID4KKyAgICAgICAgICAgIGlubGluZSB2b2lkIGZpbmRfZm9ybWF0X2ltcGwyKCAKKyAgICAgICAgICAgICAgICBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgIEZvcm1hdHRlclQgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIGNvbnN0IEZpbmRSZXN1bHRUJiBGaW5kUmVzdWx0LAorICAgICAgICAgICAgICAgIGNvbnN0IEZvcm1hdFJlc3VsdFQmIEZvcm1hdFJlc3VsdCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGZpbmRfZm9ybWF0X3N0b3JlPAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9pdGVyYXRvcjxJbnB1dFQ+Ojp0eXBlLCAKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXRSZXN1bHRUID4gc3RvcmVfdHlwZTsKKworICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzdG9yZSBmb3IgdGhlIGZpbmQgcmVzdWx0CisgICAgICAgICAgICAgICAgc3RvcmVfdHlwZSBNKCBGaW5kUmVzdWx0LCBGb3JtYXRSZXN1bHQsIEZvcm1hdHRlciApOworCisgICAgICAgICAgICAgICAgaWYgKCAhTSApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBTZWFyY2ggbm90IGZvdW5kIC0gcmV0dXJuIG9yaWdpbmFsIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgICAgIHJldHVybjsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIG1hdGNoCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnJlcGxhY2UoIElucHV0LCBNLmJlZ2luKCksIE0uZW5kKCksIE0uZm9ybWF0X3Jlc3VsdCgpICk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIElucHV0VCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRSZXN1bHRUID4KKyAgICAgICAgICAgIGlubGluZSB2b2lkIGZpbmRfZm9ybWF0X2ltcGwoIAorICAgICAgICAgICAgICAgIElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYoIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpjaGVja19maW5kX3Jlc3VsdChJbnB1dCwgRmluZFJlc3VsdCkgKSB7CisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpmaW5kX2Zvcm1hdF9pbXBsMigKKyAgICAgICAgICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgICAgICAgICAgRmluZFJlc3VsdCwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlcihGaW5kUmVzdWx0KSApOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kX2Zvcm1hdF9hbGwuaHBwCkBAIC0wLDAgKzEsMjczIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kX2Zvcm1hdF9hbGwuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfRklORF9GT1JNQVRfQUxMX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX0FMTF9ERVRBSUxfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvY29uc3RfaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL3ZhbHVlX3R5cGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2ZpbmRfZm9ybWF0X3N0b3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9yZXBsYWNlX3N0b3JhZ2UuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gZmluZF9mb3JtYXRfYWxsX2NvcHkgKGl0ZXJhdG9yIHZhcmlhbnQpIGltcGxlbWVudGF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRSZXN1bHRULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdFJlc3VsdFQgPgorICAgICAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCBmaW5kX2Zvcm1hdF9hbGxfY29weV9pbXBsMigKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgICAgIGNvbnN0IElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQsCisgICAgICAgICAgICAgICAgY29uc3QgRm9ybWF0UmVzdWx0VCYgRm9ybWF0UmVzdWx0ICkKKyAgICAgICAgICAgIHsgICAgICAgCisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPElucHV0VD46OnR5cGUgaW5wdXRfaXRlcmF0b3JfdHlwZTsgCisKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGZpbmRfZm9ybWF0X3N0b3JlPAorICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSwgCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0UmVzdWx0VCA+IHN0b3JlX3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3RvcmUgZm9yIHRoZSBmaW5kIHJlc3VsdAorICAgICAgICAgICAgICAgIHN0b3JlX3R5cGUgTSggRmluZFJlc3VsdCwgRm9ybWF0UmVzdWx0LCBGb3JtYXR0ZXIgKTsKKworICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgbGFzdCBtYXRjaAorICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgTGFzdE1hdGNoPTo6Ym9vc3Q6OmJlZ2luKElucHV0KTsKKworICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBhbGwgbWF0Y2hlcworICAgICAgICAgICAgICAgIHdoaWxlKCBNICkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIENvcHkgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2VxdWVuY2UKKyAgICAgICAgICAgICAgICAgICAgT3V0cHV0ID0gc3RkOjpjb3B5KCBMYXN0TWF0Y2gsIE0uYmVnaW4oKSwgT3V0cHV0ICk7CisgICAgICAgICAgICAgICAgICAgIC8vIENvcHkgZm9ybWF0dGVkIHJlc3VsdAorICAgICAgICAgICAgICAgICAgICBPdXRwdXQgPSBzdGQ6OmNvcHkoIDo6Ym9vc3Q6OmJlZ2luKE0uZm9ybWF0X3Jlc3VsdCgpKSwgOjpib29zdDo6ZW5kKE0uZm9ybWF0X3Jlc3VsdCgpKSwgT3V0cHV0ICk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gUHJvY2VlZCB0byB0aGUgbmV4dCBtYXRjaAorICAgICAgICAgICAgICAgICAgICBMYXN0TWF0Y2g9TS5lbmQoKTsKKyAgICAgICAgICAgICAgICAgICAgTT1GaW5kZXIoIExhc3RNYXRjaCwgOjpib29zdDo6ZW5kKElucHV0KSApOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgT3V0cHV0ID0gc3RkOjpjb3B5KCBMYXN0TWF0Y2gsIDo6Ym9vc3Q6OmVuZChJbnB1dCksIE91dHB1dCApOworCisgICAgICAgICAgICAgICAgcmV0dXJuIE91dHB1dDsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBJbnB1dFQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRSZXN1bHRUID4KKyAgICAgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZmluZF9mb3JtYXRfYWxsX2NvcHlfaW1wbCgKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgICAgIGNvbnN0IElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQgKQorICAgICAgICAgICAgeyAgIAorICAgICAgICAgICAgICAgIGlmKCA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6Y2hlY2tfZmluZF9yZXN1bHQoSW5wdXQsIEZpbmRSZXN1bHQpICkgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfZm9ybWF0X2FsbF9jb3B5X2ltcGwyKCAKKyAgICAgICAgICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgICAgICAgICAgRmluZGVyLAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgICAgICAgICAgRmluZFJlc3VsdCwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlcihGaW5kUmVzdWx0KSApOworICAgICAgICAgICAgICAgIH0gZWxzZSB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGQ6OmNvcHkoIDo6Ym9vc3Q6OmJlZ2luKElucHV0KSwgOjpib29zdDo6ZW5kKElucHV0KSwgT3V0cHV0ICk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgLy8gZmluZF9mb3JtYXRfYWxsX2NvcHkgaW1wbGVtZW50YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIElucHV0VCwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRSZXN1bHRULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdFJlc3VsdFQgPgorICAgICAgICAgICAgaW5saW5lIElucHV0VCBmaW5kX2Zvcm1hdF9hbGxfY29weV9pbXBsMigKKyAgICAgICAgICAgICAgICBjb25zdCBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgIEZpbmRlclQgRmluZGVyLAorICAgICAgICAgICAgICAgIEZvcm1hdHRlclQgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIGNvbnN0IEZpbmRSZXN1bHRUJiBGaW5kUmVzdWx0LAorICAgICAgICAgICAgICAgIGNvbnN0IEZvcm1hdFJlc3VsdFQmIEZvcm1hdFJlc3VsdCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8SW5wdXRUPjo6dHlwZSBpbnB1dF9pdGVyYXRvcl90eXBlOyAKKworICAgICAgICAgICAgICAgIHR5cGVkZWYgZmluZF9mb3JtYXRfc3RvcmU8CisgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlLCAKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXRSZXN1bHRUID4gc3RvcmVfdHlwZTsKKworICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzdG9yZSBmb3IgdGhlIGZpbmQgcmVzdWx0CisgICAgICAgICAgICAgICAgc3RvcmVfdHlwZSBNKCBGaW5kUmVzdWx0LCBGb3JtYXRSZXN1bHQsIEZvcm1hdHRlciApOworCisgICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBsYXN0IG1hdGNoCisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBMYXN0TWF0Y2g9Ojpib29zdDo6YmVnaW4oSW5wdXQpOworCisgICAgICAgICAgICAgICAgLy8gT3V0cHV0IHRlbXBvcmFyeQorICAgICAgICAgICAgICAgIElucHV0VCBPdXRwdXQ7CisKKyAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIG1hdGNoZXMKKyAgICAgICAgICAgICAgICB3aGlsZSggTSApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBDb3B5IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgICAgIGJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6aW5zZXJ0KCBPdXRwdXQsIDo6Ym9vc3Q6OmVuZChPdXRwdXQpLCBMYXN0TWF0Y2gsIE0uYmVnaW4oKSApOworICAgICAgICAgICAgICAgICAgICAvLyBDb3B5IGZvcm1hdHRlZCByZXN1bHQKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppbnNlcnQoIE91dHB1dCwgOjpib29zdDo6ZW5kKE91dHB1dCksIE0uZm9ybWF0X3Jlc3VsdCgpICk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gUHJvY2VlZCB0byB0aGUgbmV4dCBtYXRjaAorICAgICAgICAgICAgICAgICAgICBMYXN0TWF0Y2g9TS5lbmQoKTsKKyAgICAgICAgICAgICAgICAgICAgTT1GaW5kZXIoIExhc3RNYXRjaCwgOjpib29zdDo6ZW5kKElucHV0KSApOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6Omluc2VydCggT3V0cHV0LCA6OmJvb3N0OjplbmQoT3V0cHV0KSwgTGFzdE1hdGNoLCA6OmJvb3N0OjplbmQoSW5wdXQpICk7CisKKyAgICAgICAgICAgICAgICByZXR1cm4gT3V0cHV0OworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgSW5wdXRULCAKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRmluZFJlc3VsdFQgPgorICAgICAgICAgICAgaW5saW5lIElucHV0VCBmaW5kX2Zvcm1hdF9hbGxfY29weV9pbXBsKAorICAgICAgICAgICAgICAgIGNvbnN0IElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgY29uc3QgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYoIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpjaGVja19maW5kX3Jlc3VsdChJbnB1dCwgRmluZFJlc3VsdCkgKSB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6ZmluZF9mb3JtYXRfYWxsX2NvcHlfaW1wbDIoCisgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZpbmRlciwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICAgICAgICAgIEZpbmRSZXN1bHQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXIoRmluZFJlc3VsdCkgKTsKKyAgICAgICAgICAgICAgICB9IGVsc2UgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gSW5wdXQ7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgLy8gZmluZF9mb3JtYXRfYWxsIGltcGxlbWVudGF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisgICAgICAgIAorICAgICAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgSW5wdXRULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRlclQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRSZXN1bHRUID4KKyAgICAgICAgICAgIGlubGluZSB2b2lkIGZpbmRfZm9ybWF0X2FsbF9pbXBsMiggCisgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICBGaW5kZXJUIEZpbmRlciwKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICBGaW5kUmVzdWx0VCBGaW5kUmVzdWx0LAorICAgICAgICAgICAgICAgIEZvcm1hdFJlc3VsdFQgRm9ybWF0UmVzdWx0KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV9pdGVyYXRvcjxJbnB1dFQ+Ojp0eXBlIGlucHV0X2l0ZXJhdG9yX3R5cGU7IAorICAgICAgICAgICAgICAgIHR5cGVkZWYgZmluZF9mb3JtYXRfc3RvcmU8CisgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlLCAKKyAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXRSZXN1bHRUID4gc3RvcmVfdHlwZTsKKworICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBzdG9yZSBmb3IgdGhlIGZpbmQgcmVzdWx0CisgICAgICAgICAgICAgICAgc3RvcmVfdHlwZSBNKCBGaW5kUmVzdWx0LCBGb3JtYXRSZXN1bHQsIEZvcm1hdHRlciApOworICAgICAgICAgIAorICAgICAgICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHJlcGxhY2VtZW50IHN0b3JhZ2UKKyAgICAgICAgICAgICAgICBzdGQ6OmRlcXVlPAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfdmFsdWU8SW5wdXRUPjo6dHlwZT4gU3RvcmFnZTsKKworICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcmVwbGFjZW1lbnQgaXRlcmF0b3JzCisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBJbnNlcnRJdD06OmJvb3N0OjpiZWdpbihJbnB1dCk7CisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBTZWFyY2hJdD06OmJvb3N0OjpiZWdpbihJbnB1dCk7CisgICAgICAgICAgICAgICAgCisgICAgICAgICAgICAgICAgd2hpbGUoIE0gKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyB0aGUgc2VnbWVudAorICAgICAgICAgICAgICAgICAgICBJbnNlcnRJdD1wcm9jZXNzX3NlZ21lbnQoIAorICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZSwKKyAgICAgICAgICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgICAgICAgICAgSW5zZXJ0SXQsCisgICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2hJdCwKKyAgICAgICAgICAgICAgICAgICAgICAgIE0uYmVnaW4oKSApOworICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICAgICAgLy8gQWRqdXN0IHNlYXJjaCBpdGVyYXRvcgorICAgICAgICAgICAgICAgICAgICBTZWFyY2hJdD1NLmVuZCgpOworCisgICAgICAgICAgICAgICAgICAgIC8vIENvcHkgZm9ybWF0dGVkIHJlcGxhY2UgdG8gdGhlIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmNvcHlfdG9fc3RvcmFnZSggU3RvcmFnZSwgTS5mb3JtYXRfcmVzdWx0KCkgKTsKKworICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHJhbmdlIGZvciBhIG5leHQgbWF0Y2gKKyAgICAgICAgICAgICAgICAgICAgTT1GaW5kZXIoIFNlYXJjaEl0LCA6OmJvb3N0OjplbmQoSW5wdXQpICk7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyB0aGUgbGFzdCBzZWdtZW50CisgICAgICAgICAgICAgICAgSW5zZXJ0SXQ9Ojpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnByb2Nlc3Nfc2VnbWVudCggCisgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UsCisgICAgICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgICAgICBJbnNlcnRJdCwKKyAgICAgICAgICAgICAgICAgICAgU2VhcmNoSXQsCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChJbnB1dCkgKTsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICBpZiAoIFN0b3JhZ2UuZW1wdHkoKSApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBUcnVuY2F0ZSBpbnB1dAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6ZXJhc2UoIElucHV0LCBJbnNlcnRJdCwgOjpib29zdDo6ZW5kKElucHV0KSApOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBDb3B5IHJlbWFpbmluZyBkYXRhIHRvIHRoZSBlbmQgb2YgaW5wdXQKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6Omluc2VydCggSW5wdXQsIDo6Ym9vc3Q6OmVuZChJbnB1dCksIFN0b3JhZ2UuYmVnaW4oKSwgU3RvcmFnZS5lbmQoKSApOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICAgICAgdHlwZW5hbWUgSW5wdXRULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRlclQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGaW5kUmVzdWx0VCA+CisgICAgICAgICAgICBpbmxpbmUgdm9pZCBmaW5kX2Zvcm1hdF9hbGxfaW1wbCggCisgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICBGaW5kZXJUIEZpbmRlciwKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICBGaW5kUmVzdWx0VCBGaW5kUmVzdWx0KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKCA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6Y2hlY2tfZmluZF9yZXN1bHQoSW5wdXQsIEZpbmRSZXN1bHQpICkgeworICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6ZmluZF9mb3JtYXRfYWxsX2ltcGwyKAorICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgICAgICAgICBGaW5kZXIsCisgICAgICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXIsCisgICAgICAgICAgICAgICAgICAgICAgICBGaW5kUmVzdWx0LAorICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0dGVyKEZpbmRSZXN1bHQpICk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRklORF9GT1JNQVRfQUxMX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kX2Zvcm1hdF9zdG9yZS5ocHAKQEAgLTAsMCArMSw4OSBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgZmluZF9mb3JtYXRfc3RvcmUuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfRklORF9GT1JNQVRfU1RPUkVfREVUQUlMX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfRklORF9GT1JNQVRfU1RPUkVfREVUQUlMX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlX2NvcmUuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gIHRlbXBvcmFyeSBmb3JtYXQgYW5kIGZpbmQgcmVzdWx0IHN0b3JhZ2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA+PSAxNDAwKQorI3ByYWdtYSB3YXJuaW5nKHB1c2gpCisjcHJhZ21hIHdhcm5pbmcoZGlzYWJsZTo0NTEyKSAvL2Fzc2lnbm1lbnQgb3BlcmF0b3IgY291bGQgbm90IGJlIGdlbmVyYXRlZAorI2VuZGlmCisgICAgICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdFJlc3VsdFQgPgorICAgICAgICAgICAgY2xhc3MgZmluZF9mb3JtYXRfc3RvcmUgOiAKKyAgICAgICAgICAgICAgICBwdWJsaWMgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgIHB1YmxpYzoKKyAgICAgICAgICAgICAgICAvLyB0eXBlZGVmcworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4gYmFzZV90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgRm9ybWF0dGVyVCAgZm9ybWF0dGVyX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBGb3JtYXRSZXN1bHRUIGZvcm1hdF9yZXN1bHRfdHlwZTsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgIHB1YmxpYzoKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3Rpb24KKyAgICAgICAgICAgICAgICBmaW5kX2Zvcm1hdF9zdG9yZSggCisgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlX3R5cGUmIEZpbmRSZXN1bHQsCisgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRfcmVzdWx0X3R5cGUmIEZvcm1hdFJlc3VsdCwKKyAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlcl90eXBlJiBGb3JtYXR0ZXIgKSA6CisgICAgICAgICAgICAgICAgICAgIGJhc2VfdHlwZShGaW5kUmVzdWx0KSwKKyAgICAgICAgICAgICAgICAgICAgbV9Gb3JtYXRSZXN1bHQoRm9ybWF0UmVzdWx0KSwKKyAgICAgICAgICAgICAgICAgICAgbV9Gb3JtYXR0ZXIoRm9ybWF0dGVyKSB7fQorCisgICAgICAgICAgICAgICAgLy8gQXNzaWdubWVudAorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGaW5kUmVzdWx0VCA+CisgICAgICAgICAgICAgICAgZmluZF9mb3JtYXRfc3RvcmUmIG9wZXJhdG9yPSggRmluZFJlc3VsdFQgRmluZFJlc3VsdCApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPjo6b3BlcmF0b3I9KEZpbmRSZXN1bHQpOworICAgICAgICAgICAgICAgICAgICBpZiggIXRoaXMtPmVtcHR5KCkgKSB7CisgICAgICAgICAgICAgICAgICAgICAgICBtX0Zvcm1hdFJlc3VsdD1tX0Zvcm1hdHRlcihGaW5kUmVzdWx0KTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuICp0aGlzOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIGZvcm1hdCByZXN1bHQKKyAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRfcmVzdWx0X3R5cGUmIGZvcm1hdF9yZXN1bHQoKQorICAgICAgICAgICAgICAgIHsgICAKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1fRm9ybWF0UmVzdWx0OworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBmb3JtYXRfcmVzdWx0X3R5cGUgbV9Gb3JtYXRSZXN1bHQ7CisgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVyX3R5cGUmIG1fRm9ybWF0dGVyOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRULCB0eXBlbmFtZSBGaW5kUmVzdWx0VD4KKyAgICAgICAgICAgIGJvb2wgY2hlY2tfZmluZF9yZXN1bHQoSW5wdXRUJiwgRmluZFJlc3VsdFQmIEZpbmRSZXN1bHQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPElucHV0VD46OnR5cGUgaW5wdXRfaXRlcmF0b3JfdHlwZTsgCisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8aW5wdXRfaXRlcmF0b3JfdHlwZT4gUmVzdWx0UmFuZ2UoRmluZFJlc3VsdCk7CisgICAgICAgICAgICAgICAgcmV0dXJuICFSZXN1bHRSYW5nZS5lbXB0eSgpOworICAgICAgICAgICAgfQorCisjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA+PSAxNDAwKQorI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorICAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX1NUT1JFX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kX2l0ZXJhdG9yLmhwcApAQCAtMCwwICsxLDg3IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kX2l0ZXJhdG9yLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRfSVRFUkFUT1JfREVUQUlMX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfRklORF9JVEVSQVRPUl9ERVRBSUxfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvaXRlcmF0b3JfZmFjYWRlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9pdGVyYXRvci9pdGVyYXRvcl9jYXRlZ29yaWVzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9mdW5jdGlvbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7IAorICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gIGZpbmRfaXRlcmF0b3IgYmFzZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIEZpbmQgaXRlcmF0b3IgYmFzZQorICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgSXRlcmF0b3JUPgorICAgICAgICAgICAgY2xhc3MgZmluZF9pdGVyYXRvcl9iYXNlCisgICAgICAgICAgICB7CisgICAgICAgICAgICBwcm90ZWN0ZWQ6CisgICAgICAgICAgICAgICAgLy8gdHlwZWRlZnMKKyAgICAgICAgICAgICAgICB0eXBlZGVmIEl0ZXJhdG9yVCBpbnB1dF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8SXRlcmF0b3JUPiBtYXRjaF90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgZnVuY3Rpb24yPAorICAgICAgICAgICAgICAgICAgICBtYXRjaF90eXBlLCAKKyAgICAgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSwgCisgICAgICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGU+IGZpbmRlcl90eXBlOworICAgICAgICAgICAgICAgIAorICAgICAgICAgICAgcHJvdGVjdGVkOgorICAgICAgICAgICAgLy8gUHJvdGVjdGVkIGNvbnN0cnVjdGlvbi9kZXN0cnVjdGlvbgorCisgICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBjb25zdHJ1Y3RvcgorICAgICAgICAgICAgICAgIGZpbmRfaXRlcmF0b3JfYmFzZSgpIHt9OworICAgICAgICAgICAgICAgIC8vIENvcHkgY29uc3RydWN0aW9uCisgICAgICAgICAgICAgICAgZmluZF9pdGVyYXRvcl9iYXNlKCBjb25zdCBmaW5kX2l0ZXJhdG9yX2Jhc2UmIE90aGVyICkgOgorICAgICAgICAgICAgICAgICAgICBtX0ZpbmRlcihPdGhlci5tX0ZpbmRlcikge30KKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQ+CisgICAgICAgICAgICAgICAgZmluZF9pdGVyYXRvcl9iYXNlKCBGaW5kZXJUIEZpbmRlciwgaW50ICkgOgorICAgICAgICAgICAgICAgICAgICBtX0ZpbmRlcihGaW5kZXIpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBEZXN0cnVjdG9yCisgICAgICAgICAgICAgICAgfmZpbmRfaXRlcmF0b3JfYmFzZSgpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBGaW5kIG9wZXJhdGlvbgorICAgICAgICAgICAgICAgIG1hdGNoX3R5cGUgZG9fZmluZCggCisgICAgICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgRW5kICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmICghbV9GaW5kZXIuZW1wdHkoKSkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1fRmluZGVyKEJlZ2luLEVuZCk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hfdHlwZShFbmQsRW5kKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIENoZWNrCisgICAgICAgICAgICAgICAgYm9vbCBpc19udWxsKCkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBtX0ZpbmRlci5lbXB0eSgpOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICAvLyBGaW5kZXIKKyAgICAgICAgICAgICAgICBmaW5kZXJfdHlwZSBtX0ZpbmRlcjsKKyAgICAgICAgICAgIH07CisKKyAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRklORF9JVEVSQVRPUl9ERVRBSUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvZmluZGVyLmhwcApAQCAtMCwwICsxLDYzOSBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgZmluZGVyLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDYuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRFUl9ERVRBSUxfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19GSU5ERVJfREVUQUlMX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uc3RhbnRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9kZXRhaWwvaXRlcmF0b3IuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW1wdHkuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2FzX2xpdGVyYWwuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworCisvLyAgZmluZCBmaXJzdCBmdW5jdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gZmluZCBhIHN1YnNlcXVlbmNlIGluIHRoZSBzZXF1ZW5jZSAoIGZ1bmN0b3IgKQorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICBSZXR1cm5zIGEgcGFpciA8YmVnaW4sZW5kPiBtYXJraW5nIHRoZSBzdWJzZXF1ZW5jZSBpbiB0aGUgc2VxdWVuY2UuCisgICAgICAgICAgICAgICAgSWYgdGhlIGZpbmQgZmFpbHMsIGZ1bmN0b3IgcmV0dXJucyA8RW5kLEVuZD4KKyAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZWFyY2hJdGVyYXRvclQsdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgICAgIHN0cnVjdCBmaXJzdF9maW5kZXJGCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBTZWFyY2hJdGVyYXRvclQgc2VhcmNoX2l0ZXJhdG9yX3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3Rpb24KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgU2VhcmNoVCA+CisgICAgICAgICAgICAgICAgZmlyc3RfZmluZGVyRiggY29uc3QgU2VhcmNoVCYgU2VhcmNoLCBQcmVkaWNhdGVUIENvbXAgKSA6CisgICAgICAgICAgICAgICAgICAgIG1fU2VhcmNoKDo6Ym9vc3Q6OmJlZ2luKFNlYXJjaCksIDo6Ym9vc3Q6OmVuZChTZWFyY2gpKSwgbV9Db21wKENvbXApIHt9CisgICAgICAgICAgICAgICAgZmlyc3RfZmluZGVyRigKKyAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaF9pdGVyYXRvcl90eXBlIFNlYXJjaEJlZ2luLAorICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2l0ZXJhdG9yX3R5cGUgU2VhcmNoRW5kLAorICAgICAgICAgICAgICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wICkgOgorICAgICAgICAgICAgICAgICAgICBtX1NlYXJjaChTZWFyY2hCZWdpbiwgU2VhcmNoRW5kKSwgbV9Db21wKENvbXApIHt9CisKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICBvcGVyYXRvcigpKAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCApIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IHJlc3VsdF90eXBlOworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIEZvcndhcmRJdGVyYXRvclQgaW5wdXRfaXRlcmF0b3JfdHlwZTsKKworICAgICAgICAgICAgICAgICAgICAvLyBPdXRlciBsb29wCisgICAgICAgICAgICAgICAgICAgIGZvcihpbnB1dF9pdGVyYXRvcl90eXBlIE91dGVySXQ9QmVnaW47CisgICAgICAgICAgICAgICAgICAgICAgICBPdXRlckl0IT1FbmQ7CisgICAgICAgICAgICAgICAgICAgICAgICArK091dGVySXQpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbml0eSBjaGVjaworICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGJvb3N0OjplbXB0eShtX1NlYXJjaCkgKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggRW5kLCBFbmQgKTsKKworICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBJbm5lckl0PU91dGVySXQ7CisgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaXRlcmF0b3JfdHlwZSBTdWJzdHJJdD1tX1NlYXJjaC5iZWdpbigpOworICAgICAgICAgICAgICAgICAgICAgICAgZm9yKDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbm5lckl0IT1FbmQgJiYgU3Vic3RySXQhPW1fU2VhcmNoLmVuZCgpOworICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrSW5uZXJJdCwrK1N1YnN0ckl0KQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKCBtX0NvbXAoKklubmVySXQsKlN1YnN0ckl0KSApICkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnN0cmluZyBtYXRjaGluZyBzdWNjZWVkZWQKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmICggU3Vic3RySXQ9PW1fU2VhcmNoLmVuZCgpICkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoIE91dGVySXQsIElubmVySXQgKTsKKyAgICAgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggRW5kLCBFbmQgKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8c2VhcmNoX2l0ZXJhdG9yX3R5cGU+IG1fU2VhcmNoOworICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgbV9Db21wOworICAgICAgICAgICAgfTsKKworLy8gIGZpbmQgbGFzdCBmdW5jdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gZmluZCB0aGUgbGFzdCBtYXRjaCBhIHN1YnNlcXVlbmNlIGluIHRoZSBzZXF1ZW5jZSAoIGZ1bmN0b3IgKQorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICBSZXR1cm5zIGEgcGFpciA8YmVnaW4sZW5kPiBtYXJraW5nIHRoZSBzdWJzZXF1ZW5jZSBpbiB0aGUgc2VxdWVuY2UuCisgICAgICAgICAgICAgICAgSWYgdGhlIGZpbmQgZmFpbHMsIHJldHVybnMgPEVuZCxFbmQ+CisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VhcmNoSXRlcmF0b3JULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICAgICAgc3RydWN0IGxhc3RfZmluZGVyRgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgU2VhcmNoSXRlcmF0b3JUIHNlYXJjaF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgZmlyc3RfZmluZGVyRjwKKyAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2l0ZXJhdG9yX3R5cGUsCisgICAgICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQ+IGZpcnN0X2ZpbmRlcl90eXBlOworCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFNlYXJjaFQgPgorICAgICAgICAgICAgICAgIGxhc3RfZmluZGVyRiggY29uc3QgU2VhcmNoVCYgU2VhcmNoLCBQcmVkaWNhdGVUIENvbXAgKSA6CisgICAgICAgICAgICAgICAgICAgIG1fU2VhcmNoKDo6Ym9vc3Q6OmJlZ2luKFNlYXJjaCksIDo6Ym9vc3Q6OmVuZChTZWFyY2gpKSwgbV9Db21wKENvbXApIHt9CisgICAgICAgICAgICAgICAgbGFzdF9maW5kZXJGKAorICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2l0ZXJhdG9yX3R5cGUgU2VhcmNoQmVnaW4sCisgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaXRlcmF0b3JfdHlwZSBTZWFyY2hFbmQsCisgICAgICAgICAgICAgICAgICAgICAgICBQcmVkaWNhdGVUIENvbXAgKSA6CisgICAgICAgICAgICAgICAgICAgIG1fU2VhcmNoKFNlYXJjaEJlZ2luLCBTZWFyY2hFbmQpLCBtX0NvbXAoQ29tcCkge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgICAgIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAgICAgaWYoIGJvb3N0OjplbXB0eShtX1NlYXJjaCkgKQorICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF90eXBlKCBFbmQsIEVuZCApOworCisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIGJvb3N0OjpkZXRhaWw6OgorICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3JfdHJhaXRzPEZvcndhcmRJdGVyYXRvclQ+OjppdGVyYXRvcl9jYXRlZ29yeSBjYXRlZ29yeTsKKworICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZGl0KCBCZWdpbiwgRW5kLCBjYXRlZ29yeSgpICk7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIC8vIGZvcndhcmQgaXRlcmF0b3IKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICBmaW5kaXQoCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kLAorICAgICAgICAgICAgICAgICAgICBzdGQ6OmZvcndhcmRfaXRlcmF0b3JfdGFnICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAgICAgZmlyc3RfZmluZGVyX3R5cGUgZmlyc3RfZmluZGVyKAorICAgICAgICAgICAgICAgICAgICAgICAgbV9TZWFyY2guYmVnaW4oKSwgbV9TZWFyY2guZW5kKCksIG1fQ29tcCApOworCisgICAgICAgICAgICAgICAgICAgIHJlc3VsdF90eXBlIE09Zmlyc3RfZmluZGVyKCBCZWdpbiwgRW5kICk7CisgICAgICAgICAgICAgICAgICAgIHJlc3VsdF90eXBlIExhc3Q9TTsKKworICAgICAgICAgICAgICAgICAgICB3aGlsZSggTSApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIExhc3Q9TTsKKyAgICAgICAgICAgICAgICAgICAgICAgIE09Zmlyc3RfZmluZGVyKCA6OmJvb3N0OjplbmQoTSksIEVuZCApOworICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExhc3Q7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgLy8gYmlkaXJlY3Rpb25hbCBpdGVyYXRvcgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgICAgIGZpbmRpdCgKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgICAgIHN0ZDo6YmlkaXJlY3Rpb25hbF9pdGVyYXRvcl90YWcgKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiByZXN1bHRfdHlwZTsKKyAgICAgICAgICAgICAgICAgICAgdHlwZWRlZiBGb3J3YXJkSXRlcmF0b3JUIGlucHV0X2l0ZXJhdG9yX3R5cGU7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gT3V0ZXIgbG9vcAorICAgICAgICAgICAgICAgICAgICBmb3IoaW5wdXRfaXRlcmF0b3JfdHlwZSBPdXRlckl0PUVuZDsKKyAgICAgICAgICAgICAgICAgICAgICAgIE91dGVySXQhPUJlZ2luOyApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgT3V0ZXJJdDI9LS1PdXRlckl0OworCisgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIElubmVySXQ9T3V0ZXJJdDI7CisgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaXRlcmF0b3JfdHlwZSBTdWJzdHJJdD1tX1NlYXJjaC5iZWdpbigpOworICAgICAgICAgICAgICAgICAgICAgICAgZm9yKDsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbm5lckl0IT1FbmQgJiYgU3Vic3RySXQhPW1fU2VhcmNoLmVuZCgpOworICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrSW5uZXJJdCwrK1N1YnN0ckl0KQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKCBtX0NvbXAoKklubmVySXQsKlN1YnN0ckl0KSApICkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnN0cmluZyBtYXRjaGluZyBzdWNjZWVkZWQKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBTdWJzdHJJdD09bV9TZWFyY2guZW5kKCkgKQorICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggT3V0ZXJJdDIsIElubmVySXQgKTsKKyAgICAgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggRW5kLCBFbmQgKTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8c2VhcmNoX2l0ZXJhdG9yX3R5cGU+IG1fU2VhcmNoOworICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgbV9Db21wOworICAgICAgICAgICAgfTsKKworLy8gIGZpbmQgbi10aCBmdW5jdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gZmluZCB0aGUgbi10aCBtYXRjaCBvZiBhIHN1YnNlcXVlbmNlIGluIHRoZSBzZXF1ZW5jZSAoIGZ1bmN0b3IgKQorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICBSZXR1cm5zIGEgcGFpciA8YmVnaW4sZW5kPiBtYXJraW5nIHRoZSBzdWJzZXF1ZW5jZSBpbiB0aGUgc2VxdWVuY2UuCisgICAgICAgICAgICAgICAgSWYgdGhlIGZpbmQgZmFpbHMsIHJldHVybnMgPEVuZCxFbmQ+CisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VhcmNoSXRlcmF0b3JULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICAgICAgc3RydWN0IG50aF9maW5kZXJGCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBTZWFyY2hJdGVyYXRvclQgc2VhcmNoX2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBmaXJzdF9maW5kZXJGPAorICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaXRlcmF0b3JfdHlwZSwKKyAgICAgICAgICAgICAgICAgICAgUHJlZGljYXRlVD4gZmlyc3RfZmluZGVyX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBsYXN0X2ZpbmRlckY8CisgICAgICAgICAgICAgICAgICAgIHNlYXJjaF9pdGVyYXRvcl90eXBlLAorICAgICAgICAgICAgICAgICAgICBQcmVkaWNhdGVUPiBsYXN0X2ZpbmRlcl90eXBlOworCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFNlYXJjaFQgPgorICAgICAgICAgICAgICAgIG50aF9maW5kZXJGKAorICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgU2VhcmNoVCYgU2VhcmNoLAorICAgICAgICAgICAgICAgICAgICAgICAgaW50IE50aCwKKyAgICAgICAgICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgQ29tcCkgOgorICAgICAgICAgICAgICAgICAgICBtX1NlYXJjaCg6OmJvb3N0OjpiZWdpbihTZWFyY2gpLCA6OmJvb3N0OjplbmQoU2VhcmNoKSksCisgICAgICAgICAgICAgICAgICAgIG1fTnRoKE50aCksCisgICAgICAgICAgICAgICAgICAgIG1fQ29tcChDb21wKSB7fQorICAgICAgICAgICAgICAgIG50aF9maW5kZXJGKAorICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2l0ZXJhdG9yX3R5cGUgU2VhcmNoQmVnaW4sCisgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaXRlcmF0b3JfdHlwZSBTZWFyY2hFbmQsCisgICAgICAgICAgICAgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wKSA6CisgICAgICAgICAgICAgICAgICAgIG1fU2VhcmNoKFNlYXJjaEJlZ2luLCBTZWFyY2hFbmQpLAorICAgICAgICAgICAgICAgICAgICBtX050aChOdGgpLAorICAgICAgICAgICAgICAgICAgICBtX0NvbXAoQ29tcCkge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgICAgIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG1fTnRoPj0wKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZF9mb3J3YXJkKEJlZ2luLCBFbmQsIG1fTnRoKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kX2JhY2t3YXJkKEJlZ2luLCBFbmQsIC1tX050aCk7CisgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBoZWxwZXJzCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+CisgICAgICAgICAgICAgICAgZmluZF9mb3J3YXJkKAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCwKKyAgICAgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4pIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgICAgIC8vIFNhbml0eSBjaGVjaworICAgICAgICAgICAgICAgICAgICBpZiggYm9vc3Q6OmVtcHR5KG1fU2VhcmNoKSApCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoIEVuZCwgRW5kICk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgZmluZCBmdW5jdG9yCisgICAgICAgICAgICAgICAgICAgIGZpcnN0X2ZpbmRlcl90eXBlIGZpcnN0X2ZpbmRlcigKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fU2VhcmNoLmJlZ2luKCksIG1fU2VhcmNoLmVuZCgpLCBtX0NvbXAgKTsKKworICAgICAgICAgICAgICAgICAgICByZXN1bHRfdHlwZSBNKCBCZWdpbiwgQmVnaW4gKTsKKworICAgICAgICAgICAgICAgICAgICBmb3IoIHVuc2lnbmVkIGludCBuPTA7IG48PU47ICsrbiApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgbmV4dCBtYXRjaAorICAgICAgICAgICAgICAgICAgICAgICAgTT1maXJzdF9maW5kZXIoIDo6Ym9vc3Q6OmVuZChNKSwgRW5kICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIU0gKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnNlcXVlbmNlIG5vdCBmb3VuZCwgcmV0dXJuCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE07CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICByZXR1cm4gTTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICBmaW5kX2JhY2t3YXJkKAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCwKKyAgICAgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4pIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgICAgIC8vIFNhbml0eSBjaGVjaworICAgICAgICAgICAgICAgICAgICBpZiggYm9vc3Q6OmVtcHR5KG1fU2VhcmNoKSApCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoIEVuZCwgRW5kICk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgZmluZCBmdW5jdG9yCisgICAgICAgICAgICAgICAgICAgIGxhc3RfZmluZGVyX3R5cGUgbGFzdF9maW5kZXIoCisgICAgICAgICAgICAgICAgICAgICAgICBtX1NlYXJjaC5iZWdpbigpLCBtX1NlYXJjaC5lbmQoKSwgbV9Db21wICk7CisKKyAgICAgICAgICAgICAgICAgICAgcmVzdWx0X3R5cGUgTSggRW5kLCBFbmQgKTsKKworICAgICAgICAgICAgICAgICAgICBmb3IoIHVuc2lnbmVkIGludCBuPTE7IG48PU47ICsrbiApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgbmV4dCBtYXRjaAorICAgICAgICAgICAgICAgICAgICAgICAgTT1sYXN0X2ZpbmRlciggQmVnaW4sIDo6Ym9vc3Q6OmJlZ2luKE0pICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIU0gKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnNlcXVlbmNlIG5vdCBmb3VuZCwgcmV0dXJuCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE07CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICByZXR1cm4gTTsKKyAgICAgICAgICAgICAgICB9CisKKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxzZWFyY2hfaXRlcmF0b3JfdHlwZT4gbV9TZWFyY2g7CisgICAgICAgICAgICAgICAgaW50IG1fTnRoOworICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgbV9Db21wOworICAgICAgICAgICAgfTsKKworLy8gIGZpbmQgaGVhZC90YWlsIGltcGxlbWVudGF0aW9uIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgZmluZF9oZWFkX2ltcGwoCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCwKKyAgICAgICAgICAgICAgICB1bnNpZ25lZCBpbnQgTiwKKyAgICAgICAgICAgICAgICBzdGQ6OmZvcndhcmRfaXRlcmF0b3JfdGFnICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIEZvcndhcmRJdGVyYXRvclQgaW5wdXRfaXRlcmF0b3JfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IHJlc3VsdF90eXBlOworCisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBJdD1CZWdpbjsKKyAgICAgICAgICAgICAgICBmb3IoCisgICAgICAgICAgICAgICAgICAgIHVuc2lnbmVkIGludCBJbmRleD0wOworICAgICAgICAgICAgICAgICAgICBJbmRleDxOICYmIEl0IT1FbmQ7ICsrSW5kZXgsKytJdCApIHt9OworCisgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF90eXBlKCBCZWdpbiwgSXQgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+CisgICAgICAgICAgICBmaW5kX2hlYWRfaW1wbCgKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kLAorICAgICAgICAgICAgICAgIHVuc2lnbmVkIGludCBOLAorICAgICAgICAgICAgICAgIHN0ZDo6cmFuZG9tX2FjY2Vzc19pdGVyYXRvcl90YWcgKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICBpZiAoIChFbmQ8PUJlZ2luKSB8fCAoIHN0YXRpY19jYXN0PHVuc2lnbmVkIGludD4oRW5kLUJlZ2luKSA8IE4gKSApCisgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggQmVnaW4sIEVuZCApOworCisgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF90eXBlKEJlZ2luLEJlZ2luK04pOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICAvLyBGaW5kIGhlYWQgaW1wbGVtZW50YXRpb24KKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQ+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIGZpbmRfaGVhZF9pbXBsKAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4gKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIGJvb3N0OjpkZXRhaWw6OgorICAgICAgICAgICAgICAgICAgICBpdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yVD46Oml0ZXJhdG9yX2NhdGVnb3J5IGNhdGVnb3J5OworCisgICAgICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpmaW5kX2hlYWRfaW1wbCggQmVnaW4sIEVuZCwgTiwgY2F0ZWdvcnkoKSApOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIGZpbmRfdGFpbF9pbXBsKAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4sCisgICAgICAgICAgICAgICAgc3RkOjpmb3J3YXJkX2l0ZXJhdG9yX3RhZyApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBGb3J3YXJkSXRlcmF0b3JUIGlucHV0X2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiByZXN1bHRfdHlwZTsKKworICAgICAgICAgICAgICAgIHVuc2lnbmVkIGludCBJbmRleD0wOworICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgSXQ9QmVnaW47CisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZSBJdDI9QmVnaW47CisKKyAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIEl0MiBieSBOIGluY3JlbWVudHMKKyAgICAgICAgICAgICAgICBmb3IoIEluZGV4PTA7IEluZGV4PE4gJiYgSXQyIT1FbmQ7ICsrSW5kZXgsKytJdDIgKSB7fTsKKworICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgSXQsIEl0MiB0byB0aGUgZW5kCisgICAgICAgICAgICAgICAgZm9yKDsgSXQyIT1FbmQ7ICsrSXQsKytJdDIgKSB7fTsKKworICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggSXQsIEl0MiApOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIGZpbmRfdGFpbF9pbXBsKAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4sCisgICAgICAgICAgICAgICAgc3RkOjpiaWRpcmVjdGlvbmFsX2l0ZXJhdG9yX3RhZyApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBGb3J3YXJkSXRlcmF0b3JUIGlucHV0X2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiByZXN1bHRfdHlwZTsKKworICAgICAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgSXQ9RW5kOworICAgICAgICAgICAgICAgIGZvcigKKyAgICAgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IEluZGV4PTA7CisgICAgICAgICAgICAgICAgICAgIEluZGV4PE4gJiYgSXQhPUJlZ2luOyArK0luZGV4LC0tSXQgKSB7fTsKKworICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggSXQsIEVuZCApOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIGZpbmRfdGFpbF9pbXBsKAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgdW5zaWduZWQgaW50IE4sCisgICAgICAgICAgICAgICAgc3RkOjpyYW5kb21fYWNjZXNzX2l0ZXJhdG9yX3RhZyApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiByZXN1bHRfdHlwZTsKKworICAgICAgICAgICAgICAgIGlmICggKEVuZDw9QmVnaW4pIHx8ICggc3RhdGljX2Nhc3Q8dW5zaWduZWQgaW50PihFbmQtQmVnaW4pIDwgTiApICkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF90eXBlKCBCZWdpbiwgRW5kICk7CisKKyAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoIEVuZC1OLCBFbmQgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgZmluZF90YWlsX2ltcGwoCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCwKKyAgICAgICAgICAgICAgICB1bnNpZ25lZCBpbnQgTiApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgYm9vc3Q6OmRldGFpbDo6CisgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3RyYWl0czxGb3J3YXJkSXRlcmF0b3JUPjo6aXRlcmF0b3JfY2F0ZWdvcnkgY2F0ZWdvcnk7CisKKyAgICAgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfdGFpbF9pbXBsKCBCZWdpbiwgRW5kLCBOLCBjYXRlZ29yeSgpICk7CisgICAgICAgICAgICB9CisKKworCisvLyAgZmluZCBoZWFkIGZ1bmN0b3IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisKKyAgICAgICAgICAgIC8vIGZpbmQgYSBoZWFkIGluIHRoZSBzZXF1ZW5jZSAoIGZ1bmN0b3IgKQorICAgICAgICAgICAgLyoKKyAgICAgICAgICAgICAgICBUaGlzIGZ1bmN0b3IgZmluZCBhIGhlYWQgb2YgdGhlIHNwZWNpZmllZCByYW5nZS4gRm9yCisgICAgICAgICAgICAgICAgYSBzcGVjaWZpZWQgTiwgdGhlIGhlYWQgaXMgYSBzdWJzZXF1ZW5jZSBvZiBOIHN0YXJ0aW5nCisgICAgICAgICAgICAgICAgZWxlbWVudHMgb2YgdGhlIHJhbmdlLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHN0cnVjdCBoZWFkX2ZpbmRlckYKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3Rpb24KKyAgICAgICAgICAgICAgICBoZWFkX2ZpbmRlckYoIGludCBOICkgOiBtX04oTikge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICAgICAgICAgIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmKG1fTj49MCkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpmaW5kX2hlYWRfaW1wbCggQmVnaW4sIEVuZCwgbV9OICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiBSZXM9CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfdGFpbF9pbXBsKCBCZWdpbiwgRW5kLCAtbV9OICk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjptYWtlX2l0ZXJhdG9yX3JhbmdlKEJlZ2luLCBSZXMuYmVnaW4oKSk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgaW50IG1fTjsKKyAgICAgICAgICAgIH07CisKKy8vICBmaW5kIHRhaWwgZnVuY3RvciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKworICAgICAgICAgICAgLy8gZmluZCBhIHRhaWwgaW4gdGhlIHNlcXVlbmNlICggZnVuY3RvciApCisgICAgICAgICAgICAvKgorICAgICAgICAgICAgICAgIFRoaXMgZnVuY3RvciBmaW5kIGEgdGFpbCBvZiB0aGUgc3BlY2lmaWVkIHJhbmdlLiBGb3IKKyAgICAgICAgICAgICAgICBhIHNwZWNpZmllZCBOLCB0aGUgaGVhZCBpcyBhIHN1YnNlcXVlbmNlIG9mIE4gc3RhcnRpbmcKKyAgICAgICAgICAgICAgICBlbGVtZW50cyBvZiB0aGUgcmFuZ2UuCisgICAgICAgICAgICAqLworICAgICAgICAgICAgc3RydWN0IHRhaWxfZmluZGVyRgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdGlvbgorICAgICAgICAgICAgICAgIHRhaWxfZmluZGVyRiggaW50IE4gKSA6IG1fTihOKSB7fQorCisgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+CisgICAgICAgICAgICAgICAgb3BlcmF0b3IoKSgKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQgKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYobV9OPj0wKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OmZpbmRfdGFpbF9pbXBsKCBCZWdpbiwgRW5kLCBtX04gKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IFJlcz0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6ZmluZF9oZWFkX2ltcGwoIEJlZ2luLCBFbmQsIC1tX04gKTsKKworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6Om1ha2VfaXRlcmF0b3JfcmFuZ2UoUmVzLmVuZCgpLCBFbmQpOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIGludCBtX047CisgICAgICAgICAgICB9OworCisvLyAgZmluZCB0b2tlbiBmdW5jdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gZmluZCBhIHRva2VuIGluIGEgc2VxdWVuY2UgKCBmdW5jdG9yICkKKyAgICAgICAgICAgIC8qCisgICAgICAgICAgICAgICAgVGhpcyBmaW5kIGZ1bmN0b3IgZmluZHMgYSB0b2tlbiBzcGVjaWZpZWQgYmUgYSBwcmVkaWNhdGUKKyAgICAgICAgICAgICAgICBpbiBhIHNlcXVlbmNlLiBJdCBpcyBlcXVpdmFsZW50IG9mIHN0ZDo6ZmluZCBhbGdvcml0aG0sCisgICAgICAgICAgICAgICAgd2l0aCBhbiBleGNlcHRpb24gdGhhdCBpdCByZXR1cm4gcmFuZ2UgaW5zdGVhZCBvZiBhIHNpbmdsZQorICAgICAgICAgICAgICAgIGl0ZXJhdG9yLgorCisgICAgICAgICAgICAgICAgSWYgYkNvbXByZXNzIGlzIHNldCB0byB0cnVlLCBhZGphY2VudCBtYXRjaGluZyB0b2tlbnMgYXJlCisgICAgICAgICAgICAgICAgY29uY2F0ZW5hdGVkIGludG8gb25lIG1hdGNoLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBQcmVkaWNhdGVUID4KKyAgICAgICAgICAgIHN0cnVjdCB0b2tlbl9maW5kZXJGCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0aW9uCisgICAgICAgICAgICAgICAgdG9rZW5fZmluZGVyRigKKyAgICAgICAgICAgICAgICAgICAgUHJlZGljYXRlVCBQcmVkLAorICAgICAgICAgICAgICAgICAgICB0b2tlbl9jb21wcmVzc19tb2RlX3R5cGUgZUNvbXByZXNzPXRva2VuX2NvbXByZXNzX29mZiApIDoKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fUHJlZChQcmVkKSwgbV9lQ29tcHJlc3MoZUNvbXByZXNzKSB7fQorCisgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+CisgICAgICAgICAgICAgICAgb3BlcmF0b3IoKSgKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQgKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgdHlwZWRlZiBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3JUPiByZXN1bHRfdHlwZTsKKworICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEl0PXN0ZDo6ZmluZF9pZiggQmVnaW4sIEVuZCwgbV9QcmVkICk7CisKKyAgICAgICAgICAgICAgICAgICAgaWYoIEl0PT1FbmQgKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoIEVuZCwgRW5kICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEl0Mj1JdDsKKworICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG1fZUNvbXByZXNzPT10b2tlbl9jb21wcmVzc19vbiApCisgICAgICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCBmaXJzdCBub24tbWF0Y2hpbmcgY2hhcmFjdGVyCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoIEl0MiE9RW5kICYmIG1fUHJlZCgqSXQyKSApICsrSXQyOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgYnkgb25lIHBvc2l0aW9uCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgKytJdDI7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggSXQsIEl0MiApOworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgbV9QcmVkOworICAgICAgICAgICAgICAgIHRva2VuX2NvbXByZXNzX21vZGVfdHlwZSBtX2VDb21wcmVzczsKKyAgICAgICAgICAgIH07CisKKy8vICBmaW5kIHJhbmdlIGZ1bmN0b3IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgICAgICAvLyBmaW5kIGEgcmFuZ2UgaW4gdGhlIHNlcXVlbmNlICggZnVuY3RvciApCisgICAgICAgICAgICAvKgorICAgICAgICAgICAgICAgIFRoaXMgZnVuY3RvciBhY3R1YWxseSBkb2VzIG5vdCBwZXJmb3JtIGFueSBmaW5kIG9wZXJhdGlvbi4KKyAgICAgICAgICAgICAgICBJdCBhbHdheXMgcmV0dXJucyBnaXZlbiBpdGVyYXRvciByYW5nZSBhcyBhIHJlc3VsdC4KKyAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IxVD4KKyAgICAgICAgICAgIHN0cnVjdCByYW5nZV9maW5kZXJGCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBGb3J3YXJkSXRlcmF0b3IxVCBpbnB1dF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8aW5wdXRfaXRlcmF0b3JfdHlwZT4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3Rpb24KKyAgICAgICAgICAgICAgICByYW5nZV9maW5kZXJGKAorICAgICAgICAgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIEVuZCApIDogbV9SYW5nZShCZWdpbiwgRW5kKSB7fQorCisgICAgICAgICAgICAgICAgcmFuZ2VfZmluZGVyRihjb25zdCBpdGVyYXRvcl9yYW5nZTxpbnB1dF9pdGVyYXRvcl90eXBlPiYgUmFuZ2UpIDoKKyAgICAgICAgICAgICAgICAgICAgbV9SYW5nZShSYW5nZSkge30KKworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IyVCA+CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Rm9yd2FyZEl0ZXJhdG9yMlQ+CisgICAgICAgICAgICAgICAgb3BlcmF0b3IoKSgKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMlQsCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvcjJUICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisjaWYgQk9PU1RfV09SS0FST1VORCggX19NV0VSS1NfXywgPD0gMHgzMDAzICkgCisgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcl9yYW5nZTxjb25zdCBGb3J3YXJkSXRlcmF0b3IyVD4odGhpcy0+bV9SYW5nZSk7CisjZWxzZQorICAgICAgICAgICAgICAgICAgICByZXR1cm4gbV9SYW5nZTsKKyNlbmRpZgorICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxpbnB1dF9pdGVyYXRvcl90eXBlPiBtX1JhbmdlOworICAgICAgICAgICAgfTsKKworCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRklOREVSX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kZXJfcmVnZXguaHBwCkBAIC0wLDAgKzEsMTIyIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kX3JlZ2V4LmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRFUl9SRUdFWF9ERVRBSUxfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19GSU5ERVJfUkVHRVhfREVUQUlMX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JlZ2V4LmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlX2NvcmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gIHJlZ2V4IGZpbmQgZnVuY3RvciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIHJlZ2V4IHNlYXJjaCByZXN1bHQKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIHN0cnVjdCByZWdleF9zZWFyY2hfcmVzdWx0IDogCisgICAgICAgICAgICAgICAgcHVibGljIGl0ZXJhdG9yX3JhbmdlPEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHJlZ2V4X3NlYXJjaF9yZXN1bHQ8SXRlcmF0b3JUPiB0eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8SXRlcmF0b3JUPiBiYXNlX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgYmFzZV90eXBlOjp2YWx1ZV90eXBlIHZhbHVlX3R5cGU7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgYmFzZV90eXBlOjpkaWZmZXJlbmNlX3R5cGUgZGlmZmVyZW5jZV90eXBlOworICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIGJhc2VfdHlwZTo6Y29uc3RfaXRlcmF0b3IgY29uc3RfaXRlcmF0b3I7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgYmFzZV90eXBlOjppdGVyYXRvciBpdGVyYXRvcjsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGJvb3N0OjptYXRjaF9yZXN1bHRzPGl0ZXJhdG9yPiBtYXRjaF9yZXN1bHRzX3R5cGU7CisKKyAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3Rpb24KKworICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdGlvbiBmcm9tIHRoZSBtYXRjaCByZXN1bHQKKyAgICAgICAgICAgICAgICByZWdleF9zZWFyY2hfcmVzdWx0KCBjb25zdCBtYXRjaF9yZXN1bHRzX3R5cGUmIE1hdGNoUmVzdWx0cyApIDoKKyAgICAgICAgICAgICAgICAgICAgYmFzZV90eXBlKCBNYXRjaFJlc3VsdHNbMF0uZmlyc3QsIE1hdGNoUmVzdWx0c1swXS5zZWNvbmQgKSwKKyAgICAgICAgICAgICAgICAgICAgbV9NYXRjaFJlc3VsdHMoIE1hdGNoUmVzdWx0cyApIHt9CisgICAgICAgICAgICAgICAgCisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0aW9uIG9mIGVtcHR5IG1hdGNoLiBFbmQgaXRlcmF0b3IgaGFzIHRvIGJlIHNwZWNpZmllZAorICAgICAgICAgICAgICAgIHJlZ2V4X3NlYXJjaF9yZXN1bHQoIEl0ZXJhdG9yVCBFbmQgKSA6CisgICAgICAgICAgICAgICAgICAgIGJhc2VfdHlwZSggRW5kLCBFbmQgKSB7fQorCisgICAgICAgICAgICAgICAgcmVnZXhfc2VhcmNoX3Jlc3VsdCggY29uc3QgcmVnZXhfc2VhcmNoX3Jlc3VsdCYgT3RoZXIgKSA6CisgICAgICAgICAgICAgICAgICAgIGJhc2VfdHlwZSggT3RoZXIuYmVnaW4oKSwgT3RoZXIuZW5kKCkgKSwKKyAgICAgICAgICAgICAgICAgICAgbV9NYXRjaFJlc3VsdHMoIE90aGVyLm1fTWF0Y2hSZXN1bHRzICkge30KKworICAgICAgICAgICAgICAgIC8vIEFzc2lnbm1lbnQKKyAgICAgICAgICAgICAgICByZWdleF9zZWFyY2hfcmVzdWx0JiBvcGVyYXRvcj0oIGNvbnN0IHJlZ2V4X3NlYXJjaF9yZXN1bHQmIE90aGVyICkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGJhc2VfdHlwZTo6b3BlcmF0b3I9KCBPdGhlciApOworICAgICAgICAgICAgICAgICAgICBtX01hdGNoUmVzdWx0cz1PdGhlci5tX01hdGNoUmVzdWx0czsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuICp0aGlzOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIC8vIE1hdGNoIHJlc3VsdCByZXRyaWV2YWwKKyAgICAgICAgICAgICAgICBjb25zdCBtYXRjaF9yZXN1bHRzX3R5cGUmIG1hdGNoX3Jlc3VsdHMoKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1fTWF0Y2hSZXN1bHRzOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICAvLyBTYXZlZCBtYXRjaCByZXN1bHQKKyAgICAgICAgICAgICAgICBtYXRjaF9yZXN1bHRzX3R5cGUgbV9NYXRjaFJlc3VsdHM7CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICAvLyBmaW5kX3JlZ2V4CisgICAgICAgICAgICAvKgorICAgICAgICAgICAgICAgIFJlZ2V4IGJhc2VkIHNlYXJjaCBmdW5jdG9yCisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmVnRXhUPgorICAgICAgICAgICAgc3RydWN0IGZpbmRfcmVnZXhGCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBSZWdFeFQgcmVnZXhfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGNvbnN0IFJlZ0V4VCYgcmVnZXhfcmVmZXJlbmNlX3R5cGU7CisgICAgICAgICAgICAgICAgICAgIAorICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdGlvbgorICAgICAgICAgICAgICAgIGZpbmRfcmVnZXhGKCByZWdleF9yZWZlcmVuY2VfdHlwZSBSeCwgbWF0Y2hfZmxhZ190eXBlIE1hdGNoRmxhZ3MgPSBtYXRjaF9kZWZhdWx0ICkgOiAKKyAgICAgICAgICAgICAgICAgICAgbV9SeChSeCksIG1fTWF0Y2hGbGFncyhNYXRjaEZsYWdzKSB7fSAgIAorCisgICAgICAgICAgICAgICAgLy8gT3BlcmF0aW9uCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIHJlZ2V4X3NlYXJjaF9yZXN1bHQ8Rm9yd2FyZEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICBvcGVyYXRvcigpKCAKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBCZWdpbiwgCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHR5cGVkZWYgRm9yd2FyZEl0ZXJhdG9yVCBpbnB1dF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgICAgICAgICB0eXBlZGVmIHJlZ2V4X3NlYXJjaF9yZXN1bHQ8Rm9yd2FyZEl0ZXJhdG9yVD4gcmVzdWx0X3R5cGU7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGFudGlhdGUgbWF0Y2ggcmVzdWx0CisgICAgICAgICAgICAgICAgICAgIG1hdGNoX3Jlc3VsdHM8aW5wdXRfaXRlcmF0b3JfdHlwZT4gcmVzdWx0OworICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIGEgbWF0Y2gKKyAgICAgICAgICAgICAgICAgICAgaWYgKCA6OmJvb3N0OjpyZWdleF9zZWFyY2goIEJlZ2luLCBFbmQsIHJlc3VsdCwgbV9SeCwgbV9NYXRjaEZsYWdzICkgKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdHJ1Y3QgYSByZXN1bHQKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggcmVzdWx0ICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eSByZXN1bHQKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfdHlwZSggRW5kICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgcmVnZXhfcmVmZXJlbmNlX3R5cGUgbV9SeDsgLy8gUmVnZXhwCisgICAgICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIG1fTWF0Y2hGbGFnczsgICAgIC8vIG1hdGNoIGZsYWdzCisgICAgICAgICAgICB9OworCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRklORF9ERVRBSUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvZm9ybWF0dGVyLmhwcApAQCAtMCwwICsxLDExOSBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgZm9ybWF0dGVyLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfRk9STUFUVEVSX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0ZPUk1BVFRFUl9ERVRBSUxfSFBQCisKKworI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlX2NvcmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2JlZ2luLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9lbmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2NvbnN0X2l0ZXJhdG9yLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL3V0aWwuaHBwPgorCisvLyAgZ2VuZXJpYyByZXBsYWNlIGZ1bmN0b3JzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKyAgICAgICAgbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vICBjb25zdCBmb3JtYXQgZnVuY3RvciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gY29uc3RhbnQgZm9ybWF0IGZ1bmN0b3IKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgICAgIHN0cnVjdCBjb25zdF9mb3JtYXRGCisgICAgICAgICAgICB7CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FCisgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUgZm9ybWF0X2l0ZXJhdG9yOworICAgICAgICAgICAgICAgIHR5cGVkZWYgaXRlcmF0b3JfcmFuZ2U8Zm9ybWF0X2l0ZXJhdG9yPiByZXN1bHRfdHlwZTsKKyAgICAgICAgICAgIAorICAgICAgICAgICAgcHVibGljOgorICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdGlvbgorICAgICAgICAgICAgICAgIGNvbnN0X2Zvcm1hdEYoY29uc3QgUmFuZ2VUJiBGb3JtYXQpIDoKKyAgICAgICAgICAgICAgICAgICAgbV9Gb3JtYXQoOjpib29zdDo6YmVnaW4oRm9ybWF0KSwgOjpib29zdDo6ZW5kKEZvcm1hdCkpIHt9CisKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb24KKyNpZiBCT09TVF9XT1JLQVJPVU5EKF9fQk9STEFORENfXywgQk9PU1RfVEVTVEVEX0FUKDB4NTY0KSkKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICAgICAgICAgIHJlc3VsdF90eXBlJiBvcGVyYXRvcigpKGNvbnN0IFJhbmdlMlQmKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1fRm9ybWF0OworICAgICAgICAgICAgICAgIH0KKyNlbmRpZgorCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRfdHlwZSYgb3BlcmF0b3IoKShjb25zdCBSYW5nZTJUJikgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBtX0Zvcm1hdDsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHByaXZhdGU6CisgICAgICAgICAgICAgICAgcmVzdWx0X3R5cGUgbV9Gb3JtYXQ7CisgICAgICAgICAgICB9OworCisvLyAgaWRlbnRpdHkgZm9ybWF0IGZ1bmN0b3IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIGlkZW50aXR5IGZvcm1hdCBmdW5jdG9yCisgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgICAgICBzdHJ1Y3QgaWRlbnRpdHlfZm9ybWF0RgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBSYW5nZTJUID4KKyAgICAgICAgICAgICAgICBjb25zdCBSYW5nZVQmIG9wZXJhdG9yKCkoY29uc3QgUmFuZ2UyVCYgUmVwbGFjZSkgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBSYW5nZVQoOjpib29zdDo6YmVnaW4oUmVwbGFjZSksIDo6Ym9vc3Q6OmVuZChSZXBsYWNlKSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKworLy8gIGVtcHR5IGZvcm1hdCBmdW5jdG9yICggdXNlZCBieSBlcmFzZSApIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisgICAgICAgIAorICAgICAgICAgICAgLy8gZW1wdHkgZm9ybWF0IGZ1bmN0b3IKKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBDaGFyVCA+CisgICAgICAgICAgICBzdHJ1Y3QgZW1wdHlfZm9ybWF0RgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBSZXBsYWNlVCA+CisgICAgICAgICAgICAgICAgZW1wdHlfY29udGFpbmVyPENoYXJUPiBvcGVyYXRvcigpKGNvbnN0IFJlcGxhY2VUJikgY29uc3QKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eV9jb250YWluZXI8Q2hhclQ+KCk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKworLy8gIGRpc3NlY3QgZm9ybWF0IGZ1bmN0b3IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIGRpc3NlY3QgZm9ybWF0IGZ1bmN0b3IKKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQ+CisgICAgICAgICAgICBzdHJ1Y3QgZGlzc2VjdF9mb3JtYXRGCisgICAgICAgICAgICB7CisgICAgICAgICAgICBwdWJsaWM6CisgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0aW9uCisgICAgICAgICAgICAgICAgZGlzc2VjdF9mb3JtYXRGKEZpbmRlclQgRmluZGVyKSA6CisgICAgICAgICAgICAgICAgICBtX0ZpbmRlcihGaW5kZXIpIHt9CisKKyAgICAgICAgICAgICAgICAgIC8vIE9wZXJhdGlvbgorICAgICAgICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICAgICAgICAgICAgaW5saW5lIGl0ZXJhdG9yX3JhbmdlPCAKKyAgICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4KKyAgICAgICAgICAgICAgICAgIG9wZXJhdG9yKCkoY29uc3QgUmFuZ2VUJiBSZXBsYWNlKSBjb25zdAorICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtX0ZpbmRlcig6OmJvb3N0OjpiZWdpbihSZXBsYWNlKSwgOjpib29zdDo6ZW5kKFJlcGxhY2UpKTsKKyAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBGaW5kZXJUIG1fRmluZGVyOworICAgICAgICAgICAgfTsKKworCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRk9STUFUVEVSX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9mb3JtYXR0ZXJfcmVnZXguaHBwCkBAIC0wLDAgKzEsNjEgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IGZvcm1hdHRlcl9yZWdleC5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19GT1JNQVRURVJfUkVHRVhfREVUQUlMX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfRk9STUFUVEVSX1JFR0VYX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxzdHJpbmc+CisjaW5jbHVkZSA8Ym9vc3QvcmVnZXguaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2ZpbmRlcl9yZWdleC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisgICAgICAgIG5hbWVzcGFjZSBkZXRhaWwgeworCisvLyAgcmVnZXggZm9ybWF0IGZ1bmN0b3IgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgICAgICAvLyByZWdleCBmb3JtYXQgZnVuY3RvcgorICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU3RyaW5nVD4KKyAgICAgICAgICAgIHN0cnVjdCByZWdleF9mb3JtYXRGCisgICAgICAgICAgICB7CisgICAgICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgICAgIHR5cGVkZWYgU3RyaW5nVCByZXN1bHRfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSBTdHJpbmdUOjp2YWx1ZV90eXBlIGNoYXJfdHlwZTsKKworICAgICAgICAgICAgcHVibGljOgorICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdGlvbgorICAgICAgICAgICAgICAgIHJlZ2V4X2Zvcm1hdEYoIGNvbnN0IFN0cmluZ1QmIEZtdCwgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPWZvcm1hdF9kZWZhdWx0ICkgOgorICAgICAgICAgICAgICAgICAgICBtX0ZtdChGbXQpLCBtX0ZsYWdzKCBGbGFncyApIHt9CisKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBJbnB1dEl0ZXJhdG9yVD4KKyAgICAgICAgICAgICAgICByZXN1bHRfdHlwZSBvcGVyYXRvcigpKCAKKyAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnZXhfc2VhcmNoX3Jlc3VsdDxJbnB1dEl0ZXJhdG9yVD4mIFJlcGxhY2UgKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKCBSZXBsYWNlLmVtcHR5KCkgKQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0X3R5cGUoKTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICBlbHNlCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZXBsYWNlLm1hdGNoX3Jlc3VsdHMoKS5mb3JtYXQoIG1fRm10LCBtX0ZsYWdzICk7ICAgICAgICAgICAgICAgICAgICAgIAorICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgICAgICBjb25zdCBTdHJpbmdUJiBtX0ZtdDsKKyAgICAgICAgICAgICAgICBtYXRjaF9mbGFnX3R5cGUgbV9GbGFnczsKKyAgICAgICAgICAgIH07CisKKyAgICAgICAgCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfRk9STUFUVEVSX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9wcmVkaWNhdGUuaHBwCkBAIC0wLDAgKzEsNzcgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHByZWRpY2F0ZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19QUkVESUNBVEVfREVUQUlMX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfUFJFRElDQVRFX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGl0ZXJhdG9yPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisgICAgICAgIG5hbWVzcGFjZSBkZXRhaWwgeworCisvLyAgZW5kc193aXRoIHByZWRpY2F0ZSBpbXBsZW1lbnRhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvcjFULCAKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IyVCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICAgICAgaW5saW5lIGJvb2wgZW5kc193aXRoX2l0ZXJfc2VsZWN0KCAKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IxVCBCZWdpbiwgCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMVQgRW5kLCAKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IyVCBTdWJCZWdpbiwKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3IyVCBTdWJFbmQsCisgICAgICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wLAorICAgICAgICAgICAgICAgIHN0ZDo6YmlkaXJlY3Rpb25hbF9pdGVyYXRvcl90YWcpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMVQgaXQ9RW5kOworICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvcjJUIHBpdD1TdWJFbmQ7CisgICAgICAgICAgICAgICAgZm9yKDtpdCE9QmVnaW4gJiYgcGl0IT1TdWJCZWdpbjspCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpZiggIShDb21wKCooLS1pdCksKigtLXBpdCkpKSApCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgcmV0dXJuIHBpdD09U3ViQmVnaW47CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3IxVCwgCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yMlQsCisgICAgICAgICAgICAgICAgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgICAgIGlubGluZSBib29sIGVuZHNfd2l0aF9pdGVyX3NlbGVjdCggCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMVQgQmVnaW4sIAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvcjFUIEVuZCwgCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMlQgU3ViQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yMlQgU3ViRW5kLAorICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgQ29tcCwKKyAgICAgICAgICAgICAgICBzdGQ6OmZvcndhcmRfaXRlcmF0b3JfdGFnKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmICggU3ViQmVnaW49PVN1YkVuZCApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdWJzZXF1ZW5jZSBjaGVjaworICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxGb3J3YXJkSXRlcmF0b3IxVD4gUmVzdWx0CisgICAgICAgICAgICAgICAgICAgID1sYXN0X2ZpbmRlciggCisgICAgICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjptYWtlX2l0ZXJhdG9yX3JhbmdlKFN1YkJlZ2luLCBTdWJFbmQpLAorICAgICAgICAgICAgICAgICAgICAgICAgQ29tcCkoQmVnaW4sIEVuZCk7CisKKyAgICAgICAgICAgICAgICByZXR1cm4gIVJlc3VsdC5lbXB0eSgpICYmIFJlc3VsdC5lbmQoKT09RW5kOworICAgICAgICAgICAgfQorCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19QUkVESUNBVEVfREVUQUlMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL3JlcGxhY2Vfc3RvcmFnZS5ocHAKQEAgLTAsMCArMSwxNTkgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHJlcGxhY2Vfc3RvcmFnZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19SRVBMQUNFX1NUT1JBR0VfREVUQUlMX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfUkVQTEFDRV9TVE9SQUdFX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxhbGdvcml0aG0+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Jvb2wuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc2VxdWVuY2VfdHJhaXRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9zZXF1ZW5jZS5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisgICAgICAgIG5hbWVzcGFjZSBkZXRhaWwgeworCisvLyAgc3RvcmFnZSBoYW5kbGluZyByb3V0aW5lcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisgICAgICAgICAgICAKKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBTdG9yYWdlVCwgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JUID4KKyAgICAgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgbW92ZV9mcm9tX3N0b3JhZ2UoCisgICAgICAgICAgICAgICAgU3RvcmFnZVQmIFN0b3JhZ2UsCisgICAgICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIERlc3RCZWdpbiwKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgRGVzdEVuZCApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dEl0PURlc3RCZWdpbjsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICB3aGlsZSggIVN0b3JhZ2UuZW1wdHkoKSAmJiBPdXRwdXRJdCE9RGVzdEVuZCApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAqT3V0cHV0SXQ9U3RvcmFnZS5mcm9udCgpOworICAgICAgICAgICAgICAgICAgICBTdG9yYWdlLnBvcF9mcm9udCgpOworICAgICAgICAgICAgICAgICAgICArK091dHB1dEl0OworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIHJldHVybiBPdXRwdXRJdDsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFN0b3JhZ2VULCB0eXBlbmFtZSBXaGF0VCA+CisgICAgICAgICAgICBpbmxpbmUgdm9pZCBjb3B5X3RvX3N0b3JhZ2UoCisgICAgICAgICAgICAgICAgU3RvcmFnZVQmIFN0b3JhZ2UsCisgICAgICAgICAgICAgICAgY29uc3QgV2hhdFQmIFdoYXQgKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIFN0b3JhZ2UuaW5zZXJ0KCBTdG9yYWdlLmVuZCgpLCA6OmJvb3N0OjpiZWdpbihXaGF0KSwgOjpib29zdDo6ZW5kKFdoYXQpICk7CisgICAgICAgICAgICB9CisKKworLy8gIHByb2Nlc3Mgc2VnbWVudCByb3V0aW5lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgdGVtcGxhdGU8IGJvb2wgSGFzU3RhYmxlSXRlcmF0b3JzID4KKyAgICAgICAgICAgIHN0cnVjdCBwcm9jZXNzX3NlZ21lbnRfaGVscGVyCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gT3B0aW1pemVkIHZlcnNpb24gb2YgcHJvY2Vzc19zZWdtZW50IGZvciBnZW5lcmljIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBTdG9yYWdlVCwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgSW5wdXRULAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2VUJiBTdG9yYWdlLAorICAgICAgICAgICAgICAgICAgICBJbnB1dFQmIC8qSW5wdXQqLywKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBJbnNlcnRJdCwKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBTZWdtZW50QmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgU2VnbWVudEVuZCApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBDb3B5IGRhdGEgZnJvbSB0aGUgc3RvcmFnZSB1bnRpbCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWdtZW50CisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSXQ9Ojpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6Om1vdmVfZnJvbV9zdG9yYWdlKCBTdG9yYWdlLCBJbnNlcnRJdCwgU2VnbWVudEJlZ2luICk7CisKKyAgICAgICAgICAgICAgICAgICAgLy8gMyBjYXNlcyBhcmUgcG9zc2libGUgOgorICAgICAgICAgICAgICAgICAgICAvLyAgIGEpIFN0b3JhZ2UgaXMgZW1wdHksIEl0PT1TZWdtZW50QmVnaW4KKyAgICAgICAgICAgICAgICAgICAgLy8gICBiKSBTdG9yYWdlIGlzIGVtcHR5LCBJdCE9U2VnbWVudEJlZ2luCisgICAgICAgICAgICAgICAgICAgIC8vICAgYykgU3RvcmFnZSBpcyBub3QgZW1wdHkKKworICAgICAgICAgICAgICAgICAgICBpZiggU3RvcmFnZS5lbXB0eSgpICkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgaWYoIEl0PT1TZWdtZW50QmVnaW4gKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgYSkgZXZlcnl0aGluZyBpcyBncmFuZCwganVzdCByZXR1cm4gZW5kIG9mIHNlZ21lbnQKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VnbWVudEVuZDsKKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIGIpIG1vdmUgdGhlIHNlZ21lbnQgYmFja3dhcmRzCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZDo6Y29weSggU2VnbWVudEJlZ2luLCBTZWdtZW50RW5kLCBJdCApOworICAgICAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSBjKSAtPiBzaGlmdCB0aGUgc2VnbWVudCB0byB0aGUgbGVmdCBhbmQga2VlcCB0aGUgb3ZlcmxhcCBpbiB0aGUgc3RvcmFnZQorICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoIEl0IT1TZWdtZW50RW5kICkKKyAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB2YWx1ZSBpbnRvIHN0b3JhZ2UKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlLnB1c2hfYmFjayggKkl0ICk7CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0b3AgZnJvbSB0aGUgc3RvcmFnZSBhbmQgcHV0IGl0IGhlcmUKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAqSXQ9U3RvcmFnZS5mcm9udCgpOworICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UucG9wX2Zyb250KCk7CisKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgKytJdDsKKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEl0OworICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8PgorICAgICAgICAgICAgc3RydWN0IHByb2Nlc3Nfc2VnbWVudF9oZWxwZXI8IHRydWUgPgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIC8vIE9wdGltaXplZCB2ZXJzaW9uIG9mIHByb2Nlc3Nfc2VnbWVudCBmb3IgbGlzdC1saWtlIHNlcXVlbmNlCisgICAgICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBTdG9yYWdlVCwKKyAgICAgICAgICAgICAgICAgICAgdHlwZW5hbWUgSW5wdXRULAorICAgICAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2VUJiBTdG9yYWdlLAorICAgICAgICAgICAgICAgICAgICBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEluc2VydEl0LAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIFNlZ21lbnRCZWdpbiwKKyAgICAgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBTZWdtZW50RW5kICkKKworICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCByZXBsYWNlIHRvIGRvIHRoZSBqb2IKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnJlcGxhY2UoIElucHV0LCBJbnNlcnRJdCwgU2VnbWVudEJlZ2luLCBTdG9yYWdlICk7CisgICAgICAgICAgICAgICAgICAgIC8vIEVtcHR5IHRoZSBzdG9yYWdlCisgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UuY2xlYXIoKTsKKyAgICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0b3JzIHdlcmUgbm90IGNoYW5nZWQsIHNpbXBseSByZXR1cm4gdGhlIGVuZCBvZiBzZWdtZW50CisgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZWdtZW50RW5kOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH07CisKKyAgICAgICAgICAgIC8vIFByb2Nlc3Mgb25lIHNlZ21lbnQgaW4gdGhlIHJlcGxhY2VfYWxsIGFsZ29yaXRobQorICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIFN0b3JhZ2VULAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIElucHV0VCwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgIGlubGluZSBGb3J3YXJkSXRlcmF0b3JUIHByb2Nlc3Nfc2VnbWVudCgKKyAgICAgICAgICAgICAgICBTdG9yYWdlVCYgU3RvcmFnZSwKKyAgICAgICAgICAgICAgICBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSW5zZXJ0SXQsCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBTZWdtZW50QmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBTZWdtZW50RW5kICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gCisgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Nfc2VnbWVudF9oZWxwZXI8IAorICAgICAgICAgICAgICAgICAgICAgICAgaGFzX3N0YWJsZV9pdGVyYXRvcnM8SW5wdXRUPjo6dmFsdWU+KCkoCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UsIElucHV0LCBJbnNlcnRJdCwgU2VnbWVudEJlZ2luLCBTZWdtZW50RW5kICk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICAKKworICAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX1JFUExBQ0VfU1RPUkFHRV9ERVRBSUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvc2VxdWVuY2UuaHBwCkBAIC0wLDAgKzEsMjAwIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBzZXF1ZW5jZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19ERVRBSUxfU0VRVUVOQ0VfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19ERVRBSUxfU0VRVUVOQ0VfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Jvb2wuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9sb2dpY2FsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc2VxdWVuY2VfdHJhaXRzLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKyAgICAgICAgbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vICBpbnNlcnQgaGVscGVycyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisgICAgICAgIAorICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIElucHV0VCwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCA+CisgICAgICAgICAgICBpbmxpbmUgdm9pZCBpbnNlcnQoCisgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgSW5wdXRUOjppdGVyYXRvciBBdCwKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBJbnB1dC5pbnNlcnQoIEF0LCBCZWdpbiwgRW5kICk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBJbnB1dFQsIHR5cGVuYW1lIEluc2VydFQgPgorICAgICAgICAgICAgaW5saW5lIHZvaWQgaW5zZXJ0KAorICAgICAgICAgICAgICAgIElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgQXQsCisgICAgICAgICAgICAgICAgY29uc3QgSW5zZXJ0VCYgSW5zZXJ0ICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6aW5zZXJ0KCBJbnB1dCwgQXQsIDo6Ym9vc3Q6OmJlZ2luKEluc2VydCksIDo6Ym9vc3Q6OmVuZChJbnNlcnQpICk7CisgICAgICAgICAgICB9CisgICAgICAgICAgIAorLy8gIGVyYXNlIGhlbHBlciAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgLy8gRXJhc2UgYSByYW5nZSBpbiB0aGUgc2VxdWVuY2UKKyAgICAgICAgICAgIC8qCisgICAgICAgICAgICAgICAgUmV0dXJucyB0aGUgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgZXJhc2Ugc3VicmFuZ2UKKyAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgSW5wdXRUID4KKyAgICAgICAgICAgIGlubGluZSB0eXBlbmFtZSBJbnB1dFQ6Oml0ZXJhdG9yIGVyYXNlKAorICAgICAgICAgICAgICAgIElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgRnJvbSwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgSW5wdXRUOjppdGVyYXRvciBUbyApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIElucHV0LmVyYXNlKCBGcm9tLCBUbyApOworICAgICAgICAgICAgfQorCisvLyAgcmVwbGFjZSBoZWxwZXIgaW1wbGVtZW50YXRpb24gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgICAgICAvLyBPcHRpbWl6ZWQgdmVyc2lvbiBvZiByZXBsYWNlIGZvciBnZW5lcmljIHNlcXVlbmNlIGNvbnRhaW5lcnMKKyAgICAgICAgICAgIC8vIEFzc3VtcHRpb246IGluc2VydCBhbmQgZXJhc2UgYXJlIGV4cGVuc2l2ZQorICAgICAgICAgICAgdGVtcGxhdGU8IGJvb2wgSGFzQ29uc3RUaW1lT3BlcmF0aW9ucyA+CisgICAgICAgICAgICBzdHJ1Y3QgcmVwbGFjZV9jb25zdF90aW1lX2hlbHBlcgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBJbnB1dFQsIHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IoKSgKKyAgICAgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgRnJvbSwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgVG8sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIENvcHkgZGF0YSB0byB0aGUgY29udGFpbmVyICggYXMgbXVjaCBhcyBwb3NzaWJsZSApCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSW5zZXJ0SXQ9QmVnaW47CisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIElucHV0SXQ9RnJvbTsKKyAgICAgICAgICAgICAgICAgICAgZm9yKDsgSW5zZXJ0SXQhPUVuZCAmJiBJbnB1dEl0IT1UbzsgSW5zZXJ0SXQrKywgSW5wdXRJdCsrICkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgKklucHV0SXQ9Kkluc2VydEl0OworICAgICAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICAgICAgaWYgKCBJbnNlcnRJdCE9RW5kICkKKyAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBzZXF1ZW5jZSBpcyBsb25nZXIsIGluc2VydCBpdAorICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQuaW5zZXJ0KCBJbnB1dEl0LCBJbnNlcnRJdCwgRW5kICk7CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIElucHV0SXQhPVRvICkKKyAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHNlcXVlbmNlIGlzIHNob3J0ZXIsIGVyYXNlIHRoZSByZXN0CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQuZXJhc2UoIElucHV0SXQsIFRvICk7CisgICAgICAgICAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICB0ZW1wbGF0ZTw+CisgICAgICAgICAgICBzdHJ1Y3QgcmVwbGFjZV9jb25zdF90aW1lX2hlbHBlcjwgdHJ1ZSA+CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gQ29uc3QtdGltZSBlcmFzZSBhbmQgaW5zZXJ0IG1ldGhvZHMgLT4gdXNlIHRoZW0KKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgSW5wdXRULCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICB2b2lkIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIEZyb20sCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIFRvLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCApIAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgQXQ9SW5wdXQuZXJhc2UoIEZyb20sIFRvICk7CisgICAgICAgICAgICAgICAgICAgIGlmICggQmVnaW4hPUVuZCApCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFJbnB1dC5lbXB0eSgpKQorICAgICAgICAgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAgICAgICAgIElucHV0Lmluc2VydCggQXQsIEJlZ2luLCBFbmQgKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dC5pbnNlcnQoIElucHV0LmJlZ2luKCksIEJlZ2luLCBFbmQgKTsKKyAgICAgICAgICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH07CisKKyAgICAgICAgICAgIC8vIE5vIG5hdGl2ZSByZXBsYWNlIG1ldGhvZAorICAgICAgICAgICAgdGVtcGxhdGU8IGJvb2wgSGFzTmF0aXZlID4KKyAgICAgICAgICAgIHN0cnVjdCByZXBsYWNlX25hdGl2ZV9oZWxwZXIKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgSW5wdXRULCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgICAgICB2b2lkIG9wZXJhdG9yKCkoCisgICAgICAgICAgICAgICAgICAgIElucHV0VCYgSW5wdXQsCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIEZyb20sCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIFRvLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEVuZCApIAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmVwbGFjZV9jb25zdF90aW1lX2hlbHBlcjwgCisgICAgICAgICAgICAgICAgICAgICAgICBib29zdDo6bXBsOjphbmRfPAorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19jb25zdF90aW1lX2luc2VydDxJbnB1dFQ+LAorICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19jb25zdF90aW1lX2VyYXNlPElucHV0VD4gPjo6dmFsdWUgPigpKAorICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQsIEZyb20sIFRvLCBCZWdpbiwgRW5kICk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgLy8gQ29udGFpbmVyIGhhcyBuYXRpdmUgcmVwbGFjZSBtZXRob2QKKyAgICAgICAgICAgIHRlbXBsYXRlPD4KKyAgICAgICAgICAgIHN0cnVjdCByZXBsYWNlX25hdGl2ZV9oZWxwZXI8IHRydWUgPgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBJbnB1dFQsIHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQgPgorICAgICAgICAgICAgICAgIHZvaWQgb3BlcmF0b3IoKSgKKyAgICAgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgRnJvbSwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgVG8sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgRW5kICkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIElucHV0LnJlcGxhY2UoIEZyb20sIFRvLCBCZWdpbiwgRW5kICk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKworLy8gIHJlcGxhY2UgaGVscGVyICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKyAgICAgICAgCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgSW5wdXRULCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgICAgIGlubGluZSB2b2lkIHJlcGxhY2UoCisgICAgICAgICAgICAgICAgSW5wdXRUJiBJbnB1dCwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgSW5wdXRUOjppdGVyYXRvciBGcm9tLAorICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIFRvLAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQgKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHJlcGxhY2VfbmF0aXZlX2hlbHBlcjwgaGFzX25hdGl2ZV9yZXBsYWNlPElucHV0VD46OnZhbHVlID4oKSgKKyAgICAgICAgICAgICAgICAgICAgSW5wdXQsIEZyb20sIFRvLCBCZWdpbiwgRW5kICk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBJbnB1dFQsIHR5cGVuYW1lIEluc2VydFQgPgorICAgICAgICAgICAgaW5saW5lIHZvaWQgcmVwbGFjZSgKKyAgICAgICAgICAgICAgICBJbnB1dFQmIElucHV0LAorICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSBJbnB1dFQ6Oml0ZXJhdG9yIEZyb20sCisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIElucHV0VDo6aXRlcmF0b3IgVG8sCisgICAgICAgICAgICAgICAgY29uc3QgSW5zZXJ0VCYgSW5zZXJ0ICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZihGcm9tIT1UbykKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjpyZXBsYWNlKCBJbnB1dCwgRnJvbSwgVG8sIDo6Ym9vc3Q6OmJlZ2luKEluc2VydCksIDo6Ym9vc3Q6OmVuZChJbnNlcnQpICk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIGVsc2UKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjppbnNlcnQoIElucHV0LCBGcm9tLCA6OmJvb3N0OjpiZWdpbihJbnNlcnQpLCA6OmJvb3N0OjplbmQoSW5zZXJ0KSApOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICB9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfREVUQUlMX1NFUVVFTkNFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL3RyaW0uaHBwCkBAIC0wLDAgKzEsOTUgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHRyaW0uaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfVFJJTV9ERVRBSUxfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19UUklNX0RFVEFJTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9kZXRhaWwvaXRlcmF0b3IuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKworLy8gIHRyaW0gaXRlcmF0b3IgaGVscGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIEZvcndhcmRJdGVyYXRvclQsIHR5cGVuYW1lIFByZWRpY2F0ZVQgPgorICAgICAgICAgICAgaW5saW5lIEZvcndhcmRJdGVyYXRvclQgdHJpbV9lbmRfaXRlcl9zZWxlY3QoIAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSW5CZWdpbiwgCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBJbkVuZCwgCisgICAgICAgICAgICAgICAgUHJlZGljYXRlVCBJc1NwYWNlLAorICAgICAgICAgICAgICAgIHN0ZDo6Zm9yd2FyZF9pdGVyYXRvcl90YWcgKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgVHJpbUl0PUluQmVnaW47CisKKyAgICAgICAgICAgICAgICBmb3IoIEZvcndhcmRJdGVyYXRvclQgSXQ9SW5CZWdpbjsgSXQhPUluRW5kOyArK0l0ICkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGlmICggIUlzU3BhY2UoKkl0KSApIAorICAgICAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgICAgICBUcmltSXQ9SXQ7CisgICAgICAgICAgICAgICAgICAgICAgICArK1RyaW1JdDsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIHJldHVybiBUcmltSXQ7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JULCB0eXBlbmFtZSBQcmVkaWNhdGVUID4KKyAgICAgICAgICAgIGlubGluZSBGb3J3YXJkSXRlcmF0b3JUIHRyaW1fZW5kX2l0ZXJfc2VsZWN0KCAKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEluQmVnaW4sIAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSW5FbmQsIAorICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgSXNTcGFjZSwKKyAgICAgICAgICAgICAgICBzdGQ6OmJpZGlyZWN0aW9uYWxfaXRlcmF0b3JfdGFnICkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBmb3IoIEZvcndhcmRJdGVyYXRvclQgSXQ9SW5FbmQ7IEl0IT1JbkJlZ2luOyAgKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYgKCAhSXNTcGFjZSgqKC0tSXQpKSApCisgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKytJdDsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICByZXR1cm4gSW5CZWdpbjsKKyAgICAgICAgICAgIH0KKyAgIC8vIFNlYXJjaCBmb3IgZmlyc3Qgbm9uIG1hdGNoaW5nIGNoYXJhY3RlciBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCwgdHlwZW5hbWUgUHJlZGljYXRlVCA+CisgICAgICAgICAgICBpbmxpbmUgRm9yd2FyZEl0ZXJhdG9yVCB0cmltX2JlZ2luKCAKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEluQmVnaW4sIAorICAgICAgICAgICAgICAgIEZvcndhcmRJdGVyYXRvclQgSW5FbmQsIAorICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQgSXNTcGFjZSApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBJdD1JbkJlZ2luOworICAgICAgICAgICAgICAgIGZvcig7IEl0IT1JbkVuZDsgKytJdCApCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpZiAoIUlzU3BhY2UoKkl0KSkKKyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJdDsKKyAgICAgICAgICAgICAgICB9CisKKyAgICAgICAgICAgICAgICByZXR1cm4gSXQ7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgZmlyc3Qgbm9uIG1hdGNoaW5nIGNoYXJhY3RlciBmcm9tIHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgRm9yd2FyZEl0ZXJhdG9yVCwgdHlwZW5hbWUgUHJlZGljYXRlVCA+CisgICAgICAgICAgICBpbmxpbmUgRm9yd2FyZEl0ZXJhdG9yVCB0cmltX2VuZCggCisgICAgICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBJbkJlZ2luLCAKKyAgICAgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEluRW5kLCAKKyAgICAgICAgICAgICAgICBQcmVkaWNhdGVUIElzU3BhY2UgKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIGJvb3N0OjpkZXRhaWw6OgorICAgICAgICAgICAgICAgICAgICBpdGVyYXRvcl90cmFpdHM8Rm9yd2FyZEl0ZXJhdG9yVD46Oml0ZXJhdG9yX2NhdGVnb3J5IGNhdGVnb3J5OworCisgICAgICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0cmltX2VuZF9pdGVyX3NlbGVjdCggSW5CZWdpbiwgSW5FbmQsIElzU3BhY2UsIGNhdGVnb3J5KCkgKTsKKyAgICAgICAgICAgIH0KKworCisgICAgICAgIH0gLy8gbmFtZXNwYWNlIGRldGFpbAorICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19UUklNX0RFVEFJTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC91dGlsLmhwcApAQCAtMCwwICsxLDEwNiBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgdXRpbC5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19VVElMX0RFVEFJTF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1VUSUxfREVUQUlMX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGZ1bmN0aW9uYWw+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisgICAgICAgIG5hbWVzcGFjZSBkZXRhaWwgeworCisvLyAgZW1wdHkgY29udGFpbmVyICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vICBlbXB0eV9jb250YWluZXIgCisgICAgICAgICAgICAvKgorICAgICAgICAgICAgICAgIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbHdheXMgZW1wdHkgY29udGFpbmVyLAorICAgICAgICAgICAgICAgIGNvbnRhaW5pbmcgZWxlbWVudHMgb2YgdHlwZSBDaGFyVC4KKworICAgICAgICAgICAgICAgIEl0IGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gYSBjb25zdCB2ZXJzaW9uIG9ubHkKKyAgICAgICAgICAgICovCisgICAgICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgQ2hhclQgPgorICAgICAgICAgICAgc3RydWN0IGVtcHR5X2NvbnRhaW5lciAKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGVtcHR5X2NvbnRhaW5lcjxDaGFyVD4gdHlwZTsgICAgICAgIAorICAgICAgICAgICAgICAgIHR5cGVkZWYgQ2hhclQgdmFsdWVfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHN0ZDo6c2l6ZV90IHNpemVfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHN0ZDo6cHRyZGlmZl90IGRpZmZlcmVuY2VfdHlwZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGNvbnN0IHZhbHVlX3R5cGUmIHJlZmVyZW5jZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGNvbnN0IHZhbHVlX3R5cGUmIGNvbnN0X3JlZmVyZW5jZTsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIGNvbnN0IHZhbHVlX3R5cGUqIGl0ZXJhdG9yOworICAgICAgICAgICAgICAgIHR5cGVkZWYgY29uc3QgdmFsdWVfdHlwZSogY29uc3RfaXRlcmF0b3I7CisKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgICAgICAvLyBPcGVyYXRpb25zCisgICAgICAgICAgICAgICAgY29uc3RfaXRlcmF0b3IgYmVnaW4oKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlaW50ZXJwcmV0X2Nhc3Q8Y29uc3RfaXRlcmF0b3I+KDApOworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIGNvbnN0X2l0ZXJhdG9yIGVuZCgpIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVpbnRlcnByZXRfY2FzdDxjb25zdF9pdGVyYXRvcj4oMCk7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgYm9vbCBlbXB0eSgpIGNvbnN0CisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgICAgICAgICAgfQorCisgICAgICAgICAgICAgICAgc2l6ZV90eXBlIHNpemUoKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfTsKKyAgICAKKy8vICBib3VuZGVkIGNvcHkgYWxnb3JpdGhtICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIEJvdW5kZWQgdmVyc2lvbiBvZiB0aGUgc3RkOjpjb3B5IGFsZ29yaXRobQorICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgSW5wdXRJdGVyYXRvclQsIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVD4KKyAgICAgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgYm91bmRlZF9jb3B5KAorICAgICAgICAgICAgICAgIElucHV0SXRlcmF0b3JUIEZpcnN0LCAKKyAgICAgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yVCBMYXN0LCAKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgRGVzdEZpcnN0LAorICAgICAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBEZXN0TGFzdCApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgSW5wdXRJdGVyYXRvclQgSW5wdXRJdD1GaXJzdDsKKyAgICAgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0SXQ9RGVzdEZpcnN0OworICAgICAgICAgICAgICAgIGZvcig7IElucHV0SXQhPUxhc3QgJiYgT3V0cHV0SXQhPURlc3RMYXN0OyBJbnB1dEl0KyssIE91dHB1dEl0KysgKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgKk91dHB1dEl0PSpJbnB1dEl0OworICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIHJldHVybiBPdXRwdXRJdDsKKyAgICAgICAgICAgIH0KKworLy8gIGl0ZXJhdG9yIHJhbmdlIHV0aWxpdGllcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgICAgIC8vIGNvcHkgcmFuZ2UgZnVuY3RvcgorICAgICAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIFNlcVQsIAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIEl0ZXJhdG9yVD1CT09TVF9TVFJJTkdfVFlQRU5BTUUgU2VxVDo6Y29uc3RfaXRlcmF0b3IgPgorICAgICAgICAgICAgc3RydWN0IGNvcHlfaXRlcmF0b3JfcmFuZ2VGIDogCisgICAgICAgICAgICAgICAgcHVibGljIHN0ZDo6dW5hcnlfZnVuY3Rpb248IGl0ZXJhdG9yX3JhbmdlPEl0ZXJhdG9yVD4sIFNlcVQgPgorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIFNlcVQgb3BlcmF0b3IoKSggY29uc3QgaXRlcmF0b3JfcmFuZ2U8SXRlcmF0b3JUPiYgUmFuZ2UgKSBjb25zdAorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvcHlfcmFuZ2U8U2VxVD4oUmFuZ2UpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH07CisKKyAgICAgICAgfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX1VUSUxfREVUQUlMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZXJhc2UuaHBwCkBAIC0wLDAgKzEsODQ0IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBlcmFzZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDA2LgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19FUkFTRV9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0VSQVNFX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2NvbnN0X2l0ZXJhdG9yLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZF9mb3JtYXQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZGVyLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2Zvcm1hdHRlci5ocHA+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgdmFyaW91cyBlcmFzZSBhbGdvcml0aG1zLiBFYWNoIGFsZ29yaXRobSByZW1vdmVzCisgICAgcGFydChzKSBvZiB0aGUgaW5wdXQgYWNjb3JkaW5nIHRvIGEgc2VhcmNoaW5nIGNyaXRlcmlhLgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gIGVyYXNlX3JhbmdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBFcmFzZSByYW5nZSBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgdGhlIGdpdmVuIHJhbmdlIGZyb20gdGhlIGlucHV0LiBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiAKKyAgICAgICAgICAgIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKyAgICAKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaFJhbmdlIEEgcmFuZ2UgaW4gdGhlIGlucHV0IHRvIGJlIHJlbW92ZWQKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGVyYXNlX3JhbmdlX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGl0ZXJhdG9yX3JhbmdlPAorICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4mIFNlYXJjaFJhbmdlICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyYW5nZV9maW5kZXIoU2VhcmNoUmFuZ2UpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKElucHV0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVyYXNlIHJhbmdlIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgZXJhc2VfcmFuZ2VfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgaXRlcmF0b3JfcmFuZ2U8CisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPiYgU2VhcmNoUmFuZ2UgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJhbmdlX2ZpbmRlcihTZWFyY2hSYW5nZSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgcmFuZ2UgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIHRoZSBnaXZlbiByYW5nZSBmcm9tIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoUmFuZ2UgQSByYW5nZSBpbiB0aGUgaW5wdXQgdG8gYmUgcmVtb3ZlZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSB2b2lkIGVyYXNlX3JhbmdlKCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgIHJhbmdlX2l0ZXJhdG9yPFNlcXVlbmNlVD46OnR5cGU+JiBTZWFyY2hSYW5nZSApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJhbmdlX2ZpbmRlcihTZWFyY2hSYW5nZSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworLy8gIGVyYXNlX2ZpcnN0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEVyYXNlIGZpcnN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgc3Vic3RyaW5nIGZyb20gdGhlIGlucHV0LgorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisgICAgICAgICAgICAKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZXJhc2VfZmlyc3RfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgZmlyc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGVyYXNlX2ZpcnN0X2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgZmlyc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4gCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgdm9pZCBlcmFzZV9maXJzdCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2ggKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisvLyAgZXJhc2VfZmlyc3QgKCBjYXNlIGluc2Vuc2l0aXZlICkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgZmlyc3QgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisgICAgICAgICAgICBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IgCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgaWVyYXNlX2ZpcnN0X2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBmaXJzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgaWVyYXNlX2ZpcnN0X2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKElucHV0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVyYXNlIGZpcnN0IGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgc3Vic3RyaW5nIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4gU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgaWVyYXNlX2ZpcnN0KCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIFNlYXJjaCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisvLyAgZXJhc2VfbGFzdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBFcmFzZSBsYXN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLgorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UxVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGVyYXNlX2xhc3RfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBsYXN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCBlcmFzZV9sYXN0X2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBsYXN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSB2b2lkIGVyYXNlX2xhc3QoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisvLyAgZXJhc2VfbGFzdCAoIGNhc2UgaW5zZW5zaXRpdmUgKSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBFcmFzZSBsYXN0IGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisgICAgICAgICAgICBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgaWVyYXNlX2xhc3RfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgbGFzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgaWVyYXNlX2xhc3RfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpsYXN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBsYXN0IGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLiBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgdm9pZCBpZXJhc2VfbGFzdCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpsYXN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisvLyAgZXJhc2VfbnRoIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgTnRoIG9jY3VycmVuY2Ugb2YgdGhlIHN1YnN0cmluZyBpbiB0aGUgaW5wdXQuCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKyAgICAgICAgICAgIAorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvcgorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgcmVwbGFjZWQuIFRoZSBpbmRleCBpcyAwLWJhc2VkLgorICAgICAgICAgICAgICAgIEZvciBuZWdhdGl2ZSBOLCBtYXRjaGVzIGFyZSBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiBzdHJpbmcuCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZXJhc2VfbnRoX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBudGggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGVyYXNlX250aF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIFNlYXJjaCwKKyAgICAgICAgICAgIGludCBOdGggKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBudGggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIHRoZSBOdGggb2NjdXJyZW5jZSBvZiB0aGUgc3Vic3RyaW5nIGluIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuIAorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgcmVwbGFjZWQuIFRoZSBpbmRleCBpcyAwLWJhc2VkLgorICAgICAgICAgICAgICAgIEZvciBuZWdhdGl2ZSBOLCBtYXRjaGVzIGFyZSBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiBzdHJpbmcuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgdm9pZCBlcmFzZV9udGgoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLAorICAgICAgICAgICAgaW50IE50aCApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06Om50aF9maW5kZXIoU2VhcmNoLCBOdGgpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKElucHV0KSApOworICAgICAgICB9CisKKy8vICBlcmFzZV9udGggKCBjYXNlIGluc2Vuc2l0aXZlICkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgbnRoIGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgTnRoIG9jY3VycmVuY2Ugb2YgdGhlIHN1YnN0cmluZyBpbiB0aGUgaW5wdXQuCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4gCisgICAgICAgICAgICBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuCisgICAgICAgICAgICBccGFyYW0gTnRoIEFuIGluZGV4IG9mIHRoZSBtYXRjaCB0byBiZSByZXBsYWNlZC4gVGhlIGluZGV4IGlzIDAtYmFzZWQuCisgICAgICAgICAgICAgICAgRm9yIG5lZ2F0aXZlIE4sIG1hdGNoZXMgYXJlIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHN0cmluZy4KKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCBpZXJhc2VfbnRoX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCBpZXJhc2VfbnRoX2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLAorICAgICAgICAgICAgaW50IE50aCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06Om50aF9maW5kZXIoU2VhcmNoLCBOdGgsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICBlbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgTnRoIG9jY3VycmVuY2Ugb2YgdGhlIHN1YnN0cmluZyBpbiB0aGUgaW5wdXQuCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4gCisgICAgICAgICAgICBccGFyYW0gTnRoIEFuIGluZGV4IG9mIHRoZSBtYXRjaCB0byBiZSByZXBsYWNlZC4gVGhlIGluZGV4IGlzIDAtYmFzZWQuCisgICAgICAgICAgICAgICAgRm9yIG5lZ2F0aXZlIE4sIG1hdGNoZXMgYXJlIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHN0cmluZy4KKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgdm9pZCBpZXJhc2VfbnRoKCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIFNlYXJjaCwKKyAgICAgICAgICAgIGludCBOdGgsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworCisvLyAgZXJhc2VfYWxsICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEVyYXNlIGFsbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIHRoZSBvY2N1cnJlbmNlcyBvZiB0aGUgc3RyaW5nIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgICAgICAgICAgICAgCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuIAorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UxVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGVyYXNlX2FsbF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgYWxsIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLyAgCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGVyYXNlX2FsbF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIFNlYXJjaCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2FsbF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBhbGwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCB0aGUgb2NjdXJyZW5jZXMgb2YgdGhlIHN0cmluZyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLiAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSB2b2lkIGVyYXNlX2FsbCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2ggKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2FsbCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworLy8gIGVyYXNlX2FsbCAoIGNhc2UgaW5zZW5zaXRpdmUgKSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBFcmFzZSBhbGwgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCB0aGUgb2NjdXJyZW5jZXMgb2YgdGhlIHN0cmluZyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4gCisgICAgICAgICAgICBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCBpZXJhc2VfYWxsX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoSW5wdXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgYWxsIGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCBpZXJhc2VfYWxsX2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlcihJbnB1dCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBhbGwgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCB0aGUgb2NjdXJyZW5jZXMgb2YgdGhlIHN0cmluZyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4gCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgaWVyYXNlX2FsbCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2FsbCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKElucHV0KSApOworICAgICAgICB9CisKKy8vICBlcmFzZV9oZWFkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgaGVhZCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgdGhlIGhlYWQgZnJvbSB0aGUgaW5wdXQuIFRoZSBoZWFkIGlzIGEgcHJlZml4IG9mIGEgc2VxdWVuY2Ugb2YgZ2l2ZW4gc2l6ZS4gCisgICAgICAgICAgICBJZiB0aGUgc2VxdWVuY2UgaXMgc2hvcnRlciB0aGVuIHJlcXVpcmVkLCB0aGUgd2hvbGUgc3RyaW5nIGlzIAorICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSB0aGUgaGVhZC4gVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiAKKyAgICAgICAgICAgIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2Ugb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisgICAgICAgICAgICAKKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIE4gTGVuZ3RoIG9mIHRoZSBoZWFkLgorICAgICAgICAgICAgICAgIEZvciBOPj0wLCBhdCBtb3N0IE4gY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAgICAgICAgIEZvciBOPDAsIHNpemUoSW5wdXQpLXxOfCBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZXJhc2VfaGVhZF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgSW5wdXQsCisgICAgICAgICAgICBpbnQgTiApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6aGVhZF9maW5kZXIoTiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoIElucHV0ICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBoZWFkIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgZXJhc2VfaGVhZF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBpbnQgTiApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6aGVhZF9maW5kZXIoTiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoIElucHV0ICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBoZWFkIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSB0aGUgaGVhZCBmcm9tIHRoZSBpbnB1dC4gVGhlIGhlYWQgaXMgYSBwcmVmaXggb2YgYSBzZXF1ZW5jZSBvZiBnaXZlbiBzaXplLiAKKyAgICAgICAgICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBzaG9ydGVyIHRoZW4gcmVxdWlyZWQsIHRoZSB3aG9sZSBzdHJpbmcgaXMgCisgICAgICAgICAgICBjb25zaWRlcmVkIHRvIGJlIHRoZSBoZWFkLiBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBOIExlbmd0aCBvZiB0aGUgaGVhZAorICAgICAgICAgICAgICAgIEZvciBOPj0wLCBhdCBtb3N0IE4gY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAgICAgICAgIEZvciBOPDAsIHNpemUoSW5wdXQpLXxOfCBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgZXJhc2VfaGVhZCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgaW50IE4gKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpoZWFkX2ZpbmRlcihOKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlciggSW5wdXQgKSApOworICAgICAgICB9CisKKy8vICBlcmFzZV90YWlsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgdGFpbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgdGhlIHRhaWwgZnJvbSB0aGUgaW5wdXQuIFRoZSB0YWlsIGlzIGEgc3VmZml4IG9mIGEgc2VxdWVuY2Ugb2YgZ2l2ZW4gc2l6ZS4gCisgICAgICAgICAgICBJZiB0aGUgc2VxdWVuY2UgaXMgc2hvcnRlciB0aGVuIHJlcXVpcmVkLCB0aGUgd2hvbGUgc3RyaW5nIGlzIAorICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSB0aGUgdGFpbC4gCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIE4gTGVuZ3RoIG9mIHRoZSB0YWlsLiAgICAgICAgICAgICAgICAgCisgICAgICAgICAgICAgICAgRm9yIE4+PTAsIGF0IG1vc3QgTiBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICAgICAgRm9yIE48MCwgc2l6ZShJbnB1dCktfE58IGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dAorICAgICAgICAgICAgCisgICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCBlcmFzZV90YWlsX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGludCBOICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjp0YWlsX2ZpbmRlcihOKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlciggSW5wdXQgKSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVyYXNlIHRhaWwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCBlcmFzZV90YWlsX2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGludCBOICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjp0YWlsX2ZpbmRlcihOKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlciggSW5wdXQgKSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVyYXNlIHRhaWwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIHRoZSB0YWlsIGZyb20gdGhlIGlucHV0LiBUaGUgdGFpbCBpcyBhIHN1ZmZpeCBvZiBhIHNlcXVlbmNlIG9mIGdpdmVuIHNpemUuIAorICAgICAgICAgICAgSWYgdGhlIHNlcXVlbmNlIGlzIHNob3J0ZXIgdGhlbiByZXF1aXJlZCwgdGhlIHdob2xlIHN0cmluZyBpcworICAgICAgICAgICAgY29uc2lkZXJlZCB0byBiZSB0aGUgdGFpbC4gVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTiBMZW5ndGggb2YgdGhlIHRhaWwKKyAgICAgICAgICAgICAgICBGb3IgTj49MCwgYXQgbW9zdCBOIGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgICAgICBGb3IgTjwwLCBzaXplKElucHV0KS18TnwgY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSB2b2lkIGVyYXNlX3RhaWwoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGludCBOICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dGFpbF9maW5kZXIoTiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoIElucHV0ICkgKTsKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIG5hbWVzIGludG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfcmFuZ2VfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmVyYXNlX3JhbmdlOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfZmlyc3RfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmVyYXNlX2ZpcnN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6aWVyYXNlX2ZpcnN0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXJhc2VfZmlyc3Q7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcmFzZV9sYXN0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcmFzZV9sYXN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6aWVyYXNlX2xhc3RfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmllcmFzZV9sYXN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfbnRoX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcmFzZV9udGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXJhc2VfbnRoX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXJhc2VfbnRoOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfYWxsX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcmFzZV9hbGw7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXJhc2VfYWxsX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXJhc2VfYWxsOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfaGVhZF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfaGVhZDsKKyAgICB1c2luZyBhbGdvcml0aG06OmVyYXNlX3RhaWxfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmVyYXNlX3RhaWw7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9FUkFTRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2ZpbmQuaHBwCkBAIC0wLDAgKzEsMzM0IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19GSU5EX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2FzX2xpdGVyYWwuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29tcGFyZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25zdGFudHMuaHBwPgorCisvKiEgXGZpbGUKKyAgICBEZWZpbmVzIGEgc2V0IG9mIGZpbmQgYWxnb3JpdGhtcy4gVGhlIGFsZ29yaXRobXMgYXJlIHNlYXJjaGluZworICAgIGZvciBhIHN1YnN0cmluZyBvZiB0aGUgaW5wdXQuIFRoZSByZXN1bHQgaXMgZ2l2ZW4gYXMgYW4gXGMgaXRlcmF0b3JfcmFuZ2UKKyAgICBkZWxpbWl0aW5nIHRoZSBzdWJzdHJpbmcuCisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgR2VuZXJpYyBmaW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgR2VuZXJpYyBmaW5kIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFNlYXJjaCB0aGUgaW5wdXQgdXNpbmcgdGhlIGdpdmVuIGZpbmRlci4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgc2VhcmNoZWQuCisgICAgICAgICAgICBccGFyYW0gRmluZGVyIEZpbmRlciBvYmplY3QgdXNlZCBmb3Igc2VhcmNoaW5nLgorICAgICAgICAgICAgXHJldHVybiAKKyAgICAgICAgICAgICAgICBBbiBcYyBpdGVyYXRvcl9yYW5nZSBkZWxpbWl0aW5nIHRoZSBtYXRjaC4gCisgICAgICAgICAgICAgICAgUmV0dXJuZWQgaXRlcmF0b3IgaXMgZWl0aGVyIFxjIFJhbmdlVDo6aXRlcmF0b3Igb3IgCisgICAgICAgICAgICAgICAgXGMgUmFuZ2VUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBGaW5kZXJUPgorICAgICAgICBpbmxpbmUgaXRlcmF0b3JfcmFuZ2U8IAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+CisgICAgICAgIGZpbmQoIAorICAgICAgICAgICAgUmFuZ2VUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBGaW5kZXJUJiBGaW5kZXIpCisgICAgICAgIHsKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiBsaXRfaW5wdXQoOjpib29zdDo6YXNfbGl0ZXJhbChJbnB1dCkpOworCisgICAgICAgICAgICByZXR1cm4gRmluZGVyKDo6Ym9vc3Q6OmJlZ2luKGxpdF9pbnB1dCksOjpib29zdDo6ZW5kKGxpdF9pbnB1dCkpOworICAgICAgICB9CisKKy8vICBmaW5kX2ZpcnN0ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgZmlyc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgU2VhcmNoIGZvciB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgc3Vic3RyaW5nIGluIHRoZSBpbnB1dC4gCisgICAgICAgICAgICAKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIHN0cmluZyB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLiAKKyAgICAgICAgICAgICAgICBSZXR1cm5lZCBpdGVyYXRvciBpcyBlaXRoZXIgXGMgUmFuZ2VUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZVQ6OmNvbnN0X2l0ZXJhdG9yLCBkZXBlbmRpbmcgb24gdGhlIGNvbnN0bmVzcyBvZiAKKyAgICAgICAgICAgICAgICB0aGUgaW5wdXQgcGFyYW1ldGVyLgorCisgICAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgaXRlcmF0b3JfcmFuZ2U8IAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlMVQ+Ojp0eXBlPgorICAgICAgICBmaW5kX2ZpcnN0KCAKKyAgICAgICAgICAgIFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZChJbnB1dCwgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRmluZCBmaXJzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBTZWFyY2ggZm9yIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgaW4gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorICAgICAgICAgICAgCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBzZWFyY2hlZC4KKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLgorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guIAorICAgICAgICAgICAgICAgIFJldHVybmVkIGl0ZXJhdG9yIGlzIGVpdGhlciBcYyBSYW5nZTFUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZTFUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBpdGVyYXRvcl9yYW5nZTwgCisgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+CisgICAgICAgIGlmaW5kX2ZpcnN0KCAKKyAgICAgICAgICAgIFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZChJbnB1dCwgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoLGlzX2llcXVhbChMb2MpKSk7CisgICAgICAgIH0KKworLy8gIGZpbmRfbGFzdCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBGaW5kIGxhc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgU2VhcmNoIGZvciB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgaW4gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgc2VhcmNoZWQuCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4KKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guIAorICAgICAgICAgICAgICAgIFJldHVybmVkIGl0ZXJhdG9yIGlzIGVpdGhlciBcYyBSYW5nZTFUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZTFUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBpdGVyYXRvcl9yYW5nZTwgCisgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+CisgICAgICAgIGZpbmRfbGFzdCggCisgICAgICAgICAgICBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmQoSW5wdXQsIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoKSk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRmluZCBsYXN0IGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFNlYXJjaCBmb3IgdGhlIGxhc3QgbWF0Y2ggYSBzdHJpbmcgaW4gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorICAgICAgICAgICAgCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBzZWFyY2hlZC4KKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLgorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guIAorICAgICAgICAgICAgICAgIFJldHVybmVkIGl0ZXJhdG9yIGlzIGVpdGhlciBcYyBSYW5nZTFUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZTFUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKyAgICAgICAgCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUgICAgCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBpdGVyYXRvcl9yYW5nZTwgCisgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+CisgICAgICAgIGlmaW5kX2xhc3QoIAorICAgICAgICAgICAgUmFuZ2UxVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kKElucHV0LCA6OmJvb3N0OjphbGdvcml0aG06Omxhc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykpKTsKKyAgICAgICAgfQorCisvLyAgZmluZF9udGggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgbi10aCBhbGdvcml0aG0gCisgICAgICAgIC8qIQorICAgICAgICAgICAgU2VhcmNoIGZvciB0aGUgbi10aCAoemVyby1pbmRleGVkKSBvY2N1cnJlbmNlIG9mIHRoZSBzdWJzdHJpbmcgaW4gdGhlIAorICAgICAgICAgICAgaW5wdXQuICAgICAgICAgCisgICAgICAgICAgICAKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIHN0cmluZyB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuCisgICAgICAgICAgICBccGFyYW0gTnRoIEFuIGluZGV4ICh6ZXJvLWluZGV4ZWQpIG9mIHRoZSBtYXRjaCB0byBiZSBmb3VuZC4KKyAgICAgICAgICAgICAgICBGb3IgbmVnYXRpdmUgTiwgdGhlIG1hdGNoZXMgYXJlIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHN0cmluZy4KKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guIAorICAgICAgICAgICAgICAgIFJldHVybmVkIGl0ZXJhdG9yIGlzIGVpdGhlciBcYyBSYW5nZTFUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZTFUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIGl0ZXJhdG9yX3JhbmdlPCAKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZTFUPjo6dHlwZT4KKyAgICAgICAgZmluZF9udGgoIAorICAgICAgICAgICAgUmFuZ2UxVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgaW50IE50aCkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZChJbnB1dCwgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCxOdGgpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBGaW5kIG4tdGggYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApLgorICAgICAgICAvKiEKKyAgICAgICAgICAgIFNlYXJjaCBmb3IgdGhlIG4tdGggKHplcm8taW5kZXhlZCkgb2NjdXJyZW5jZSBvZiB0aGUgc3Vic3RyaW5nIGluIHRoZSAKKyAgICAgICAgICAgIGlucHV0LiBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKyAgICAgICAgICAgIAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgc2VhcmNoZWQuCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4KKyAgICAgICAgICAgIFxwYXJhbSBOdGggQW4gaW5kZXggKHplcm8taW5kZXhlZCkgb2YgdGhlIG1hdGNoIHRvIGJlIGZvdW5kLiAKKyAgICAgICAgICAgICAgICBGb3IgbmVnYXRpdmUgTiwgdGhlIG1hdGNoZXMgYXJlIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHN0cmluZy4KKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLiAKKyAgICAgICAgICAgICAgICBSZXR1cm5lZCBpdGVyYXRvciBpcyBlaXRoZXIgXGMgUmFuZ2UxVDo6aXRlcmF0b3Igb3IgCisgICAgICAgICAgICAgICAgXGMgUmFuZ2UxVDo6Y29uc3RfaXRlcmF0b3IsIGRlcGVuZGluZyBvbiB0aGUgY29uc3RuZXNzIG9mIAorICAgICAgICAgICAgICAgIHRoZSBpbnB1dCBwYXJhbWV0ZXIuCisKKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBpdGVyYXRvcl9yYW5nZTwgCisgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+CisgICAgICAgIGlmaW5kX250aCggCisgICAgICAgICAgICBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kKElucHV0LCA6OmJvb3N0OjphbGdvcml0aG06Om50aF9maW5kZXIoU2VhcmNoLE50aCxpc19pZXF1YWwoTG9jKSkpOworICAgICAgICB9CisKKy8vICBmaW5kX2hlYWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgaGVhZCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBHZXQgdGhlIGhlYWQgb2YgdGhlIGlucHV0LiBIZWFkIGlzIGEgcHJlZml4IG9mIHRoZSBzdHJpbmcgb2YgdGhlIAorICAgICAgICAgICAgZ2l2ZW4gc2l6ZS4gSWYgdGhlIGlucHV0IGlzIHNob3J0ZXIgdGhlbiByZXF1aXJlZCwgd2hvbGUgaW5wdXQgaXMgY29uc2lkZXJlZCAKKyAgICAgICAgICAgIHRvIGJlIHRoZSBoZWFkLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTiBMZW5ndGggb2YgdGhlIGhlYWQKKyAgICAgICAgICAgICAgICBGb3IgTj49MCwgYXQgbW9zdCBOIGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgICAgICBGb3IgTjwwLCBhdCBtb3N0IHNpemUoSW5wdXQpLXxOfCBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLiAKKyAgICAgICAgICAgICAgICBSZXR1cm5lZCBpdGVyYXRvciBpcyBlaXRoZXIgXGMgUmFuZ2UxVDo6aXRlcmF0b3Igb3IgCisgICAgICAgICAgICAgICAgXGMgUmFuZ2UxVDo6Y29uc3RfaXRlcmF0b3IsIGRlcGVuZGluZyBvbiB0aGUgY29uc3RuZXNzIG9mIAorICAgICAgICAgICAgICAgIHRoZSBpbnB1dCBwYXJhbWV0ZXIuCisKKyAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBpdGVyYXRvcl9yYW5nZTwgCisgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4KKyAgICAgICAgZmluZF9oZWFkKCAKKyAgICAgICAgICAgIFJhbmdlVCYgSW5wdXQsIAorICAgICAgICAgICAgaW50IE4pCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmQoSW5wdXQsIDo6Ym9vc3Q6OmFsZ29yaXRobTo6aGVhZF9maW5kZXIoTikpOworICAgICAgICB9CisKKy8vICBmaW5kX3RhaWwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgdGFpbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBHZXQgdGhlIHRhaWwgb2YgdGhlIGlucHV0LiBUYWlsIGlzIGEgc3VmZml4IG9mIHRoZSBzdHJpbmcgb2YgdGhlIAorICAgICAgICAgICAgZ2l2ZW4gc2l6ZS4gSWYgdGhlIGlucHV0IGlzIHNob3J0ZXIgdGhlbiByZXF1aXJlZCwgd2hvbGUgaW5wdXQgaXMgY29uc2lkZXJlZCAKKyAgICAgICAgICAgIHRvIGJlIHRoZSB0YWlsLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTiBMZW5ndGggb2YgdGhlIHRhaWwuIAorICAgICAgICAgICAgICAgIEZvciBOPj0wLCBhdCBtb3N0IE4gY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAgICAgICAgIEZvciBOPDAsIGF0IG1vc3Qgc2l6ZShJbnB1dCktfE58IGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guIAorICAgICAgICAgICAgICAgIFJldHVybmVkIGl0ZXJhdG9yIGlzIGVpdGhlciBcYyBSYW5nZVQ6Oml0ZXJhdG9yIG9yIAorICAgICAgICAgICAgICAgIFxjIFJhbmdlVDo6Y29uc3RfaXRlcmF0b3IsIGRlcGVuZGluZyBvbiB0aGUgY29uc3RuZXNzIG9mIAorICAgICAgICAgICAgICAgIHRoZSBpbnB1dCBwYXJhbWV0ZXIuCisKKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIGl0ZXJhdG9yX3JhbmdlPCAKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICBmaW5kX3RhaWwoIAorICAgICAgICAgICAgUmFuZ2VUJiBJbnB1dCwgCisgICAgICAgICAgICBpbnQgTikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZChJbnB1dCwgOjpib29zdDo6YWxnb3JpdGhtOjp0YWlsX2ZpbmRlcihOKSk7CisgICAgICAgIH0KKworLy8gIGZpbmRfdG9rZW4gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBGaW5kIHRva2VuIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIExvb2sgZm9yIGEgZ2l2ZW4gdG9rZW4gaW4gdGhlIHN0cmluZy4gVG9rZW4gaXMgYSBjaGFyYWN0ZXIgdGhhdCBtYXRjaGVzIHRoZQorICAgICAgICAgICAgZ2l2ZW4gcHJlZGljYXRlLgorICAgICAgICAgICAgSWYgdGhlICJ0b2tlbiBjb21wcmVzcyBtb2RlIiBpcyBlbmFibGVkLCBhZGphY2VudCB0b2tlbnMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgb25lIG1hdGNoLgorICAgICAgICAgICAgCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBpbnB1dCBzdHJpbmcuCisgICAgICAgICAgICBccGFyYW0gUHJlZCBBIHVuYXJ5IHByZWRpY2F0ZSB0byBpZGVudGlmeSBhIHRva2VuCisgICAgICAgICAgICBccGFyYW0gZUNvbXByZXNzIEVuYWJsZS9EaXNhYmxlIGNvbXByZXNzaW5nIG9mIGFkamFjZW50IHRva2VucworICAgICAgICAgICAgXHJldHVybiAKKyAgICAgICAgICAgICAgICBBbiBcYyBpdGVyYXRvcl9yYW5nZSBkZWxpbWl0aW5nIHRoZSBtYXRjaC4gCisgICAgICAgICAgICAgICAgUmV0dXJuZWQgaXRlcmF0b3IgaXMgZWl0aGVyIFxjIFJhbmdlVDo6aXRlcmF0b3Igb3IgCisgICAgICAgICAgICAgICAgXGMgUmFuZ2VUOjpjb25zdF9pdGVyYXRvciwgZGVwZW5kaW5nIG9uIHRoZSBjb25zdG5lc3Mgb2YgCisgICAgICAgICAgICAgICAgdGhlIGlucHV0IHBhcmFtZXRlci4KKyAgICAgICAgCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUgICAgCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIGl0ZXJhdG9yX3JhbmdlPCAKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICBmaW5kX3Rva2VuKCAKKyAgICAgICAgICAgIFJhbmdlVCYgSW5wdXQsCisgICAgICAgICAgICBQcmVkaWNhdGVUIFByZWQsCisgICAgICAgICAgICB0b2tlbl9jb21wcmVzc19tb2RlX3R5cGUgZUNvbXByZXNzPXRva2VuX2NvbXByZXNzX29mZikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZChJbnB1dCwgOjpib29zdDo6YWxnb3JpdGhtOjp0b2tlbl9maW5kZXIoUHJlZCwgZUNvbXByZXNzKSk7CisgICAgICAgIH0KKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorCisgICAgLy8gcHVsbCBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaW5kOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF9maXJzdDsKKyAgICB1c2luZyBhbGdvcml0aG06OmlmaW5kX2ZpcnN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF9sYXN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6aWZpbmRfbGFzdDsKKyAgICB1c2luZyBhbGdvcml0aG06OmZpbmRfbnRoOworICAgIHVzaW5nIGFsZ29yaXRobTo6aWZpbmRfbnRoOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF9oZWFkOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF90YWlsOworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF90b2tlbjsKKworfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19GSU5EX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZF9mb3JtYXQuaHBwCkBAIC0wLDAgKzEsMjg3IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kX2Zvcm1hdC5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19GSU5EX0ZPUk1BVF9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX0ZJTkRfRk9STUFUX0hQUAorCisjaW5jbHVkZSA8ZGVxdWU+CisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL2l0ZXJhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9jb25zdF9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYXNfbGl0ZXJhbC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmNlcHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL2ZpbmRfZm9ybWF0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kX2Zvcm1hdF9hbGwuaHBwPgorCisvKiEgXGZpbGUKKyAgICBEZWZpbmVzIGdlbmVyaWMgcmVwbGFjZSBhbGdvcml0aG1zLiBFYWNoIGFsZ29yaXRobSByZXBsYWNlcworICAgIHBhcnQocykgb2YgdGhlIGlucHV0LiBUaGUgcGFydCB0byBiZSByZXBsYWNlZCBpcyBsb29rZWQgdXAgdXNpbmcgYSBGaW5kZXIgb2JqZWN0LgorICAgIFJlc3VsdCBvZiBmaW5kaW5nIGlzIHRoZW4gdXNlZCBieSBhIEZvcm1hdHRlciBvYmplY3QgdG8gZ2VuZXJhdGUgdGhlIHJlcGxhY2VtZW50LgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gZ2VuZXJpYyByZXBsYWNlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEdlbmVyaWMgcmVwbGFjZSBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBVc2UgdGhlIEZpbmRlciB0byBzZWFyY2ggZm9yIGEgc3Vic3RyaW5nLiBVc2UgdGhlIEZvcm1hdHRlciB0byBmb3JtYXQKKyAgICAgICAgICAgIHRoaXMgc3Vic3RyaW5nIGFuZCByZXBsYWNlIGl0IGluIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgIAorICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gRmluZGVyIEEgRmluZGVyIG9iamVjdCB1c2VkIHRvIHNlYXJjaCBmb3IgYSBtYXRjaCB0byBiZSByZXBsYWNlZAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdHRlciBBIEZvcm1hdHRlciBvYmplY3QgdXNlZCB0byBmb3JtYXQgYSBtYXRjaAorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULAorICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdHRlclQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlciApCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIENvbmNlcHQgY2hlY2sKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCgKKyAgICAgICAgICAgICAgICBGaW5kZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4KKyAgICAgICAgICAgICAgICApKTsKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCgKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworCisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gbGl0X2lucHV0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpKTsKKworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6ZmluZF9mb3JtYXRfY29weV9pbXBsKAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBsaXRfaW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIEZpbmRlciggOjpib29zdDo6YmVnaW4obGl0X2lucHV0KSwgOjpib29zdDo6ZW5kKGxpdF9pbnB1dCkgKSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEdlbmVyaWMgcmVwbGFjZSBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRlclQsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlciApCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIENvbmNlcHQgY2hlY2sKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCgKKyAgICAgICAgICAgICAgICBGaW5kZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8U2VxdWVuY2VUPjo6dHlwZT4KKyAgICAgICAgICAgICAgICApKTsKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCgKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworCisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjpmaW5kX2Zvcm1hdF9jb3B5X2ltcGwoCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIEZpbmRlcig6OmJvb3N0OjpiZWdpbihJbnB1dCksIDo6Ym9vc3Q6OmVuZChJbnB1dCkpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBHZW5lcmljIHJlcGxhY2UgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgVXNlIHRoZSBGaW5kZXIgdG8gc2VhcmNoIGZvciBhIHN1YnN0cmluZy4gVXNlIHRoZSBGb3JtYXR0ZXIgdG8gZm9ybWF0CisgICAgICAgICAgICB0aGlzIHN1YnN0cmluZyBhbmQgcmVwbGFjZSBpdCBpbiB0aGUgaW5wdXQuIFRoZSBpbnB1dCBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gRmluZGVyIEEgRmluZGVyIG9iamVjdCB1c2VkIHRvIHNlYXJjaCBmb3IgYSBtYXRjaCB0byBiZSByZXBsYWNlZAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdHRlciBBIEZvcm1hdHRlciBvYmplY3QgdXNlZCB0byBmb3JtYXQgYSBtYXRjaAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRlclQsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJUPgorICAgICAgICBpbmxpbmUgdm9pZCBmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIsCisgICAgICAgICAgICBGb3JtYXR0ZXJUIEZvcm1hdHRlcikKKyAgICAgICAgeworICAgICAgICAgICAgLy8gQ29uY2VwdCBjaGVjaworICAgICAgICAgICAgQk9PU1RfQ09OQ0VQVF9BU1NFUlQoKAorICAgICAgICAgICAgICAgIEZpbmRlckNvbmNlcHQ8CisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQsCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworICAgICAgICAgICAgQk9PU1RfQ09OQ0VQVF9BU1NFUlQoKCAKKyAgICAgICAgICAgICAgICBGb3JtYXR0ZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGb3JtYXR0ZXJULAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworCisgICAgICAgICAgICBkZXRhaWw6OmZpbmRfZm9ybWF0X2ltcGwoCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIEZpbmRlcig6OmJvb3N0OjpiZWdpbihJbnB1dCksIDo6Ym9vc3Q6OmVuZChJbnB1dCkpKTsKKyAgICAgICAgfQorCisKKy8vICBmaW5kX2Zvcm1hdF9hbGwgZ2VuZXJpYyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgR2VuZXJpYyByZXBsYWNlIGFsbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBVc2UgdGhlIEZpbmRlciB0byBzZWFyY2ggZm9yIGEgc3Vic3RyaW5nLiBVc2UgdGhlIEZvcm1hdHRlciB0byBmb3JtYXQKKyAgICAgICAgICAgIHRoaXMgc3Vic3RyaW5nIGFuZCByZXBsYWNlIGl0IGluIHRoZSBpbnB1dC4gUmVwZWF0IHRoaXMgZm9yIGFsbCBtYXRjaGluZworICAgICAgICAgICAgc3Vic3RyaW5ncy4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBGaW5kZXIgQSBGaW5kZXIgb2JqZWN0IHVzZWQgdG8gc2VhcmNoIGZvciBhIG1hdGNoIHRvIGJlIHJlcGxhY2VkCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0dGVyIEEgRm9ybWF0dGVyIG9iamVjdCB1c2VkIHRvIGZvcm1hdCBhIG1hdGNoCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULAorICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdHRlclQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZmluZF9mb3JtYXRfYWxsX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIEZpbmRlclQgRmluZGVyLAorICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIpCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIENvbmNlcHQgY2hlY2sKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCggCisgICAgICAgICAgICAgICAgRmluZGVyQ29uY2VwdDwKKyAgICAgICAgICAgICAgICAgICAgRmluZGVyVCwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+CisgICAgICAgICAgICAgICAgKSk7CisgICAgICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoIAorICAgICAgICAgICAgICAgIEZvcm1hdHRlckNvbmNlcHQ8CisgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQsQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+CisgICAgICAgICAgICAgICAgKSk7CisKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiBsaXRfaW5wdXQoOjpib29zdDo6YXNfbGl0ZXJhbChJbnB1dCkpOworCisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjpmaW5kX2Zvcm1hdF9hbGxfY29weV9pbXBsKAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBsaXRfaW5wdXQsCisgICAgICAgICAgICAgICAgRmluZGVyLAorICAgICAgICAgICAgICAgIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICBGaW5kZXIoOjpib29zdDo6YmVnaW4obGl0X2lucHV0KSwgOjpib29zdDo6ZW5kKGxpdF9pbnB1dCkpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBHZW5lcmljIHJlcGxhY2UgYWxsIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICB0eXBlbmFtZSBTZXF1ZW5jZVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdHRlclQgPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGZpbmRfZm9ybWF0X2FsbF9jb3B5KAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIEZpbmRlclQgRmluZGVyLAorICAgICAgICAgICAgRm9ybWF0dGVyVCBGb3JtYXR0ZXIgKQorICAgICAgICB7CisgICAgICAgICAgICAvLyBDb25jZXB0IGNoZWNrCisgICAgICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoCisgICAgICAgICAgICAgICAgRmluZGVyQ29uY2VwdDwKKyAgICAgICAgICAgICAgICAgICAgRmluZGVyVCwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlVD46OnR5cGU+CisgICAgICAgICAgICAgICAgKSk7CisgICAgICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyQ29uY2VwdDwKKyAgICAgICAgICAgICAgICAgICAgRm9ybWF0dGVyVCwKKyAgICAgICAgICAgICAgICAgICAgRmluZGVyVCxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8U2VxdWVuY2VUPjo6dHlwZT4KKyAgICAgICAgICAgICAgICApKTsKKworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6ZmluZF9mb3JtYXRfYWxsX2NvcHlfaW1wbCgKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICBGaW5kZXIsCisgICAgICAgICAgICAgICAgRm9ybWF0dGVyLAorICAgICAgICAgICAgICAgIEZpbmRlciggOjpib29zdDo6YmVnaW4oSW5wdXQpLCA6OmJvb3N0OjplbmQoSW5wdXQpICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBHZW5lcmljIHJlcGxhY2UgYWxsIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFVzZSB0aGUgRmluZGVyIHRvIHNlYXJjaCBmb3IgYSBzdWJzdHJpbmcuIFVzZSB0aGUgRm9ybWF0dGVyIHRvIGZvcm1hdAorICAgICAgICAgICAgdGhpcyBzdWJzdHJpbmcgYW5kIHJlcGxhY2UgaXQgaW4gdGhlIGlucHV0LiBSZXBlYXQgdGhpcyBmb3IgYWxsIG1hdGNoaW5nCisgICAgICAgICAgICBzdWJzdHJpbmdzLlRoZSBpbnB1dCBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gRmluZGVyIEEgRmluZGVyIG9iamVjdCB1c2VkIHRvIHNlYXJjaCBmb3IgYSBtYXRjaCB0byBiZSByZXBsYWNlZAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdHRlciBBIEZvcm1hdHRlciBvYmplY3QgdXNlZCB0byBmb3JtYXQgYSBtYXRjaAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZpbmRlclQsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXR0ZXJUID4KKyAgICAgICAgaW5saW5lIHZvaWQgZmluZF9mb3JtYXRfYWxsKCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBGaW5kZXJUIEZpbmRlciwKKyAgICAgICAgICAgIEZvcm1hdHRlclQgRm9ybWF0dGVyICkKKyAgICAgICAgeworICAgICAgICAgICAgLy8gQ29uY2VwdCBjaGVjaworICAgICAgICAgICAgQk9PU1RfQ09OQ0VQVF9BU1NFUlQoKAorICAgICAgICAgICAgICAgIEZpbmRlckNvbmNlcHQ8CisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQsCisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworICAgICAgICAgICAgQk9PU1RfQ09OQ0VQVF9BU1NFUlQoKAorICAgICAgICAgICAgICAgIEZvcm1hdHRlckNvbmNlcHQ8CisgICAgICAgICAgICAgICAgICAgIEZvcm1hdHRlclQsCisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQsQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlVD46OnR5cGU+CisgICAgICAgICAgICAgICAgKSk7CisKKyAgICAgICAgICAgIGRldGFpbDo6ZmluZF9mb3JtYXRfYWxsX2ltcGwoCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgRmluZGVyLAorICAgICAgICAgICAgICAgIEZvcm1hdHRlciwKKyAgICAgICAgICAgICAgICBGaW5kZXIoOjpib29zdDo6YmVnaW4oSW5wdXQpLCA6OmJvb3N0OjplbmQoSW5wdXQpKSk7CisKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIHRoZSBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF9mb3JtYXQ7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmZpbmRfZm9ybWF0X2FsbDsKKworfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19GSU5EX0ZPUk1BVF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2ZpbmRfaXRlcmF0b3IuaHBwCkBAIC0wLDAgKzEsMzg4IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kX2l0ZXJhdG9yLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDQuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0ZJTkRfSVRFUkFUT1JfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19GSU5EX0lURVJBVE9SX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL2l0ZXJhdG9yX2ZhY2FkZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaXRlcmF0b3IvaXRlcmF0b3JfY2F0ZWdvcmllcy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYXNfbGl0ZXJhbC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kX2l0ZXJhdG9yLmhwcD4KKworLyohIFxmaWxlCisgICAgRGVmaW5lcyBmaW5kIGl0ZXJhdG9yIGNsYXNzZXMuIEZpbmQgaXRlcmF0b3IgcmVwZWF0ZWRseSBhcHBsaWVzIGEgRmluZGVyCisgICAgdG8gdGhlIHNwZWNpZmllZCBpbnB1dCBzdHJpbmcgdG8gc2VhcmNoIGZvciBtYXRjaGVzLiBEZXJlZmVyZW5jaW5nCisgICAgdGhlIGl0ZXJhdG9yIHlpZWxkcyB0aGUgY3VycmVudCBtYXRjaCBvciBhIHJhbmdlIGJldHdlZW4gdGhlIGxhc3QgYW5kIHRoZSBjdXJyZW50CisgICAgbWF0Y2ggZGVwZW5kaW5nIG9uIHRoZSBpdGVyYXRvciB1c2VkLgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsgCisKKy8vICBmaW5kX2l0ZXJhdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgZmluZF9pdGVyYXRvcgorICAgICAgICAvKiEgICAgCisgICAgICAgICAgICBGaW5kIGl0ZXJhdG9yIGVuY2Fwc3VsYXRlcyBhIEZpbmRlciBhbmQgYWxsb3dzCisgICAgICAgICAgICBmb3IgaW5jcmVtZW50YWwgc2VhcmNoaW5nIGluIGEgc3RyaW5nLgorICAgICAgICAgICAgRWFjaCBpbmNyZW1lbnQgbW92ZXMgdGhlIGl0ZXJhdG9yIHRvIHRoZSBuZXh0IG1hdGNoLgorCisgICAgICAgICAgICBGaW5kIGl0ZXJhdG9yIGlzIGEgcmVhZGFibGUgZm9yd2FyZCB0cmF2ZXJzYWwgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIERlcmVmZXJlbmNpbmcgdGhlIGl0ZXJhdG9yIHlpZWxkcyBhbiBpdGVyYXRvcl9yYW5nZSBkZWxpbWl0aW5nCisgICAgICAgICAgICB0aGUgY3VycmVudCBtYXRjaC4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgSXRlcmF0b3JUPgorICAgICAgICBjbGFzcyBmaW5kX2l0ZXJhdG9yIDogCisgICAgICAgICAgICBwdWJsaWMgaXRlcmF0b3JfZmFjYWRlPAorICAgICAgICAgICAgICAgIGZpbmRfaXRlcmF0b3I8SXRlcmF0b3JUPiwKKyAgICAgICAgICAgICAgICBjb25zdCBpdGVyYXRvcl9yYW5nZTxJdGVyYXRvclQ+LAorICAgICAgICAgICAgICAgIGZvcndhcmRfdHJhdmVyc2FsX3RhZyA+LAorICAgICAgICAgICAgcHJpdmF0ZSBkZXRhaWw6OmZpbmRfaXRlcmF0b3JfYmFzZTxJdGVyYXRvclQ+CisgICAgICAgIHsKKyAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgICAgIC8vIGZhY2FkZSBzdXBwb3J0CisgICAgICAgICAgICBmcmllbmQgY2xhc3MgOjpib29zdDo6aXRlcmF0b3JfY29yZV9hY2Nlc3M7CisKKyAgICAgICAgcHJpdmF0ZToKKyAgICAgICAgLy8gdHlwZWRlZnMKKworICAgICAgICAgICAgdHlwZWRlZiBkZXRhaWw6OmZpbmRfaXRlcmF0b3JfYmFzZTxJdGVyYXRvclQ+IGJhc2VfdHlwZTsKKyAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgIGJhc2VfdHlwZTo6aW5wdXRfaXRlcmF0b3JfdHlwZSBpbnB1dF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgYmFzZV90eXBlOjptYXRjaF90eXBlIG1hdGNoX3R5cGU7CisKKyAgICAgICAgcHVibGljOgorICAgICAgICAgICAgLy8hIERlZmF1bHQgY29uc3RydWN0b3IKKyAgICAgICAgICAgIC8qIQorICAgICAgICAgICAgICAgIENvbnN0cnVjdCBudWxsIGl0ZXJhdG9yLiBBbGwgbnVsbCBpdGVyYXRvcnMgYXJlIGVxdWFsLgorCisgICAgICAgICAgICAgICAgXHBvc3QgZW9mKCk9PXRydWUKKyAgICAgICAgICAgICovCisgICAgICAgICAgICBmaW5kX2l0ZXJhdG9yKCkge30KKworICAgICAgICAgICAgLy8hIENvcHkgY29uc3RydWN0b3IKKyAgICAgICAgICAgIC8qIQorICAgICAgICAgICAgICAgIENvbnN0cnVjdCBhIGNvcHkgb2YgdGhlIGZpbmRfaXRlcmF0b3IKKyAgICAgICAgICAgICovCisgICAgICAgICAgICBmaW5kX2l0ZXJhdG9yKCBjb25zdCBmaW5kX2l0ZXJhdG9yJiBPdGhlciApIDoKKyAgICAgICAgICAgICAgICBiYXNlX3R5cGUoT3RoZXIpLAorICAgICAgICAgICAgICAgIG1fTWF0Y2goT3RoZXIubV9NYXRjaCksCisgICAgICAgICAgICAgICAgbV9FbmQoT3RoZXIubV9FbmQpIHt9CisKKyAgICAgICAgICAgIC8vISBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ29uc3RydWN0IG5ldyBmaW5kX2l0ZXJhdG9yIGZvciBhIGdpdmVuIGZpbmRlcgorICAgICAgICAgICAgICAgIGFuZCBhIHJhbmdlLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQ+CisgICAgICAgICAgICBmaW5kX2l0ZXJhdG9yKAorICAgICAgICAgICAgICAgICAgICBJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQgRmluZGVyICkgOgorICAgICAgICAgICAgICAgIGRldGFpbDo6ZmluZF9pdGVyYXRvcl9iYXNlPEl0ZXJhdG9yVD4oRmluZGVyLDApLAorICAgICAgICAgICAgICAgIG1fTWF0Y2goQmVnaW4sQmVnaW4pLAorICAgICAgICAgICAgICAgIG1fRW5kKEVuZCkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpbmNyZW1lbnQoKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgLy8hIENvbnN0cnVjdG9yCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDb25zdHJ1Y3QgbmV3IGZpbmRfaXRlcmF0b3IgZm9yIGEgZ2l2ZW4gZmluZGVyCisgICAgICAgICAgICAgICAgYW5kIGEgcmFuZ2UuCisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmluZGVyVCwgdHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICAgICAgZmluZF9pdGVyYXRvcigKKyAgICAgICAgICAgICAgICAgICAgUmFuZ2VUJiBDb2wsCisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQgRmluZGVyICkgOgorICAgICAgICAgICAgICAgIGRldGFpbDo6ZmluZF9pdGVyYXRvcl9iYXNlPEl0ZXJhdG9yVD4oRmluZGVyLDApCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+IGxpdF9jb2woOjpib29zdDo6YXNfbGl0ZXJhbChDb2wpKTsKKyAgICAgICAgICAgICAgICBtX01hdGNoPTo6Ym9vc3Q6Om1ha2VfaXRlcmF0b3JfcmFuZ2UoOjpib29zdDo6YmVnaW4obGl0X2NvbCksIDo6Ym9vc3Q6OmJlZ2luKGxpdF9jb2wpKTsKKyAgICAgICAgICAgICAgICBtX0VuZD06OmJvb3N0OjplbmQobGl0X2NvbCk7CisKKyAgICAgICAgICAgICAgICBpbmNyZW1lbnQoKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAvLyBpdGVyYXRvciBvcGVyYXRpb25zCisKKyAgICAgICAgICAgIC8vIGRlcmVmZXJlbmNlCisgICAgICAgICAgICBjb25zdCBtYXRjaF90eXBlJiBkZXJlZmVyZW5jZSgpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIG1fTWF0Y2g7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIC8vIGluY3JlbWVudAorICAgICAgICAgICAgdm9pZCBpbmNyZW1lbnQoKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIG1fTWF0Y2g9dGhpcy0+ZG9fZmluZChtX01hdGNoLmVuZCgpLG1fRW5kKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgLy8gY29tcGFyaXNvbgorICAgICAgICAgICAgYm9vbCBlcXVhbCggY29uc3QgZmluZF9pdGVyYXRvciYgT3RoZXIgKSBjb25zdAorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGJvb2wgYkVvZj1lb2YoKTsKKyAgICAgICAgICAgICAgICBib29sIGJPdGhlckVvZj1PdGhlci5lb2YoKTsKKworICAgICAgICAgICAgICAgIHJldHVybiBiRW9mIHx8IGJPdGhlckVvZiA/IGJFb2Y9PWJPdGhlckVvZiA6CisgICAgICAgICAgICAgICAgICAgICgKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fTWF0Y2g9PU90aGVyLm1fTWF0Y2ggJiYKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fRW5kPT1PdGhlci5tX0VuZCAKKyAgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwdWJsaWM6CisgICAgICAgIC8vIG9wZXJhdGlvbnMKKworICAgICAgICAgICAgLy8hIEVvZiBjaGVjaworICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ2hlY2sgdGhlIGVvZiBjb25kaXRpb24uIEVvZiBjb25kaXRpb24gbWVhbnMgdGhhdAorICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vdGhpbmcgbW9yZSB0byBiZSBzZWFyY2hlZCBpLmUuIGZpbmRfaXRlcmF0b3IKKyAgICAgICAgICAgICAgICBpcyBhZnRlciB0aGUgbGFzdCBtYXRjaC4KKyAgICAgICAgICAgICovCisgICAgICAgICAgICBib29sIGVvZigpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIAorICAgICAgICAgICAgICAgICAgICB0aGlzLT5pc19udWxsKCkgfHwgCisgICAgICAgICAgICAgICAgICAgICggCisgICAgICAgICAgICAgICAgICAgICAgICBtX01hdGNoLmJlZ2luKCkgPT0gbV9FbmQgJiYKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fTWF0Y2guZW5kKCkgPT0gbV9FbmQKKyAgICAgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAvLyBBdHRyaWJ1dGVzCisgICAgICAgICAgICBtYXRjaF90eXBlIG1fTWF0Y2g7CisgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIG1fRW5kOworICAgICAgICB9OworCisgICAgICAgIC8vISBmaW5kIGl0ZXJhdG9yIGNvbnN0cnVjdGlvbiBoZWxwZXIKKyAgICAgICAgLyohCisgICAgICAgICAqICAgIENvbnN0cnVjdCBhIGZpbmQgaXRlcmF0b3IgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBzcGVjaWZpZWQgc3RyaW5nCisgICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIEZpbmRlclQ+CisgICAgICAgIGlubGluZSBmaW5kX2l0ZXJhdG9yPCAKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICBtYWtlX2ZpbmRfaXRlcmF0b3IoCisgICAgICAgICAgICBSYW5nZVQmIENvbGxlY3Rpb24sCisgICAgICAgICAgICBGaW5kZXJUIEZpbmRlcikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGZpbmRfaXRlcmF0b3I8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+KAorICAgICAgICAgICAgICAgIENvbGxlY3Rpb24sIEZpbmRlcik7CisgICAgICAgIH0KKworLy8gIHNwbGl0IGl0ZXJhdG9yIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgc3BsaXRfaXRlcmF0b3IKKyAgICAgICAgLyohICAgIAorICAgICAgICAgICAgU3BsaXQgaXRlcmF0b3IgZW5jYXBzdWxhdGVzIGEgRmluZGVyIGFuZCBhbGxvd3MKKyAgICAgICAgICAgIGZvciBpbmNyZW1lbnRhbCBzZWFyY2hpbmcgaW4gYSBzdHJpbmcuCisgICAgICAgICAgICBVbmxpa2UgdGhlIGZpbmQgaXRlcmF0b3IsIHNwbGl0IGl0ZXJhdG9yIGl0ZXJhdGVzCisgICAgICAgICAgICB0aHJvdWdoIGdhcHMgYmV0d2VlbiBtYXRjaGVzLgorCisgICAgICAgICAgICBGaW5kIGl0ZXJhdG9yIGlzIGEgcmVhZGFibGUgZm9yd2FyZCB0cmF2ZXJzYWwgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIERlcmVmZXJlbmNpbmcgdGhlIGl0ZXJhdG9yIHlpZWxkcyBhbiBpdGVyYXRvcl9yYW5nZSBkZWxpbWl0aW5nCisgICAgICAgICAgICB0aGUgY3VycmVudCBtYXRjaC4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgSXRlcmF0b3JUPgorICAgICAgICBjbGFzcyBzcGxpdF9pdGVyYXRvciA6IAorICAgICAgICAgICAgcHVibGljIGl0ZXJhdG9yX2ZhY2FkZTwKKyAgICAgICAgICAgICAgICBzcGxpdF9pdGVyYXRvcjxJdGVyYXRvclQ+LAorICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXJhdG9yX3JhbmdlPEl0ZXJhdG9yVD4sCisgICAgICAgICAgICAgICAgZm9yd2FyZF90cmF2ZXJzYWxfdGFnID4sCisgICAgICAgICAgICBwcml2YXRlIGRldGFpbDo6ZmluZF9pdGVyYXRvcl9iYXNlPEl0ZXJhdG9yVD4KKyAgICAgICAgeworICAgICAgICBwcml2YXRlOgorICAgICAgICAgICAgLy8gZmFjYWRlIHN1cHBvcnQKKyAgICAgICAgICAgIGZyaWVuZCBjbGFzcyA6OmJvb3N0OjppdGVyYXRvcl9jb3JlX2FjY2VzczsKKworICAgICAgICBwcml2YXRlOgorICAgICAgICAvLyB0eXBlZGVmcworCisgICAgICAgICAgICB0eXBlZGVmIGRldGFpbDo6ZmluZF9pdGVyYXRvcl9iYXNlPEl0ZXJhdG9yVD4gYmFzZV90eXBlOworICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgYmFzZV90eXBlOjppbnB1dF9pdGVyYXRvcl90eXBlIGlucHV0X2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICBiYXNlX3R5cGU6Om1hdGNoX3R5cGUgbWF0Y2hfdHlwZTsKKworICAgICAgICBwdWJsaWM6CisgICAgICAgICAgICAvLyEgRGVmYXVsdCBjb25zdHJ1Y3RvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ29uc3RydWN0IG51bGwgaXRlcmF0b3IuIEFsbCBudWxsIGl0ZXJhdG9ycyBhcmUgZXF1YWwuCisgICAgCisgICAgICAgICAgICAgICAgXHBvc3QgZW9mKCk9PXRydWUKKyAgICAgICAgICAgICovCisgICAgICAgICAgICBzcGxpdF9pdGVyYXRvcigpIDoKKyAgICAgICAgICAgICAgICBtX05leHQoKSwKKyAgICAgICAgICAgICAgICBtX0VuZCgpLAorICAgICAgICAgICAgICAgIG1fYkVvZih0cnVlKQorICAgICAgICAgICAge30KKworICAgICAgICAgICAgLy8hIENvcHkgY29uc3RydWN0b3IKKyAgICAgICAgICAgIC8qIQorICAgICAgICAgICAgICAgIENvbnN0cnVjdCBhIGNvcHkgb2YgdGhlIHNwbGl0X2l0ZXJhdG9yCisgICAgICAgICAgICAqLworICAgICAgICAgICAgc3BsaXRfaXRlcmF0b3IoIGNvbnN0IHNwbGl0X2l0ZXJhdG9yJiBPdGhlciApIDoKKyAgICAgICAgICAgICAgICBiYXNlX3R5cGUoT3RoZXIpLAorICAgICAgICAgICAgICAgIG1fTWF0Y2goT3RoZXIubV9NYXRjaCksCisgICAgICAgICAgICAgICAgbV9OZXh0KE90aGVyLm1fTmV4dCksCisgICAgICAgICAgICAgICAgbV9FbmQoT3RoZXIubV9FbmQpLAorICAgICAgICAgICAgICAgIG1fYkVvZihPdGhlci5tX2JFb2YpCisgICAgICAgICAgICB7fQorCisgICAgICAgICAgICAvLyEgQ29uc3RydWN0b3IKKyAgICAgICAgICAgIC8qIQorICAgICAgICAgICAgICAgIENvbnN0cnVjdCBuZXcgc3BsaXRfaXRlcmF0b3IgZm9yIGEgZ2l2ZW4gZmluZGVyCisgICAgICAgICAgICAgICAgYW5kIGEgcmFuZ2UuCisgICAgICAgICAgICAqLworICAgICAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgRmluZGVyVD4KKyAgICAgICAgICAgIHNwbGl0X2l0ZXJhdG9yKAorICAgICAgICAgICAgICAgICAgICBJdGVyYXRvclQgQmVnaW4sCisgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yVCBFbmQsCisgICAgICAgICAgICAgICAgICAgIEZpbmRlclQgRmluZGVyICkgOgorICAgICAgICAgICAgICAgIGRldGFpbDo6ZmluZF9pdGVyYXRvcl9iYXNlPEl0ZXJhdG9yVD4oRmluZGVyLDApLAorICAgICAgICAgICAgICAgIG1fTWF0Y2goQmVnaW4sQmVnaW4pLAorICAgICAgICAgICAgICAgIG1fTmV4dChCZWdpbiksCisgICAgICAgICAgICAgICAgbV9FbmQoRW5kKSwKKyAgICAgICAgICAgICAgICBtX2JFb2YoZmFsc2UpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgLy8gZm9yY2UgdGhlIGNvcnJlY3QgYmVoYXZpb3IgZm9yIGVtcHR5IHNlcXVlbmNlcyBhbmQgeWllbGQgYXQgbGVhc3Qgb25lIHRva2VuCisgICAgICAgICAgICAgICAgaWYoQmVnaW4hPUVuZCkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCgpOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIC8vISBDb25zdHJ1Y3RvcgorICAgICAgICAgICAgLyohCisgICAgICAgICAgICAgICAgQ29uc3RydWN0IG5ldyBzcGxpdF9pdGVyYXRvciBmb3IgYSBnaXZlbiBmaW5kZXIKKyAgICAgICAgICAgICAgICBhbmQgYSBjb2xsZWN0aW9uLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgICAgIHNwbGl0X2l0ZXJhdG9yKAorICAgICAgICAgICAgICAgICAgICBSYW5nZVQmIENvbCwKKyAgICAgICAgICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIgKSA6CisgICAgICAgICAgICAgICAgZGV0YWlsOjpmaW5kX2l0ZXJhdG9yX2Jhc2U8SXRlcmF0b3JUPihGaW5kZXIsMCksCisgICAgICAgICAgICAgICAgbV9iRW9mKGZhbHNlKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiBsaXRfY29sKDo6Ym9vc3Q6OmFzX2xpdGVyYWwoQ29sKSk7CisgICAgICAgICAgICAgICAgbV9NYXRjaD1tYWtlX2l0ZXJhdG9yX3JhbmdlKDo6Ym9vc3Q6OmJlZ2luKGxpdF9jb2wpLCA6OmJvb3N0OjpiZWdpbihsaXRfY29sKSk7CisgICAgICAgICAgICAgICAgbV9OZXh0PTo6Ym9vc3Q6OmJlZ2luKGxpdF9jb2wpOworICAgICAgICAgICAgICAgIG1fRW5kPTo6Ym9vc3Q6OmVuZChsaXRfY29sKTsKKworICAgICAgICAgICAgICAgIC8vIGZvcmNlIHRoZSBjb3JyZWN0IGJlaGF2aW9yIGZvciBlbXB0eSBzZXF1ZW5jZXMgYW5kIHlpZWxkIGF0IGxlYXN0IG9uZSB0b2tlbgorICAgICAgICAgICAgICAgIGlmKG1fTmV4dCE9bV9FbmQpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQoKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKworICAgICAgICBwcml2YXRlOgorICAgICAgICAvLyBpdGVyYXRvciBvcGVyYXRpb25zCisKKyAgICAgICAgICAgIC8vIGRlcmVmZXJlbmNlCisgICAgICAgICAgICBjb25zdCBtYXRjaF90eXBlJiBkZXJlZmVyZW5jZSgpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIG1fTWF0Y2g7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIC8vIGluY3JlbWVudAorICAgICAgICAgICAgdm9pZCBpbmNyZW1lbnQoKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIG1hdGNoX3R5cGUgRmluZE1hdGNoPXRoaXMtPmRvX2ZpbmQoIG1fTmV4dCwgbV9FbmQgKTsKKworICAgICAgICAgICAgICAgIGlmKEZpbmRNYXRjaC5iZWdpbigpPT1tX0VuZCAmJiBGaW5kTWF0Y2guZW5kKCk9PW1fRW5kKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgaWYobV9NYXRjaC5lbmQoKT09bV9FbmQpCisgICAgICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgaXRlcmF0b3IgYXMgZW9mCisgICAgICAgICAgICAgICAgICAgICAgICBtX2JFb2Y9dHJ1ZTsKKyAgICAgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIH0KKworICAgICAgICAgICAgICAgIG1fTWF0Y2g9bWF0Y2hfdHlwZSggbV9OZXh0LCBGaW5kTWF0Y2guYmVnaW4oKSApOworICAgICAgICAgICAgICAgIG1fTmV4dD1GaW5kTWF0Y2guZW5kKCk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIC8vIGNvbXBhcmlzb24KKyAgICAgICAgICAgIGJvb2wgZXF1YWwoIGNvbnN0IHNwbGl0X2l0ZXJhdG9yJiBPdGhlciApIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgYm9vbCBiRW9mPWVvZigpOworICAgICAgICAgICAgICAgIGJvb2wgYk90aGVyRW9mPU90aGVyLmVvZigpOworCisgICAgICAgICAgICAgICAgcmV0dXJuIGJFb2YgfHwgYk90aGVyRW9mID8gYkVvZj09Yk90aGVyRW9mIDoKKyAgICAgICAgICAgICAgICAgICAgKAorICAgICAgICAgICAgICAgICAgICAgICAgbV9NYXRjaD09T3RoZXIubV9NYXRjaCAmJgorICAgICAgICAgICAgICAgICAgICAgICAgbV9OZXh0PT1PdGhlci5tX05leHQgJiYKKyAgICAgICAgICAgICAgICAgICAgICAgIG1fRW5kPT1PdGhlci5tX0VuZAorICAgICAgICAgICAgICAgICAgICApOworICAgICAgICAgICAgfQorCisgICAgICAgIHB1YmxpYzoKKyAgICAgICAgLy8gb3BlcmF0aW9ucworCisgICAgICAgICAgICAvLyEgRW9mIGNoZWNrCisgICAgICAgICAgICAvKiEKKyAgICAgICAgICAgICAgICBDaGVjayB0aGUgZW9mIGNvbmRpdGlvbi4gRW9mIGNvbmRpdGlvbiBtZWFucyB0aGF0CisgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm90aGluZyBtb3JlIHRvIGJlIHNlYXJjaGVkIGkuZS4gZmluZF9pdGVyYXRvcgorICAgICAgICAgICAgICAgIGlzIGFmdGVyIHRoZSBsYXN0IG1hdGNoLgorICAgICAgICAgICAgKi8KKyAgICAgICAgICAgIGJvb2wgZW9mKCkgY29uc3QKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy0+aXNfbnVsbCgpIHx8IG1fYkVvZjsKKyAgICAgICAgICAgIH0KKworICAgICAgICBwcml2YXRlOgorICAgICAgICAvLyBBdHRyaWJ1dGVzCisgICAgICAgICAgICBtYXRjaF90eXBlIG1fTWF0Y2g7CisgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIG1fTmV4dDsKKyAgICAgICAgICAgIGlucHV0X2l0ZXJhdG9yX3R5cGUgbV9FbmQ7CisgICAgICAgICAgICBib29sIG1fYkVvZjsKKyAgICAgICAgfTsKKworICAgICAgICAvLyEgc3BsaXQgaXRlcmF0b3IgY29uc3RydWN0aW9uIGhlbHBlcgorICAgICAgICAvKiEKKyAgICAgICAgICogICAgQ29uc3RydWN0IGEgc3BsaXQgaXRlcmF0b3IgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbgorICAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBGaW5kZXJUPgorICAgICAgICBpbmxpbmUgc3BsaXRfaXRlcmF0b3I8IAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+CisgICAgICAgIG1ha2Vfc3BsaXRfaXRlcmF0b3IoCisgICAgICAgICAgICBSYW5nZVQmIENvbGxlY3Rpb24sCisgICAgICAgICAgICBGaW5kZXJUIEZpbmRlcikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIHNwbGl0X2l0ZXJhdG9yPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPigKKyAgICAgICAgICAgICAgICBDb2xsZWN0aW9uLCBGaW5kZXIpOworICAgICAgICB9CisKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorCisgICAgLy8gcHVsbCBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaW5kX2l0ZXJhdG9yOworICAgIHVzaW5nIGFsZ29yaXRobTo6bWFrZV9maW5kX2l0ZXJhdG9yOworICAgIHVzaW5nIGFsZ29yaXRobTo6c3BsaXRfaXRlcmF0b3I7CisgICAgdXNpbmcgYWxnb3JpdGhtOjptYWtlX3NwbGl0X2l0ZXJhdG9yOworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0ZJTkRfSVRFUkFUT1JfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kZXIuaHBwCkBAIC0wLDAgKzEsMjcwIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBmaW5kZXIuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwNi4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfRklOREVSX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfRklOREVSX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2NvbnN0X2l0ZXJhdG9yLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uc3RhbnRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9maW5kZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29tcGFyZS5ocHA+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgRmluZGVyIGdlbmVyYXRvcnMuIEZpbmRlciBvYmplY3QgaXMgYSBmdW5jdG9yIHdoaWNoIGlzIGFibGUgdG8gCisgICAgZmluZCBhIHN1YnN0cmluZyBtYXRjaGluZyBhIHNwZWNpZmljIGNyaXRlcmlhIGluIHRoZSBpbnB1dC4KKyAgICBGaW5kZXJzIGFyZSB1c2VkIGFzIGEgcGx1Z2dhYmxlIGNvbXBvbmVudHMgZm9yIHJlcGxhY2UsIGZpbmQgCisgICAgYW5kIHNwbGl0IGZhY2lsaXRpZXMuIFRoaXMgaGVhZGVyIGNvbnRhaW5zIGdlbmVyYXRvciBmdW5jdGlvbnMgCisgICAgZm9yIGZpbmRlcnMgcHJvdmlkZWQgaW4gdGhpcyBsaWJyYXJ5LgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gIEZpbmRlciBnZW5lcmF0b3JzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisgICAgICAgIAorICAgICAgICAvLyEgIkZpcnN0IiBmaW5kZXIgCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyBmaXJzdF9maW5kZXIuIFRoZSBmaW5kZXIgc2VhcmNoZXMgZm9yIHRoZSBmaXJzdAorICAgICAgICAgICAgb2NjdXJyZW5jZSBvZiB0aGUgc3RyaW5nIGluIGEgZ2l2ZW4gaW5wdXQuCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGdpdmVuIGFzIGFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLgorCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvci4KKyAgICAgICAgICAgIFxwYXJhbSBDb21wIEFuIGVsZW1lbnQgY29tcGFyaXNvbiBwcmVkaWNhdGUKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIGZpcnN0X2ZpbmRlciBvYmplY3QKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjpmaXJzdF9maW5kZXJGPAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICBpc19lcXVhbD4KKyAgICAgICAgZmlyc3RfZmluZGVyKCBjb25zdCBSYW5nZVQmIFNlYXJjaCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAKKyAgICAgICAgICAgICAgICBkZXRhaWw6OmZpcnN0X2ZpbmRlckY8CisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICAgICAgICAgICAgICBpc19lcXVhbD4oIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoU2VhcmNoKSwgaXNfZXF1YWwoKSApIDsKKyAgICAgICAgfQorCisgICAgICAgIC8vISAiRmlyc3QiIGZpbmRlcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQsdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6Zmlyc3RfZmluZGVyRjwKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlLAorICAgICAgICAgICAgUHJlZGljYXRlVD4KKyAgICAgICAgZmlyc3RfZmluZGVyKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLCBQcmVkaWNhdGVUIENvbXAgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gCisgICAgICAgICAgICAgICAgZGV0YWlsOjpmaXJzdF9maW5kZXJGPAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlLAorICAgICAgICAgICAgICAgICAgICBQcmVkaWNhdGVUPiggOjpib29zdDo6YXNfbGl0ZXJhbChTZWFyY2gpLCBDb21wICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgIkxhc3QiIGZpbmRlcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdCB0aGUgXGMgbGFzdF9maW5kZXIuIFRoZSBmaW5kZXIgc2VhcmNoZXMgZm9yIHRoZSBsYXN0CisgICAgICAgICAgICBvY2N1cnJlbmNlIG9mIHRoZSBzdHJpbmcgaW4gYSBnaXZlbiBpbnB1dC4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgZ2l2ZW4gYXMgYW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guCisKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLgorICAgICAgICAgICAgXHBhcmFtIENvbXAgQW4gZWxlbWVudCBjb21wYXJpc29uIHByZWRpY2F0ZQorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgbGFzdF9maW5kZXIgb2JqZWN0CisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6bGFzdF9maW5kZXJGPAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICBpc19lcXVhbD4KKyAgICAgICAgbGFzdF9maW5kZXIoIGNvbnN0IFJhbmdlVCYgU2VhcmNoICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIAorICAgICAgICAgICAgICAgIGRldGFpbDo6bGFzdF9maW5kZXJGPAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlLAorICAgICAgICAgICAgICAgICAgICBpc19lcXVhbD4oIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoU2VhcmNoKSwgaXNfZXF1YWwoKSApOworICAgICAgICB9CisgICAgICAgIC8vISAiTGFzdCIgZmluZGVyCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6bGFzdF9maW5kZXJGPAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICBQcmVkaWNhdGVUPgorICAgICAgICBsYXN0X2ZpbmRlciggY29uc3QgUmFuZ2VUJiBTZWFyY2gsIFByZWRpY2F0ZVQgQ29tcCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAKKyAgICAgICAgICAgICAgICBkZXRhaWw6Omxhc3RfZmluZGVyRjwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZSwKKyAgICAgICAgICAgICAgICAgICAgUHJlZGljYXRlVD4oIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoU2VhcmNoKSwgQ29tcCApIDsKKyAgICAgICAgfQorCisgICAgICAgIC8vISAiTnRoIiBmaW5kZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIG50aF9maW5kZXIuIFRoZSBmaW5kZXIgc2VhcmNoZXMgZm9yIHRoZSBuLXRoICh6ZXJvLWluZGV4ZWQpCisgICAgICAgICAgICBvY2N1cnJlbmNlIG9mIHRoZSBzdHJpbmcgaW4gYSBnaXZlbiBpbnB1dC4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgZ2l2ZW4gYXMgYW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guCisKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yLgorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgZmluZAorICAgICAgICAgICAgXHBhcmFtIENvbXAgQW4gZWxlbWVudCBjb21wYXJpc29uIHByZWRpY2F0ZQorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgbnRoX2ZpbmRlciBvYmplY3QKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjpudGhfZmluZGVyRjwKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlLAorICAgICAgICAgICAgaXNfZXF1YWw+CisgICAgICAgIG50aF9maW5kZXIoIAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBTZWFyY2gsIAorICAgICAgICAgICAgaW50IE50aCkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIAorICAgICAgICAgICAgICAgIGRldGFpbDo6bnRoX2ZpbmRlckY8CisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICAgICAgICAgIGlzX2VxdWFsPiggOjpib29zdDo6YXNfbGl0ZXJhbChTZWFyY2gpLCBOdGgsIGlzX2VxdWFsKCkgKSA7CisgICAgICAgIH0KKyAgICAgICAgLy8hICJOdGgiIGZpbmRlcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBkZXRhaWw6Om50aF9maW5kZXJGPAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICBQcmVkaWNhdGVUPgorICAgICAgICBudGhfZmluZGVyKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgU2VhcmNoLCAKKyAgICAgICAgICAgIGludCBOdGgsIAorICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIAorICAgICAgICAgICAgICAgIGRldGFpbDo6bnRoX2ZpbmRlckY8CisgICAgICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUsCisgICAgICAgICAgICAgICAgICAgIFByZWRpY2F0ZVQ+KCA6OmJvb3N0Ojphc19saXRlcmFsKFNlYXJjaCksIE50aCwgQ29tcCApOworICAgICAgICB9CisKKyAgICAgICAgLy8hICJIZWFkIiBmaW5kZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIGhlYWRfZmluZGVyLiBUaGUgZmluZGVyIHJldHVybnMgYSBoZWFkIG9mIGEgZ2l2ZW4KKyAgICAgICAgICAgIGlucHV0LiBUaGUgaGVhZCBpcyBhIHByZWZpeCBvZiBhIHN0cmluZyB1cCB0byBuIGVsZW1lbnRzIGluCisgICAgICAgICAgICBzaXplLiBJZiBhbiBpbnB1dCBoYXMgbGVzcyB0aGVuIG4gZWxlbWVudHMsIHdob2xlIGlucHV0IGlzIAorICAgICAgICAgICAgY29uc2lkZXJlZCBhIGhlYWQuCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGdpdmVuIGFzIGFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLgorCisgICAgICAgICAgICBccGFyYW0gTiBUaGUgc2l6ZSBvZiB0aGUgaGVhZAorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgaGVhZF9maW5kZXIgb2JqZWN0CisgICAgICAgICovCisgICAgICAgIGlubGluZSBkZXRhaWw6OmhlYWRfZmluZGVyRgorICAgICAgICBoZWFkX2ZpbmRlciggaW50IE4gKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjpoZWFkX2ZpbmRlckYoTik7CisgICAgICAgIH0KKyAgICAgICAgCisgICAgICAgIC8vISAiVGFpbCIgZmluZGVyCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyB0YWlsX2ZpbmRlci4gVGhlIGZpbmRlciByZXR1cm5zIGEgdGFpbCBvZiBhIGdpdmVuCisgICAgICAgICAgICBpbnB1dC4gVGhlIHRhaWwgaXMgYSBzdWZmaXggb2YgYSBzdHJpbmcgdXAgdG8gbiBlbGVtZW50cyBpbgorICAgICAgICAgICAgc2l6ZS4gSWYgYW4gaW5wdXQgaGFzIGxlc3MgdGhlbiBuIGVsZW1lbnRzLCB3aG9sZSBpbnB1dCBpcyAKKyAgICAgICAgICAgIGNvbnNpZGVyZWQgYSBoZWFkLgorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBnaXZlbiBhcyBhbiBcYyBpdGVyYXRvcl9yYW5nZSBkZWxpbWl0aW5nIHRoZSBtYXRjaC4KKworICAgICAgICAgICAgXHBhcmFtIE4gVGhlIHNpemUgb2YgdGhlIGhlYWQKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIHRhaWxfZmluZGVyIG9iamVjdAorICAgICAgICAqLworICAgICAgICBpbmxpbmUgZGV0YWlsOjp0YWlsX2ZpbmRlckYKKyAgICAgICAgdGFpbF9maW5kZXIoIGludCBOICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6dGFpbF9maW5kZXJGKE4pOworICAgICAgICB9CisKKyAgICAgICAgLy8hICJUb2tlbiIgZmluZGVyCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyB0b2tlbl9maW5kZXIuIFRoZSBmaW5kZXIgc2VhcmNoZXMgZm9yIGEgdG9rZW4gCisgICAgICAgICAgICBzcGVjaWZpZWQgYnkgYSBwcmVkaWNhdGUuIEl0IGlzIHNpbWlsYXIgdG8gc3RkOjpmaW5kX2lmIAorICAgICAgICAgICAgYWxnb3JpdGhtLCB3aXRoIGFuIGV4Y2VwdGlvbiB0aGF0IGl0IHJldHVybiBhIHJhbmdlIG9mCisgICAgICAgICAgICBpbnN0ZWFkIG9mIGEgc2luZ2xlIGl0ZXJhdG9yLgorCisgICAgICAgICAgICBJZiAiY29tcHJlc3MgdG9rZW4gbW9kZSIgaXMgZW5hYmxlZCwgYWRqYWNlbnQgbWF0Y2hpbmcgdG9rZW5zIGFyZSAKKyAgICAgICAgICAgIGNvbmNhdGVuYXRlZCBpbnRvIG9uZSBtYXRjaC4gVGh1cyB0aGUgZmluZGVyIGNhbiBiZSB1c2VkIHRvIAorICAgICAgICAgICAgc2VhcmNoIGZvciBjb250aW51b3VzIHNlZ21lbnRzIG9mIGNoYXJhY3RlcnMgc2F0aXNmeWluZyB0aGUgCisgICAgICAgICAgICBnaXZlbiBwcmVkaWNhdGUuCisKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgZ2l2ZW4gYXMgYW4gXGMgaXRlcmF0b3JfcmFuZ2UgZGVsaW1pdGluZyB0aGUgbWF0Y2guCisKKyAgICAgICAgICAgIFxwYXJhbSBQcmVkIEFuIGVsZW1lbnQgc2VsZWN0aW9uIHByZWRpY2F0ZQorICAgICAgICAgICAgXHBhcmFtIGVDb21wcmVzcyBDb21wcmVzcyBmbGFnCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyB0b2tlbl9maW5kZXIgb2JqZWN0CisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBQcmVkaWNhdGVUID4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6dG9rZW5fZmluZGVyRjxQcmVkaWNhdGVUPgorICAgICAgICB0b2tlbl9maW5kZXIoIAorICAgICAgICAgICAgUHJlZGljYXRlVCBQcmVkLCAKKyAgICAgICAgICAgIHRva2VuX2NvbXByZXNzX21vZGVfdHlwZSBlQ29tcHJlc3M9dG9rZW5fY29tcHJlc3Nfb2ZmICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6dG9rZW5fZmluZGVyRjxQcmVkaWNhdGVUPiggUHJlZCwgZUNvbXByZXNzICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgIlJhbmdlIiBmaW5kZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIHJhbmdlX2ZpbmRlci4gVGhlIGZpbmRlciBkb2VzIG5vdCBwZXJmb3JtIAorICAgICAgICAgICAgYW55IG9wZXJhdGlvbi4gSXQgc2ltcGx5IHJldHVybnMgdGhlIGdpdmVuIHJhbmdlIGZvciAKKyAgICAgICAgICAgIGFueSBpbnB1dC4gCisKKyAgICAgICAgICAgIFxwYXJhbSBCZWdpbiBCZWdpbm5pbmcgb2YgdGhlIHJhbmdlCisgICAgICAgICAgICBccGFyYW0gRW5kIEVuZCBvZiB0aGUgcmFuZ2UKKyAgICAgICAgICAgIFxwYXJhbSBSYW5nZSBUaGUgcmFuZ2UuCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyByYW5nZV9maW5nZXIgb2JqZWN0CisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6cmFuZ2VfZmluZGVyRjxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICByYW5nZV9maW5kZXIoCisgICAgICAgICAgICBGb3J3YXJkSXRlcmF0b3JUIEJlZ2luLAorICAgICAgICAgICAgRm9yd2FyZEl0ZXJhdG9yVCBFbmQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjpyYW5nZV9maW5kZXJGPEZvcndhcmRJdGVyYXRvclQ+KCBCZWdpbiwgRW5kICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgIlJhbmdlIiBmaW5kZXIKKyAgICAgICAgLyohICAgICAgIAorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBGb3J3YXJkSXRlcmF0b3JUID4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6cmFuZ2VfZmluZGVyRjxGb3J3YXJkSXRlcmF0b3JUPgorICAgICAgICByYW5nZV9maW5kZXIoIGl0ZXJhdG9yX3JhbmdlPEZvcndhcmRJdGVyYXRvclQ+IFJhbmdlICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6cmFuZ2VfZmluZGVyRjxGb3J3YXJkSXRlcmF0b3JUPiggUmFuZ2UgKTsKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIHRoZSBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaXJzdF9maW5kZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpsYXN0X2ZpbmRlcjsKKyAgICB1c2luZyBhbGdvcml0aG06Om50aF9maW5kZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpoZWFkX2ZpbmRlcjsKKyAgICB1c2luZyBhbGdvcml0aG06OnRhaWxfZmluZGVyOworICAgIHVzaW5nIGFsZ29yaXRobTo6dG9rZW5fZmluZGVyOworICAgIHVzaW5nIGFsZ29yaXRobTo6cmFuZ2VfZmluZGVyOworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0ZJTkRFUl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2Zvcm1hdHRlci5ocHAKQEAgLTAsMCArMSwxMjAgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IGZvcm1hdHRlci5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19GT1JNQVRURVJfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19GT1JNQVRURVJfSFBQCisKKyNpbmNsdWRlIDxib29zdC9kZXRhaWwvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL3ZhbHVlX3R5cGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlX2NvcmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2FzX2xpdGVyYWwuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvZm9ybWF0dGVyLmhwcD4KKworLyohIFxmaWxlCisgICAgRGVmaW5lcyBGb3JtYXR0ZXIgZ2VuZXJhdG9ycy4gRm9ybWF0dGVyIGlzIGEgZnVuY3RvciB3aGljaCBmb3JtYXRzCisgICAgYSBzdHJpbmcgYWNjb3JkaW5nIHRvIGdpdmVuIHBhcmFtZXRlcnMuIEEgRm9ybWF0dGVyIHdvcmtzCisgICAgaW4gY29uanVuY3Rpb24gd2l0aCBhIEZpbmRlci4gQSBGaW5kZXIgY2FuIHByb3ZpZGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgorICAgIGZvciBhIHNwZWNpZmljIEZvcm1hdHRlci4gQW4gZXhhbXBsZSBvZiBzdWNoIGEgY29vcGVyYXRpb24gaXMgcmVnZXhfZmluZGVyCisgICAgYW5kIHJlZ2V4X2Zvcm1hdHRlci4KKworICAgIEZvcm1hdHRlcnMgYXJlIHVzZWQgYXMgcGx1Z2dhYmxlIGNvbXBvbmVudHMgZm9yIHJlcGxhY2UgZmFjaWxpdGllcy4gCisgICAgVGhpcyBoZWFkZXIgY29udGFpbnMgZ2VuZXJhdG9yIGZ1bmN0aW9ucyBmb3IgdGhlIEZvcm1hdHRlcnMgcHJvdmlkZWQgaW4gdGhpcyBsaWJyYXJ5LgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gZ2VuZXJpYyBmb3JtYXR0ZXJzICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBDb25zdGFudCBmb3JtYXR0ZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3RzIGEgXGMgY29uc3RfZm9ybWF0dGVyLiBDb25zdCBmb3JtYXR0ZXIgYWx3YXlzIHJldHVybnMKKyAgICAgICAgICAgIHRoZSBzYW1lIHZhbHVlLCByZWdhcmRsZXNzIG9mIHRoZSBwYXJhbWV0ZXIuCisKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBwcmVkZWZpbmVkIHZhbHVlIHVzZWQgYXMgYSByZXN1bHQgZm9yIGZvcm1hdHRpbmcKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gaW5zdGFuY2Ugb2YgdGhlIFxjIGNvbnN0X2Zvcm1hdHRlciBvYmplY3QuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIGRldGFpbDo6Y29uc3RfZm9ybWF0RjwKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPAorICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiA+CisgICAgICAgIGNvbnN0X2Zvcm1hdHRlcihjb25zdCBSYW5nZVQmIEZvcm1hdCkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6Y29uc3RfZm9ybWF0RjwKKyAgICAgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+ID4oOjpib29zdDo6YXNfbGl0ZXJhbChGb3JtYXQpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBJZGVudGl0eSBmb3JtYXR0ZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3RzIGFuIFxjIGlkZW50aXR5X2Zvcm1hdHRlci4gSWRlbnRpdHkgZm9ybWF0dGVyIGFsd2F5cyByZXR1cm5zCisgICAgICAgICAgICB0aGUgcGFyYW1ldGVyLgorCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBpZGVudGl0eV9mb3JtYXR0ZXIgb2JqZWN0LgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBkZXRhaWw6OmlkZW50aXR5X2Zvcm1hdEY8CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gPgorICAgICAgICBpZGVudGl0eV9mb3JtYXR0ZXIoKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjppZGVudGl0eV9mb3JtYXRGPAorICAgICAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gPigpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVtcHR5IGZvcm1hdHRlcgorICAgICAgICAvKiEKKyAgICAgICAgICAgIENvbnN0cnVjdHMgYW4gXGMgZW1wdHlfZm9ybWF0dGVyLiBFbXB0eSBmb3JtYXR0ZXIgYWx3YXlzIHJldHVybnMgYW4gZW1wdHkKKyAgICAgICAgICAgIHNlcXVlbmNlLiAKKworICAgICAgICAgICAgXHBhcmFtIElucHV0IGNvbnRhaW5lciB1c2VkIHRvIHNlbGVjdCBhIGNvcnJlY3QgdmFsdWVfdHlwZSBmb3IgdGhlCisgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0aW5nIGVtcHR5X2NvbnRhaW5lcjw+LgorICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgZW1wdHlfZm9ybWF0dGVyIG9iamVjdC4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VUPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjplbXB0eV9mb3JtYXRGPCAKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV92YWx1ZTxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICBlbXB0eV9mb3JtYXR0ZXIoY29uc3QgUmFuZ2VUJikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6ZW1wdHlfZm9ybWF0RjwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfdmFsdWU8UmFuZ2VUPjo6dHlwZT4oKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFbXB0eSBmb3JtYXR0ZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3RzIGEgXGMgZGlzc2VjdF9mb3JtYXR0ZXIuIERpc3NlY3QgZm9ybWF0dGVyIHVzZXMgYSBzcGVjaWZpZWQgZmluZGVyCisgICAgICAgICAgICB0byBleHRyYWN0IGEgcG9ydGlvbiBvZiB0aGUgZm9ybWF0dGVkIHNlcXVlbmNlLiBUaGUgZmlyc3QgZmluZGVyJ3MgbWF0Y2ggaXMgcmV0dXJuZWQgCisgICAgICAgICAgICBhcyBhIHJlc3VsdAorCisgICAgICAgICAgICBccGFyYW0gRmluZGVyIGEgZmluZGVyIHVzZWQgdG8gc2VsZWN0IGEgcG9ydGlvbiBvZiB0aGUgZm9ybWF0dGVkIHNlcXVlbmNlCisgICAgICAgICAgICBccmV0dXJuIEFuIGluc3RhbmNlIG9mIHRoZSBcYyBkaXNzZWN0X2Zvcm1hdHRlciBvYmplY3QuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIEZpbmRlclQ+CisgICAgICAgIGlubGluZSBkZXRhaWw6OmRpc3NlY3RfZm9ybWF0RjwgRmluZGVyVCA+CisgICAgICAgIGRpc3NlY3RfZm9ybWF0dGVyKGNvbnN0IEZpbmRlclQmIEZpbmRlcikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6ZGlzc2VjdF9mb3JtYXRGPEZpbmRlclQ+KEZpbmRlcik7CisgICAgICAgIH0KKworCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIHRoZSBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZGVudGl0eV9mb3JtYXR0ZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXI7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpkaXNzZWN0X2Zvcm1hdHRlcjsKKworfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX0ZPUk1BVFRFUl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2l0ZXJfZmluZC5ocHAKQEAgLTAsMCArMSwxOTMgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IGl0ZXJfZmluZC5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19JVEVSX0ZJTkRfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19JVEVSX0ZJTkRfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8YWxnb3JpdGhtPgorI2luY2x1ZGUgPGl0ZXJhdG9yPgorI2luY2x1ZGUgPGJvb3N0L2l0ZXJhdG9yL3RyYW5zZm9ybV9pdGVyYXRvci5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvdmFsdWVfdHlwZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYXNfbGl0ZXJhbC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmNlcHQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZF9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvdXRpbC5ocHA+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgZ2VuZXJpYyBzcGxpdCBhbGdvcml0aG1zLiBTcGxpdCBhbGdvcml0aG1zIGNhbiBiZSAKKyAgICB1c2VkIHRvIGRpdmlkZSBhIHNlcXVlbmNlIGludG8gc2V2ZXJhbCBwYXJ0IGFjY29yZGluZyAKKyAgICB0byBhIGdpdmVuIGNyaXRlcmlhLiBSZXN1bHQgaXMgZ2l2ZW4gYXMgYSAnY29udGFpbmVyIAorICAgIG9mIGNvbnRhaW5lcnMnIHdoZXJlIGVsZW1lbnRzIGFyZSBjb3BpZXMgb3IgcmVmZXJlbmNlcyAKKyAgICB0byBleHRyYWN0ZWQgcGFydHMuCisKKyAgICBUaGVyZSBhcmUgdHdvIGFsZ29yaXRobXMgcHJvdmlkZWQuIE9uZSBpdGVyYXRlcyBvdmVyIG1hdGNoaW5nCisgICAgc3Vic3RyaW5ncywgdGhlIG90aGVyIG9uZSBvdmVyIHRoZSBnYXBzIGJldHdlZW4gdGhlc2UgbWF0Y2hlcy4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBpdGVyYXRlIGZpbmQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgSXRlciBmaW5kIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgYWxnb3JpdGhtIGV4ZWN1dGVzIGEgZ2l2ZW4gZmluZGVyIGluIGl0ZXJhdGlvbiBvbiB0aGUgaW5wdXQsCisgICAgICAgICAgICB1bnRpbCB0aGUgZW5kIG9mIGlucHV0IGlzIHJlYWNoZWQsIG9yIG5vIG1hdGNoIGlzIGZvdW5kLgorICAgICAgICAgICAgSXRlcmF0aW9uIGlzIGRvbmUgdXNpbmcgYnVpbHQtaW4gZmluZF9pdGVyYXRvciwgc28gdGhlIHJlYWwgCisgICAgICAgICAgICBzZWFyY2hpbmcgaXMgcGVyZm9ybWVkIG9ubHkgd2hlbiBuZWVkZWQuCisgICAgICAgICAgICBJbiBlYWNoIGl0ZXJhdGlvbiBuZXcgbWF0Y2ggaXMgZm91bmQgYW5kIGFkZGVkIHRvIHRoZSByZXN1bHQuCisKKyAgICAgICAgICAgIFxwYXJhbSBSZXN1bHQgQSAnY29udGFpbmVyIGNvbnRhaW5lcicgdG8gY29udGFpbiB0aGUgcmVzdWx0IG9mIHNlYXJjaC4KKyAgICAgICAgICAgICAgICBCb3RoIG91dGVyIGFuZCBpbm5lciBjb250YWluZXIgbXVzdCBoYXZlIGNvbnN0cnVjdG9yIHRha2luZyBhIHBhaXIKKyAgICAgICAgICAgICAgICBvZiBpdGVyYXRvcnMgYXMgYW4gYXJndW1lbnQuCisgICAgICAgICAgICAgICAgVHlwaWNhbCB0eXBlIG9mIHRoZSByZXN1bHQgaXMgCisgICAgICAgICAgICAgICAgICAgIFxjIHN0ZDo6dmVjdG9yPGJvb3N0OjppdGVyYXRvcl9yYW5nZTxpdGVyYXRvcj4+CisgICAgICAgICAgICAgICAgKGVhY2ggZWxlbWVudCBvZiBzdWNoIGEgdmVjdG9yIHdpbGwgY29udGFpbmVyIGEgcmFuZ2UgZGVsaW1pdGluZyAKKyAgICAgICAgICAgICAgICBhIG1hdGNoKS4KKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIEZpbmRlciBBIEZpbmRlciBvYmplY3QgdXNlZCBmb3Igc2VhcmNoaW5nCisgICAgICAgICAgICBccmV0dXJuIEEgcmVmZXJlbmNlIHRvIHRoZSByZXN1bHQKKworICAgICAgICAgICAgXG5vdGUgUHJpb3IgY29udGVudCBvZiB0aGUgcmVzdWx0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULAorICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCA+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVNlcXVlbmNlVCYKKyAgICAgICAgaXRlcl9maW5kKAorICAgICAgICAgICAgU2VxdWVuY2VTZXF1ZW5jZVQmIFJlc3VsdCwKKyAgICAgICAgICAgIFJhbmdlVCYgSW5wdXQsCisgICAgICAgICAgICBGaW5kZXJUIEZpbmRlciApCisgICAgICAgIHsKKyAgICAgICAgICAgIEJPT1NUX0NPTkNFUFRfQVNTRVJUKCgKKyAgICAgICAgICAgICAgICBGaW5kZXJDb25jZXB0PAorICAgICAgICAgICAgICAgICAgICBGaW5kZXJULAorICAgICAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4KKyAgICAgICAgICAgICAgICApKTsKKworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+IGxpdF9pbnB1dCg6OmJvb3N0Ojphc19saXRlcmFsKElucHV0KSk7CisKKyAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUgaW5wdXRfaXRlcmF0b3JfdHlwZTsKKyAgICAgICAgICAgIHR5cGVkZWYgZmluZF9pdGVyYXRvcjxpbnB1dF9pdGVyYXRvcl90eXBlPiBmaW5kX2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICB0eXBlZGVmIGRldGFpbDo6Y29weV9pdGVyYXRvcl9yYW5nZUY8CisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV92YWx1ZTxTZXF1ZW5jZVNlcXVlbmNlVD46OnR5cGUsCisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZT4gY29weV9yYW5nZV90eXBlOworICAgICAgICAgICAgCisgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIElucHV0RW5kPTo6Ym9vc3Q6OmVuZChsaXRfaW5wdXQpOworCisgICAgICAgICAgICB0eXBlZGVmIHRyYW5zZm9ybV9pdGVyYXRvcjxjb3B5X3JhbmdlX3R5cGUsIGZpbmRfaXRlcmF0b3JfdHlwZT4KKyAgICAgICAgICAgICAgICB0cmFuc2Zvcm1faXRlcl90eXBlOworICAgIAorICAgICAgICAgICAgdHJhbnNmb3JtX2l0ZXJfdHlwZSBpdEJlZ2luPQorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6Om1ha2VfdHJhbnNmb3JtX2l0ZXJhdG9yKCAKKyAgICAgICAgICAgICAgICAgICAgZmluZF9pdGVyYXRvcl90eXBlKCA6OmJvb3N0OjpiZWdpbihsaXRfaW5wdXQpLCBJbnB1dEVuZCwgRmluZGVyICksCisgICAgICAgICAgICAgICAgICAgIGNvcHlfcmFuZ2VfdHlwZSgpKTsKKyAgICAgICAgICAgIAorICAgICAgICAgICAgdHJhbnNmb3JtX2l0ZXJfdHlwZSBpdEVuZD0KKyAgICAgICAgICAgICAgICA6OmJvb3N0OjptYWtlX3RyYW5zZm9ybV9pdGVyYXRvciggCisgICAgICAgICAgICAgICAgICAgIGZpbmRfaXRlcmF0b3JfdHlwZSgpLAorICAgICAgICAgICAgICAgICAgICBjb3B5X3JhbmdlX3R5cGUoKSk7CisKKyAgICAgICAgICAgIFNlcXVlbmNlU2VxdWVuY2VUIFRtcChpdEJlZ2luLCBpdEVuZCk7CisgICAgICAgICAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgIFJlc3VsdC5zd2FwKFRtcCk7CisgICAgICAgICAgICByZXR1cm4gUmVzdWx0OworICAgICAgICB9CisKKy8vICBpdGVyYXRlIHNwbGl0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIFNwbGl0IGZpbmQgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBhbGdvcml0aG0gZXhlY3V0ZXMgYSBnaXZlbiBmaW5kZXIgaW4gaXRlcmF0aW9uIG9uIHRoZSBpbnB1dCwKKyAgICAgICAgICAgIHVudGlsIHRoZSBlbmQgb2YgaW5wdXQgaXMgcmVhY2hlZCwgb3Igbm8gbWF0Y2ggaXMgZm91bmQuCisgICAgICAgICAgICBJdGVyYXRpb24gaXMgZG9uZSB1c2luZyBidWlsdC1pbiBmaW5kX2l0ZXJhdG9yLCBzbyB0aGUgcmVhbCAKKyAgICAgICAgICAgIHNlYXJjaGluZyBpcyBwZXJmb3JtZWQgb25seSB3aGVuIG5lZWRlZC4KKyAgICAgICAgICAgIEVhY2ggbWF0Y2ggaXMgdXNlZCBhcyBhIHNlcGFyYXRvciBvZiBzZWdtZW50cy4gVGhlc2Ugc2VnbWVudHMgYXJlIHRoZW4KKyAgICAgICAgICAgIHJldHVybmVkIGluIHRoZSByZXN1bHQuCisKKyAgICAgICAgICAgIFxwYXJhbSBSZXN1bHQgQSAnY29udGFpbmVyIGNvbnRhaW5lcicgdG8gY29udGFpbiB0aGUgcmVzdWx0IG9mIHNlYXJjaC4KKyAgICAgICAgICAgICAgICBCb3RoIG91dGVyIGFuZCBpbm5lciBjb250YWluZXIgbXVzdCBoYXZlIGNvbnN0cnVjdG9yIHRha2luZyBhIHBhaXIKKyAgICAgICAgICAgICAgICBvZiBpdGVyYXRvcnMgYXMgYW4gYXJndW1lbnQuCisgICAgICAgICAgICAgICAgVHlwaWNhbCB0eXBlIG9mIHRoZSByZXN1bHQgaXMgCisgICAgICAgICAgICAgICAgICAgIFxjIHN0ZDo6dmVjdG9yPGJvb3N0OjppdGVyYXRvcl9yYW5nZTxpdGVyYXRvcj4+CisgICAgICAgICAgICAgICAgKGVhY2ggZWxlbWVudCBvZiBzdWNoIGEgdmVjdG9yIHdpbGwgY29udGFpbmVyIGEgcmFuZ2UgZGVsaW1pdGluZyAKKyAgICAgICAgICAgICAgICBhIG1hdGNoKS4KKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIEZpbmRlciBBIGZpbmRlciBvYmplY3QgdXNlZCBmb3Igc2VhcmNoaW5nCisgICAgICAgICAgICBccmV0dXJuIEEgcmVmZXJlbmNlIHRvIHRoZSByZXN1bHQKKworICAgICAgICAgICAgXG5vdGUgUHJpb3IgY29udGVudCBvZiB0aGUgcmVzdWx0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULAorICAgICAgICAgICAgdHlwZW5hbWUgRmluZGVyVCA+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVNlcXVlbmNlVCYKKyAgICAgICAgaXRlcl9zcGxpdCgKKyAgICAgICAgICAgIFNlcXVlbmNlU2VxdWVuY2VUJiBSZXN1bHQsCisgICAgICAgICAgICBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgRmluZGVyVCBGaW5kZXIgKQorICAgICAgICB7CisgICAgICAgICAgICBCT09TVF9DT05DRVBUX0FTU0VSVCgoCisgICAgICAgICAgICAgICAgRmluZGVyQ29uY2VwdDxGaW5kZXJULAorICAgICAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPgorICAgICAgICAgICAgICAgICkpOworCisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gbGl0X2lucHV0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpKTsKKworICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgcmFuZ2VfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZSBpbnB1dF9pdGVyYXRvcl90eXBlOworICAgICAgICAgICAgdHlwZWRlZiBzcGxpdF9pdGVyYXRvcjxpbnB1dF9pdGVyYXRvcl90eXBlPiBmaW5kX2l0ZXJhdG9yX3R5cGU7CisgICAgICAgICAgICB0eXBlZGVmIGRldGFpbDo6Y29weV9pdGVyYXRvcl9yYW5nZUY8CisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV92YWx1ZTxTZXF1ZW5jZVNlcXVlbmNlVD46OnR5cGUsCisgICAgICAgICAgICAgICAgaW5wdXRfaXRlcmF0b3JfdHlwZT4gY29weV9yYW5nZV90eXBlOworICAgICAgICAgICAgCisgICAgICAgICAgICBpbnB1dF9pdGVyYXRvcl90eXBlIElucHV0RW5kPTo6Ym9vc3Q6OmVuZChsaXRfaW5wdXQpOworCisgICAgICAgICAgICB0eXBlZGVmIHRyYW5zZm9ybV9pdGVyYXRvcjxjb3B5X3JhbmdlX3R5cGUsIGZpbmRfaXRlcmF0b3JfdHlwZT4KKyAgICAgICAgICAgICAgICB0cmFuc2Zvcm1faXRlcl90eXBlOworICAgIAorICAgICAgICAgICAgdHJhbnNmb3JtX2l0ZXJfdHlwZSBpdEJlZ2luPQorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6Om1ha2VfdHJhbnNmb3JtX2l0ZXJhdG9yKCAKKyAgICAgICAgICAgICAgICAgICAgZmluZF9pdGVyYXRvcl90eXBlKCA6OmJvb3N0OjpiZWdpbihsaXRfaW5wdXQpLCBJbnB1dEVuZCwgRmluZGVyICksCisgICAgICAgICAgICAgICAgICAgIGNvcHlfcmFuZ2VfdHlwZSgpICk7CisKKyAgICAgICAgICAgIHRyYW5zZm9ybV9pdGVyX3R5cGUgaXRFbmQ9CisgICAgICAgICAgICAgICAgOjpib29zdDo6bWFrZV90cmFuc2Zvcm1faXRlcmF0b3IoIAorICAgICAgICAgICAgICAgICAgICBmaW5kX2l0ZXJhdG9yX3R5cGUoKSwKKyAgICAgICAgICAgICAgICAgICAgY29weV9yYW5nZV90eXBlKCkgKTsKKyAgICAgICAgICAgIAorICAgICAgICAgICAgU2VxdWVuY2VTZXF1ZW5jZVQgVG1wKGl0QmVnaW4sIGl0RW5kKTsKKworICAgICAgICAgICAgUmVzdWx0LnN3YXAoVG1wKTsKKyAgICAgICAgICAgIHJldHVybiBSZXN1bHQ7CisgICAgICAgIH0KKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorCisgICAgLy8gcHVsbCBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjppdGVyX2ZpbmQ7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppdGVyX3NwbGl0OworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0lURVJfRklORF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL2pvaW4uaHBwCkBAIC0wLDAgKzEsMTQ1IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBqb2luLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDYuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0pPSU5fSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19KT0lOX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL3NlcXVlbmNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS92YWx1ZV90eXBlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9hc19saXRlcmFsLmhwcD4KKworLyohIFxmaWxlCisgICAgRGVmaW5lcyBqb2luIGFsZ29yaXRobS4gCisKKyAgICBKb2luIGFsZ29yaXRobSBpcyBhIGNvdW50ZXJwYXJ0IHRvIHNwbGl0IGFsZ29yaXRobXMuCisgICAgSXQgam9pbnMgc3RyaW5ncyBmcm9tIGEgJ2xpc3QnIGJ5IGFkZGluZyB1c2VyIGRlZmluZWQgc2VwYXJhdG9yLgorICAgIEFkZGl0aW9uYWxseSB0aGVyZSBpcyBhIHZlcnNpb24gdGhhdCBhbGxvd3Mgc2ltcGxlIGZpbHRlcmluZworICAgIGJ5IHByb3ZpZGluZyBhIHByZWRpY2F0ZS4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBqb2luIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgSm9pbiBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIGFsZ29yaXRobSBqb2lucyBhbGwgc3RyaW5ncyBpbiBhICdsaXN0JyBpbnRvIG9uZSBsb25nIHN0cmluZy4KKyAgICAgICAgICAgIFNlZ21lbnRzIGFyZSBjb25jYXRlbmF0ZWQgYnkgZ2l2ZW4gc2VwYXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBjb250YWluZXIgdGhhdCBob2xkcyB0aGUgaW5wdXQgc3RyaW5ncy4gSXQgbXVzdCBiZSBhIGNvbnRhaW5lci1vZi1jb250YWluZXJzLgorICAgICAgICAgICAgXHBhcmFtIFNlcGFyYXRvciBBIHN0cmluZyB0aGF0IHdpbGwgc2VwYXJhdGUgdGhlIGpvaW5lZCBzZWdtZW50cy4KKyAgICAgICAgICAgIFxyZXR1cm4gQ29uY2F0ZW5hdGVkIHN0cmluZy4KKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBTZXF1ZW5jZVNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVD4KKyAgICAgICAgaW5saW5lIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFNlcXVlbmNlU2VxdWVuY2VUPjo6dHlwZSAKKyAgICAgICAgam9pbigKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIFNlcGFyYXRvcikKKyAgICAgICAgeworICAgICAgICAgICAgLy8gRGVmaW5lIHdvcmtpbmcgdHlwZXMKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmFuZ2VfdmFsdWU8U2VxdWVuY2VTZXF1ZW5jZVQ+Ojp0eXBlIFJlc3VsdFQ7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlU2VxdWVuY2VUPjo6dHlwZSBJbnB1dEl0ZXJhdG9yVDsKKworICAgICAgICAgICAgLy8gUGFyc2UgaW5wdXQKKyAgICAgICAgICAgIElucHV0SXRlcmF0b3JUIGl0QmVnaW49Ojpib29zdDo6YmVnaW4oSW5wdXQpOworICAgICAgICAgICAgSW5wdXRJdGVyYXRvclQgaXRFbmQ9Ojpib29zdDo6ZW5kKElucHV0KTsKKworICAgICAgICAgICAgLy8gQ29uc3RydWN0IGNvbnRhaW5lciB0byBob2xkIHRoZSByZXN1bHQKKyAgICAgICAgICAgIFJlc3VsdFQgUmVzdWx0OworICAgICAgICAgICAgCisgICAgICAgICAgICAvLyBBcHBlbmQgZmlyc3QgZWxlbWVudAorICAgICAgICAgICAgaWYoaXRCZWdpbiE9aXRFbmQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgKml0QmVnaW4pOworICAgICAgICAgICAgICAgICsraXRCZWdpbjsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgZm9yKDtpdEJlZ2luIT1pdEVuZDsgKytpdEJlZ2luKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIC8vIEFkZCBzZXBhcmF0b3IKKyAgICAgICAgICAgICAgICBkZXRhaWw6Omluc2VydChSZXN1bHQsIDo6Ym9vc3Q6OmVuZChSZXN1bHQpLCA6OmJvb3N0Ojphc19saXRlcmFsKFNlcGFyYXRvcikpOworICAgICAgICAgICAgICAgIC8vIEFkZCBlbGVtZW50CisgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgKml0QmVnaW4pOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gUmVzdWx0OworICAgICAgICB9CisKKy8vIGpvaW5faWYgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIENvbmRpdGlvbmFsIGpvaW4gYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBhbGdvcml0aG0gam9pbnMgYWxsIHN0cmluZ3MgaW4gYSAnbGlzdCcgaW50byBvbmUgbG9uZyBzdHJpbmcuCisgICAgICAgICAgICBTZWdtZW50cyBhcmUgY29uY2F0ZW5hdGVkIGJ5IGdpdmVuIHNlcGFyYXRvci4gT25seSBzZWdtZW50cyB0aGF0CisgICAgICAgICAgICBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBhZGRlZCB0byB0aGUgcmVzdWx0LgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBjb250YWluZXIgdGhhdCBob2xkcyB0aGUgaW5wdXQgc3RyaW5ncy4gSXQgbXVzdCBiZSBhIGNvbnRhaW5lci1vZi1jb250YWluZXJzLgorICAgICAgICAgICAgXHBhcmFtIFNlcGFyYXRvciBBIHN0cmluZyB0aGF0IHdpbGwgc2VwYXJhdGUgdGhlIGpvaW5lZCBzZWdtZW50cy4KKyAgICAgICAgICAgIFxwYXJhbSBQcmVkIEEgc2VnbWVudCBzZWxlY3Rpb24gcHJlZGljYXRlCisgICAgICAgICAgICBccmV0dXJuIENvbmNhdGVuYXRlZCBzdHJpbmcuCisKKyAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgU2VxdWVuY2VTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSB0eXBlbmFtZSByYW5nZV92YWx1ZTxTZXF1ZW5jZVNlcXVlbmNlVD46OnR5cGUgCisgICAgICAgIGpvaW5faWYoCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZXBhcmF0b3IsCisgICAgICAgICAgICBQcmVkaWNhdGVUIFByZWQpCisgICAgICAgIHsKKyAgICAgICAgICAgIC8vIERlZmluZSB3b3JraW5nIHR5cGVzCisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFNlcXVlbmNlU2VxdWVuY2VUPjo6dHlwZSBSZXN1bHRUOworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByYW5nZV9jb25zdF9pdGVyYXRvcjxTZXF1ZW5jZVNlcXVlbmNlVD46OnR5cGUgSW5wdXRJdGVyYXRvclQ7CisKKyAgICAgICAgICAgIC8vIFBhcnNlIGlucHV0CisgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yVCBpdEJlZ2luPTo6Ym9vc3Q6OmJlZ2luKElucHV0KTsKKyAgICAgICAgICAgIElucHV0SXRlcmF0b3JUIGl0RW5kPTo6Ym9vc3Q6OmVuZChJbnB1dCk7CisKKyAgICAgICAgICAgIC8vIENvbnN0cnVjdCBjb250YWluZXIgdG8gaG9sZCB0aGUgcmVzdWx0CisgICAgICAgICAgICBSZXN1bHRUIFJlc3VsdDsKKworICAgICAgICAgICAgLy8gUm9sbCB0byB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IHdpbGwgYmUgYWRkZWQKKyAgICAgICAgICAgIHdoaWxlKGl0QmVnaW4hPWl0RW5kICYmICFQcmVkKCppdEJlZ2luKSkgKytpdEJlZ2luOworICAgICAgICAgICAgLy8gQWRkIHRoaXMgZWxlbWVudAorICAgICAgICAgICAgaWYoaXRCZWdpbiE9aXRFbmQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgKml0QmVnaW4pOworICAgICAgICAgICAgICAgICsraXRCZWdpbjsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgZm9yKDtpdEJlZ2luIT1pdEVuZDsgKytpdEJlZ2luKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKFByZWQoKml0QmVnaW4pKQorICAgICAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHNlcGFyYXRvcgorICAgICAgICAgICAgICAgICAgICBkZXRhaWw6Omluc2VydChSZXN1bHQsIDo6Ym9vc3Q6OmVuZChSZXN1bHQpLCA6OmJvb3N0Ojphc19saXRlcmFsKFNlcGFyYXRvcikpOworICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZWxlbWVudAorICAgICAgICAgICAgICAgICAgICBkZXRhaWw6Omluc2VydChSZXN1bHQsIDo6Ym9vc3Q6OmVuZChSZXN1bHQpLCAqaXRCZWdpbik7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gUmVzdWx0OworICAgICAgICB9CisKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KKworICAgIC8vIHB1bGwgbmFtZXMgdG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6am9pbjsKKyAgICB1c2luZyBhbGdvcml0aG06OmpvaW5faWY7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfSk9JTl9IUFAKKwpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvcHJlZGljYXRlLmhwcApAQCAtMCwwICsxLDQ3NSBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgcHJlZGljYXRlLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX1BSRURJQ0FURV9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1BSRURJQ0FURV9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvY29uc3RfaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2FzX2xpdGVyYWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2l0ZXJhdG9yX3JhbmdlX2NvcmUuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jb21wYXJlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2ZpbmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZGV0YWlsL3ByZWRpY2F0ZS5ocHA+CisKKy8qISBcZmlsZSBib29zdC9hbGdvcml0aG0vc3RyaW5nL3ByZWRpY2F0ZS5ocHAKKyAgICBEZWZpbmVzIHN0cmluZy1yZWxhdGVkIHByZWRpY2F0ZXMuIAorICAgIFRoZSBwcmVkaWNhdGVzIGRldGVybWluZSB3aGV0aGVyIGEgc3Vic3RyaW5nIGlzIGNvbnRhaW5lZCBpbiB0aGUgaW5wdXQgc3RyaW5nIAorICAgIHVuZGVyIHZhcmlvdXMgY29uZGl0aW9uczogYSBzdHJpbmcgc3RhcnRzIHdpdGggdGhlIHN1YnN0cmluZywgZW5kcyB3aXRoIHRoZSAKKyAgICBzdWJzdHJpbmcsIHNpbXBseSBjb250YWlucyB0aGUgc3Vic3RyaW5nIG9yIGlmIGJvdGggc3RyaW5ncyBhcmUgZXF1YWwuCisgICAgQWRkaXRpb25hbHkgdGhlIGFsZ29yaXRobSBcYyBhbGwoKSBjaGVja3MgYWxsIGVsZW1lbnRzIG9mIGEgY29udGFpbmVyIHRvIHNhdGlzZnkgYSAKKyAgICBjb25kaXRpb24uCisKKyAgICBBbGwgcHJlZGljYXRlcyBwcm92aWRlIHRoZSBzdHJvbmcgZXhjZXB0aW9uIGd1YXJhbnRlZS4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBzdGFydHNfd2l0aCBwcmVkaWNhdGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgJ1N0YXJ0cyB3aXRoJyBwcmVkaWNhdGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIHByZWRpY2F0ZSBob2xkcyB3aGVuIHRoZSB0ZXN0IHN0cmluZyBpcyBhIHByZWZpeCBvZiB0aGUgSW5wdXQuCisgICAgICAgICAgICBJbiBvdGhlciB3b3JkcywgaWYgdGhlIGlucHV0IHN0YXJ0cyB3aXRoIHRoZSB0ZXN0LgorICAgICAgICAgICAgV2hlbiB0aGUgb3B0aW9uYWwgcHJlZGljYXRlIGlzIHNwZWNpZmllZCwgaXQgaXMgdXNlZCBmb3IgY2hhcmFjdGVyLXdpc2UKKyAgICAgICAgICAgIGNvbXBhcmlzb24uCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIFRlc3QgQSB0ZXN0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gQ29tcCBBbiBlbGVtZW50IGNvbXBhcmlzb24gcHJlZGljYXRlCisgICAgICAgICAgICBccmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIHRlc3QKKworICAgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgICAgIGlubGluZSBib29sIHN0YXJ0c193aXRoKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFRlc3QsCisgICAgICAgICAgICBQcmVkaWNhdGVUIENvbXApCisgICAgICAgIHsKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTFUPjo6dHlwZT4gbGl0X2lucHV0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpKTsKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTJUPjo6dHlwZT4gbGl0X3Rlc3QoOjpib29zdDo6YXNfbGl0ZXJhbChUZXN0KSk7CisKKyAgICAgICAgICAgIHR5cGVkZWYgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlMVQ+Ojp0eXBlIEl0ZXJhdG9yMVQ7CisgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTJUPjo6dHlwZSBJdGVyYXRvcjJUOworCisgICAgICAgICAgICBJdGVyYXRvcjFUIElucHV0RW5kPTo6Ym9vc3Q6OmVuZChsaXRfaW5wdXQpOworICAgICAgICAgICAgSXRlcmF0b3IyVCBUZXN0RW5kPTo6Ym9vc3Q6OmVuZChsaXRfdGVzdCk7CisKKyAgICAgICAgICAgIEl0ZXJhdG9yMVQgaXQ9Ojpib29zdDo6YmVnaW4obGl0X2lucHV0KTsKKyAgICAgICAgICAgIEl0ZXJhdG9yMlQgcGl0PTo6Ym9vc3Q6OmJlZ2luKGxpdF90ZXN0KTsKKyAgICAgICAgICAgIGZvcig7CisgICAgICAgICAgICAgICAgaXQhPUlucHV0RW5kICYmIHBpdCE9VGVzdEVuZDsKKyAgICAgICAgICAgICAgICArK2l0LCsrcGl0KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKCAhKENvbXAoKml0LCpwaXQpKSApCisgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIHBpdD09VGVzdEVuZDsKKyAgICAgICAgfQorCisgICAgICAgIC8vISAnU3RhcnRzIHdpdGgnIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgYm9vbCBzdGFydHNfd2l0aCggCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBUZXN0KQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpzdGFydHNfd2l0aChJbnB1dCwgVGVzdCwgaXNfZXF1YWwoKSk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgJ1N0YXJ0cyB3aXRoJyBwcmVkaWNhdGUgKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIHByZWRpY2F0ZSBob2xkcyB3aGVuIHRoZSB0ZXN0IHN0cmluZyBpcyBhIHByZWZpeCBvZiB0aGUgSW5wdXQuCisgICAgICAgICAgICBJbiBvdGhlciB3b3JkcywgaWYgdGhlIGlucHV0IHN0YXJ0cyB3aXRoIHRoZSB0ZXN0LgorICAgICAgICAgICAgRWxlbWVudHMgYXJlIGNvbXBhcmVkIGNhc2UgaW5zZW5zaXRpdmVseS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gVGVzdCBBIHRlc3Qgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIHRlc3QKKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBib29sIGlzdGFydHNfd2l0aCggCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBUZXN0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpzdGFydHNfd2l0aChJbnB1dCwgVGVzdCwgaXNfaWVxdWFsKExvYykpOworICAgICAgICB9CisKKworLy8gIGVuZHNfd2l0aCBwcmVkaWNhdGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgJ0VuZHMgd2l0aCcgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBwcmVkaWNhdGUgaG9sZHMgd2hlbiB0aGUgdGVzdCBzdHJpbmcgaXMgYSBzdWZmaXggb2YgdGhlIElucHV0LgorICAgICAgICAgICAgSW4gb3RoZXIgd29yZHMsIGlmIHRoZSBpbnB1dCBlbmRzIHdpdGggdGhlIHRlc3QuCisgICAgICAgICAgICBXaGVuIHRoZSBvcHRpb25hbCBwcmVkaWNhdGUgaXMgc3BlY2lmaWVkLCBpdCBpcyB1c2VkIGZvciBjaGFyYWN0ZXItd2lzZQorICAgICAgICAgICAgY29tcGFyaXNvbi4KKworCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBUZXN0IEEgdGVzdCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIENvbXAgQW4gZWxlbWVudCBjb21wYXJpc29uIHByZWRpY2F0ZQorICAgICAgICAgICAgXHJldHVybiBUaGUgcmVzdWx0IG9mIHRoZSB0ZXN0CisKKyAgICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBib29sIGVuZHNfd2l0aCggCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBUZXN0LAorICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wKQorICAgICAgICB7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+IGxpdF9pbnB1dCg6OmJvb3N0Ojphc19saXRlcmFsKElucHV0KSk7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UyVD46OnR5cGU+IGxpdF90ZXN0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoVGVzdCkpOworCisgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTFUPjo6dHlwZSBJdGVyYXRvcjFUOworICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgYm9vc3Q6OmRldGFpbDo6CisgICAgICAgICAgICAgICAgaXRlcmF0b3JfdHJhaXRzPEl0ZXJhdG9yMVQ+OjppdGVyYXRvcl9jYXRlZ29yeSBjYXRlZ29yeTsKKworICAgICAgICAgICAgcmV0dXJuIGRldGFpbDo6CisgICAgICAgICAgICAgICAgZW5kc193aXRoX2l0ZXJfc2VsZWN0KCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X2lucHV0KSwgCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChsaXRfaW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X3Rlc3QpLCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6ZW5kKGxpdF90ZXN0KSwgCisgICAgICAgICAgICAgICAgICAgIENvbXAsCisgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5KCkpOworICAgICAgICB9CisKKworICAgICAgICAvLyEgJ0VuZHMgd2l0aCcgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBib29sIGVuZHNfd2l0aCggCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBUZXN0KQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjplbmRzX3dpdGgoSW5wdXQsIFRlc3QsIGlzX2VxdWFsKCkpOworICAgICAgICB9CisKKyAgICAgICAgLy8hICdFbmRzIHdpdGgnIHByZWRpY2F0ZSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgcHJlZGljYXRlIGhvbGRzIHdoZW4gdGhlIHRlc3QgY29udGFpbmVyIGlzIGEgc3VmZml4IG9mIHRoZSBJbnB1dC4KKyAgICAgICAgICAgIEluIG90aGVyIHdvcmRzLCBpZiB0aGUgaW5wdXQgZW5kcyB3aXRoIHRoZSB0ZXN0LgorICAgICAgICAgICAgRWxlbWVudHMgYXJlIGNvbXBhcmVkIGNhc2UgaW5zZW5zaXRpdmVseS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gVGVzdCBBIHRlc3Qgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIFRoZSByZXN1bHQgb2YgdGhlIHRlc3QKKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBib29sIGllbmRzX3dpdGgoIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgVGVzdCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW5kc193aXRoKElucHV0LCBUZXN0LCBpc19pZXF1YWwoTG9jKSk7CisgICAgICAgIH0KKworLy8gIGNvbnRhaW5zIHByZWRpY2F0ZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISAnQ29udGFpbnMnIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgcHJlZGljYXRlIGhvbGRzIHdoZW4gdGhlIHRlc3QgY29udGFpbmVyIGlzIGNvbnRhaW5lZCBpbiB0aGUgSW5wdXQuCisgICAgICAgICAgICBXaGVuIHRoZSBvcHRpb25hbCBwcmVkaWNhdGUgaXMgc3BlY2lmaWVkLCBpdCBpcyB1c2VkIGZvciBjaGFyYWN0ZXItd2lzZQorICAgICAgICAgICAgY29tcGFyaXNvbi4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gVGVzdCBBIHRlc3Qgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBDb21wIEFuIGVsZW1lbnQgY29tcGFyaXNvbiBwcmVkaWNhdGUKKyAgICAgICAgICAgIFxyZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgdGVzdAorCisgICAgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIGJvb2wgY29udGFpbnMoIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgVGVzdCwKKyAgICAgICAgICAgIFByZWRpY2F0ZVQgQ29tcCkKKyAgICAgICAgeworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlMVQ+Ojp0eXBlPiBsaXRfaW5wdXQoOjpib29zdDo6YXNfbGl0ZXJhbChJbnB1dCkpOworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlMlQ+Ojp0eXBlPiBsaXRfdGVzdCg6OmJvb3N0Ojphc19saXRlcmFsKFRlc3QpKTsKKworICAgICAgICAgICAgaWYgKDo6Ym9vc3Q6OmVtcHR5KGxpdF90ZXN0KSkKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICAvLyBFbXB0eSByYW5nZSBpcyBjb250YWluZWQgYWx3YXlzCisgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CisgICAgICAgICAgICB9CisgICAgICAgICAgICAKKyAgICAgICAgICAgIC8vIFVzZSB0aGUgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIG1ha2UgVkFDUFAgaGFwcHkKKyAgICAgICAgICAgIGJvb2wgYlJlc3VsdD0oOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIobGl0X3Rlc3QsQ29tcCkoOjpib29zdDo6YmVnaW4obGl0X2lucHV0KSwgOjpib29zdDo6ZW5kKGxpdF9pbnB1dCkpKTsKKyAgICAgICAgICAgIHJldHVybiBiUmVzdWx0OworICAgICAgICB9CisKKyAgICAgICAgLy8hICdDb250YWlucycgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBib29sIGNvbnRhaW5zKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFRlc3QpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmNvbnRhaW5zKElucHV0LCBUZXN0LCBpc19lcXVhbCgpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISAnQ29udGFpbnMnIHByZWRpY2F0ZSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgcHJlZGljYXRlIGhvbGRzIHdoZW4gdGhlIHRlc3QgY29udGFpbmVyIGlzIGNvbnRhaW5lZCBpbiB0aGUgSW5wdXQuCisgICAgICAgICAgICBFbGVtZW50cyBhcmUgY29tcGFyZWQgY2FzZSBpbnNlbnNpdGl2ZWx5LgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBUZXN0IEEgdGVzdCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgICAgIFxyZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgdGVzdAorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIGJvb2wgaWNvbnRhaW5zKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFRlc3QsIAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpjb250YWlucyhJbnB1dCwgVGVzdCwgaXNfaWVxdWFsKExvYykpOworICAgICAgICB9CisKKy8vICBlcXVhbHMgcHJlZGljYXRlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hICdFcXVhbHMnIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgcHJlZGljYXRlIGhvbGRzIHdoZW4gdGhlIHRlc3QgY29udGFpbmVyIGlzIGVxdWFsIHRvIHRoZQorICAgICAgICAgICAgaW5wdXQgY29udGFpbmVyIGkuZS4gYWxsIGVsZW1lbnRzIGluIGJvdGggY29udGFpbmVycyBhcmUgc2FtZS4KKyAgICAgICAgICAgIFdoZW4gdGhlIG9wdGlvbmFsIHByZWRpY2F0ZSBpcyBzcGVjaWZpZWQsIGl0IGlzIHVzZWQgZm9yIGNoYXJhY3Rlci13aXNlCisgICAgICAgICAgICBjb21wYXJpc29uLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBUZXN0IEEgdGVzdCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIENvbXAgQW4gZWxlbWVudCBjb21wYXJpc29uIHByZWRpY2F0ZQorICAgICAgICAgICAgXHJldHVybiBUaGUgcmVzdWx0IG9mIHRoZSB0ZXN0CisKKyAgICAgICAgICAgIFxub3RlIFRoaXMgaXMgYSB0d28td2F5IHZlcnNpb24gb2YgXGMgc3RkOjplcXVhbCBhbGdvcml0aG0KKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBib29sIGVxdWFscyggCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwgCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBUZXN0LAorICAgICAgICAgICAgUHJlZGljYXRlVCBDb21wKQorICAgICAgICB7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+IGxpdF9pbnB1dCg6OmJvb3N0Ojphc19saXRlcmFsKElucHV0KSk7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UyVD46OnR5cGU+IGxpdF90ZXN0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoVGVzdCkpOworCisgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTFUPjo6dHlwZSBJdGVyYXRvcjFUOworICAgICAgICAgICAgdHlwZWRlZiBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UyVD46OnR5cGUgSXRlcmF0b3IyVDsKKyAgICAgICAgICAgICAgICAKKyAgICAgICAgICAgIEl0ZXJhdG9yMVQgSW5wdXRFbmQ9Ojpib29zdDo6ZW5kKGxpdF9pbnB1dCk7CisgICAgICAgICAgICBJdGVyYXRvcjJUIFRlc3RFbmQ9Ojpib29zdDo6ZW5kKGxpdF90ZXN0KTsKKworICAgICAgICAgICAgSXRlcmF0b3IxVCBpdD06OmJvb3N0OjpiZWdpbihsaXRfaW5wdXQpOworICAgICAgICAgICAgSXRlcmF0b3IyVCBwaXQ9Ojpib29zdDo6YmVnaW4obGl0X3Rlc3QpOworICAgICAgICAgICAgZm9yKDsKKyAgICAgICAgICAgICAgICBpdCE9SW5wdXRFbmQgJiYgcGl0IT1UZXN0RW5kOworICAgICAgICAgICAgICAgICsraXQsKytwaXQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgaWYoICEoQ29tcCgqaXQsKnBpdCkpICkKKyAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICByZXR1cm4gIChwaXQ9PVRlc3RFbmQpICYmIChpdD09SW5wdXRFbmQpOworICAgICAgICB9CisKKyAgICAgICAgLy8hICdFcXVhbHMnIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgYm9vbCBlcXVhbHMoIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgVGVzdCkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZXF1YWxzKElucHV0LCBUZXN0LCBpc19lcXVhbCgpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISAnRXF1YWxzJyBwcmVkaWNhdGUgKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIHByZWRpY2F0ZSBob2xkcyB3aGVuIHRoZSB0ZXN0IGNvbnRhaW5lciBpcyBlcXVhbCB0byB0aGUKKyAgICAgICAgICAgIGlucHV0IGNvbnRhaW5lciBpLmUuIGFsbCBlbGVtZW50cyBpbiBib3RoIGNvbnRhaW5lcnMgYXJlIHNhbWUuCisgICAgICAgICAgICBFbGVtZW50cyBhcmUgY29tcGFyZWQgY2FzZSBpbnNlbnNpdGl2ZWx5LgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBUZXN0IEEgdGVzdCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgICAgIFxyZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgdGVzdAorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGlzIGEgdHdvLXdheSB2ZXJzaW9uIG9mIFxjIHN0ZDo6ZXF1YWwgYWxnb3JpdGhtCisKKyAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgYm9vbCBpZXF1YWxzKCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LCAKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFRlc3QsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmVxdWFscyhJbnB1dCwgVGVzdCwgaXNfaWVxdWFsKExvYykpOworICAgICAgICB9CisKKy8vIGxleGljb2dyYXBoaWNhbF9jb21wYXJlIHByZWRpY2F0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIExleGljb2dyYXBoaWNhbCBjb21wYXJlIHByZWRpY2F0ZQorICAgICAgICAvKiEKKyAgICAgICAgICAgICBUaGlzIHByZWRpY2F0ZSBpcyBhbiBvdmVybG9hZCBvZiBzdGQ6OmxleGljb2dyYXBoaWNhbF9jb21wYXJlCisgICAgICAgICAgICAgZm9yIHJhbmdlIGFyZ3VtZW50cworCisgICAgICAgICAgICAgSXQgY2hlY2sgd2hldGhlciB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbGV4aWNvZ3JhcGhpY2FsbHkgbGVzcworICAgICAgICAgICAgIHRoZW4gdGhlIHNlY29uZCBvbmUuCisKKyAgICAgICAgICAgICBJZiB0aGUgb3B0aW9uYWwgcHJlZGljYXRlIGlzIHNwZWNpZmllZCwgaXQgaXMgdXNlZCBmb3IgY2hhcmFjdGVyLXdpc2UKKyAgICAgICAgICAgICBjb21wYXJpc29uCisKKyAgICAgICAgICAgICBccGFyYW0gQXJnMSBGaXJzdCBhcmd1bWVudCAKKyAgICAgICAgICAgICBccGFyYW0gQXJnMiBTZWNvbmQgYXJndW1lbnQKKyAgICAgICAgICAgICBccGFyYW0gUHJlZCBDb21wYXJpc29uIHByZWRpY2F0ZQorICAgICAgICAgICAgIFxyZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgdGVzdAorCisgICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgYm9vbCBsZXhpY29ncmFwaGljYWxfY29tcGFyZSgKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIEFyZzEsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBBcmcyLAorICAgICAgICAgICAgUHJlZGljYXRlVCBQcmVkKQorICAgICAgICB7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2UxVD46OnR5cGU+IGxpdF9hcmcxKDo6Ym9vc3Q6OmFzX2xpdGVyYWwoQXJnMSkpOworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlMlQ+Ojp0eXBlPiBsaXRfYXJnMig6OmJvb3N0Ojphc19saXRlcmFsKEFyZzIpKTsKKworICAgICAgICAgICAgcmV0dXJuIHN0ZDo6bGV4aWNvZ3JhcGhpY2FsX2NvbXBhcmUoCisgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X2FyZzEpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChsaXRfYXJnMSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X2FyZzIpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChsaXRfYXJnMiksCisgICAgICAgICAgICAgICAgUHJlZCk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgTGV4aWNvZ3JhcGhpY2FsIGNvbXBhcmUgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICAgICAgaW5saW5lIGJvb2wgbGV4aWNvZ3JhcGhpY2FsX2NvbXBhcmUoCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBBcmcxLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgQXJnMikKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGV4aWNvZ3JhcGhpY2FsX2NvbXBhcmUoQXJnMSwgQXJnMiwgaXNfbGVzcygpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBMZXhpY29ncmFwaGljYWwgY29tcGFyZSBwcmVkaWNhdGUgKGNhc2UtaW5zZW5zaXRpdmUpCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBwcmVkaWNhdGUgaXMgYW4gb3ZlcmxvYWQgb2Ygc3RkOjpsZXhpY29ncmFwaGljYWxfY29tcGFyZQorICAgICAgICAgICAgZm9yIHJhbmdlIGFyZ3VtZW50cy4KKyAgICAgICAgICAgIEl0IGNoZWNrIHdoZXRoZXIgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGxleGljb2dyYXBoaWNhbGx5IGxlc3MKKyAgICAgICAgICAgIHRoZW4gdGhlIHNlY29uZCBvbmUuCisgICAgICAgICAgICBFbGVtZW50cyBhcmUgY29tcGFyZWQgY2FzZSBpbnNlbnNpdGl2ZWx5CisKKworICAgICAgICAgICAgIFxwYXJhbSBBcmcxIEZpcnN0IGFyZ3VtZW50IAorICAgICAgICAgICAgIFxwYXJhbSBBcmcyIFNlY29uZCBhcmd1bWVudAorICAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICAgXHJldHVybiBUaGUgcmVzdWx0IG9mIHRoZSB0ZXN0CisKKyAgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBib29sIGlsZXhpY29ncmFwaGljYWxfY29tcGFyZSgKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIEFyZzEsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBBcmcyLAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpsZXhpY29ncmFwaGljYWxfY29tcGFyZShBcmcxLCBBcmcyLCBpc19pbGVzcyhMb2MpKTsKKyAgICAgICAgfQorICAgICAgICAKKworLy8gIGFsbCBwcmVkaWNhdGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgJ0FsbCcgcHJlZGljYXRlCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBwcmVkaWNhdGUgaG9sZHMgaXQgYWxsIGl0cyBlbGVtZW50cyBzYXRpc2Z5IGEgZ2l2ZW4gCisgICAgICAgICAgICBjb25kaXRpb24sIHJlcHJlc2VudGVkIGJ5IHRoZSBwcmVkaWNhdGUuCisgICAgICAgICAgICAKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIFByZWQgQSBwcmVkaWNhdGUKKyAgICAgICAgICAgIFxyZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgdGVzdAorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgYm9vbCBhbGwoIAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwgCisgICAgICAgICAgICBQcmVkaWNhdGVUIFByZWQpCisgICAgICAgIHsKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiBsaXRfaW5wdXQoOjpib29zdDo6YXNfbGl0ZXJhbChJbnB1dCkpOworCisgICAgICAgICAgICB0eXBlZGVmIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlIEl0ZXJhdG9yMVQ7CisKKyAgICAgICAgICAgIEl0ZXJhdG9yMVQgSW5wdXRFbmQ9Ojpib29zdDo6ZW5kKGxpdF9pbnB1dCk7CisgICAgICAgICAgICBmb3IoIEl0ZXJhdG9yMVQgSXQ9Ojpib29zdDo6YmVnaW4obGl0X2lucHV0KTsgSXQhPUlucHV0RW5kOyArK0l0KQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmICghUHJlZCgqSXQpKQorICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgICAgICB9CisgICAgICAgICAgICAKKyAgICAgICAgICAgIHJldHVybiB0cnVlOworICAgICAgICB9CisKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KKworICAgIC8vIHB1bGwgbmFtZXMgdG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6c3RhcnRzX3dpdGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppc3RhcnRzX3dpdGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplbmRzX3dpdGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZW5kc193aXRoOworICAgIHVzaW5nIGFsZ29yaXRobTo6Y29udGFpbnM7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppY29udGFpbnM7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcXVhbHM7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZXF1YWxzOworICAgIHVzaW5nIGFsZ29yaXRobTo6YWxsOworICAgIHVzaW5nIGFsZ29yaXRobTo6bGV4aWNvZ3JhcGhpY2FsX2NvbXBhcmU7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppbGV4aWNvZ3JhcGhpY2FsX2NvbXBhcmU7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfUFJFRElDQVRFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvcHJlZGljYXRlX2ZhY2FkZS5ocHAKQEAgLTAsMCArMSw0MiBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgcHJlZGljYXRlX2ZhY2FkZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19QUkVESUNBVEVfRkFDQURFX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfUFJFRElDQVRFX0ZBQ0FERV9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKworLyoKKyBcZmlsZSBib29zdC9hbGdvcml0aC9zdHJpbmcvcHJlZGljYXRlX2ZhY2FkZS5ocHAKKyBUaGlzIGZpbGUgY29udGFpbnMgcHJlZGljYXRlX2ZhY2FkZSBkZWZpbml0aW9uLiBUaGlzIHRlbXBsYXRlIGNsYXNzIGlzIHVzZWQKKyB0byBpZGVudGlmeSBjbGFzc2lmaWNhdGlvbiBwcmVkaWNhdGVzLCBzbyB0aGV5IGNhbiBiZSBjb21iaW5lZCB1c2luZworIGNvbXBvc2l0aW9uIG9wZXJhdG9ycy4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBwcmVkaWNhdGUgZmFjYWRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIFByZWRpY2F0ZSBmYWNhZGUKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIGNsYXNzIGFsbG93cyB0byByZWNvZ25pemUgY2xhc3NpZmljYXRpb24KKyAgICAgICAgICAgIHByZWRpY2F0ZXMsIHNvIHRoYXQgdGhleSBjYW4gYmUgY29tYmluZWQgdXNpbmcKKyAgICAgICAgICAgIGNvbXBvc2l0aW9uIG9wZXJhdG9ycy4KKyAgICAgICAgICAgIEV2ZXJ5IGNsYXNzaWZpY2F0aW9uIHByZWRpY2F0ZSBtdXN0IGJlIGRlcml2ZWQgZnJvbSB0aGlzIGNsYXNzLgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBEZXJpdmVkPgorICAgICAgICBzdHJ1Y3QgcHJlZGljYXRlX2ZhY2FkZSB7fTsKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19DTEFTU0lGSUNBVElPTl9ERVRBSUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9yZWdleC5ocHAKQEAgLTAsMCArMSw2NDYgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHJlZ2V4LmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX1JFR0VYX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfUkVHRVhfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmVnZXguaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYmVnaW4uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2VuZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3JhbmdlL2FzX2xpdGVyYWwuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kX2Zvcm1hdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9yZWdleF9maW5kX2Zvcm1hdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9mb3JtYXR0ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvaXRlcl9maW5kLmhwcD4KKworLyohIFxmaWxlCisgICAgRGVmaW5lcyByZWdleCB2YXJpYW50cyBvZiB0aGUgYWxnb3JpdGhtcy4gCisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgZmluZF9yZWdleCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBGaW5kIHJlZ2V4IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFNlYXJjaCBmb3IgYSBzdWJzdHJpbmcgbWF0Y2hpbmcgdGhlIGdpdmVuIHJlZ2V4IGluIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEEgY29udGFpbmVyIHdoaWNoIHdpbGwgYmUgc2VhcmNoZWQuCisgICAgICAgICAgICBccGFyYW0gUnggQSByZWd1bGFyIGV4cHJlc3Npb24KKyAgICAgICAgICAgIFxwYXJhbSBGbGFncyBSZWdleCBvcHRpb25zCisgICAgICAgICAgICBccmV0dXJuIAorICAgICAgICAgICAgICAgIEFuIFxjIGl0ZXJhdG9yX3JhbmdlIGRlbGltaXRpbmcgdGhlIG1hdGNoLiAKKyAgICAgICAgICAgICAgICBSZXR1cm5lZCBpdGVyYXRvciBpcyBlaXRoZXIgXGMgUmFuZ2VUOjppdGVyYXRvciBvciAKKyAgICAgICAgICAgICAgICBcYyBSYW5nZVQ6OmNvbnN0X2l0ZXJhdG9yLCBkZXBlbmRpbmcgb24gdGhlIGNvbnN0bmVzcyBvZiAKKyAgICAgICAgICAgICAgICB0aGUgaW5wdXQgcGFyYW1ldGVyLgorCisgICAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgQ2hhclQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmVnZXhUcmFpdHNUPgorICAgICAgICBpbmxpbmUgaXRlcmF0b3JfcmFuZ2U8IAorICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2l0ZXJhdG9yPFJhbmdlVD46OnR5cGUgPgorICAgICAgICBmaW5kX3JlZ2V4KCAKKyAgICAgICAgICAgIFJhbmdlVCYgSW5wdXQsIAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gbGl0X2lucHV0KDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpKTsKKworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKFJ4LEZsYWdzKSgKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihsaXRfaW5wdXQpLCA6OmJvb3N0OjplbmQobGl0X2lucHV0KSApOworICAgICAgICB9CisKKy8vICByZXBsYWNlX3JlZ2V4IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBTZWFyY2ggZm9yIGEgc3Vic3RyaW5nIG1hdGNoaW5nIGdpdmVuIHJlZ2V4IGFuZCBmb3JtYXQgaXQgd2l0aCAKKyAgICAgICAgICAgIHRoZSBzcGVjaWZpZWQgZm9ybWF0LiAgICAgICAgICAgICAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gUnggQSByZWd1bGFyIGV4cHJlc3Npb24KKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgUmVnZXggZm9ybWF0IGRlZmluaXRpb24KKyAgICAgICAgICAgIFxwYXJhbSBGbGFncyBSZWdleCBvcHRpb25zCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0ICAgCisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRTdHJpbmdUcmFpdHNULCB0eXBlbmFtZSBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUID4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCByZXBsYWNlX3JlZ2V4X2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6YmFzaWNfc3RyaW5nPENoYXJULCBGb3JtYXRTdHJpbmdUcmFpdHNULCBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUPiYgRm9ybWF0LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgfCBmb3JtYXRfZGVmYXVsdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2ZpbmRlciggUngsIEZsYWdzICksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyZWdleF9mb3JtYXR0ZXIoIEZvcm1hdCwgRmxhZ3MgKSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRTdHJpbmdUcmFpdHNULCB0eXBlbmFtZSBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUID4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCByZXBsYWNlX3JlZ2V4X2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6YmFzaWNfc3RyaW5nPENoYXJULCBGb3JtYXRTdHJpbmdUcmFpdHNULCBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUPiYgRm9ybWF0LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgfCBmb3JtYXRfZGVmYXVsdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKCBSeCwgRmxhZ3MgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2Zvcm1hdHRlciggRm9ybWF0LCBGbGFncyApICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBTZWFyY2ggZm9yIGEgc3Vic3RyaW5nIG1hdGNoaW5nIGdpdmVuIHJlZ2V4IGFuZCBmb3JtYXQgaXQgd2l0aCAKKyAgICAgICAgICAgIHRoZSBzcGVjaWZpZWQgZm9ybWF0LiBUaGUgaW5wdXQgc3RyaW5nIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gUnggQSByZWd1bGFyIGV4cHJlc3Npb24KKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgUmVnZXggZm9ybWF0IGRlZmluaXRpb24KKyAgICAgICAgICAgIFxwYXJhbSBGbGFncyBSZWdleCBvcHRpb25zCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRTdHJpbmdUcmFpdHNULCB0eXBlbmFtZSBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUID4KKyAgICAgICAgaW5saW5lIHZvaWQgcmVwbGFjZV9yZWdleCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpiYXNpY19zdHJpbmc8Q2hhclQsIEZvcm1hdFN0cmluZ1RyYWl0c1QsIEZvcm1hdFN0cmluZ0FsbG9jYXRvclQ+JiBGb3JtYXQsCisgICAgICAgICAgICBtYXRjaF9mbGFnX3R5cGUgRmxhZ3M9bWF0Y2hfZGVmYXVsdCB8IGZvcm1hdF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyZWdleF9maW5kZXIoIFJ4LCBGbGFncyApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZm9ybWF0dGVyKCBGb3JtYXQsIEZsYWdzICkgKTsKKyAgICAgICAgfQorCisvLyAgcmVwbGFjZV9hbGxfcmVnZXggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZXBsYWNlIGFsbCByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBGb3JtYXQgYWxsIHN1YnN0cmluZ3MsIG1hdGNoaW5nIGdpdmVuIHJlZ2V4LCB3aXRoIHRoZSBzcGVjaWZpZWQgZm9ybWF0LiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gUnggQSByZWd1bGFyIGV4cHJlc3Npb24KKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgUmVnZXggZm9ybWF0IGRlZmluaXRpb24KKyAgICAgICAgICAgIFxwYXJhbSBGbGFncyBSZWdleCBvcHRpb25zCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0ICAgICAKKworICAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRTdHJpbmdUcmFpdHNULCB0eXBlbmFtZSBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUID4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCByZXBsYWNlX2FsbF9yZWdleF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBiYXNpY19yZWdleDxDaGFyVCwgUmVnZXhUcmFpdHNUPiYgUngsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmJhc2ljX3N0cmluZzxDaGFyVCwgRm9ybWF0U3RyaW5nVHJhaXRzVCwgRm9ybWF0U3RyaW5nQWxsb2NhdG9yVD4mIEZvcm1hdCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0IHwgZm9ybWF0X2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSggCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKCBSeCwgRmxhZ3MgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2Zvcm1hdHRlciggRm9ybWF0LCBGbGFncyApICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBhbGwgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QsCisgICAgICAgICAgICB0eXBlbmFtZSBGb3JtYXRTdHJpbmdUcmFpdHNULCB0eXBlbmFtZSBGb3JtYXRTdHJpbmdBbGxvY2F0b3JUID4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCByZXBsYWNlX2FsbF9yZWdleF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBiYXNpY19yZWdleDxDaGFyVCwgUmVnZXhUcmFpdHNUPiYgUngsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmJhc2ljX3N0cmluZzxDaGFyVCwgRm9ybWF0U3RyaW5nVHJhaXRzVCwgRm9ybWF0U3RyaW5nQWxsb2NhdG9yVD4mIEZvcm1hdCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0IHwgZm9ybWF0X2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyZWdleF9maW5kZXIoIFJ4LCBGbGFncyApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZm9ybWF0dGVyKCBGb3JtYXQsIEZsYWdzICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGFsbCByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBGb3JtYXQgYWxsIHN1YnN0cmluZ3MsIG1hdGNoaW5nIGdpdmVuIHJlZ2V4LCB3aXRoIHRoZSBzcGVjaWZpZWQgZm9ybWF0LiAKKyAgICAgICAgICAgIFRoZSBpbnB1dCBzdHJpbmcgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBSeCBBIHJlZ3VsYXIgZXhwcmVzc2lvbgorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBSZWdleCBmb3JtYXQgZGVmaW5pdGlvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIFJlZ2V4IG9wdGlvbnMgICAgICAgICAgICAKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIEZvcm1hdFN0cmluZ1RyYWl0c1QsIHR5cGVuYW1lIEZvcm1hdFN0cmluZ0FsbG9jYXRvclQgPgorICAgICAgICBpbmxpbmUgdm9pZCByZXBsYWNlX2FsbF9yZWdleCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpiYXNpY19zdHJpbmc8Q2hhclQsIEZvcm1hdFN0cmluZ1RyYWl0c1QsIEZvcm1hdFN0cmluZ0FsbG9jYXRvclQ+JiBGb3JtYXQsCisgICAgICAgICAgICBtYXRjaF9mbGFnX3R5cGUgRmxhZ3M9bWF0Y2hfZGVmYXVsdCB8IGZvcm1hdF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGwoIAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKCBSeCwgRmxhZ3MgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2Zvcm1hdHRlciggRm9ybWF0LCBGbGFncyApICk7CisgICAgICAgIH0KKworLy8gIGVyYXNlX3JlZ2V4IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgRXJhc2UgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGEgc3Vic3RyaW5nIG1hdGNoaW5nIGdpdmVuIHJlZ2V4IGZyb20gdGhlIGlucHV0LgorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgICAgCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBSeCBBIHJlZ3VsYXIgZXhwcmVzc2lvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIFJlZ2V4IG9wdGlvbnMKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQgICAgCisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCA+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZXJhc2VfcmVnZXhfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2ZpbmRlciggUngsIEZsYWdzICksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoIElucHV0ICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCA+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgZXJhc2VfcmVnZXhfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyZWdleF9maW5kZXIoIFJ4LCBGbGFncyApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKCBJbnB1dCApICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgRXJhc2UgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGEgc3Vic3RyaW5nIG1hdGNoaW5nIGdpdmVuIHJlZ2V4IGZyb20gdGhlIGlucHV0LgorICAgICAgICAgICAgVGhlIGlucHV0IHN0cmluZyBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFJ4IEEgcmVndWxhciBleHByZXNzaW9uCisgICAgICAgICAgICBccGFyYW0gRmxhZ3MgUmVnZXggb3B0aW9ucworICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICB0eXBlbmFtZSBTZXF1ZW5jZVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgQ2hhclQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmVnZXhUcmFpdHNUID4KKyAgICAgICAgaW5saW5lIHZvaWQgZXJhc2VfcmVnZXgoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKCBSeCwgRmxhZ3MgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlciggSW5wdXQgKSApOworICAgICAgICB9CisKKy8vICBlcmFzZV9hbGxfcmVnZXggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBFcmFzZSBhbGwgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgRXJhc2UgYWxsIHN1YnN0cmluZ3MsIG1hdGNoaW5nIGdpdmVuIHJlZ2V4LCBmcm9tIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBSeCBBIHJlZ3VsYXIgZXhwcmVzc2lvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIFJlZ2V4IG9wdGlvbnMKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQgICAgICAgICAgICAgICAgICAgICAgICAKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCA+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgZXJhc2VfYWxsX3JlZ2V4X2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmVnZXhfZmluZGVyKCBSeCwgRmxhZ3MgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmVtcHR5X2Zvcm1hdHRlciggSW5wdXQgKSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIEVyYXNlIGFsbCByZWdleCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCA+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgZXJhc2VfYWxsX3JlZ2V4X2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2ZpbmRlciggUngsIEZsYWdzICksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjplbXB0eV9mb3JtYXR0ZXIoIElucHV0ICkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBFcmFzZSBhbGwgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgRXJhc2UgYWxsIHN1YnN0cmluZ3MsIG1hdGNoaW5nIGdpdmVuIHJlZ2V4LCBmcm9tIHRoZSBpbnB1dC4KKyAgICAgICAgICAgIFRoZSBpbnB1dCBzdHJpbmcgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBSeCBBIHJlZ3VsYXIgZXhwcmVzc2lvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIFJlZ2V4IG9wdGlvbnMKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVD4KKyAgICAgICAgaW5saW5lIHZvaWQgZXJhc2VfYWxsX3JlZ2V4KCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBiYXNpY19yZWdleDxDaGFyVCwgUmVnZXhUcmFpdHNUPiYgUngsCisgICAgICAgICAgICBtYXRjaF9mbGFnX3R5cGUgRmxhZ3M9bWF0Y2hfZGVmYXVsdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsKCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpyZWdleF9maW5kZXIoIFJ4LCBGbGFncyApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZW1wdHlfZm9ybWF0dGVyKCBJbnB1dCApICk7CisgICAgICAgIH0KKworLy8gIGZpbmRfYWxsX3JlZ2V4IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgYWxsIHJlZ2V4IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgYWxnb3JpdGhtIGZpbmRzIGFsbCBzdWJzdHJpbmdzIG1hdGNoaW5nIHRoZSBnaXZlIHJlZ2V4CisgICAgICAgICAgICBpbiB0aGUgaW5wdXQuICAgICAgICAgICAgIAorICAgICAgICAgICAgCisgICAgICAgICAgICBFYWNoIHBhcnQgaXMgY29waWVkIGFuZCBhZGRlZCBhcyBhIG5ldyBlbGVtZW50IHRvIHRoZSBvdXRwdXQgY29udGFpbmVyLgorICAgICAgICAgICAgVGh1cyB0aGUgcmVzdWx0IGNvbnRhaW5lciBtdXN0IGJlIGFibGUgdG8gaG9sZCBjb3BpZXMKKyAgICAgICAgICAgIG9mIHRoZSBtYXRjaGVzIChpbiBhIGNvbXBhdGlibGUgc3RydWN0dXJlIGxpa2Ugc3RkOjpzdHJpbmcpIG9yCisgICAgICAgICAgICBhIHJlZmVyZW5jZSB0byBpdCAoZS5nLiB1c2luZyB0aGUgaXRlcmF0b3IgcmFuZ2UgY2xhc3MpLgorICAgICAgICAgICAgRXhhbXBsZXMgb2Ygc3VjaCBhIGNvbnRhaW5lciBhcmUgXGMgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+CisgICAgICAgICAgICBvciBcYyBzdGQ6Omxpc3Q8Ym9vc3Q6Oml0ZXJhdG9yX3JhbmdlPHN0ZDo6c3RyaW5nOjppdGVyYXRvcj4+CisKKyAgICAgICAgICAgIFxwYXJhbSBSZXN1bHQgQSBjb250YWluZXIgdGhhdCBjYW4gaG9sZCBjb3BpZXMgb2YgcmVmZXJlbmNlcyB0byB0aGUgc3Vic3RyaW5ncy4KKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFJ4IEEgcmVndWxhciBleHByZXNzaW9uCisgICAgICAgICAgICBccGFyYW0gRmxhZ3MgUmVnZXggb3B0aW9ucworICAgICAgICAgICAgXHJldHVybiBBIHJlZmVyZW5jZSB0byB0aGUgcmVzdWx0CisKKyAgICAgICAgICAgIFxub3RlIFByaW9yIGNvbnRlbnQgb2YgdGhlIHJlc3VsdCB3aWxsIGJlIG92ZXJ3cml0dGVuLgorCisgICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlVCwgICAgICAgICAKKyAgICAgICAgICAgIHR5cGVuYW1lIENoYXJULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJlZ2V4VHJhaXRzVCA+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVNlcXVlbmNlVCYgZmluZF9hbGxfcmVnZXgoCisgICAgICAgICAgICBTZXF1ZW5jZVNlcXVlbmNlVCYgUmVzdWx0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6aXRlcl9maW5kKAorICAgICAgICAgICAgICAgIFJlc3VsdCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2ZpbmRlcihSeCxGbGFncykgKTsgICAgICAgICAKKyAgICAgICAgfQorCisvLyAgc3BsaXRfcmVnZXggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgU3BsaXQgcmVnZXggYWxnb3JpdGhtCisgICAgICAgIC8qISAKKyAgICAgICAgICAgIFRva2VuaXplIGV4cHJlc3Npb24uIFRoaXMgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBDIHN0cnRvay4gSW5wdXQKKyAgICAgICAgICAgIHNlcXVlbmNlIGlzIHNwbGl0IGludG8gdG9rZW5zLCBzZXBhcmF0ZWQgIGJ5IHNlcGFyYXRvcnMuIFNlcGFyYXRvcgorICAgICAgICAgICAgaXMgYW4gZXZlcnkgbWF0Y2ggb2YgdGhlIGdpdmVuIHJlZ2V4LgorICAgICAgICAgICAgRWFjaCBwYXJ0IGlzIGNvcGllZCBhbmQgYWRkZWQgYXMgYSBuZXcgZWxlbWVudCB0byB0aGUgb3V0cHV0IGNvbnRhaW5lci4KKyAgICAgICAgICAgIFRodXMgdGhlIHJlc3VsdCBjb250YWluZXIgbXVzdCBiZSBhYmxlIHRvIGhvbGQgY29waWVzCisgICAgICAgICAgICBvZiB0aGUgbWF0Y2hlcyAoaW4gYSBjb21wYXRpYmxlIHN0cnVjdHVyZSBsaWtlIHN0ZDo6c3RyaW5nKSBvcgorICAgICAgICAgICAgYSByZWZlcmVuY2UgdG8gaXQgKGUuZy4gdXNpbmcgdGhlIGl0ZXJhdG9yIHJhbmdlIGNsYXNzKS4KKyAgICAgICAgICAgIEV4YW1wbGVzIG9mIHN1Y2ggYSBjb250YWluZXIgYXJlIFxjIHN0ZDo6dmVjdG9yPHN0ZDo6c3RyaW5nPgorICAgICAgICAgICAgb3IgXGMgc3RkOjpsaXN0PGJvb3N0OjppdGVyYXRvcl9yYW5nZTxzdGQ6OnN0cmluZzo6aXRlcmF0b3I+PgorICAgIAorICAgICAgICAgICAgXHBhcmFtIFJlc3VsdCBBIGNvbnRhaW5lciB0aGF0IGNhbiBob2xkIGNvcGllcyBvZiByZWZlcmVuY2VzIHRvIHRoZSBzdWJzdHJpbmdzLiAgICAgICAgICAKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFJ4IEEgcmVndWxhciBleHByZXNzaW9uCisgICAgICAgICAgICBccGFyYW0gRmxhZ3MgUmVnZXggb3B0aW9ucworICAgICAgICAgICAgXHJldHVybiBBIHJlZmVyZW5jZSB0byB0aGUgcmVzdWx0CisKKyAgICAgICAgICAgIFxub3RlIFByaW9yIGNvbnRlbnQgb2YgdGhlIHJlc3VsdCB3aWxsIGJlIG92ZXJ3cml0dGVuLgorCisgICAgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VTZXF1ZW5jZVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2VULCAgICAgICAgIAorICAgICAgICAgICAgdHlwZW5hbWUgQ2hhclQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmVnZXhUcmFpdHNUID4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlU2VxdWVuY2VUJiBzcGxpdF9yZWdleCgKKyAgICAgICAgICAgIFNlcXVlbmNlU2VxdWVuY2VUJiBSZXN1bHQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjppdGVyX3NwbGl0KAorICAgICAgICAgICAgICAgIFJlc3VsdCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJlZ2V4X2ZpbmRlcihSeCxGbGFncykgKTsgICAgICAgICAKKyAgICAgICAgfQorCisvLyAgam9pbl9pZiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisjaWZuZGVmIEJPT1NUX05PX0ZVTkNUSU9OX1RFTVBMQVRFX09SREVSSU5HCisKKyAgICAgICAgLy8hIENvbmRpdGlvbmFsIGpvaW4gYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgVGhpcyBhbGdvcml0aG0gam9pbnMgYWxsIHN0cmluZ3MgaW4gYSAnbGlzdCcgaW50byBvbmUgbG9uZyBzdHJpbmcuCisgICAgICAgICAgICBTZWdtZW50cyBhcmUgY29uY2F0ZW5hdGVkIGJ5IGdpdmVuIHNlcGFyYXRvci4gT25seSBzZWdtZW50cyB0aGF0CisgICAgICAgICAgICBtYXRjaCB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHJlc3VsdAorCisgICAgICAgICAgICBUaGlzIGlzIGEgc3BlY2lhbGl6YXRpb24gb2Ygam9pbl9pZiBhbGdvcml0aG0uCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB0aGF0IGhvbGRzIHRoZSBpbnB1dCBzdHJpbmdzLiBJdCBtdXN0IGJlIGEgY29udGFpbmVyLW9mLWNvbnRhaW5lcnMuCisgICAgICAgICAgICBccGFyYW0gU2VwYXJhdG9yIEEgc3RyaW5nIHRoYXQgd2lsbCBzZXBhcmF0ZSB0aGUgam9pbmVkIHNlZ21lbnRzLgorICAgICAgICAgICAgXHBhcmFtIFJ4IEEgcmVndWxhciBleHByZXNzaW9uCisgICAgICAgICAgICBccGFyYW0gRmxhZ3MgUmVnZXggb3B0aW9ucworICAgICAgICAgICAgXHJldHVybiBDb25jYXRlbmF0ZWQgc3RyaW5nLgorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IAorICAgICAgICAgICAgdHlwZW5hbWUgU2VxdWVuY2VTZXF1ZW5jZVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UxVCwgICAgICAgICAgICAgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1QgPgorICAgICAgICBpbmxpbmUgdHlwZW5hbWUgcmFuZ2VfdmFsdWU8U2VxdWVuY2VTZXF1ZW5jZVQ+Ojp0eXBlIAorICAgICAgICBqb2luX2lmKAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VwYXJhdG9yLAorICAgICAgICAgICAgY29uc3QgYmFzaWNfcmVnZXg8Q2hhclQsIFJlZ2V4VHJhaXRzVD4mIFJ4LAorICAgICAgICAgICAgbWF0Y2hfZmxhZ190eXBlIEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICAvLyBEZWZpbmUgd29ya2luZyB0eXBlcworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByYW5nZV92YWx1ZTxTZXF1ZW5jZVNlcXVlbmNlVD46OnR5cGUgUmVzdWx0VDsKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8U2VxdWVuY2VTZXF1ZW5jZVQ+Ojp0eXBlIElucHV0SXRlcmF0b3JUOworCisgICAgICAgICAgICAvLyBQYXJzZSBpbnB1dAorICAgICAgICAgICAgSW5wdXRJdGVyYXRvclQgaXRCZWdpbj06OmJvb3N0OjpiZWdpbihJbnB1dCk7CisgICAgICAgICAgICBJbnB1dEl0ZXJhdG9yVCBpdEVuZD06OmJvb3N0OjplbmQoSW5wdXQpOworCisgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgY29udGFpbmVyIHRvIGhvbGQgdGhlIHJlc3VsdAorICAgICAgICAgICAgUmVzdWx0VCBSZXN1bHQ7CisKKworICAgICAgICAgICAgLy8gUm9sbCB0byB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IHdpbGwgYmUgYWRkZWQKKyAgICAgICAgICAgIHdoaWxlKAorICAgICAgICAgICAgICAgIGl0QmVnaW4hPWl0RW5kICYmIAorICAgICAgICAgICAgICAgICE6OmJvb3N0OjpyZWdleF9tYXRjaCg6OmJvb3N0OjpiZWdpbigqaXRCZWdpbiksIDo6Ym9vc3Q6OmVuZCgqaXRCZWdpbiksIFJ4LCBGbGFncykpICsraXRCZWdpbjsKKworICAgICAgICAgICAgLy8gQWRkIHRoaXMgZWxlbWVudAorICAgICAgICAgICAgaWYoaXRCZWdpbiE9aXRFbmQpCisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgKml0QmVnaW4pOworICAgICAgICAgICAgICAgICsraXRCZWdpbjsKKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgZm9yKDtpdEJlZ2luIT1pdEVuZDsgKytpdEJlZ2luKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGlmKDo6Ym9vc3Q6OnJlZ2V4X21hdGNoKDo6Ym9vc3Q6OmJlZ2luKCppdEJlZ2luKSwgOjpib29zdDo6ZW5kKCppdEJlZ2luKSwgUngsIEZsYWdzKSkKKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBzZXBhcmF0b3IKKyAgICAgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgOjpib29zdDo6YXNfbGl0ZXJhbChTZXBhcmF0b3IpKTsKKyAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGVsZW1lbnQKKyAgICAgICAgICAgICAgICAgICAgZGV0YWlsOjppbnNlcnQoUmVzdWx0LCA6OmJvb3N0OjplbmQoUmVzdWx0KSwgKml0QmVnaW4pOworICAgICAgICAgICAgICAgIH0KKyAgICAgICAgICAgIH0KKworICAgICAgICAgICAgcmV0dXJuIFJlc3VsdDsKKyAgICAgICAgfQorCisjZWxzZSAgLy8gQk9PU1RfTk9fRlVOQ1RJT05fVEVNUExBVEVfT1JERVJJTkcKKworICAgICAgICAgICAgICAgIC8vISBDb25kaXRpb25hbCBqb2luIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgYWxnb3JpdGhtIGpvaW5zIGFsbCBzdHJpbmdzIGluIGEgJ2xpc3QnIGludG8gb25lIGxvbmcgc3RyaW5nLgorICAgICAgICAgICAgU2VnbWVudHMgYXJlIGNvbmNhdGVuYXRlZCBieSBnaXZlbiBzZXBhcmF0b3IuIE9ubHkgc2VnbWVudHMgdGhhdAorICAgICAgICAgICAgbWF0Y2ggdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiB3aWxsIGJlIGFkZGVkIHRvIHRoZSByZXN1bHQKKworICAgICAgICAgICAgVGhpcyBpcyBhIHNwZWNpYWxpemF0aW9uIG9mIGpvaW5faWYgYWxnb3JpdGhtLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBjb250YWluZXIgdGhhdCBob2xkcyB0aGUgaW5wdXQgc3RyaW5ncy4gSXQgbXVzdCBiZSBhIGNvbnRhaW5lci1vZi1jb250YWluZXJzLgorICAgICAgICAgICAgXHBhcmFtIFNlcGFyYXRvciBBIHN0cmluZyB0aGF0IHdpbGwgc2VwYXJhdGUgdGhlIGpvaW5lZCBzZWdtZW50cy4KKyAgICAgICAgICAgIFxwYXJhbSBSeCBBIHJlZ3VsYXIgZXhwcmVzc2lvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIFJlZ2V4IG9wdGlvbnMKKyAgICAgICAgICAgIFxyZXR1cm4gQ29uY2F0ZW5hdGVkIHN0cmluZy4KKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsICAgICAgICAgICAgIAorICAgICAgICAgICAgdHlwZW5hbWUgQ2hhclQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmVnZXhUcmFpdHNUID4KKyAgICAgICAgaW5saW5lIHR5cGVuYW1lIHJhbmdlX3ZhbHVlPFNlcXVlbmNlU2VxdWVuY2VUPjo6dHlwZSAKKyAgICAgICAgam9pbl9pZl9yZWdleCgKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIFNlcGFyYXRvciwKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBGbGFncz1tYXRjaF9kZWZhdWx0ICkKKyAgICAgICAgeworICAgICAgICAgICAgLy8gRGVmaW5lIHdvcmtpbmcgdHlwZXMKKyAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmFuZ2VfdmFsdWU8U2VxdWVuY2VTZXF1ZW5jZVQ+Ojp0eXBlIFJlc3VsdFQ7CisgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlU2VxdWVuY2VUPjo6dHlwZSBJbnB1dEl0ZXJhdG9yVDsKKworICAgICAgICAgICAgLy8gUGFyc2UgaW5wdXQKKyAgICAgICAgICAgIElucHV0SXRlcmF0b3JUIGl0QmVnaW49Ojpib29zdDo6YmVnaW4oSW5wdXQpOworICAgICAgICAgICAgSW5wdXRJdGVyYXRvclQgaXRFbmQ9Ojpib29zdDo6ZW5kKElucHV0KTsKKworICAgICAgICAgICAgLy8gQ29uc3RydWN0IGNvbnRhaW5lciB0byBob2xkIHRoZSByZXN1bHQKKyAgICAgICAgICAgIFJlc3VsdFQgUmVzdWx0OworCisKKyAgICAgICAgICAgIC8vIFJvbGwgdG8gdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFkZGVkCisgICAgICAgICAgICB3aGlsZSgKKyAgICAgICAgICAgICAgICBpdEJlZ2luIT1pdEVuZCAmJiAKKyAgICAgICAgICAgICAgICAhOjpib29zdDo6cmVnZXhfbWF0Y2goOjpib29zdDo6YmVnaW4oKml0QmVnaW4pLCA6OmJvb3N0OjplbmQoKml0QmVnaW4pLCBSeCwgRmxhZ3MpKSArK2l0QmVnaW47CisKKyAgICAgICAgICAgIC8vIEFkZCB0aGlzIGVsZW1lbnQKKyAgICAgICAgICAgIGlmKGl0QmVnaW4hPWl0RW5kKQorICAgICAgICAgICAgeworICAgICAgICAgICAgICAgIGRldGFpbDo6aW5zZXJ0KFJlc3VsdCwgOjpib29zdDo6ZW5kKFJlc3VsdCksICppdEJlZ2luKTsKKyAgICAgICAgICAgICAgICArK2l0QmVnaW47CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIGZvcig7aXRCZWdpbiE9aXRFbmQ7ICsraXRCZWdpbikKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICBpZig6OmJvb3N0OjpyZWdleF9tYXRjaCg6OmJvb3N0OjpiZWdpbigqaXRCZWdpbiksIDo6Ym9vc3Q6OmVuZCgqaXRCZWdpbiksIFJ4LCBGbGFncykpCisgICAgICAgICAgICAgICAgeworICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc2VwYXJhdG9yCisgICAgICAgICAgICAgICAgICAgIGRldGFpbDo6aW5zZXJ0KFJlc3VsdCwgOjpib29zdDo6ZW5kKFJlc3VsdCksIDo6Ym9vc3Q6OmFzX2xpdGVyYWwoU2VwYXJhdG9yKSk7CisgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBlbGVtZW50CisgICAgICAgICAgICAgICAgICAgIGRldGFpbDo6aW5zZXJ0KFJlc3VsdCwgOjpib29zdDo6ZW5kKFJlc3VsdCksICppdEJlZ2luKTsKKyAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHJldHVybiBSZXN1bHQ7CisgICAgICAgIH0KKworCisjZW5kaWYgLy8gQk9PU1RfTk9fRlVOQ1RJT05fVEVNUExBVEVfT1JERVJJTkcKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorCisgICAgLy8gcHVsbCBuYW1lcyBpbnRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OmZpbmRfcmVnZXg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX3JlZ2V4OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9yZWdleF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9hbGxfcmVnZXg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX2FsbF9yZWdleF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfcmVnZXg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjplcmFzZV9yZWdleF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfYWxsX3JlZ2V4OworICAgIHVzaW5nIGFsZ29yaXRobTo6ZXJhc2VfYWxsX3JlZ2V4X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpmaW5kX2FsbF9yZWdleDsKKyAgICB1c2luZyBhbGdvcml0aG06OnNwbGl0X3JlZ2V4OworCisjaWZuZGVmIEJPT1NUX05PX0ZVTkNUSU9OX1RFTVBMQVRFX09SREVSSU5HCisgICAgdXNpbmcgYWxnb3JpdGhtOjpqb2luX2lmOworI2Vsc2UgIC8vIEJPT1NUX05PX0ZVTkNUSU9OX1RFTVBMQVRFX09SREVSSU5HCisgICAgdXNpbmcgYWxnb3JpdGhtOjpqb2luX2lmX3JlZ2V4OworI2VuZGlmIC8vIEJPT1NUX05PX0ZVTkNUSU9OX1RFTVBMQVRFX09SREVSSU5HCisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfUkVHRVhfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9yZWdleF9maW5kX2Zvcm1hdC5ocHAKQEAgLTAsMCArMSw5MCBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgcmVnZXhfZmluZF9mb3JtYXQuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfUkVHRVhfRklORF9GT1JNQVRfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19SRUdFWF9GSU5EX0ZPUk1BVF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yZWdleC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9kZXRhaWwvZmluZGVyX3JlZ2V4LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC9mb3JtYXR0ZXJfcmVnZXguaHBwPgorCisvKiEgXGZpbGUKKyAgICBEZWZpbmVzIHRoZSBcYyByZWdleF9maW5kZXIgYW5kIFxjIHJlZ2V4X2Zvcm1hdHRlciBnZW5lcmF0b3JzLiBUaGVzZSB0d28gZnVuY3RvcnMKKyAgICBhcmUgZGVzaWduZWQgdG8gd29yayB0b2dldGhlci4gXGMgcmVnZXhfZm9ybWF0dGVyIHVzZXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgorICAgIGFib3V0IGEgbWF0Y2ggY29udGFpbmVkIGluIHRoZSByZWdleF9maW5kZXIgc2VhcmNoIHJlc3VsdC4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICByZWdleF9maW5kZXIgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgIlJlZ2V4IiBmaW5kZXIgCisgICAgICAgIC8qIQorICAgICAgICAgICAgQ29uc3RydWN0IHRoZSBcYyByZWdleF9maW5kZXIuIEZpbmRlciB1c2VzIHRoZSByZWdleCBlbmdpbmUgdG8gc2VhcmNoCisgICAgICAgICAgICBmb3IgYSBtYXRjaC4KKyAgICAgICAgICAgIFJlc3VsdCBpcyBnaXZlbiBpbiBcYyByZWdleF9zZWFyY2hfcmVzdWx0LiBUaGlzIGlzIGFuIGV4dGVuc2lvbgorICAgICAgICAgICAgb2YgdGhlIGl0ZXJhdG9yX3JhbmdlLiBJbiBhZGRpdGlvbiBpdCBjb250YWlucyBtYXRjaCByZXN1bHRzIAorICAgICAgICAgICAgZnJvbSB0aGUgXGMgcmVnZXhfc2VhcmNoIGFsZ29yaXRobS4KKworICAgICAgICAgICAgXHBhcmFtIFJ4IEEgcmVndWxhciBleHByZXNzaW9uCisgICAgICAgICAgICBccGFyYW0gTWF0Y2hGbGFncyBSZWdleCBzZWFyY2ggb3B0aW9ucworICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgcmVnZXhfZmluZGVyIG9iamVjdAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSZWdleFRyYWl0c1Q+CisgICAgICAgIGlubGluZSBkZXRhaWw6OmZpbmRfcmVnZXhGPCBiYXNpY19yZWdleDxDaGFyVCwgUmVnZXhUcmFpdHNUPiA+CisgICAgICAgIHJlZ2V4X2ZpbmRlcigKKyAgICAgICAgICAgIGNvbnN0IGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+JiBSeCwKKyAgICAgICAgICAgIG1hdGNoX2ZsYWdfdHlwZSBNYXRjaEZsYWdzPW1hdGNoX2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gZGV0YWlsOjoKKyAgICAgICAgICAgICAgICBmaW5kX3JlZ2V4RjwgCisgICAgICAgICAgICAgICAgICAgIGJhc2ljX3JlZ2V4PENoYXJULCBSZWdleFRyYWl0c1Q+ID4oIFJ4LCBNYXRjaEZsYWdzICk7CisgICAgICAgIH0KKworLy8gIHJlZ2V4X2Zvcm1hdGVyICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZWdleCBmb3JtYXR0ZXIKKyAgICAgICAgLyohCisgICAgICAgICAgICBDb25zdHJ1Y3QgdGhlIFxjIHJlZ2V4X2Zvcm1hdHRlci4gUmVnZXggZm9ybWF0dGVyIHVzZXMgdGhlIHJlZ2V4IGVuZ2luZSB0bworICAgICAgICAgICAgZm9ybWF0IGEgbWF0Y2ggZm91bmQgYnkgdGhlIFxjIHJlZ2V4X2ZpbmRlci4gCisgICAgICAgICAgICBUaGlzIGZvcm1hdHRlZCBpdCBkZXNpZ25lZCB0byBjbG9zZWx5IGNvb3BlcmF0ZSB3aXRoIFxjIHJlZ2V4X2ZpbmRlci4KKworICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBSZWdleCBmb3JtYXQgZGVmaW5pdGlvbgorICAgICAgICAgICAgXHBhcmFtIEZsYWdzIEZvcm1hdCBmbGFncworICAgICAgICAgICAgXHJldHVybiBBbiBpbnN0YW5jZSBvZiB0aGUgXGMgcmVnZXhfZm9ybWF0dGVyIGZ1bmN0b3IKKyAgICAgICAgKi8KKyAgICAgICB0ZW1wbGF0ZTwgCisgICAgICAgICAgICB0eXBlbmFtZSBDaGFyVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBUcmFpdHNULCB0eXBlbmFtZSBBbGxvY1QgPgorICAgICAgICBpbmxpbmUgZGV0YWlsOjpyZWdleF9mb3JtYXRGPCBzdGQ6OmJhc2ljX3N0cmluZzwgQ2hhclQsIFRyYWl0c1QsIEFsbG9jVCA+ID4KKyAgICAgICAgcmVnZXhfZm9ybWF0dGVyKCAKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6YmFzaWNfc3RyaW5nPENoYXJULCBUcmFpdHNULCBBbGxvY1Q+JiBGb3JtYXQsCisgICAgICAgICAgICBtYXRjaF9mbGFnX3R5cGUgRmxhZ3M9Zm9ybWF0X2RlZmF1bHQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gCisgICAgICAgICAgICAgICAgZGV0YWlsOjpyZWdleF9mb3JtYXRGPCBzdGQ6OmJhc2ljX3N0cmluZzxDaGFyVCwgVHJhaXRzVCwgQWxsb2NUPiA+KAorICAgICAgICAgICAgICAgICAgICBGb3JtYXQsCisgICAgICAgICAgICAgICAgICAgIEZsYWdzICk7CisgICAgICAgIH0KKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorCisgICAgLy8gcHVsbCB0aGUgbmFtZXMgdG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6cmVnZXhfZmluZGVyOworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVnZXhfZm9ybWF0dGVyOworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX1JFR0VYX0ZJTkRfRk9STUFUX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvcmVwbGFjZS5ocHAKQEAgLTAsMCArMSw5MjYgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHJlcGxhY2UuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwNi4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfUkVQTEFDRV9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1JFUExBQ0VfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvcl9yYW5nZV9jb3JlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvY29uc3RfaXRlcmF0b3IuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kX2Zvcm1hdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZm9ybWF0dGVyLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbXBhcmUuaHBwPgorCisvKiEgXGZpbGUKKyAgICBEZWZpbmVzIHZhcmlvdXMgcmVwbGFjZSBhbGdvcml0aG1zLiBFYWNoIGFsZ29yaXRobSByZXBsYWNlcworICAgIHBhcnQocykgb2YgdGhlIGlucHV0IGFjY29yZGluZyB0byBzZXQgb2Ygc2VhcmNoaW5nIGFuZCByZXBsYWNlIGNyaXRlcmlhLgorKi8KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gIHJlcGxhY2VfcmFuZ2UgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZXBsYWNlIHJhbmdlIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGdpdmVuIHJhbmdlIGluIHRoZSBpbnB1dCBzdHJpbmcuCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKyAgICAgICAgICAgIAorICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaFJhbmdlIEEgcmFuZ2UgaW4gdGhlIGlucHV0IHRvIGJlIHN1YnN0aXR1dGVkCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgcmVwbGFjZV9yYW5nZV9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgaXRlcmF0b3JfcmFuZ2U8CisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZTFUPjo6dHlwZT4mIFNlYXJjaFJhbmdlLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0KQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJhbmdlX2ZpbmRlcihTZWFyY2hSYW5nZSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSByYW5nZSBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgcmVwbGFjZV9yYW5nZV9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBpdGVyYXRvcl9yYW5nZTwKKyAgICAgICAgICAgICAgICBCT09TVF9TVFJJTkdfVFlQRU5BTUUgCisgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlVD46OnR5cGU+JiBTZWFyY2hSYW5nZSwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlVCYgRm9ybWF0KQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6cmFuZ2VfZmluZGVyKFNlYXJjaFJhbmdlKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIHJhbmdlIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGdpdmVuIHJhbmdlIGluIHRoZSBpbnB1dCBzdHJpbmcuIAorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoUmFuZ2UgQSByYW5nZSBpbiB0aGUgaW5wdXQgdG8gYmUgc3Vic3RpdHV0ZWQKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgcmVwbGFjZV9yYW5nZSggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgaXRlcmF0b3JfcmFuZ2U8CisgICAgICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgICAgICByYW5nZV9pdGVyYXRvcjxTZXF1ZW5jZVQ+Ojp0eXBlPiYgU2VhcmNoUmFuZ2UsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIEZvcm1hdCkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCgKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnJhbmdlX2ZpbmRlcihTZWFyY2hSYW5nZSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSk7CisgICAgICAgIH0KKworLy8gIHJlcGxhY2VfZmlyc3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZXBsYWNlIGZpcnN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGZpcnN0IG1hdGNoIG9mIHRoZSBzZWFyY2ggc3Vic3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuIAorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisgICAgICAgICAgICAKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBBIHN1YnN0aXR1dGUgc3RyaW5nCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UyVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlM1Q+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgcmVwbGFjZV9maXJzdF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UzVCYgRm9ybWF0KQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KAorICAgICAgICAgICAgICAgIE91dHB1dCwKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGZpcnN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgcmVwbGFjZV9maXJzdF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGZpcnN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIHJlcGxhY2UgdGhlIGZpcnN0IG1hdGNoIG9mIHRoZSBzZWFyY2ggc3Vic3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IgCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgdm9pZCByZXBsYWNlX2ZpcnN0KCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworLy8gIHJlcGxhY2VfZmlyc3QgKCBjYXNlIGluc2Vuc2l0aXZlICkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSBmaXJzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZXBsYWNlIHRoZSBmaXJzdCBtYXRjaCBvZiB0aGUgc2VhcmNoIHN1YnN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBBIHN1YnN0aXR1dGUgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UxVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTJULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UzVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCBpcmVwbGFjZV9maXJzdF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UzVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgZmlyc3QgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UyVCwgdHlwZW5hbWUgUmFuZ2UxVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCBpcmVwbGFjZV9maXJzdF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBGb3JtYXQsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBmaXJzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZXBsYWNlIHRoZSBmaXJzdCBtYXRjaCBvZiB0aGUgc2VhcmNoIHN1YnN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiBJbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKyAgICAgICAgICAgIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgdm9pZCBpcmVwbGFjZV9maXJzdCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisvLyAgcmVwbGFjZV9sYXN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSBsYXN0IGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGxhc3QgbWF0Y2ggb2YgdGhlIHNlYXJjaCBzdHJpbmcgaW4gdGhlIGlucHV0IAorICAgICAgICAgICAgd2l0aCB0aGUgZm9ybWF0IHN0cmluZy4gCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dCAgICAgICAgICAgIAorCisgICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTNUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIHJlcGxhY2VfbGFzdF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UzVCYgRm9ybWF0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpsYXN0X2ZpbmRlcihTZWFyY2gpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGxhc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCByZXBsYWNlX2xhc3RfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpsYXN0X2ZpbmRlcihTZWFyY2gpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGxhc3QgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVwbGFjZSB0aGUgbGFzdCBtYXRjaCBvZiB0aGUgc2VhcmNoIHN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiBJbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IgCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgdm9pZCByZXBsYWNlX2xhc3QoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIFNlYXJjaCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06Omxhc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKy8vICByZXBsYWNlX2xhc3QgKCBjYXNlIGluc2Vuc2l0aXZlICkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZXBsYWNlIGxhc3QgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVwbGFjZSB0aGUgbGFzdCBtYXRjaCBvZiB0aGUgc2VhcmNoIHN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBBIHN1YnN0aXR1dGUgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dCAgCisKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTNUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGlyZXBsYWNlX2xhc3RfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIFNlYXJjaCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlM1QmIEZvcm1hdCwKKyAgICAgICAgICAgIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgbGFzdCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGlyZXBsYWNlX2xhc3RfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpsYXN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBsYXN0IGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGxhc3QgbWF0Y2ggb2YgdGhlIHNlYXJjaCBzdHJpbmcgaW4gdGhlIGlucHV0IAorICAgICAgICAgICAgd2l0aCB0aGUgZm9ybWF0IHN0cmluZy5UaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisgICAgICAgICAgICBTZWFyY2hpbmcgaXMgY2FzZSBpbnNlbnNpdGl2ZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IgCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIHZvaWQgaXJlcGxhY2VfbGFzdCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bGFzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKy8vICByZXBsYWNlX250aCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIFJlcGxhY2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgYW4gTnRoICh6ZXJvLWluZGV4ZWQpIG1hdGNoIG9mIHRoZSBzZWFyY2ggc3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuIAorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgcmVwbGFjZWQuIFRoZSBpbmRleCBpcyAwLWJhc2VkLgorICAgICAgICAgICAgICAgIEZvciBuZWdhdGl2ZSBOLCBtYXRjaGVzIGFyZSBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiBzdHJpbmcuCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPAorICAgICAgICAgICAgdHlwZW5hbWUgT3V0cHV0SXRlcmF0b3JULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UxVCwgCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTJULAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UzVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCByZXBsYWNlX250aF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgaW50IE50aCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlM1QmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bnRoX2ZpbmRlcihTZWFyY2gsIE50aCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgcmVwbGFjZV9udGhfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgaW50IE50aCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bnRoX2ZpbmRlcihTZWFyY2gsIE50aCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgbnRoIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgYW4gTnRoICh6ZXJvLWluZGV4ZWQpIG1hdGNoIG9mIHRoZSBzZWFyY2ggc3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuIElucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgICAgIFxwYXJhbSBOdGggQW4gaW5kZXggb2YgdGhlIG1hdGNoIHRvIGJlIHJlcGxhY2VkLiBUaGUgaW5kZXggaXMgMC1iYXNlZC4KKyAgICAgICAgICAgICAgICBGb3IgbmVnYXRpdmUgTiwgbWF0Y2hlcyBhcmUgY291bnRlZCBmcm9tIHRoZSBlbmQgb2Ygc3RyaW5nLgorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBBIHN1YnN0aXR1dGUgc3RyaW5nCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIHZvaWQgcmVwbGFjZV9udGgoIAorICAgICAgICAgICAgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIFNlYXJjaCwKKyAgICAgICAgICAgIGludCBOdGgsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworLy8gIHJlcGxhY2VfbnRoICggY2FzZSBpbnNlbnNpdGl2ZSApIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKyAgICAgICAgCisgICAgICAgIC8vISBSZXBsYWNlIG50aCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZXBsYWNlIGFuIE50aCAoemVyby1pbmRleGVkKSBtYXRjaCBvZiB0aGUgc2VhcmNoIHN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBPdXRwdXQgQW4gb3V0cHV0IGl0ZXJhdG9yIHRvIHdoaWNoIHRoZSByZXN1bHQgd2lsbCBiZSBjb3BpZWQKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgcmVwbGFjZWQuIFRoZSBpbmRleCBpcyAwLWJhc2VkLgorICAgICAgICAgICAgICAgIEZvciBuZWdhdGl2ZSBOLCBtYXRjaGVzIGFyZSBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiBzdHJpbmcuCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICAgICBccmV0dXJuIEFuIG91dHB1dCBpdGVyYXRvciBwb2ludGluZyBqdXN0IGFmdGVyIHRoZSBsYXN0IGluc2VydGVkIGNoYXJhY3RlciBvcgorICAgICAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0ICAgICAgICAgICAgCisKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UyVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlM1Q+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgaXJlcGxhY2VfbnRoX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UzVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoLCBpc19pZXF1YWwoTG9jKSApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIG50aCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGlyZXBsYWNlX250aF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpudGhfZmluZGVyKFNlYXJjaCwgTnRoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgbnRoIGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgYW4gTnRoICh6ZXJvLWluZGV4ZWQpIG1hdGNoIG9mIHRoZSBzZWFyY2ggc3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuIElucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorICAgICAgICAgICAgU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIE50aCBBbiBpbmRleCBvZiB0aGUgbWF0Y2ggdG8gYmUgcmVwbGFjZWQuIFRoZSBpbmRleCBpcyAwLWJhc2VkLgorICAgICAgICAgICAgICAgIEZvciBuZWdhdGl2ZSBOLCBtYXRjaGVzIGFyZSBjb3VudGVkIGZyb20gdGhlIGVuZCBvZiBzdHJpbmcuCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgY2FzZSBpbnNlbnNpdGl2ZSBjb21wYXJpc29uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIHZvaWQgaXJlcGxhY2VfbnRoKCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBpbnQgTnRoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6bnRoX2ZpbmRlcihTZWFyY2gsIE50aCwgaXNfaWVxdWFsKExvYykpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisvLyAgcmVwbGFjZV9hbGwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBSZXBsYWNlIGFsbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZXBsYWNlIGFsbCBvY2N1cnJlbmNlcyBvZiB0aGUgc2VhcmNoIHN0cmluZyBpbiB0aGUgaW5wdXQgCisgICAgICAgICAgICB3aXRoIHRoZSBmb3JtYXQgc3RyaW5nLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dCAKKworICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTNUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIHJlcGxhY2VfYWxsX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTNUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBhbGwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUmFuZ2UxVCwgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCByZXBsYWNlX2FsbF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBhbGwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVwbGFjZSBhbGwgb2NjdXJyZW5jZXMgb2YgdGhlIHNlYXJjaCBzdHJpbmcgaW4gdGhlIGlucHV0IAorICAgICAgICAgICAgd2l0aCB0aGUgZm9ybWF0IHN0cmluZy4gVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSB2b2lkIHJlcGxhY2VfYWxsKCAKKyAgICAgICAgICAgIFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2FsbCggCisgICAgICAgICAgICAgICAgSW5wdXQsIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisgICAgICAgIAorLy8gIHJlcGxhY2VfYWxsICggY2FzZSBpbnNlbnNpdGl2ZSApIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSBhbGwgYWxnb3JpdGhtICggY2FzZSBpbnNlbnNpdGl2ZSApCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVwbGFjZSBhbGwgb2NjdXJyZW5jZXMgb2YgdGhlIHNlYXJjaCBzdHJpbmcgaW4gdGhlIGlucHV0IAorICAgICAgICAgICAgd2l0aCB0aGUgZm9ybWF0IHN0cmluZy4gCisgICAgICAgICAgICBUaGUgcmVzdWx0IGlzIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvci4KKyAgICAgICAgICAgIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gU2VhcmNoIEEgc3Vic3RyaW5nIHRvIGJlIHNlYXJjaGVkIGZvciAKKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciBjYXNlIGluc2Vuc2l0aXZlIGNvbXBhcmlzb24KKyAgICAgICAgICAgIFxyZXR1cm4gQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgICAgIGEgbW9kaWZpZWQgY29weSBvZiB0aGUgaW5wdXQgCisKKyAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTNUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIGlyZXBsYWNlX2FsbF9jb3B5KAorICAgICAgICAgICAgT3V0cHV0SXRlcmF0b3JUIE91dHB1dCwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UzVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIGFsbCBhbGdvcml0aG0gKCBjYXNlIGluc2Vuc2l0aXZlICkKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIGlyZXBsYWNlX2FsbF9jb3B5KCAKKyAgICAgICAgICAgIGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBGb3JtYXQsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGxfY29weSggCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaXJzdF9maW5kZXIoU2VhcmNoLCBpc19pZXF1YWwoTG9jKSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgYWxsIGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgYWxsIG9jY3VycmVuY2VzIG9mIHRoZSBzZWFyY2ggc3RyaW5nIGluIHRoZSBpbnB1dCAKKyAgICAgICAgICAgIHdpdGggdGhlIGZvcm1hdCBzdHJpbmcuVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorICAgICAgICAgICAgU2VhcmNoaW5nIGlzIGNhc2UgaW5zZW5zaXRpdmUuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzdHJpbmcKKyAgICAgICAgICAgIFxwYXJhbSBTZWFyY2ggQSBzdWJzdHJpbmcgdG8gYmUgc2VhcmNoZWQgZm9yIAorICAgICAgICAgICAgXHBhcmFtIEZvcm1hdCBBIHN1YnN0aXR1dGUgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSB2b2lkIGlyZXBsYWNlX2FsbCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgU2VhcmNoLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0LAorICAgICAgICAgICAgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9hbGwoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmZpcnN0X2ZpbmRlcihTZWFyY2gsIGlzX2llcXVhbChMb2MpKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKyAgICAgICAgCisvLyAgcmVwbGFjZV9oZWFkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSBoZWFkIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIGhlYWQgb2YgdGhlIGlucHV0IHdpdGggdGhlIGdpdmVuIGZvcm1hdCBzdHJpbmcuIAorICAgICAgICAgICAgVGhlIGhlYWQgaXMgYSBwcmVmaXggb2YgYSBzdHJpbmcgb2YgZ2l2ZW4gc2l6ZS4gCisgICAgICAgICAgICBJZiB0aGUgc2VxdWVuY2UgaXMgc2hvcnRlciB0aGVuIHJlcXVpcmVkLCB3aG9sZSBzdHJpbmcgaWYgCisgICAgICAgICAgICBjb25zaWRlcmVkIHRvIGJlIHRoZSBoZWFkLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorICAgICAgICAgICAgCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTiBMZW5ndGggb2YgdGhlIGhlYWQuCisgICAgICAgICAgICAgICAgRm9yIE4+PTAsIGF0IG1vc3QgTiBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICAgICAgRm9yIE48MCwgc2l6ZShJbnB1dCktfE58IGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIG1vZGlmaWVkIGNvcHkgb2YgdGhlIGlucHV0ICAKKworICAgICAgICAgICAgXG5vdGUgVGhlIHNlY29uZCB2YXJpYW50IG9mIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwKKyAgICAgICAgICAgIHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMVQsIAorICAgICAgICAgICAgdHlwZW5hbWUgUmFuZ2UyVD4KKyAgICAgICAgaW5saW5lIE91dHB1dEl0ZXJhdG9yVCByZXBsYWNlX2hlYWRfY29weSgKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTFUJiBJbnB1dCwKKyAgICAgICAgICAgIGludCBOLAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgRm9ybWF0ICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXRfY29weSgKKyAgICAgICAgICAgICAgICBPdXRwdXQsCisgICAgICAgICAgICAgICAgSW5wdXQsCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpoZWFkX2ZpbmRlcihOKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmNvbnN0X2Zvcm1hdHRlcihGb3JtYXQpICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmVwbGFjZSBoZWFkIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFxvdmVybG9hZAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCByZXBsYWNlX2hlYWRfY29weSggCisgICAgICAgICAgICBjb25zdCBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgaW50IE4sCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoIAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6aGVhZF9maW5kZXIoTiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgaGVhZCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZXBsYWNlIHRoZSBoZWFkIG9mIHRoZSBpbnB1dCB3aXRoIHRoZSBnaXZlbiBmb3JtYXQgc3RyaW5nLiAKKyAgICAgICAgICAgIFRoZSBoZWFkIGlzIGEgcHJlZml4IG9mIGEgc3RyaW5nIG9mIGdpdmVuIHNpemUuIAorICAgICAgICAgICAgSWYgdGhlIHNlcXVlbmNlIGlzIHNob3J0ZXIgdGhlbiByZXF1aXJlZCwgdGhlIHdob2xlIHN0cmluZyBpcyAKKyAgICAgICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgdGhlIGhlYWQuIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIE4gTGVuZ3RoIG9mIHRoZSBoZWFkLgorICAgICAgICAgICAgICAgIEZvciBOPj0wLCBhdCBtb3N0IE4gY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAgICAgICAgIEZvciBOPDAsIHNpemUoSW5wdXQpLXxOfCBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHJlcGxhY2VfaGVhZCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgaW50IE4sCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmhlYWRfZmluZGVyKE4pLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisvLyAgcmVwbGFjZV90YWlsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmVwbGFjZSB0YWlsIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlcGxhY2UgdGhlIHRhaWwgb2YgdGhlIGlucHV0IHdpdGggdGhlIGdpdmVuIGZvcm1hdCBzdHJpbmcuIAorICAgICAgICAgICAgVGhlIHRhaWwgaXMgYSBzdWZmaXggb2YgYSBzdHJpbmcgb2YgZ2l2ZW4gc2l6ZS4gCisgICAgICAgICAgICBJZiB0aGUgc2VxdWVuY2UgaXMgc2hvcnRlciB0aGVuIHJlcXVpcmVkLCB3aG9sZSBzdHJpbmcgaXMgCisgICAgICAgICAgICBjb25zaWRlcmVkIHRvIGJlIHRoZSB0YWlsLiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dC4gSXQgaXMgcmV0dXJuZWQgYXMgYSBzZXF1ZW5jZSAKKyAgICAgICAgICAgIG9yIGNvcGllZCB0byB0aGUgb3V0cHV0IGl0ZXJhdG9yLgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc3RyaW5nCisgICAgICAgICAgICBccGFyYW0gTiBMZW5ndGggb2YgdGhlIHRhaWwuCisgICAgICAgICAgICAgICAgRm9yIE4+PTAsIGF0IG1vc3QgTiBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICAgICAgRm9yIE48MCwgc2l6ZShJbnB1dCktfE58IGNoYXJhY3RlcnMgYXJlIGV4dHJhY3RlZC4KKyAgICAgICAgICAgIFxwYXJhbSBGb3JtYXQgQSBzdWJzdGl0dXRlIHN0cmluZworICAgICAgICAgICAgXHJldHVybiBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICAgICAgYSBtb2RpZmllZCBjb3B5IG9mIHRoZSBpbnB1dCAgIAorCisgICAgICAgICAgICAgIFxub3RlIFRoZSBzZWNvbmQgdmFyaWFudCBvZiB0aGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8CisgICAgICAgICAgICB0eXBlbmFtZSBPdXRwdXRJdGVyYXRvclQsCisgICAgICAgICAgICB0eXBlbmFtZSBSYW5nZTFULCAKKyAgICAgICAgICAgIHR5cGVuYW1lIFJhbmdlMlQ+CisgICAgICAgIGlubGluZSBPdXRwdXRJdGVyYXRvclQgcmVwbGFjZV90YWlsX2NvcHkoCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBpbnQgTiwKKyAgICAgICAgICAgIGNvbnN0IFJhbmdlMlQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06OmZpbmRfZm9ybWF0X2NvcHkoCisgICAgICAgICAgICAgICAgT3V0cHV0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dGFpbF9maW5kZXIoTiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpjb25zdF9mb3JtYXR0ZXIoRm9ybWF0KSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJlcGxhY2UgdGFpbCBhbGdvcml0aG0KKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgcmVwbGFjZV90YWlsX2NvcHkoIAorICAgICAgICAgICAgY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwKKyAgICAgICAgICAgIGludCBOLAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBGb3JtYXQgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjpmaW5kX2Zvcm1hdF9jb3B5KCAKKyAgICAgICAgICAgICAgICBJbnB1dCwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnRhaWxfZmluZGVyKE4pLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgICAgIC8vISBSZXBsYWNlIHRhaWwgYWxnb3JpdGhtCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVwbGFjZSB0aGUgdGFpbCBvZiB0aGUgaW5wdXQgd2l0aCB0aGUgZ2l2ZW4gZm9ybWF0IHNlcXVlbmNlLiAKKyAgICAgICAgICAgIFRoZSB0YWlsIGlzIGEgc3VmZml4IG9mIGEgc3RyaW5nIG9mIGdpdmVuIHNpemUuIAorICAgICAgICAgICAgSWYgdGhlIHNlcXVlbmNlIGlzIHNob3J0ZXIgdGhlbiByZXF1aXJlZCwgdGhlIHdob2xlIHN0cmluZyBpcyAKKyAgICAgICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgdGhlIHRhaWwuIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHN0cmluZworICAgICAgICAgICAgXHBhcmFtIE4gTGVuZ3RoIG9mIHRoZSB0YWlsLgorICAgICAgICAgICAgICAgIEZvciBOPj0wLCBhdCBtb3N0IE4gY2hhcmFjdGVycyBhcmUgZXh0cmFjdGVkLgorICAgICAgICAgICAgICAgIEZvciBOPDAsIHNpemUoSW5wdXQpLXxOfCBjaGFyYWN0ZXJzIGFyZSBleHRyYWN0ZWQuCisgICAgICAgICAgICBccGFyYW0gRm9ybWF0IEEgc3Vic3RpdHV0ZSBzdHJpbmcKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHJlcGxhY2VfdGFpbCggCisgICAgICAgICAgICBTZXF1ZW5jZVQmIElucHV0LAorICAgICAgICAgICAgaW50IE4sCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIEZvcm1hdCApCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZmluZF9mb3JtYXQoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnRhaWxfZmluZGVyKE4pLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Y29uc3RfZm9ybWF0dGVyKEZvcm1hdCkgKTsKKyAgICAgICAgfQorCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCisKKyAgICAvLyBwdWxsIG5hbWVzIHRvIHRoZSBib29zdCBuYW1lc3BhY2UKKyAgICB1c2luZyBhbGdvcml0aG06OnJlcGxhY2VfcmFuZ2VfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OnJlcGxhY2VfcmFuZ2U7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX2ZpcnN0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX2ZpcnN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6aXJlcGxhY2VfZmlyc3RfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmlyZXBsYWNlX2ZpcnN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9sYXN0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX2xhc3Q7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppcmVwbGFjZV9sYXN0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppcmVwbGFjZV9sYXN0OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9udGhfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OnJlcGxhY2VfbnRoOworICAgIHVzaW5nIGFsZ29yaXRobTo6aXJlcGxhY2VfbnRoX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppcmVwbGFjZV9udGg7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX2FsbF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9hbGw7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppcmVwbGFjZV9hbGxfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OmlyZXBsYWNlX2FsbDsKKyAgICB1c2luZyBhbGdvcml0aG06OnJlcGxhY2VfaGVhZF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV9oZWFkOworICAgIHVzaW5nIGFsZ29yaXRobTo6cmVwbGFjZV90YWlsX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpyZXBsYWNlX3RhaWw7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfUkVQTEFDRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL3NlcXVlbmNlX3RyYWl0cy5ocHAKQEAgLTAsMCArMSwxMjAgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHNlcXVlbmNlX3RyYWl0cy5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19TRVFVRU5DRV9UUkFJVFNfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19TRVFVRU5DRV9UUkFJVFNfSFBQCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL3llc19ub190eXBlLmhwcD4KKworLyohIFxmaWxlCisgICAgVHJhaXRzIGRlZmluZWQgaW4gdGhpcyBoZWFkZXIgYXJlIHVzZWQgYnkgdmFyaW91cyBhbGdvcml0aG1zIHRvIGFjaGlldmUKKyAgICBiZXR0ZXIgcGVyZm9ybWFuY2UgZm9yIHNwZWNpZmljIGNvbnRhaW5lcnMuCisgICAgVHJhaXRzIHByb3ZpZGUgZmFpbC1zYWZlIGRlZmF1bHRzLiBJZiBhIGNvbnRhaW5lciBzdXBwb3J0cyBzb21lIG9mIHRoZXNlCisgICAgZmVhdHVyZXMsIGl0IGlzIHBvc3NpYmxlIHRvIHNwZWNpYWxpemUgdGhlIHNwZWNpZmljIHRyYWl0IGZvciB0aGlzIGNvbnRhaW5lci4KKyAgICBGb3IgbGFja2luZyBjb21waWxlcnMsIGl0IGlzIHBvc3NpYmxlIG9mIGRlZmluZSBhbiBvdmVycmlkZSBmb3IgYSBzcGVjaWZpYyB0ZXN0ZXIKKyAgICBmdW5jdGlvbi4KKworICAgIER1ZSB0byBhIGxhbmd1YWdlIHJlc3RyaWN0aW9uLCBpdCBpcyBub3QgY3VycmVudGx5IHBvc3NpYmxlIHRvIGRlZmluZSBzcGVjaWFsaXphdGlvbnMgZm9yCisgICAgc3RsIGNvbnRhaW5lcnMgd2l0aG91dCBpbmNsdWRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgaGVhZGVyLiBUbyBkZWNyZWFzZSB0aGUgb3ZlcmhlYWQKKyAgICBuZWVkZWQgYnkgdGhpcyBpbmNsdXNpb24sIHVzZXIgY2FuIHNlbGVjdGl2ZWx5IGluY2x1ZGUgYSBzcGVjaWFsaXphdGlvbgorICAgIGhlYWRlciBmb3IgYSBzcGVjaWZpYyBjb250YWluZXIuIFRoZXkgYXJlIGxvY2F0ZWQgaW4gYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9zdGwKKyAgICBkaXJlY3RvcnkuIEFsdGVybmF0aXZlbHkgc2hlIGNhbiBpbmNsdWRlIGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkX2NvbGxlY3Rpb25fdHJhaXRzLmhwcAorICAgIGhlYWRlciB3aGljaCBjb250YWlucyBzcGVjaWFsaXphdGlvbnMgZm9yIGFsbCBzdGwgY29udGFpbmVycy4KKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBzZXF1ZW5jZSB0cmFpdHMgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworCisgICAgICAgIC8vISBOYXRpdmUgcmVwbGFjZSB0cmFpdAorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgdHJhaXQgc3BlY2lmaWVzIHRoYXQgdGhlIHNlcXVlbmNlIGhhcyBcYyBzdGQ6OnN0cmluZyBsaWtlIHJlcGxhY2UgbWV0aG9kCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUID4KKyAgICAgICAgY2xhc3MgaGFzX25hdGl2ZV9yZXBsYWNlCisgICAgICAgIHsKKworICAgICAgICBwdWJsaWM6CisjICAgIGlmIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisgICAgICAgICAgICBlbnVtIHsgdmFsdWUgPSBmYWxzZSB9OworIyAgICBlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9ZmFsc2UpOworIyAgICBlbmRpZiAvLyBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorCisKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzxoYXNfbmF0aXZlX3JlcGxhY2U8VD46OnZhbHVlPiB0eXBlOworICAgICAgICB9OworCisKKyAgICAgICAgLy8hIFN0YWJsZSBpdGVyYXRvcnMgdHJhaXQKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIHRyYWl0IHNwZWNpZmllcyB0aGF0IHRoZSBzZXF1ZW5jZSBoYXMgc3RhYmxlIGl0ZXJhdG9ycy4gSXQgbWVhbnMKKyAgICAgICAgICAgIHRoYXQgb3BlcmF0aW9ucyBsaWtlIGluc2VydC9lcmFzZS9yZXBsYWNlIGRvIG5vdCBpbnZhbGlkYXRlIGl0ZXJhdG9ycy4KKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFQgPgorICAgICAgICBjbGFzcyBoYXNfc3RhYmxlX2l0ZXJhdG9ycworICAgICAgICB7CisgICAgICAgIHB1YmxpYzoKKyMgICAgaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IGZhbHNlIH07CisjICAgIGVsc2UKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19DT05TVEFOVChib29sLCB2YWx1ZT1mYWxzZSk7CisjICAgIGVuZGlmIC8vIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzxoYXNfc3RhYmxlX2l0ZXJhdG9yczxUPjo6dmFsdWU+IHR5cGU7CisgICAgICAgIH07CisKKworICAgICAgICAvLyEgQ29uc3QgdGltZSBpbnNlcnQgdHJhaXQKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIHRyYWl0IHNwZWNpZmllcyB0aGF0IHRoZSBzZXF1ZW5jZSdzIGluc2VydCBtZXRob2QgaGFzCisgICAgICAgICAgICBjb25zdGFudCB0aW1lIGNvbXBsZXhpdHkuCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPCB0eXBlbmFtZSBUID4KKyAgICAgICAgY2xhc3MgaGFzX2NvbnN0X3RpbWVfaW5zZXJ0CisgICAgICAgIHsKKyAgICAgICAgcHVibGljOgorIyAgICBpZiBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgZW51bSB7IHZhbHVlID0gZmFsc2UgfTsKKyMgICAgZWxzZQorICAgICAgICAgICAgQk9PU1RfU1RBVElDX0NPTlNUQU5UKGJvb2wsIHZhbHVlPWZhbHNlKTsKKyMgICAgZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKworICAgICAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPGhhc19jb25zdF90aW1lX2luc2VydDxUPjo6dmFsdWU+IHR5cGU7CisgICAgICAgIH07CisKKworICAgICAgICAvLyEgQ29uc3QgdGltZSBlcmFzZSB0cmFpdAorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgdHJhaXQgc3BlY2lmaWVzIHRoYXQgdGhlIHNlcXVlbmNlJ3MgZXJhc2UgbWV0aG9kIGhhcworICAgICAgICAgICAgY29uc3RhbnQgdGltZSBjb21wbGV4aXR5LgorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgVCA+CisgICAgICAgIGNsYXNzIGhhc19jb25zdF90aW1lX2VyYXNlCisgICAgICAgIHsKKyAgICAgICAgcHVibGljOgorIyAgICBpZiBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgZW51bSB7IHZhbHVlID0gZmFsc2UgfTsKKyMgICAgZWxzZQorICAgICAgICAgICAgQk9PU1RfU1RBVElDX0NPTlNUQU5UKGJvb2wsIHZhbHVlPWZhbHNlKTsKKyMgICAgZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKworICAgICAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPGhhc19jb25zdF90aW1lX2VyYXNlPFQ+Ojp2YWx1ZT4gdHlwZTsKKyAgICAgICAgfTsKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19TRVFVRU5DRV9UUkFJVFNfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9zcGxpdC5ocHAKQEAgLTAsMCArMSwxNjMgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHNwbGl0LmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDYuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX1NQTElUX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfU1BMSVRfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2l0ZXJfZmluZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29tcGFyZS5ocHA+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgYmFzaWMgc3BsaXQgYWxnb3JpdGhtcy4gCisgICAgU3BsaXQgYWxnb3JpdGhtcyBjYW4gYmUgdXNlZCB0byBkaXZpZGUgYSBzdHJpbmcKKyAgICBpbnRvIHNldmVyYWwgcGFydHMgYWNjb3JkaW5nIHRvIGdpdmVuIGNyaXRlcmlhLgorICAgIAorICAgIEVhY2ggcGFydCBpcyBjb3BpZWQgYW5kIGFkZGVkIGFzIGEgbmV3IGVsZW1lbnQgdG8gdGhlCisgICAgb3V0cHV0IGNvbnRhaW5lci4KKyAgICBUaHVzIHRoZSByZXN1bHQgY29udGFpbmVyIG11c3QgYmUgYWJsZSB0byBob2xkIGNvcGllcworICAgIG9mIHRoZSBtYXRjaGVzIChpbiBhIGNvbXBhdGlibGUgc3RydWN0dXJlIGxpa2Ugc3RkOjpzdHJpbmcpIG9yCisgICAgYSByZWZlcmVuY2UgdG8gaXQgKGUuZy4gdXNpbmcgdGhlIGl0ZXJhdG9yIHJhbmdlIGNsYXNzKS4KKyAgICBFeGFtcGxlcyBvZiBzdWNoIGEgY29udGFpbmVyIGFyZSBcYyBzdGQ6OnZlY3RvcjxzdGQ6OnN0cmluZz4KKyAgICBvciBcYyBzdGQ6Omxpc3Q8Ym9vc3Q6Oml0ZXJhdG9yX3JhbmdlPHN0ZDo6c3RyaW5nOjppdGVyYXRvcj4+CisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgZmluZF9hbGwgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAgICAgLy8hIEZpbmQgYWxsIGFsZ29yaXRobQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFRoaXMgYWxnb3JpdGhtIGZpbmRzIGFsbCBvY2N1cnJlbmNlcyBvZiB0aGUgc2VhcmNoIHN0cmluZworICAgICAgICAgICAgaW4gdGhlIGlucHV0LgorICAgICAgICAgICAgCisgICAgICAgICAgICBFYWNoIHBhcnQgaXMgY29waWVkIGFuZCBhZGRlZCBhcyBhIG5ldyBlbGVtZW50IHRvIHRoZQorICAgICAgICAgICAgb3V0cHV0IGNvbnRhaW5lci4KKyAgICAgICAgICAgIFRodXMgdGhlIHJlc3VsdCBjb250YWluZXIgbXVzdCBiZSBhYmxlIHRvIGhvbGQgY29waWVzCisgICAgICAgICAgICBvZiB0aGUgbWF0Y2hlcyAoaW4gYSBjb21wYXRpYmxlIHN0cnVjdHVyZSBsaWtlIHN0ZDo6c3RyaW5nKSBvcgorICAgICAgICAgICAgYSByZWZlcmVuY2UgdG8gaXQgKGUuZy4gdXNpbmcgdGhlIGl0ZXJhdG9yIHJhbmdlIGNsYXNzKS4KKyAgICAgICAgICAgIEV4YW1wbGVzIG9mIHN1Y2ggYSBjb250YWluZXIgYXJlIFxjIHN0ZDo6dmVjdG9yPHN0ZDo6c3RyaW5nPgorICAgICAgICAgICAgb3IgXGMgc3RkOjpsaXN0PGJvb3N0OjppdGVyYXRvcl9yYW5nZTxzdGQ6OnN0cmluZzo6aXRlcmF0b3I+PgorCisgICAgICAgICAgICBccGFyYW0gUmVzdWx0IEEgY29udGFpbmVyIHRoYXQgY2FuIGhvbGQgY29waWVzIG9mIHJlZmVyZW5jZXMgdG8gdGhlIHN1YnN0cmluZ3MKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuCisgICAgICAgICAgICBccmV0dXJuIEEgcmVmZXJlbmNlIHRoZSByZXN1bHQKKworICAgICAgICAgICAgXG5vdGUgUHJpb3IgY29udGVudCBvZiB0aGUgcmVzdWx0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uCisKKyAgICAgICAgICAgIFxub3RlIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHN0cm9uZyBleGNlcHRpb24tc2FmZXR5IGd1YXJhbnRlZQorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTwgdHlwZW5hbWUgU2VxdWVuY2VTZXF1ZW5jZVQsIHR5cGVuYW1lIFJhbmdlMVQsIHR5cGVuYW1lIFJhbmdlMlQgPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VTZXF1ZW5jZVQmIGZpbmRfYWxsKAorICAgICAgICAgICAgU2VxdWVuY2VTZXF1ZW5jZVQmIFJlc3VsdCwKKyAgICAgICAgICAgIFJhbmdlMVQmIElucHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2UyVCYgU2VhcmNoKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjppdGVyX2ZpbmQoCisgICAgICAgICAgICAgICAgUmVzdWx0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCkgKTsgICAgICAgIAorICAgICAgICB9CisKKyAgICAgICAgLy8hIEZpbmQgYWxsIGFsZ29yaXRobSAoIGNhc2UgaW5zZW5zaXRpdmUgKSAKKyAgICAgICAgLyohCisgICAgICAgICAgICBUaGlzIGFsZ29yaXRobSBmaW5kcyBhbGwgb2NjdXJyZW5jZXMgb2YgdGhlIHNlYXJjaCBzdHJpbmcKKyAgICAgICAgICAgIGluIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBFYWNoIHBhcnQgaXMgY29waWVkIGFuZCBhZGRlZCBhcyBhIG5ldyBlbGVtZW50IHRvIHRoZQorICAgICAgICAgICAgb3V0cHV0IGNvbnRhaW5lci4gVGh1cyB0aGUgcmVzdWx0IGNvbnRhaW5lciBtdXN0IGJlIGFibGUgdG8gaG9sZCBjb3BpZXMKKyAgICAgICAgICAgIG9mIHRoZSBtYXRjaGVzIChpbiBhIGNvbXBhdGlibGUgc3RydWN0dXJlIGxpa2Ugc3RkOjpzdHJpbmcpIG9yCisgICAgICAgICAgICBhIHJlZmVyZW5jZSB0byBpdCAoZS5nLiB1c2luZyB0aGUgaXRlcmF0b3IgcmFuZ2UgY2xhc3MpLgorICAgICAgICAgICAgRXhhbXBsZXMgb2Ygc3VjaCBhIGNvbnRhaW5lciBhcmUgXGMgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+CisgICAgICAgICAgICBvciBcYyBzdGQ6Omxpc3Q8Ym9vc3Q6Oml0ZXJhdG9yX3JhbmdlPHN0ZDo6c3RyaW5nOjppdGVyYXRvcj4+CisKKyAgICAgICAgICAgIFNlYXJjaGluZyBpcyBjYXNlIGluc2Vuc2l0aXZlLgorCisgICAgICAgICAgICBccGFyYW0gUmVzdWx0IEEgY29udGFpbmVyIHRoYXQgY2FuIGhvbGQgY29waWVzIG9mIHJlZmVyZW5jZXMgdG8gdGhlIHN1YnN0cmluZ3MKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBIGNvbnRhaW5lciB3aGljaCB3aWxsIGJlIHNlYXJjaGVkLgorICAgICAgICAgICAgXHBhcmFtIFNlYXJjaCBBIHN1YnN0cmluZyB0byBiZSBzZWFyY2hlZCBmb3IuCisgICAgICAgICAgICBccGFyYW0gTG9jIEEgbG9jYWxlIHVzZWQgZm9yIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbgorICAgICAgICAgICAgXHJldHVybiBBIHJlZmVyZW5jZSB0aGUgcmVzdWx0CisKKyAgICAgICAgICAgIFxub3RlIFByaW9yIGNvbnRlbnQgb2YgdGhlIHJlc3VsdCB3aWxsIGJlIG92ZXJ3cml0dGVuLgorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZTFULCB0eXBlbmFtZSBSYW5nZTJUID4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlU2VxdWVuY2VUJiBpZmluZF9hbGwoCisgICAgICAgICAgICBTZXF1ZW5jZVNlcXVlbmNlVCYgUmVzdWx0LAorICAgICAgICAgICAgUmFuZ2UxVCYgSW5wdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZTJUJiBTZWFyY2gsCisgICAgICAgICAgICBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkgKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gOjpib29zdDo6YWxnb3JpdGhtOjppdGVyX2ZpbmQoCisgICAgICAgICAgICAgICAgUmVzdWx0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6Zmlyc3RfZmluZGVyKFNlYXJjaCwgaXNfaWVxdWFsKExvYykgKSApOyAgICAgICAgCisgICAgICAgIH0KKworCisvLyAgdG9rZW5pemUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisgICAgICAgIC8vISBTcGxpdCBhbGdvcml0aG0KKyAgICAgICAgLyohIAorICAgICAgICAgICAgVG9rZW5pemUgZXhwcmVzc2lvbi4gVGhpcyBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIEMgc3RydG9rLiBJbnB1dAorICAgICAgICAgICAgc2VxdWVuY2UgaXMgc3BsaXQgaW50byB0b2tlbnMsIHNlcGFyYXRlZCBieSBzZXBhcmF0b3JzLiBTZXBhcmF0b3JzIAorICAgICAgICAgICAgYXJlIGdpdmVuIGJ5IG1lYW5zIG9mIHRoZSBwcmVkaWNhdGUuCisKKyAgICAgICAgICAgIEVhY2ggcGFydCBpcyBjb3BpZWQgYW5kIGFkZGVkIGFzIGEgbmV3IGVsZW1lbnQgdG8gdGhlCisgICAgICAgICAgICBvdXRwdXQgY29udGFpbmVyLgorICAgICAgICAgICAgVGh1cyB0aGUgcmVzdWx0IGNvbnRhaW5lciBtdXN0IGJlIGFibGUgdG8gaG9sZCBjb3BpZXMKKyAgICAgICAgICAgIG9mIHRoZSBtYXRjaGVzIChpbiBhIGNvbXBhdGlibGUgc3RydWN0dXJlIGxpa2Ugc3RkOjpzdHJpbmcpIG9yCisgICAgICAgICAgICBhIHJlZmVyZW5jZSB0byBpdCAoZS5nLiB1c2luZyB0aGUgaXRlcmF0b3IgcmFuZ2UgY2xhc3MpLgorICAgICAgICAgICAgRXhhbXBsZXMgb2Ygc3VjaCBhIGNvbnRhaW5lciBhcmUgXGMgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+CisgICAgICAgICAgICBvciBcYyBzdGQ6Omxpc3Q8Ym9vc3Q6Oml0ZXJhdG9yX3JhbmdlPHN0ZDo6c3RyaW5nOjppdGVyYXRvcj4+CisgICAgCisgICAgICAgICAgICBccGFyYW0gUmVzdWx0IEEgY29udGFpbmVyIHRoYXQgY2FuIGhvbGQgY29waWVzIG9mIHJlZmVyZW5jZXMgdG8gdGhlIHN1YnN0cmluZ3MgICAgICAgICAgCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQSBjb250YWluZXIgd2hpY2ggd2lsbCBiZSBzZWFyY2hlZC4KKyAgICAgICAgICAgIFxwYXJhbSBQcmVkIEEgcHJlZGljYXRlIHRvIGlkZW50aWZ5IHNlcGFyYXRvcnMuIFRoaXMgcHJlZGljYXRlIGlzIAorICAgICAgICAgICAgICAgIHN1cHBvc2VkIHRvIHJldHVybiB0cnVlIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIHNlcGFyYXRvci4KKyAgICAgICAgICAgIFxwYXJhbSBlQ29tcHJlc3MgSWYgZUNvbXByZXNzIGFyZ3VtZW50IGlzIHNldCB0byB0b2tlbl9jb21wcmVzc19vbiwgYWRqYWNlbnQgCisgICAgICAgICAgICAgICAgc2VwYXJhdG9ycyBhcmUgbWVyZ2VkIHRvZ2V0aGVyLiBPdGhlcndpc2UsIGV2ZXJ5IHR3byBzZXBhcmF0b3JzCisgICAgICAgICAgICAgICAgZGVsaW1pdCBhIHRva2VuLgorICAgICAgICAgICAgXHJldHVybiBBIHJlZmVyZW5jZSB0aGUgcmVzdWx0CisKKyAgICAgICAgICAgIFxub3RlIFByaW9yIGNvbnRlbnQgb2YgdGhlIHJlc3VsdCB3aWxsIGJlIG92ZXJ3cml0dGVuLgorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8IHR5cGVuYW1lIFNlcXVlbmNlU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQgPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VTZXF1ZW5jZVQmIHNwbGl0KAorICAgICAgICAgICAgU2VxdWVuY2VTZXF1ZW5jZVQmIFJlc3VsdCwKKyAgICAgICAgICAgIFJhbmdlVCYgSW5wdXQsCisgICAgICAgICAgICBQcmVkaWNhdGVUIFByZWQsCisgICAgICAgICAgICB0b2tlbl9jb21wcmVzc19tb2RlX3R5cGUgZUNvbXByZXNzPXRva2VuX2NvbXByZXNzX29mZiApCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiA6OmJvb3N0OjphbGdvcml0aG06Oml0ZXJfc3BsaXQoCisgICAgICAgICAgICAgICAgUmVzdWx0LAorICAgICAgICAgICAgICAgIElucHV0LAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dG9rZW5fZmluZGVyKCBQcmVkLCBlQ29tcHJlc3MgKSApOyAgICAgICAgIAorICAgICAgICB9CisKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KKworICAgIC8vIHB1bGwgbmFtZXMgdG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6ZmluZF9hbGw7CisgICAgdXNpbmcgYWxnb3JpdGhtOjppZmluZF9hbGw7CisgICAgdXNpbmcgYWxnb3JpdGhtOjpzcGxpdDsgICAgCisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfU1BMSVRfSFBQCisKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL3N0ZC9saXN0X3RyYWl0cy5ocHAKQEAgLTAsMCArMSw2OCBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgbGlzdF90cmFpdHMuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfU1REX0xJU1RfVFJBSVRTX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfU1REX0xJU1RfVFJBSVRTX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy95ZXNfbm9fdHlwZS5ocHA+CisjaW5jbHVkZSA8bGlzdD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL3NlcXVlbmNlX3RyYWl0cy5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKy8vICBzdGQ6Omxpc3Q8PiB0cmFpdHMgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworCisgICAgICAgIC8vIHN0YWJsZSBpdGVyYXRvcnMgdHJhaXQKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVCwgdHlwZW5hbWUgQWxsb2NUPgorICAgICAgICBjbGFzcyBoYXNfc3RhYmxlX2l0ZXJhdG9yczwgOjpzdGQ6Omxpc3Q8VCxBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfTsKKyNlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9dHJ1ZSk7CisjZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzxoYXNfc3RhYmxlX2l0ZXJhdG9yczxUPjo6dmFsdWU+IHR5cGU7CisgICAgICAgIH07CisKKyAgICAgICAgLy8gY29uc3QgdGltZSBpbnNlcnQgdHJhaXQKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVCwgdHlwZW5hbWUgQWxsb2NUPgorICAgICAgICBjbGFzcyBoYXNfY29uc3RfdGltZV9pbnNlcnQ8IDo6c3RkOjpsaXN0PFQsQWxsb2NUPiA+CisgICAgICAgIHsKKyAgICAgICAgcHVibGljOgorI2lmIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisgICAgICAgICAgICBlbnVtIHsgdmFsdWUgPSB0cnVlIH07CisjZWxzZQorICAgICAgICAgICAgQk9PU1RfU1RBVElDX0NPTlNUQU5UKGJvb2wsIHZhbHVlPXRydWUpOworI2VuZGlmIC8vIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisgICAgICAgICAgICB0eXBlZGVmIG1wbDo6Ym9vbF88aGFzX2NvbnN0X3RpbWVfaW5zZXJ0PFQ+Ojp2YWx1ZT4gdHlwZTsKKyAgICAgICAgfTsKKworICAgICAgICAvLyBjb25zdCB0aW1lIGVyYXNlIHRyYWl0CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIEFsbG9jVD4KKyAgICAgICAgY2xhc3MgaGFzX2NvbnN0X3RpbWVfZXJhc2U8IDo6c3RkOjpsaXN0PFQsQWxsb2NUPiA+CisgICAgICAgIHsKKyAgICAgICAgcHVibGljOgorI2lmIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisgICAgICAgICAgICBlbnVtIHsgdmFsdWUgPSB0cnVlIH07CisjZWxzZQorICAgICAgICAgICAgQk9PU1RfU1RBVElDX0NPTlNUQU5UKGJvb2wsIHZhbHVlPXRydWUpOworI2VuZGlmIC8vIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisgICAgICAgICAgICB0eXBlZGVmIG1wbDo6Ym9vbF88aGFzX2NvbnN0X3RpbWVfZXJhc2U8VD46OnZhbHVlPiB0eXBlOworICAgICAgICB9OworCisKKyAgICB9IC8vIG5hbWVzcGFjZSBhbGdvcml0aG0KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfU1REX0xJU1RfVFJBSVRTX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkL3JvcGVfdHJhaXRzLmhwcApAQCAtMCwwICsxLDgxIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBzdHJpbmdfdHJhaXRzLmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDMuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX1NURF9ST1BFX1RSQUlUU19IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1NURF9ST1BFX1RSQUlUU19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcveWVzX25vX3R5cGUuaHBwPgorI2luY2x1ZGUgPHJvcGU+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9zZXF1ZW5jZV90cmFpdHMuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgU0dJJ3Mgc3RkOjpyb3BlPD4gdHJhaXRzICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKyAgICAKKyAgICAvLyBuYXRpdmUgcmVwbGFjZSB0cmFpdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBUcmFpdHNULCB0eXBlbmFtZSBBbGxvY1Q+CisgICAgICAgIGNsYXNzIGhhc19uYXRpdmVfcmVwbGFjZTwgc3RkOjpyb3BlPFQsVHJhaXRzVCxBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfTsKKyNlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9dHJ1ZSk7CisjZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzx2YWx1ZT4gdHlwZTsgICAgIAorICAgICAgICB9OworCisgICAgLy8gc3RhYmxlIGl0ZXJhdG9ycyB0cmFpdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBUcmFpdHNULCB0eXBlbmFtZSBBbGxvY1Q+CisgICAgICAgIGNsYXNzIGhhc19zdGFibGVfaXRlcmF0b3JzPCBzdGQ6OnJvcGU8VCxUcmFpdHNULEFsbG9jVD4gPgorICAgICAgICB7CisgICAgICAgIHB1YmxpYzoKKyNpZiBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgZW51bSB7IHZhbHVlID0gdHJ1ZSB9OworI2Vsc2UKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19DT05TVEFOVChib29sLCB2YWx1ZT10cnVlKTsKKyNlbmRpZiAvLyBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPHZhbHVlPiB0eXBlOyAgICAgCisgICAgICAgIH07CisKKyAgICAvLyBjb25zdCB0aW1lIGluc2VydCB0cmFpdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBUcmFpdHNULCB0eXBlbmFtZSBBbGxvY1Q+CisgICAgICAgIGNsYXNzIGhhc19jb25zdF90aW1lX2luc2VydDwgc3RkOjpyb3BlPFQsVHJhaXRzVCxBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfTsKKyNlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9dHJ1ZSk7CisjZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzx2YWx1ZT4gdHlwZTsgICAgIAorICAgICAgICB9OworCisgICAgLy8gY29uc3QgdGltZSBlcmFzZSB0cmFpdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBUcmFpdHNULCB0eXBlbmFtZSBBbGxvY1Q+CisgICAgICAgIGNsYXNzIGhhc19jb25zdF90aW1lX2VyYXNlPCBzdGQ6OnJvcGU8VCxUcmFpdHNULEFsbG9jVD4gPgorICAgICAgICB7CisgICAgICAgIHB1YmxpYzoKKyNpZiBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgZW51bSB7IHZhbHVlID0gdHJ1ZSB9OworI2Vsc2UKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19DT05TVEFOVChib29sLCB2YWx1ZT10cnVlKTsKKyNlbmRpZiAvLyBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPHZhbHVlPiB0eXBlOyAgICAgCisgICAgICAgIH07CisKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19ST1BFX1RSQUlUU19IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL3N0ZC9zbGlzdF90cmFpdHMuaHBwCkBAIC0wLDAgKzEsNjkgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHNsaXN0X3RyYWl0cy5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLiAKKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfU1REX1NMSVNUX1RSQUlUU19IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1NURF9TTElTVF9UUkFJVFNfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy95ZXNfbm9fdHlwZS5ocHA+CisjaW5jbHVkZSBCT09TVF9TTElTVF9IRUFERVIgCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9zZXF1ZW5jZV90cmFpdHMuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisvLyAgU0dJJ3Mgc3RkOjpzbGlzdDw+IHRyYWl0cyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisKKyAgICAvLyBzdGFibGUgaXRlcmF0b3JzIHRyYWl0CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIEFsbG9jVD4KKyAgICAgICAgY2xhc3MgaGFzX3N0YWJsZV9pdGVyYXRvcnM8IEJPT1NUX1NURF9FWFRFTlNJT05fTkFNRVNQQUNFOjpzbGlzdDxULEFsbG9jVD4gPgorICAgICAgICB7CisgICAgICAgIHB1YmxpYzoKKyNpZiBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgZW51bSB7IHZhbHVlID0gdHJ1ZSB9OworI2Vsc2UKKyAgICAgICAgICAgIEJPT1NUX1NUQVRJQ19DT05TVEFOVChib29sLCB2YWx1ZT10cnVlKTsKKyNlbmRpZiAvLyBCT09TVF9XT1JLQVJPVU5EKCBfX0lCTUNQUF9fLCA8PSA2MDAgKQorICAgICAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPGhhc19zdGFibGVfaXRlcmF0b3JzPFQ+Ojp2YWx1ZT4gdHlwZTsKKyAgICAgICAgfTsKKworICAgIC8vIGNvbnN0IHRpbWUgaW5zZXJ0IHRyYWl0CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIEFsbG9jVD4KKyAgICAgICAgY2xhc3MgaGFzX2NvbnN0X3RpbWVfaW5zZXJ0PCBCT09TVF9TVERfRVhURU5TSU9OX05BTUVTUEFDRTo6c2xpc3Q8VCxBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfTsKKyNlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9dHJ1ZSk7CisjZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzxoYXNfY29uc3RfdGltZV9pbnNlcnQ8VD46OnZhbHVlPiB0eXBlOworICAgICAgICB9OworCisgICAgLy8gY29uc3QgdGltZSBlcmFzZSB0cmFpdAorICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBULCB0eXBlbmFtZSBBbGxvY1Q+CisgICAgICAgIGNsYXNzIGhhc19jb25zdF90aW1lX2VyYXNlPCBCT09TVF9TVERfRVhURU5TSU9OX05BTUVTUEFDRTo6c2xpc3Q8VCxBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfTsKKyNlbHNlCisgICAgICAgICAgICBCT09TVF9TVEFUSUNfQ09OU1RBTlQoYm9vbCwgdmFsdWU9dHJ1ZSk7CisjZW5kaWYgLy8gQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIHR5cGVkZWYgbXBsOjpib29sXzxoYXNfY29uc3RfdGltZV9lcmFzZTxUPjo6dmFsdWU+IHR5cGU7CisgICAgICAgIH07CisKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19TVERfTElTVF9UUkFJVFNfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy9zdGQvc3RyaW5nX3RyYWl0cy5ocHAKQEAgLTAsMCArMSw0NCBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgc3RyaW5nX3RyYWl0cy5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19TVERfU1RSSU5HX1RSQUlUU19IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1NURF9TVFJJTkdfVFJBSVRTX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy95ZXNfbm9fdHlwZS5ocHA+CisjaW5jbHVkZSA8c3RyaW5nPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc2VxdWVuY2VfdHJhaXRzLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxnb3JpdGhtIHsKKworLy8gIHN0ZDo6YmFzaWNfc3RyaW5nPD4gdHJhaXRzICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKworICAgIC8vIG5hdGl2ZSByZXBsYWNlIHRyYWl0CisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQsIHR5cGVuYW1lIFRyYWl0c1QsIHR5cGVuYW1lIEFsbG9jVD4KKyAgICAgICAgY2xhc3MgaGFzX25hdGl2ZV9yZXBsYWNlPCBzdGQ6OmJhc2ljX3N0cmluZzxULCBUcmFpdHNULCBBbGxvY1Q+ID4KKyAgICAgICAgeworICAgICAgICBwdWJsaWM6CisjaWYgQk9PU1RfV09SS0FST1VORCggX19JQk1DUFBfXywgPD0gNjAwICkKKyAgICAgICAgICAgIGVudW0geyB2YWx1ZSA9IHRydWUgfSA7CisjZWxzZQorICAgICAgICAgICAgQk9PU1RfU1RBVElDX0NPTlNUQU5UKGJvb2wsIHZhbHVlPXRydWUpOworI2VuZGlmIC8vIEJPT1NUX1dPUktBUk9VTkQoIF9fSUJNQ1BQX18sIDw9IDYwMCApCisKKyAgICAgICAgdHlwZWRlZiBtcGw6OmJvb2xfPGhhc19uYXRpdmVfcmVwbGFjZTxUPjo6dmFsdWU+IHR5cGU7CisgICAgICAgIH07CisKKworCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX0xJU1RfVFJBSVRTX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkX2NvbnRhaW5lcnNfdHJhaXRzLmhwcApAQCAtMCwwICsxLDI2IEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSBzdGRfY29udGFpbmVyc190cmFpdHMuaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfU1REX0NPTlRBSU5FUlNfVFJBSVRTX0hQUAorI2RlZmluZSBCT09TVF9TVFJJTkdfU1REX0NPTlRBSU5FUlNfVFJBSVRTX0hQUAorCisvKiFcZmlsZSAKKyAgICBUaGlzIGZpbGUgaW5jbHVkZXMgc2VxdWVuY2UgdHJhaXRzIGZvciBzdGwgY29udGFpbmVycy4KKyovCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkL3N0cmluZ190cmFpdHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkL2xpc3RfdHJhaXRzLmhwcD4KKworI2lmZGVmIEJPT1NUX0hBU19TTElTVAorIyAgIGluY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvc3RkL3NsaXN0X3RyYWl0cy5ocHA+CisjZW5kaWYKKworI2VuZGlmICAvLyBCT09TVF9TVFJJTkdfU1REX0NPTlRBSU5FUlNfVFJBSVRTX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsZ29yaXRobS9zdHJpbmcvdHJpbS5ocHAKQEAgLTAsMCArMSwzOTggQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHRyaW0uaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfVFJJTV9IUFAKKyNkZWZpbmUgQk9PU1RfU1RSSU5HX1RSSU1fSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9yYW5nZS9iZWdpbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvZW5kLmhwcD4KKyNpbmNsdWRlIDxib29zdC9yYW5nZS9jb25zdF9pdGVyYXRvci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvYXNfbGl0ZXJhbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvcmFuZ2UvaXRlcmF0b3JfcmFuZ2VfY29yZS5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2RldGFpbC90cmltLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGdvcml0aG0vc3RyaW5nL2NsYXNzaWZpY2F0aW9uLmhwcD4KKyNpbmNsdWRlIDxsb2NhbGU+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgdHJpbSBhbGdvcml0aG1zLgorICAgIFRyaW0gYWxnb3JpdGhtcyBhcmUgdXNlZCB0byByZW1vdmUgdHJhaWxpbmcgYW5kIGxlYWRpbmcgc3BhY2VzIGZyb20gYSAKKyAgICBzZXF1ZW5jZSAoc3RyaW5nKS4gU3BhY2UgaXMgcmVjb2duaXplZCB1c2luZyBnaXZlbiBsb2NhbGVzLgorCisgICAgUGFyYW1ldHJpYyAoXGMgX2lmKSB2YXJpYW50cyB1c2UgYSBwcmVkaWNhdGUgKGZ1bmN0b3IpIHRvIHNlbGVjdCB3aGljaCBjaGFyYWN0ZXJzCisgICAgYXJlIHRvIGJlIHRyaW1tZWQuLiAKKyAgICBGdW5jdGlvbnMgdGFrZSBhIHNlbGVjdGlvbiBwcmVkaWNhdGUgYXMgYSBwYXJhbWV0ZXIsIHdoaWNoIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIAorICAgIHdoZXRoZXIgYSBjaGFyYWN0ZXIgaXMgYSBzcGFjZS4gQ29tbW9uIHByZWRpY2F0ZXMgYXJlIHByb3ZpZGVkIGluIGNsYXNzaWZpY2F0aW9uLmhwcCBoZWFkZXIuCisKKyovCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKyAgICAvLyAgbGVmdCB0cmltICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKworICAgICAgICAvLyEgTGVmdCB0cmltIC0gcGFyYW1ldHJpYworICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBzcGFjZXMgZnJvbSB0aGUgaW5wdXQuIAorICAgICAgICAgICAgVGhlIHN1cHBsaWVkIHByZWRpY2F0ZSBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBjaGFyYWN0ZXJzIGFyZSBjb25zaWRlcmVkIHNwYWNlcy4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0LiBJdCBpcyByZXR1cm5lZCBhcyBhIHNlcXVlbmNlIAorICAgICAgICAgICAgb3IgY29waWVkIHRvIHRoZSBvdXRwdXQgaXRlcmF0b3IKKworICAgICAgICAgICAgXHBhcmFtIE91dHB1dCBBbiBvdXRwdXQgaXRlcmF0b3IgdG8gd2hpY2ggdGhlIHJlc3VsdCB3aWxsIGJlIGNvcGllZAorICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHJhbmdlCisgICAgICAgICAgICBccGFyYW0gSXNTcGFjZSBBIHVuYXJ5IHByZWRpY2F0ZSBpZGVudGlmeWluZyBzcGFjZXMKKyAgICAgICAgICAgIFxyZXR1cm4gCisgICAgICAgICAgICAgICAgQW4gb3V0cHV0IGl0ZXJhdG9yIHBvaW50aW5nIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgaW5zZXJ0ZWQgY2hhcmFjdGVyIG9yCisgICAgICAgICAgICAgICAgYSBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwgdHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIHRyaW1fbGVmdF9jb3B5X2lmKCAKKyAgICAgICAgICAgIE91dHB1dEl0ZXJhdG9yVCBPdXRwdXQsCisgICAgICAgICAgICBjb25zdCBSYW5nZVQmIElucHV0LAorICAgICAgICAgICAgUHJlZGljYXRlVCBJc1NwYWNlKQorICAgICAgICB7CisgICAgICAgICAgICBpdGVyYXRvcl9yYW5nZTxCT09TVF9TVFJJTkdfVFlQRU5BTUUgcmFuZ2VfY29uc3RfaXRlcmF0b3I8UmFuZ2VUPjo6dHlwZT4gbGl0X3JhbmdlKDo6Ym9vc3Q6OmFzX2xpdGVyYWwoSW5wdXQpKTsKKworICAgICAgICAgICAgc3RkOjpjb3B5KCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OmRldGFpbDo6dHJpbV9iZWdpbiggCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKGxpdF9yYW5nZSksIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQobGl0X3JhbmdlKSwgCisgICAgICAgICAgICAgICAgICAgIElzU3BhY2UgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQobGl0X3JhbmdlKSwKKyAgICAgICAgICAgICAgICBPdXRwdXQpOworCisgICAgICAgICAgICByZXR1cm4gT3V0cHV0OworICAgICAgICB9CisKKyAgICAgICAgLy8hIExlZnQgdHJpbSAtIHBhcmFtZXRyaWMKKyAgICAgICAgLyohCisgICAgICAgICAgICBcb3ZlcmxvYWQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIHRyaW1fbGVmdF9jb3B5X2lmKGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIFNlcXVlbmNlVCggCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fYmVnaW4oIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgSXNTcGFjZSApLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChJbnB1dCkpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIExlZnQgdHJpbSAtIHBhcmFtZXRyaWMKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIGxlYWRpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0LgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgYSBsb2NhbGUgdXNlZCBmb3IgJ3NwYWNlJyBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQKKworICAgICAgICAgICAgXG5vdGUgVGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIFNlcXVlbmNlVCB0cmltX2xlZnRfY29weShjb25zdCBTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAgICAgICAgICAgIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dHJpbV9sZWZ0X2NvcHlfaWYoCisgICAgICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICAgICAgaXNfc3BhY2UoTG9jKSk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgTGVmdCB0cmltCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCBsZWFkaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dC4gVGhlIHN1cHBsaWVkIHByZWRpY2F0ZSBpcyAKKyAgICAgICAgICAgIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQgc3BhY2VzLgorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBJc1NwYWNlIEEgdW5hcnkgcHJlZGljYXRlIGlkZW50aWZ5aW5nIHNwYWNlcworICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHRyaW1fbGVmdF9pZihTZXF1ZW5jZVQmIElucHV0LCBQcmVkaWNhdGVUIElzU3BhY2UpCisgICAgICAgIHsKKyAgICAgICAgICAgIElucHV0LmVyYXNlKCAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihJbnB1dCksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fYmVnaW4oIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgSXNTcGFjZSkpOworICAgICAgICB9CisKKyAgICAgICAgLy8hIExlZnQgdHJpbQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBzcGFjZXMgZnJvbSB0aGUgaW5wdXQuCisgICAgICAgICAgICBUaGUgSW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdHJpbV9sZWZ0KFNlcXVlbmNlVCYgSW5wdXQsIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2M9c3RkOjpsb2NhbGUoKSkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjp0cmltX2xlZnRfaWYoIAorICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICBpc19zcGFjZShMb2MpKTsKKyAgICAgICAgfQorCisgICAgLy8gIHJpZ2h0IHRyaW0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgUmlnaHQgdHJpbSAtIHBhcmFtZXRyaWMKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIHRyYWlsaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dC4gICAgICAgICAgICAgCisgICAgICAgICAgICBUaGUgc3VwcGxpZWQgcHJlZGljYXRlIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQgc3BhY2VzLgorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvcgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgcmFuZ2UKKyAgICAgICAgICAgIFxwYXJhbSBJc1NwYWNlIEEgdW5hcnkgcHJlZGljYXRlIGlkZW50aWZ5aW5nIHNwYWNlcworICAgICAgICAgICAgXHJldHVybiAKKyAgICAgICAgICAgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwgdHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIHRyaW1fcmlnaHRfY29weV9pZiggCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIFByZWRpY2F0ZVQgSXNTcGFjZSApCisgICAgICAgIHsKKyAgICAgICAgICAgIGl0ZXJhdG9yX3JhbmdlPEJPT1NUX1NUUklOR19UWVBFTkFNRSByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlPiBsaXRfcmFuZ2UoOjpib29zdDo6YXNfbGl0ZXJhbChJbnB1dCkpOworICAgICAgICAgCisgICAgICAgICAgICBzdGQ6OmNvcHkoIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKGxpdF9yYW5nZSksCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fZW5kKCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X3JhbmdlKSwgCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChsaXRfcmFuZ2UpLCAKKyAgICAgICAgICAgICAgICAgICAgSXNTcGFjZSApLAorICAgICAgICAgICAgICAgIE91dHB1dCApOworCisgICAgICAgICAgICByZXR1cm4gT3V0cHV0OworICAgICAgICB9CisKKyAgICAgICAgLy8hIFJpZ2h0IHRyaW0gLSBwYXJhbWV0cmljCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdHJpbV9yaWdodF9jb3B5X2lmKGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuIFNlcXVlbmNlVCggCisgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4oSW5wdXQpLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6ZGV0YWlsOjp0cmltX2VuZCggCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKElucHV0KSwgCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICBJc1NwYWNlKQorICAgICAgICAgICAgICAgICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgUmlnaHQgdHJpbQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEEgdHJpbW1lZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIHRyaW1fcmlnaHRfY29weShjb25zdCBTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjphbGdvcml0aG06OnRyaW1fcmlnaHRfY29weV9pZiggCisgICAgICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICAgICAgaXNfc3BhY2UoTG9jKSk7CisgICAgICAgIH0KKworICAgICAgICAgICAgCisgICAgICAgIC8vISBSaWdodCB0cmltIC0gcGFyYW1ldHJpYworICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0LgorICAgICAgICAgICAgVGhlIHN1cHBsaWVkIHByZWRpY2F0ZSBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBjaGFyYWN0ZXJzIGFyZSBjb25zaWRlcmVkIHNwYWNlcy4KKyAgICAgICAgICAgIFRoZSBpbnB1dCBzZXF1ZW5jZSBpcyBtb2RpZmllZCBpbi1wbGFjZS4KKworICAgICAgICAgICAgXHBhcmFtIElucHV0IEFuIGlucHV0IHNlcXVlbmNlCisgICAgICAgICAgICBccGFyYW0gSXNTcGFjZSBBIHVuYXJ5IHByZWRpY2F0ZSBpZGVudGlmeWluZyBzcGFjZXMKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgdm9pZCB0cmltX3JpZ2h0X2lmKFNlcXVlbmNlVCYgSW5wdXQsIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgSW5wdXQuZXJhc2UoCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fZW5kKCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4oSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6ZW5kKElucHV0KSwgCisgICAgICAgICAgICAgICAgICAgIElzU3BhY2UgKSwKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoSW5wdXQpCisgICAgICAgICAgICAgICAgKTsKKyAgICAgICAgfQorCisKKyAgICAgICAgLy8hIFJpZ2h0IHRyaW0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIHRyYWlsaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdHJpbV9yaWdodChTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dHJpbV9yaWdodF9pZigKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgaXNfc3BhY2UoTG9jKSApOworICAgICAgICB9CisKKyAgICAvLyAgYm90aCBzaWRlIHRyaW0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworICAgICAgICAvLyEgVHJpbSAtIHBhcmFtZXRyaWMKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIHRyYWlsaW5nIGFuZCBsZWFkaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgc3VwcGxpZWQgcHJlZGljYXRlIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQgc3BhY2VzLgorICAgICAgICAgICAgVGhlIHJlc3VsdCBpcyBhIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQuIEl0IGlzIHJldHVybmVkIGFzIGEgc2VxdWVuY2UgCisgICAgICAgICAgICBvciBjb3BpZWQgdG8gdGhlIG91dHB1dCBpdGVyYXRvcgorCisgICAgICAgICAgICBccGFyYW0gT3V0cHV0IEFuIG91dHB1dCBpdGVyYXRvciB0byB3aGljaCB0aGUgcmVzdWx0IHdpbGwgYmUgY29waWVkCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgcmFuZ2UKKyAgICAgICAgICAgIFxwYXJhbSBJc1NwYWNlIEEgdW5hcnkgcHJlZGljYXRlIGlkZW50aWZ5aW5nIHNwYWNlcworICAgICAgICAgICAgXHJldHVybiAKKyAgICAgICAgICAgICAgICBBbiBvdXRwdXQgaXRlcmF0b3IgcG9pbnRpbmcganVzdCBhZnRlciB0aGUgbGFzdCBpbnNlcnRlZCBjaGFyYWN0ZXIgb3IKKyAgICAgICAgICAgICAgICBhIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgICBcbm90ZSBUaGUgc2Vjb25kIHZhcmlhbnQgb2YgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyB0aGUgc3Ryb25nIGV4Y2VwdGlvbi1zYWZldHkgZ3VhcmFudGVlCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIE91dHB1dEl0ZXJhdG9yVCwgdHlwZW5hbWUgUmFuZ2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgT3V0cHV0SXRlcmF0b3JUIHRyaW1fY29weV9pZiggCisgICAgICAgICAgICBPdXRwdXRJdGVyYXRvclQgT3V0cHV0LAorICAgICAgICAgICAgY29uc3QgUmFuZ2VUJiBJbnB1dCwKKyAgICAgICAgICAgIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgaXRlcmF0b3JfcmFuZ2U8Qk9PU1RfU1RSSU5HX1RZUEVOQU1FIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFJhbmdlVD46OnR5cGU+IGxpdF9yYW5nZSg6OmJvb3N0Ojphc19saXRlcmFsKElucHV0KSk7CisKKyAgICAgICAgICAgIEJPT1NUX1NUUklOR19UWVBFTkFNRSAKKyAgICAgICAgICAgICAgICByYW5nZV9jb25zdF9pdGVyYXRvcjxSYW5nZVQ+Ojp0eXBlIFRyaW1FbmQ9CisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fZW5kKCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X3JhbmdlKSwgCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmVuZChsaXRfcmFuZ2UpLCAKKyAgICAgICAgICAgICAgICAgICAgSXNTcGFjZSk7CisKKyAgICAgICAgICAgIHN0ZDo6Y29weSggCisgICAgICAgICAgICAgICAgZGV0YWlsOjp0cmltX2JlZ2luKCAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YmVnaW4obGl0X3JhbmdlKSwgVHJpbUVuZCwgSXNTcGFjZSksCisgICAgICAgICAgICAgICAgVHJpbUVuZCwKKyAgICAgICAgICAgICAgICBPdXRwdXQKKyAgICAgICAgICAgICAgICApOworCisgICAgICAgICAgICByZXR1cm4gT3V0cHV0OworICAgICAgICB9CisKKyAgICAgICAgLy8hIFRyaW0gLSBwYXJhbWV0cmljCisgICAgICAgIC8qIQorICAgICAgICAgICAgXG92ZXJsb2FkCisgICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdHJpbV9jb3B5X2lmKGNvbnN0IFNlcXVlbmNlVCYgSW5wdXQsIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgQk9PU1RfU1RSSU5HX1RZUEVOQU1FIAorICAgICAgICAgICAgICAgIHJhbmdlX2NvbnN0X2l0ZXJhdG9yPFNlcXVlbmNlVD46OnR5cGUgVHJpbUVuZD0KKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjpkZXRhaWw6OnRyaW1fZW5kKCAKKyAgICAgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmJlZ2luKElucHV0KSwgCisgICAgICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjplbmQoSW5wdXQpLCAKKyAgICAgICAgICAgICAgICAgICAgICAgIElzU3BhY2UpOworCisgICAgICAgICAgICByZXR1cm4gU2VxdWVuY2VUKCAKKyAgICAgICAgICAgICAgICBkZXRhaWw6OnRyaW1fYmVnaW4oIAorICAgICAgICAgICAgICAgICAgICA6OmJvb3N0OjpiZWdpbihJbnB1dCksIAorICAgICAgICAgICAgICAgICAgICBUcmltRW5kLCAKKyAgICAgICAgICAgICAgICAgICAgSXNTcGFjZSksCisgICAgICAgICAgICAgICAgVHJpbUVuZAorICAgICAgICAgICAgICAgICk7CisgICAgICAgIH0KKworICAgICAgICAvLyEgVHJpbQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEEgdHJpbW1lZCBjb3B5IG9mIHRoZSBpbnB1dAorCisgICAgICAgICAgICBcbm90ZSBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBzdHJvbmcgZXhjZXB0aW9uLXNhZmV0eSBndWFyYW50ZWUKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIHRyaW1fY29weSggY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwgY29uc3Qgc3RkOjpsb2NhbGUmIExvYz1zdGQ6OmxvY2FsZSgpICkKKyAgICAgICAgeworICAgICAgICAgICAgcmV0dXJuCisgICAgICAgICAgICAgICAgOjpib29zdDo6YWxnb3JpdGhtOjp0cmltX2NvcHlfaWYoCisgICAgICAgICAgICAgICAgICAgIElucHV0LCAKKyAgICAgICAgICAgICAgICAgICAgaXNfc3BhY2UoTG9jKSApOworICAgICAgICB9CisgICAgIAorICAgICAgICAvLyEgVHJpbQorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0LiAKKyAgICAgICAgICAgIFRoZSBzdXBwbGllZCBwcmVkaWNhdGUgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggY2hhcmFjdGVycyBhcmUgY29uc2lkZXJlZCBzcGFjZXMuCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIElzU3BhY2UgQSB1bmFyeSBwcmVkaWNhdGUgaWRlbnRpZnlpbmcgc3BhY2VzCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdHJpbV9pZihTZXF1ZW5jZVQmIElucHV0LCBQcmVkaWNhdGVUIElzU3BhY2UpCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dHJpbV9yaWdodF9pZiggSW5wdXQsIElzU3BhY2UgKTsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dHJpbV9sZWZ0X2lmKCBJbnB1dCwgSXNTcGFjZSApOworICAgICAgICB9CisKKyAgICAgICAgLy8hIFRyaW0KKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dC4gCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdHJpbShTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmFsZ29yaXRobTo6dHJpbV9pZigKKyAgICAgICAgICAgICAgICBJbnB1dCwgCisgICAgICAgICAgICAgICAgaXNfc3BhY2UoIExvYyApICk7CisgICAgICAgIH0KKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobSAKKworICAgIC8vIHB1bGwgbmFtZXMgdG8gdGhlIGJvb3N0IG5hbWVzcGFjZQorICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9sZWZ0OworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9sZWZ0X2lmOworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9sZWZ0X2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2xlZnRfY29weV9pZjsKKyAgICB1c2luZyBhbGdvcml0aG06OnRyaW1fcmlnaHQ7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX3JpZ2h0X2lmOworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9yaWdodF9jb3B5OworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9yaWdodF9jb3B5X2lmOworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbTsKKyAgICB1c2luZyBhbGdvcml0aG06OnRyaW1faWY7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2NvcHk7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2NvcHlfaWY7CisKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAgLy8gQk9PU1RfU1RSSU5HX1RSSU1fSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZy90cmltX2FsbC5ocHAKQEAgLTAsMCArMSwyMTcgQEAKKy8vICBCb29zdCBzdHJpbmdfYWxnbyBsaWJyYXJ5IHRyaW0uaHBwIGhlYWRlciBmaWxlICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLworCisvLyAgQ29weXJpZ2h0IFBhdm9sIERyb2JhIDIwMDItMjAwMy4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisvLyAgICAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgICAgICAgICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2lmbmRlZiBCT09TVF9TVFJJTkdfVFJJTV9BTExfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19UUklNX0FMTF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvY29uZmlnLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvdHJpbS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9jbGFzc2lmaWNhdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9maW5kX2Zvcm1hdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxnb3JpdGhtL3N0cmluZy9mb3JtYXR0ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvZmluZGVyLmhwcD4KKyNpbmNsdWRlIDxsb2NhbGU+CisKKy8qISBcZmlsZQorICAgIERlZmluZXMgdHJpbV9hbGwgYWxnb3JpdGhtcy4KKyAgICAKKyAgICBKdXN0IGxpa2UgXGMgdHJpbSwgXGMgdHJpbV9hbGwgcmVtb3ZlcyBhbGwgdHJhaWxpbmcgYW5kIGxlYWRpbmcgc3BhY2VzIGZyb20gYSAKKyAgICBzZXF1ZW5jZSAoc3RyaW5nKS4gSW4gYWRkaXRpb24sIHNwYWNlcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBzZXF1ZW5jZSBhcmUgdHJ1bmNhdGVkCisgICAgdG8ganVzdCBvbmUgY2hhcmFjdGVyLiBTcGFjZSBpcyByZWNvZ25pemVkIHVzaW5nIGdpdmVuIGxvY2FsZXMuCisKKyAgICBcYyB0cmltX2ZpbGwgYWN0cyBhcyB0cmltX2FsbCwgYnV0IHRoZSBzcGFjZXMgaW4gdGhlIG1pZGRsZSBhcmUgcmVwbGFjZXMgd2l0aCAKKyAgICBhIHVzZXItZGVmaW5lIHNlcXVlbmNlIG9mIGNoYXJhY3Rlci4KKworICAgIFBhcmFtZXRyaWMgKFxjIF9pZikgdmFyaWFudHMgdXNlIGEgcHJlZGljYXRlIChmdW5jdG9yKSB0byBzZWxlY3Qgd2hpY2ggY2hhcmFjdGVycworICAgIGFyZSB0byBiZSB0cmltbWVkLi4gCisgICAgRnVuY3Rpb25zIHRha2UgYSBzZWxlY3Rpb24gcHJlZGljYXRlIGFzIGEgcGFyYW1ldGVyLCB3aGljaCBpcyB1c2VkIHRvIGRldGVybWluZSAKKyAgICB3aGV0aGVyIGEgY2hhcmFjdGVyIGlzIGEgc3BhY2UuIENvbW1vbiBwcmVkaWNhdGVzIGFyZSBwcm92aWRlZCBpbiBjbGFzc2lmaWNhdGlvbi5ocHAgaGVhZGVyLgorCisqLworCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGdvcml0aG0geworCisgICAgICAgIC8vIG11bHRpIGxpbmUgdHJpbSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy8KKworICAgICAgICAvLyEgVHJpbSBBbGwgLSBwYXJhbWV0cmljCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXMgZnJvbSB0aGUgaW5wdXQgYW5kCisgICAgICAgICAgICBjb21wcmVzcyBhbGwgb3RoZXIgc3BhY2VzIHRvIGEgc2luZ2xlIGNoYXJhY3Rlci4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgIFxwYXJhbSBJc1NwYWNlIEEgdW5hcnkgcHJlZGljYXRlIGlkZW50aWZ5aW5nIHNwYWNlcworICAgICAgICAgICAgXHJldHVybiBBIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBQcmVkaWNhdGVUPgorICAgICAgICBpbmxpbmUgU2VxdWVuY2VUIHRyaW1fYWxsX2NvcHlfaWYoY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwgUHJlZGljYXRlVCBJc1NwYWNlKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gCisgICAgICAgICAgICAgICAgOjpib29zdDo6ZmluZF9mb3JtYXRfYWxsX2NvcHkoICAgICAgCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OnRyaW1fY29weV9pZihJbnB1dCwgSXNTcGFjZSksCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OnRva2VuX2ZpbmRlcihJc1NwYWNlLCA6OmJvb3N0Ojp0b2tlbl9jb21wcmVzc19vbiksCisgICAgICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmRpc3NlY3RfZm9ybWF0dGVyKDo6Ym9vc3Q6OmhlYWRfZmluZGVyKDEpKSk7CisgICAgICAgIH0KKworCisgICAgICAgIC8vISBUcmltIEFsbAorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0IGFuZAorICAgICAgICAgICAgY29tcHJlc3MgYWxsIG90aGVyIHNwYWNlcyB0byBhIHNpbmdsZSBjaGFyYWN0ZXIuCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIElzU3BhY2UgQSB1bmFyeSBwcmVkaWNhdGUgaWRlbnRpZnlpbmcgc3BhY2VzCisgICAgICAgICovCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFNlcXVlbmNlVCwgdHlwZW5hbWUgUHJlZGljYXRlVD4KKyAgICAgICAgaW5saW5lIHZvaWQgdHJpbV9hbGxfaWYoU2VxdWVuY2VUJiBJbnB1dCwgUHJlZGljYXRlVCBJc1NwYWNlKQorICAgICAgICB7CisgICAgICAgICAgICA6OmJvb3N0Ojp0cmltX2lmKElucHV0LCBJc1NwYWNlKTsKKyAgICAgICAgICAgIDo6Ym9vc3Q6OmZpbmRfZm9ybWF0X2FsbCggICAgICAgCisgICAgICAgICAgICAgICAgSW5wdXQsICAgICAgICAgIAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OnRva2VuX2ZpbmRlcihJc1NwYWNlLCA6OmJvb3N0Ojp0b2tlbl9jb21wcmVzc19vbiksCisgICAgICAgICAgICAgICAgOjpib29zdDo6ZGlzc2VjdF9mb3JtYXR0ZXIoOjpib29zdDo6aGVhZF9maW5kZXIoMSkpKTsKKyAgICAgICAgfQorCisKKyAgICAgICAgLy8hIFRyaW0gQWxsCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXMgZnJvbSB0aGUgaW5wdXQgYW5kCisgICAgICAgICAgICBjb21wcmVzcyBhbGwgb3RoZXIgc3BhY2VzIHRvIGEgc2luZ2xlIGNoYXJhY3Rlci4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEEgdHJpbW1lZCBjb3B5IG9mIHRoZSBpbnB1dAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdHJpbV9hbGxfY29weShjb25zdCBTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jID1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdHJpbV9hbGxfY29weV9pZihJbnB1dCwgOjpib29zdDo6aXNfc3BhY2UoTG9jKSk7CisgICAgICAgIH0KKworCisgICAgICAgIC8vISBUcmltIEFsbAorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0IGFuZAorICAgICAgICAgICAgY29tcHJlc3MgYWxsIG90aGVyIHNwYWNlcyB0byBhIHNpbmdsZSBjaGFyYWN0ZXIuCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIExvYyBBIGxvY2FsZSB1c2VkIGZvciAnc3BhY2UnIGNsYXNzaWZpY2F0aW9uCisgICAgICAgICAgICBccmV0dXJuIEEgdHJpbW1lZCBjb3B5IG9mIHRoZSBpbnB1dAorICAgICAgICAqLworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBTZXF1ZW5jZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHRyaW1fYWxsKFNlcXVlbmNlVCYgSW5wdXQsIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2MgPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRyaW1fYWxsX2lmKElucHV0LCA6OmJvb3N0Ojppc19zcGFjZShMb2MpKTsKKyAgICAgICAgfQorCisKKyAgICAgICAgLy8hIFRyaW0gRmlsbCAtIHBhcmFtZXRyaWMKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dCBhbmQKKyAgICAgICAgICAgIHJlcGxhY2UgYWxsIGV2ZXJ5IGJsb2NrIG9mIGNvbnNlY3V0aXZlIHNwYWNlcyB3aXRoIGEgZmlsbCBzdHJpbmcKKyAgICAgICAgICAgIGRlZmluZWQgYnkgdXNlci4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIEZpbGwgQSBzdHJpbmcgdXNlZCB0byBmaWxsIHRoZSBpbm5lciBzcGFjZXMKKyAgICAgICAgICAgIFxwYXJhbSBJc1NwYWNlIEEgdW5hcnkgcHJlZGljYXRlIGlkZW50aWZ5aW5nIHNwYWNlcworICAgICAgICAgICAgXHJldHVybiBBIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdHJpbV9maWxsX2NvcHlfaWYoY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwgY29uc3QgUmFuZ2VUJiBGaWxsLCBQcmVkaWNhdGVUIElzU3BhY2UpCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAKKyAgICAgICAgICAgICAgICA6OmJvb3N0OjpmaW5kX2Zvcm1hdF9hbGxfY29weSggICAgICAKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6dHJpbV9jb3B5X2lmKElucHV0LCBJc1NwYWNlKSwKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6dG9rZW5fZmluZGVyKElzU3BhY2UsIDo6Ym9vc3Q6OnRva2VuX2NvbXByZXNzX29uKSwKKyAgICAgICAgICAgICAgICAgICAgOjpib29zdDo6Y29uc3RfZm9ybWF0dGVyKDo6Ym9vc3Q6OmFzX2xpdGVyYWwoRmlsbCkpKTsKKyAgICAgICAgfQorCisKKyAgICAgICAgLy8hIFRyaW0gRmlsbAorICAgICAgICAvKiEKKyAgICAgICAgICAgIFJlbW92ZSBhbGwgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIGlucHV0IGFuZAorICAgICAgICAgICAgcmVwbGFjZSBhbGwgZXZlcnkgYmxvY2sgb2YgY29uc2VjdXRpdmUgc3BhY2VzIHdpdGggYSBmaWxsIHN0cmluZworICAgICAgICAgICAgZGVmaW5lZCBieSB1c2VyLgorICAgICAgICAgICAgVGhlIGlucHV0IHNlcXVlbmNlIGlzIG1vZGlmaWVkIGluLXBsYWNlLgorCisgICAgICAgICAgICBccGFyYW0gSW5wdXQgQW4gaW5wdXQgc2VxdWVuY2UKKyAgICAgICAgICAgIFxwYXJhbSBGaWxsIEEgc3RyaW5nIHVzZWQgdG8gZmlsbCB0aGUgaW5uZXIgc3BhY2VzCisgICAgICAgICAgICBccGFyYW0gSXNTcGFjZSBBIHVuYXJ5IHByZWRpY2F0ZSBpZGVudGlmeWluZyBzcGFjZXMKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQsIHR5cGVuYW1lIFByZWRpY2F0ZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHRyaW1fZmlsbF9pZihTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBSYW5nZVQmIEZpbGwsIFByZWRpY2F0ZVQgSXNTcGFjZSkKKyAgICAgICAgeworICAgICAgICAgICAgOjpib29zdDo6dHJpbV9pZihJbnB1dCwgSXNTcGFjZSk7CisgICAgICAgICAgICA6OmJvb3N0OjpmaW5kX2Zvcm1hdF9hbGwoICAgICAgIAorICAgICAgICAgICAgICAgIElucHV0LCAgICAgICAgICAKKyAgICAgICAgICAgICAgICA6OmJvb3N0Ojp0b2tlbl9maW5kZXIoSXNTcGFjZSwgOjpib29zdDo6dG9rZW5fY29tcHJlc3Nfb24pLAorICAgICAgICAgICAgICAgIDo6Ym9vc3Q6OmNvbnN0X2Zvcm1hdHRlcig6OmJvb3N0Ojphc19saXRlcmFsKEZpbGwpKSk7CisgICAgICAgIH0KKworCisgICAgICAgIC8vISBUcmltIEZpbGwKKyAgICAgICAgLyohCisgICAgICAgICAgICBSZW1vdmUgYWxsIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlcyBmcm9tIHRoZSBpbnB1dCBhbmQKKyAgICAgICAgICAgIHJlcGxhY2UgYWxsIGV2ZXJ5IGJsb2NrIG9mIGNvbnNlY3V0aXZlIHNwYWNlcyB3aXRoIGEgZmlsbCBzdHJpbmcKKyAgICAgICAgICAgIGRlZmluZWQgYnkgdXNlci4KKyAgICAgICAgICAgIFRoZSByZXN1bHQgaXMgYSB0cmltbWVkIGNvcHkgb2YgdGhlIGlucHV0CisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIEZpbGwgQSBzdHJpbmcgdXNlZCB0byBmaWxsIHRoZSBpbm5lciBzcGFjZXMKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgJ3NwYWNlJyBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSBTZXF1ZW5jZVQgdHJpbV9maWxsX2NvcHkoY29uc3QgU2VxdWVuY2VUJiBJbnB1dCwgY29uc3QgUmFuZ2VUJiBGaWxsLCBjb25zdCBzdGQ6OmxvY2FsZSYgTG9jID1zdGQ6OmxvY2FsZSgpKQorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gdHJpbV9maWxsX2NvcHlfaWYoSW5wdXQsIEZpbGwsIDo6Ym9vc3Q6OmlzX3NwYWNlKExvYykpOworICAgICAgICB9CisKKworICAgICAgICAvLyEgVHJpbSBGaWxsCisgICAgICAgIC8qIQorICAgICAgICAgICAgUmVtb3ZlIGFsbCBsZWFkaW5nIGFuZCB0cmFpbGluZyBzcGFjZXMgZnJvbSB0aGUgaW5wdXQgYW5kCisgICAgICAgICAgICByZXBsYWNlIGFsbCBldmVyeSBibG9jayBvZiBjb25zZWN1dGl2ZSBzcGFjZXMgd2l0aCBhIGZpbGwgc3RyaW5nCisgICAgICAgICAgICBkZWZpbmVkIGJ5IHVzZXIuCisgICAgICAgICAgICBUaGUgaW5wdXQgc2VxdWVuY2UgaXMgbW9kaWZpZWQgaW4tcGxhY2UuCisKKyAgICAgICAgICAgIFxwYXJhbSBJbnB1dCBBbiBpbnB1dCBzZXF1ZW5jZQorICAgICAgICAgICAgXHBhcmFtIEZpbGwgQSBzdHJpbmcgdXNlZCB0byBmaWxsIHRoZSBpbm5lciBzcGFjZXMKKyAgICAgICAgICAgIFxwYXJhbSBMb2MgQSBsb2NhbGUgdXNlZCBmb3IgJ3NwYWNlJyBjbGFzc2lmaWNhdGlvbgorICAgICAgICAgICAgXHJldHVybiBBIHRyaW1tZWQgY29weSBvZiB0aGUgaW5wdXQKKyAgICAgICAgKi8KKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgU2VxdWVuY2VULCB0eXBlbmFtZSBSYW5nZVQ+CisgICAgICAgIGlubGluZSB2b2lkIHRyaW1fZmlsbChTZXF1ZW5jZVQmIElucHV0LCBjb25zdCBSYW5nZVQmIEZpbGwsIGNvbnN0IHN0ZDo6bG9jYWxlJiBMb2MgPXN0ZDo6bG9jYWxlKCkpCisgICAgICAgIHsKKyAgICAgICAgICAgIHRyaW1fZmlsbF9pZihJbnB1dCwgRmlsbCwgOjpib29zdDo6aXNfc3BhY2UoTG9jKSk7CisgICAgICAgIH0KKworCisgICAgfSAvLyBuYW1lc3BhY2UgYWxnb3JpdGhtICAgIAorCisgICAgLy8gcHVsbCBuYW1lcyB0byB0aGUgYm9vc3QgbmFtZXNwYWNlCisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2FsbDsKKyAgICB1c2luZyBhbGdvcml0aG06OnRyaW1fYWxsX2lmOworICAgIHVzaW5nIGFsZ29yaXRobTo6dHJpbV9hbGxfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OnRyaW1fYWxsX2NvcHlfaWY7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2ZpbGw7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2ZpbGxfaWY7CisgICAgdXNpbmcgYWxnb3JpdGhtOjp0cmltX2ZpbGxfY29weTsKKyAgICB1c2luZyBhbGdvcml0aG06OnRyaW1fZmlsbF9jb3B5X2lmOworCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19UUklNX0FMTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGdvcml0aG0vc3RyaW5nL3llc19ub190eXBlLmhwcApAQCAtMCwwICsxLDMzIEBACisvLyAgQm9vc3Qgc3RyaW5nX2FsZ28gbGlicmFyeSB5ZXNfbm9fdHlwZS5ocHAgaGVhZGVyIGZpbGUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCisKKy8vICBDb3B5cmlnaHQgUGF2b2wgRHJvYmEgMjAwMi0yMDAzLgorLy8KKy8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKy8vICAgIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICAgICAgICAgIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZy8gZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZuZGVmIEJPT1NUX1NUUklOR19ZRVNfTk9fVFlQRV9ERVRBSUxfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19ZRVNfTk9fVFlQRV9ERVRBSUxfSFBQCisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsZ29yaXRobSB7CisKKyAgICAgICAgLy8gdGFrZW4gZnJvbSBib29zdCBtYWlsaW5nLWxpc3QKKyAgICAgICAgLy8gd2hlbiB5ZXNfbm9fdHlwZSB3aWxsIGJlY29tZSBvZmZpY2lhbGx5CisgICAgICAgIC8vIGEgcGFydCBvZiBib29zdCBkaXN0cmlidXRpb24sIHRoaXMgaGVhZGVyCisgICAgICAgIC8vIHdpbGwgYmUgZGVwcmVjYXRlZAorICAgICAgICB0ZW1wbGF0ZTxpbnQgST4gc3RydWN0IHNpemVfZGVzY3JpcHRvciAKKyAgICAgICAgeworICAgICAgICAgICAgdHlwZWRlZiBjaGFyICgmIHR5cGUpW0ldOworICAgICAgICB9OyAKKworICAgICAgICB0eXBlZGVmIHNpemVfZGVzY3JpcHRvcjwxPjo6dHlwZSB5ZXNfdHlwZTsKKyAgICAgICAgdHlwZWRlZiBzaXplX2Rlc2NyaXB0b3I8Mj46OnR5cGUgbm9fdHlwZTsKKworICAgIH0gLy8gbmFtZXNwYWNlIGFsZ29yaXRobQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19ZRVNfTk9fVFlQRV9ERVRBSUxfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxnb3JpdGhtL3N0cmluZ19yZWdleC5ocHAKQEAgLTAsMCArMSwyMyBAQAorLy8gIEJvb3N0IHN0cmluZ19hbGdvIGxpYnJhcnkgc3RyaW5nX3JlZ2V4LmhwcCBoZWFkZXIgZmlsZSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIENvcHlyaWdodCBQYXZvbCBEcm9iYSAyMDAyLTIwMDQuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLgorLy8gICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gICAgICAgICAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnLyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpZm5kZWYgQk9PU1RfU1RSSU5HX0FMR09fUkVHRVhfSFBQCisjZGVmaW5lIEJPT1NUX1NUUklOR19BTEdPX1JFR0VYX0hQUAorCisvKiEgXGZpbGUKKyAgICBDdW11bGF0aXZlIGluY2x1ZGUgZm9yIHN0cmluZ19hbGdvIGxpYnJhcnkuCisgICAgSW4gYWRkaXRpb24gdG8gc3RyaW5nLmhwcCBjb250YWlucyBhbHNvIHJlZ2V4LXJlbGF0ZWQgc3R1ZmYuCisqLworCisjaW5jbHVkZSA8Ym9vc3QvcmVnZXguaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsZ29yaXRobS9zdHJpbmcvcmVnZXguaHBwPgorCisjZW5kaWYgIC8vIEJPT1NUX1NUUklOR19BTEdPX1JFR0VYX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduLmhwcApAQCAtMCwwICsxLDIzIEBACisvKgorKGMpIDIwMTQtMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vYWxpZ25fZG93bi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vYWxpZ25fdXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduZWRfYWxsb2MuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduZWRfYWxsb2NhdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbmVkX2FsbG9jYXRvcl9hZGFwdG9yLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbmVkX2RlbGV0ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vYWxpZ25tZW50X29mLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hc3N1bWVfYWxpZ25lZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vaXNfYWxpZ25lZC5ocHA+CisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NApCaW5hcnkgZmlsZXMgL2Rldi9udWxsIGFuZCBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduLy5EU19TdG9yZSBkaWZmZXIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9hbGlnbi5ocHAKQEAgLTAsMCArMSwyMCBAQAorLyoKKyhjKSAyMDE0LTIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQUxJR05fSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdOX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX1NURF9BTElHTikKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25fY3h4MTEuaHBwPgorI2Vsc2UKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ24uaHBwPgorI2VuZGlmCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2FsaWduX2Rvd24uaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisoYykgMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9BTElHTl9ET1dOX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9BTElHTl9ET1dOX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWduX2Rvd24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduX2Rvd25fZm9yd2FyZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworQk9PU1RfQ09OU1RFWFBSIGlubGluZSBzdGQ6OnNpemVfdCBhbGlnbl9kb3duKHN0ZDo6c2l6ZV90IHZhbHVlLAorICAgIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkgQk9PU1RfTk9FWENFUFQKK3sKKyAgICByZXR1cm4gdmFsdWUgJiB+KGFsaWdubWVudCAtIDEpOworfQorCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2FsaWduX2Rvd25fZm9yd2FyZC5ocHAKQEAgLTAsMCArMSwyNCBAQAorLyoKKyhjKSAyMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdOX0RPV05fRk9SV0FSRF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fQUxJR05fRE9XTl9GT1JXQVJEX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK0JPT1NUX0NPTlNURVhQUiBzdGQ6OnNpemVfdCBhbGlnbl9kb3duKHN0ZDo6c2l6ZV90IHZhbHVlLAorICAgIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkgQk9PU1RfTk9FWENFUFQ7CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25fdXAuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisoYykgMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9BTElHTl9VUF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fQUxJR05fVVBfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25fdXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduX3VwX2ZvcndhcmQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK0JPT1NUX0NPTlNURVhQUiBpbmxpbmUgc3RkOjpzaXplX3QgYWxpZ25fdXAoc3RkOjpzaXplX3QgdmFsdWUsCisgICAgc3RkOjpzaXplX3QgYWxpZ25tZW50KSBCT09TVF9OT0VYQ0VQVAoreworICAgIHJldHVybiAodmFsdWUgKyBhbGlnbm1lbnQgLSAxKSAmIH4oYWxpZ25tZW50IC0gMSk7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25fdXBfZm9yd2FyZC5ocHAKQEAgLTAsMCArMSwyNCBAQAorLyoKKyhjKSAyMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdOX1VQX0ZPUldBUkRfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdOX1VQX0ZPUldBUkRfSFBQCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGNzdGRkZWY+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworQk9PU1RfQ09OU1RFWFBSIHN0ZDo6c2l6ZV90IGFsaWduX3VwKHN0ZDo6c2l6ZV90IHZhbHVlLAorICAgIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkgQk9PU1RfTk9FWENFUFQ7CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25lZF9hbGxvYy5ocHAKQEAgLTAsMCArMSw0NCBAQAorLyoKKyhjKSAyMDE0LTIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQUxJR05FRF9BTExPQ19IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fQUxJR05FRF9BTExPQ19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpZiBkZWZpbmVkKEJPT1NUX0hBU19VTklTVERfSCkKKyNpbmNsdWRlIDx1bmlzdGQuaD4KKyNlbmRpZgorCisjaWYgZGVmaW5lZChfX0FQUExFX18pIHx8IGRlZmluZWQoX19BUFBMRV9DQ19fKSB8fCBkZWZpbmVkKG1hY2ludG9zaCkKKyNpbmNsdWRlIDxBdmFpbGFiaWxpdHlNYWNyb3MuaD4KKyNlbmRpZgorCisjaWYgZGVmaW5lZChCT09TVF9BTElHTl9VU0VfQUxMT0NBVEUpCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2MuaHBwPgorI2VsaWYgZGVmaW5lZChfTVNDX1ZFUikgJiYgIWRlZmluZWQoVU5ERVJfQ0UpCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2NfbXN2Yy5ocHA+CisjZWxpZiBkZWZpbmVkKF9fTUlOR1czMl9fKSAmJiAoX19NU1ZDUlRfVkVSU0lPTl9fID49IDB4MDcwMCkKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19tc3ZjLmhwcD4KKyNlbGlmIE1BQ19PU19YX1ZFUlNJT05fTUlOX1JFUVVJUkVEID49IDEwOTAKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19wb3NpeC5ocHA+CisjZWxpZiBNQUNfT1NfWF9WRVJTSU9OX01JTl9SRVFVSVJFRCA+PSAxMDYwCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2NfbWFjb3MuaHBwPgorI2VsaWYgZGVmaW5lZChfX0FORFJPSURfXykKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19hbmRyb2lkLmhwcD4KKyNlbGlmIGRlZmluZWQoX19TdW5PU181XzExKSB8fCBkZWZpbmVkKF9fU3VuT1NfNV8xMikKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19wb3NpeC5ocHA+CisjZWxpZiBkZWZpbmVkKHN1bikgfHwgZGVmaW5lZChfX3N1bikKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19zdW5vcy5ocHA+CisjZWxpZiAoX1BPU0lYX0NfU09VUkNFID49IDIwMDExMkwpIHx8IChfWE9QRU5fU09VUkNFID49IDYwMCkKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19wb3NpeC5ocHA+CisjZWxzZQorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9hbGlnbmVkX2FsbG9jLmhwcD4KKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9hbGlnbmVkX2FsbG9jYXRvci5ocHAKQEAgLTAsMCArMSwxNTkgQEAKKy8qCisoYykgMjAxNC0yMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdORURfQUxMT0NBVE9SX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9BTElHTkVEX0FMTE9DQVRPUl9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9hZGRyZXNzb2YuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pc19hbGlnbm1lbnRfY29uc3RhbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9tYXhfb2JqZWN0cy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL21heF9zaXplLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbmVkX2FsbG9jLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbmVkX2FsbG9jYXRvcl9mb3J3YXJkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbm1lbnRfb2YuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3Rocm93X2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8bmV3PgorCisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfUlZBTFVFX1JFRkVSRU5DRVMpCisjaW5jbHVkZSA8dXRpbGl0eT4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3RlbXBsYXRlPGNsYXNzIFQsIHN0ZDo6c2l6ZV90IEFsaWdubWVudD4KK2NsYXNzIGFsaWduZWRfYWxsb2NhdG9yIHsKKyAgICBCT09TVF9TVEFUSUNfQVNTRVJUKGRldGFpbDo6CisgICAgICAgIGlzX2FsaWdubWVudF9jb25zdGFudDxBbGlnbm1lbnQ+Ojp2YWx1ZSk7CisKK3B1YmxpYzoKKyAgICB0eXBlZGVmIFQgdmFsdWVfdHlwZTsKKyAgICB0eXBlZGVmIFQqIHBvaW50ZXI7CisgICAgdHlwZWRlZiBjb25zdCBUKiBjb25zdF9wb2ludGVyOworICAgIHR5cGVkZWYgdm9pZCogdm9pZF9wb2ludGVyOworICAgIHR5cGVkZWYgY29uc3Qgdm9pZCogY29uc3Rfdm9pZF9wb2ludGVyOworICAgIHR5cGVkZWYgc3RkOjpzaXplX3Qgc2l6ZV90eXBlOworICAgIHR5cGVkZWYgc3RkOjpwdHJkaWZmX3QgZGlmZmVyZW5jZV90eXBlOworICAgIHR5cGVkZWYgVCYgcmVmZXJlbmNlOworICAgIHR5cGVkZWYgY29uc3QgVCYgY29uc3RfcmVmZXJlbmNlOworCitwcml2YXRlOgorICAgIGVudW0geworICAgICAgICBtaW5fYWxpZ24gPSBkZXRhaWw6Om1heF9zaXplPEFsaWdubWVudCwKKyAgICAgICAgICAgIGFsaWdubWVudF9vZjx2YWx1ZV90eXBlPjo6dmFsdWU+Ojp2YWx1ZQorICAgIH07CisKK3B1YmxpYzoKKyAgICB0ZW1wbGF0ZTxjbGFzcyBVPgorICAgIHN0cnVjdCByZWJpbmQgeworICAgICAgICB0eXBlZGVmIGFsaWduZWRfYWxsb2NhdG9yPFUsIEFsaWdubWVudD4gb3RoZXI7CisgICAgfTsKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0RFRkFVTFRFRF9GVU5DVElPTlMpCisgICAgYWxpZ25lZF9hbGxvY2F0b3IoKSA9IGRlZmF1bHQ7CisjZWxzZQorICAgIGFsaWduZWRfYWxsb2NhdG9yKCkgQk9PU1RfTk9FWENFUFQgeyB9CisjZW5kaWYKKworICAgIHRlbXBsYXRlPGNsYXNzIFU+CisgICAgYWxpZ25lZF9hbGxvY2F0b3IoY29uc3QgYWxpZ25lZF9hbGxvY2F0b3I8VSwgQWxpZ25tZW50PiYpCisgICAgICAgIEJPT1NUX05PRVhDRVBUIHsgfQorCisgICAgcG9pbnRlciBhZGRyZXNzKHJlZmVyZW5jZSB2YWx1ZSkgY29uc3QgQk9PU1RfTk9FWENFUFQgeworICAgICAgICByZXR1cm4gZGV0YWlsOjphZGRyZXNzb2YodmFsdWUpOworICAgIH0KKworICAgIGNvbnN0X3BvaW50ZXIgYWRkcmVzcyhjb25zdF9yZWZlcmVuY2UgdmFsdWUpIGNvbnN0IEJPT1NUX05PRVhDRVBUIHsKKyAgICAgICAgcmV0dXJuIGRldGFpbDo6YWRkcmVzc29mKHZhbHVlKTsKKyAgICB9CisKKyAgICBwb2ludGVyIGFsbG9jYXRlKHNpemVfdHlwZSBzaXplLCBjb25zdF92b2lkX3BvaW50ZXIgPSAwKSB7CisgICAgICAgIHZvaWQqIHAgPSAwOworICAgICAgICBpZiAoc2l6ZSA+IDApIHsKKyAgICAgICAgICAgIHAgPSBhbGlnbmVkX2FsbG9jKG1pbl9hbGlnbiwgc2l6ZW9mKFQpICogc2l6ZSk7CisgICAgICAgICAgICBpZiAoIXApIHsKKyAgICAgICAgICAgICAgICBib29zdDo6dGhyb3dfZXhjZXB0aW9uKHN0ZDo6YmFkX2FsbG9jKCkpOworICAgICAgICAgICAgfQorICAgICAgICB9CisgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxUKj4ocCk7CisgICAgfQorCisgICAgdm9pZCBkZWFsbG9jYXRlKHBvaW50ZXIgcHRyLCBzaXplX3R5cGUpIHsKKyAgICAgICAgYm9vc3Q6OmFsaWdubWVudDo6YWxpZ25lZF9mcmVlKHB0cik7CisgICAgfQorCisgICAgQk9PU1RfQ09OU1RFWFBSIHNpemVfdHlwZSBtYXhfc2l6ZSgpIGNvbnN0IEJPT1NUX05PRVhDRVBUIHsKKyAgICAgICAgcmV0dXJuIGRldGFpbDo6bWF4X29iamVjdHM8VD46OnZhbHVlOworICAgIH0KKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX1JWQUxVRV9SRUZFUkVOQ0VTKQorI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX1ZBUklBRElDX1RFTVBMQVRFUykKKyAgICB0ZW1wbGF0ZTxjbGFzcyBVLCBjbGFzcy4uLiBBcmdzPgorICAgIHZvaWQgY29uc3RydWN0KFUqIHB0ciwgQXJncyYmLi4uIGFyZ3MpIHsKKyAgICAgICAgOjpuZXcoKHZvaWQqKXB0cikgVShzdGQ6OmZvcndhcmQ8QXJncz4oYXJncykuLi4pOworICAgIH0KKyNlbHNlCisgICAgdGVtcGxhdGU8Y2xhc3MgVSwgY2xhc3MgVj4KKyAgICB2b2lkIGNvbnN0cnVjdChVKiBwdHIsIFYmJiB2YWx1ZSkgeworICAgICAgICA6Om5ldygodm9pZCopcHRyKSBVKHN0ZDo6Zm9yd2FyZDxWPih2YWx1ZSkpOworICAgIH0KKyNlbmRpZgorI2Vsc2UKKyAgICB0ZW1wbGF0ZTxjbGFzcyBVLCBjbGFzcyBWPgorICAgIHZvaWQgY29uc3RydWN0KFUqIHB0ciwgY29uc3QgViYgdmFsdWUpIHsKKyAgICAgICAgOjpuZXcoKHZvaWQqKXB0cikgVSh2YWx1ZSk7CisgICAgfQorI2VuZGlmCisKKyAgICB0ZW1wbGF0ZTxjbGFzcyBVPgorICAgIHZvaWQgY29uc3RydWN0KFUqIHB0cikgeworICAgICAgICA6Om5ldygodm9pZCopcHRyKSBVKCk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVT4KKyAgICB2b2lkIGRlc3Ryb3koVSogcHRyKSB7CisgICAgICAgICh2b2lkKXB0cjsKKyAgICAgICAgcHRyLT5+VSgpOworICAgIH0KK307CisKK3RlbXBsYXRlPHN0ZDo6c2l6ZV90IEFsaWdubWVudD4KK2NsYXNzIGFsaWduZWRfYWxsb2NhdG9yPHZvaWQsIEFsaWdubWVudD4geworICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoZGV0YWlsOjoKKyAgICAgICAgaXNfYWxpZ25tZW50X2NvbnN0YW50PEFsaWdubWVudD46OnZhbHVlKTsKKworcHVibGljOgorICAgIHR5cGVkZWYgdm9pZCB2YWx1ZV90eXBlOworICAgIHR5cGVkZWYgdm9pZCogcG9pbnRlcjsKKyAgICB0eXBlZGVmIGNvbnN0IHZvaWQqIGNvbnN0X3BvaW50ZXI7CisKKyAgICB0ZW1wbGF0ZTxjbGFzcyBVPgorICAgIHN0cnVjdCByZWJpbmQgeworICAgICAgICB0eXBlZGVmIGFsaWduZWRfYWxsb2NhdG9yPFUsIEFsaWdubWVudD4gb3RoZXI7CisgICAgfTsKK307CisKK3RlbXBsYXRlPGNsYXNzIFQxLCBjbGFzcyBUMiwgc3RkOjpzaXplX3QgQWxpZ25tZW50PgoraW5saW5lIGJvb2wgb3BlcmF0b3I9PShjb25zdCBhbGlnbmVkX2FsbG9jYXRvcjxUMSwgQWxpZ25tZW50PiYsCisgICAgY29uc3QgYWxpZ25lZF9hbGxvY2F0b3I8VDIsIEFsaWdubWVudD4mKSBCT09TVF9OT0VYQ0VQVAoreworICAgIHJldHVybiB0cnVlOworfQorCit0ZW1wbGF0ZTxjbGFzcyBUMSwgY2xhc3MgVDIsIHN0ZDo6c2l6ZV90IEFsaWdubWVudD4KK2lubGluZSBib29sIG9wZXJhdG9yIT0oY29uc3QgYWxpZ25lZF9hbGxvY2F0b3I8VDEsIEFsaWdubWVudD4mLAorICAgIGNvbnN0IGFsaWduZWRfYWxsb2NhdG9yPFQyLCBBbGlnbm1lbnQ+JikgQk9PU1RfTk9FWENFUFQKK3sKKyAgICByZXR1cm4gZmFsc2U7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvci5ocHAKQEAgLTAsMCArMSwxNzggQEAKKy8qCisoYykgMjAxNC0yMDE2IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdORURfQUxMT0NBVE9SX0FEQVBUT1JfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdORURfQUxMT0NBVE9SX0FEQVBUT1JfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWRkcmVzc29mLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50X2NvbnN0YW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvbWF4X2FsaWduLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvbWF4X3NpemUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbmVkX2FsbG9jYXRvcl9hZGFwdG9yX2ZvcndhcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWdubWVudF9vZi5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc3RhdGljX2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8bmV3PgorCisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfQUxMT0NBVE9SKQorI2luY2x1ZGUgPG1lbW9yeT4KKyNlbmRpZgorCisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfUlZBTFVFX1JFRkVSRU5DRVMpCisjaW5jbHVkZSA8dXRpbGl0eT4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3RlbXBsYXRlPGNsYXNzIEFsbG9jYXRvciwgc3RkOjpzaXplX3QgQWxpZ25tZW50PgorY2xhc3MgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcgorICAgIDogcHVibGljIEFsbG9jYXRvciB7CisgICAgQk9PU1RfU1RBVElDX0FTU0VSVChkZXRhaWw6OgorICAgICAgICBpc19hbGlnbm1lbnRfY29uc3RhbnQ8QWxpZ25tZW50Pjo6dmFsdWUpOworCisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfQUxMT0NBVE9SKQorICAgIHR5cGVkZWYgc3RkOjphbGxvY2F0b3JfdHJhaXRzPEFsbG9jYXRvcj4gdHJhaXRzOworCisgICAgdHlwZWRlZiB0eXBlbmFtZSB0cmFpdHM6OgorICAgICAgICB0ZW1wbGF0ZSByZWJpbmRfYWxsb2M8Y2hhcj4gY2hhcl9hbGxvYzsKKworICAgIHR5cGVkZWYgdHlwZW5hbWUgdHJhaXRzOjoKKyAgICAgICAgdGVtcGxhdGUgcmViaW5kX3RyYWl0czxjaGFyPiBjaGFyX3RyYWl0czsKKworICAgIHR5cGVkZWYgdHlwZW5hbWUgY2hhcl90cmFpdHM6OnBvaW50ZXIgY2hhcl9wdHI7CisjZWxzZQorICAgIHR5cGVkZWYgdHlwZW5hbWUgQWxsb2NhdG9yOjoKKyAgICAgICAgdGVtcGxhdGUgcmViaW5kPGNoYXI+OjpvdGhlciBjaGFyX2FsbG9jOworCisgICAgdHlwZWRlZiB0eXBlbmFtZSBjaGFyX2FsbG9jOjpwb2ludGVyIGNoYXJfcHRyOworI2VuZGlmCisKK3B1YmxpYzoKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9BTExPQ0FUT1IpCisgICAgdHlwZWRlZiB0eXBlbmFtZSB0cmFpdHM6OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICB0eXBlZGVmIHR5cGVuYW1lIHRyYWl0czo6c2l6ZV90eXBlIHNpemVfdHlwZTsKKyNlbHNlCisgICAgdHlwZWRlZiB0eXBlbmFtZSBBbGxvY2F0b3I6OnZhbHVlX3R5cGUgdmFsdWVfdHlwZTsKKyAgICB0eXBlZGVmIHR5cGVuYW1lIEFsbG9jYXRvcjo6c2l6ZV90eXBlIHNpemVfdHlwZTsKKyNlbmRpZgorCisgICAgdHlwZWRlZiB2YWx1ZV90eXBlKiBwb2ludGVyOworICAgIHR5cGVkZWYgY29uc3QgdmFsdWVfdHlwZSogY29uc3RfcG9pbnRlcjsKKyAgICB0eXBlZGVmIHZvaWQqIHZvaWRfcG9pbnRlcjsKKyAgICB0eXBlZGVmIGNvbnN0IHZvaWQqIGNvbnN0X3ZvaWRfcG9pbnRlcjsKKyAgICB0eXBlZGVmIHN0ZDo6cHRyZGlmZl90IGRpZmZlcmVuY2VfdHlwZTsKKworcHJpdmF0ZToKKyAgICBlbnVtIHsKKyAgICAgICAgbWluX2FsaWduID0gZGV0YWlsOjptYXhfc2l6ZTxBbGlnbm1lbnQsCisgICAgICAgICAgICBkZXRhaWw6Om1heF9hbGlnbjx2YWx1ZV90eXBlLCBjaGFyX3B0cj46OnZhbHVlPjo6dmFsdWUKKyAgICB9OworCitwdWJsaWM6CisgICAgdGVtcGxhdGU8Y2xhc3MgVT4KKyAgICBzdHJ1Y3QgcmViaW5kIHsKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9BTExPQ0FUT1IpCisgICAgICAgIHR5cGVkZWYgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcjx0eXBlbmFtZSB0cmFpdHM6OgorICAgICAgICAgICAgdGVtcGxhdGUgcmViaW5kX2FsbG9jPFU+LCBBbGlnbm1lbnQ+IG90aGVyOworI2Vsc2UKKyAgICAgICAgdHlwZWRlZiBhbGlnbmVkX2FsbG9jYXRvcl9hZGFwdG9yPHR5cGVuYW1lIEFsbG9jYXRvcjo6CisgICAgICAgICAgICB0ZW1wbGF0ZSByZWJpbmQ8VT46Om90aGVyLCBBbGlnbm1lbnQ+IG90aGVyOworI2VuZGlmCisgICAgfTsKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0RFRkFVTFRFRF9GVU5DVElPTlMpCisgICAgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcigpID0gZGVmYXVsdDsKKyNlbHNlCisgICAgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcigpCisgICAgICAgIDogQWxsb2NhdG9yKCkgeyB9CisjZW5kaWYKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX1JWQUxVRV9SRUZFUkVOQ0VTKQorICAgIHRlbXBsYXRlPGNsYXNzIEE+CisgICAgZXhwbGljaXQgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcihBJiYgYWxsb2MpIEJPT1NUX05PRVhDRVBUCisgICAgICAgIDogQWxsb2NhdG9yKHN0ZDo6Zm9yd2FyZDxBPihhbGxvYykpIHsgfQorI2Vsc2UKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBPgorICAgIGV4cGxpY2l0IGFsaWduZWRfYWxsb2NhdG9yX2FkYXB0b3IoY29uc3QgQSYgYWxsb2MpIEJPT1NUX05PRVhDRVBUCisgICAgICAgIDogQWxsb2NhdG9yKGFsbG9jKSB7IH0KKyNlbmRpZgorCisgICAgdGVtcGxhdGU8Y2xhc3MgVT4KKyAgICBhbGlnbmVkX2FsbG9jYXRvcl9hZGFwdG9yKGNvbnN0IGFsaWduZWRfYWxsb2NhdG9yX2FkYXB0b3I8VSwKKyAgICAgICAgQWxpZ25tZW50PiYgb3RoZXIpIEJPT1NUX05PRVhDRVBUCisgICAgICAgIDogQWxsb2NhdG9yKG90aGVyLmJhc2UoKSkgeyB9CisKKyAgICBBbGxvY2F0b3ImIGJhc2UoKSBCT09TVF9OT0VYQ0VQVCB7CisgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxBbGxvY2F0b3ImPigqdGhpcyk7CisgICAgfQorCisgICAgY29uc3QgQWxsb2NhdG9yJiBiYXNlKCkgY29uc3QgQk9PU1RfTk9FWENFUFQgeworICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8Y29uc3QgQWxsb2NhdG9yJj4oKnRoaXMpOworICAgIH0KKworICAgIHBvaW50ZXIgYWxsb2NhdGUoc2l6ZV90eXBlIHNpemUpIHsKKyAgICAgICAgc3RkOjpzaXplX3QgcyA9IHNpemUgKiBzaXplb2YodmFsdWVfdHlwZSk7CisgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSBzICsgbWluX2FsaWduIC0gMTsKKyAgICAgICAgY2hhcl9hbGxvYyBhKGJhc2UoKSk7CisgICAgICAgIGNoYXJfcHRyIHAgPSBhLmFsbG9jYXRlKHNpemVvZiBwICsgbik7CisgICAgICAgIHZvaWQqIHIgPSBkZXRhaWw6OmFkZHJlc3NvZigqcCkgKyBzaXplb2YgcDsKKyAgICAgICAgKHZvaWQpYWxpZ24obWluX2FsaWduLCBzLCByLCBuKTsKKyAgICAgICAgOjpuZXcoKHZvaWQqKShzdGF0aWNfY2FzdDxjaGFyX3B0cio+KHIpIC0gMSkpIGNoYXJfcHRyKHApOworICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8cG9pbnRlcj4ocik7CisgICAgfQorCisgICAgcG9pbnRlciBhbGxvY2F0ZShzaXplX3R5cGUgc2l6ZSwgY29uc3Rfdm9pZF9wb2ludGVyIGhpbnQpIHsKKyAgICAgICAgc3RkOjpzaXplX3QgcyA9IHNpemUgKiBzaXplb2YodmFsdWVfdHlwZSk7CisgICAgICAgIHN0ZDo6c2l6ZV90IG4gPSBzICsgbWluX2FsaWduIC0gMTsKKyAgICAgICAgY2hhcl9wdHIgaCA9IGNoYXJfcHRyKCk7CisgICAgICAgIGlmIChoaW50KSB7CisgICAgICAgICAgICBoID0gKihzdGF0aWNfY2FzdDxjb25zdCBjaGFyX3B0cio+KGhpbnQpIC0gMSk7CisgICAgICAgIH0KKyAgICAgICAgY2hhcl9hbGxvYyBhKGJhc2UoKSk7CisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfQUxMT0NBVE9SKQorICAgICAgICBjaGFyX3B0ciBwID0gY2hhcl90cmFpdHM6OmFsbG9jYXRlKGEsIHNpemVvZiBwICsgbiwgaCk7CisjZWxzZQorICAgICAgICBjaGFyX3B0ciBwID0gYS5hbGxvY2F0ZShzaXplb2YgcCArIG4sIGgpOworI2VuZGlmCisgICAgICAgIHZvaWQqIHIgPSBkZXRhaWw6OmFkZHJlc3NvZigqcCkgKyBzaXplb2YgcDsKKyAgICAgICAgKHZvaWQpYWxpZ24obWluX2FsaWduLCBzLCByLCBuKTsKKyAgICAgICAgOjpuZXcoKHZvaWQqKShzdGF0aWNfY2FzdDxjaGFyX3B0cio+KHIpIC0gMSkpIGNoYXJfcHRyKHApOworICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8cG9pbnRlcj4ocik7CisgICAgfQorCisgICAgdm9pZCBkZWFsbG9jYXRlKHBvaW50ZXIgcHRyLCBzaXplX3R5cGUgc2l6ZSkgeworICAgICAgICBjaGFyX3B0ciogcCA9IChjaGFyX3B0ciopcHRyIC0gMTsKKyAgICAgICAgY2hhcl9wdHIgciA9ICpwOworICAgICAgICBwLT5+Y2hhcl9wdHIoKTsKKyAgICAgICAgY2hhcl9hbGxvYyBhKGJhc2UoKSk7CisgICAgICAgIGEuZGVhbGxvY2F0ZShyLCBzaXplb2YgciArIHNpemUgKiBzaXplb2YodmFsdWVfdHlwZSkgKworICAgICAgICAgICAgbWluX2FsaWduIC0gMSk7CisgICAgfQorfTsKKwordGVtcGxhdGU8Y2xhc3MgQTEsIGNsYXNzIEEyLCBzdGQ6OnNpemVfdCBBbGlnbm1lbnQ+CitpbmxpbmUgYm9vbCBvcGVyYXRvcj09KGNvbnN0IGFsaWduZWRfYWxsb2NhdG9yX2FkYXB0b3I8QTEsCisgICAgQWxpZ25tZW50PiYgYSwgY29uc3QgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcjxBMiwKKyAgICBBbGlnbm1lbnQ+JiBiKSBCT09TVF9OT0VYQ0VQVAoreworICAgIHJldHVybiBhLmJhc2UoKSA9PSBiLmJhc2UoKTsKK30KKwordGVtcGxhdGU8Y2xhc3MgQTEsIGNsYXNzIEEyLCBzdGQ6OnNpemVfdCBBbGlnbm1lbnQ+CitpbmxpbmUgYm9vbCBvcGVyYXRvciE9KGNvbnN0IGFsaWduZWRfYWxsb2NhdG9yX2FkYXB0b3I8QTEsCisgICAgQWxpZ25tZW50PiYgYSwgY29uc3QgYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcjxBMiwKKyAgICBBbGlnbm1lbnQ+JiBiKSBCT09TVF9OT0VYQ0VQVAoreworICAgIHJldHVybiAhKGEgPT0gYik7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25lZF9hbGxvY2F0b3JfYWRhcHRvcl9mb3J3YXJkLmhwcApAQCAtMCwwICsxLDIzIEBACisvKgorKGMpIDIwMTQgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQUxJR05FRF9BTExPQ0FUT1JfQURBUFRPUl9GT1JXQVJEX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9BTElHTkVEX0FMTE9DQVRPUl9BREFQVE9SX0ZPUldBUkRfSFBQCisKKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3RlbXBsYXRlPGNsYXNzIEFsbG9jYXRvciwgc3RkOjpzaXplX3QgQWxpZ25tZW50ID0gMT4KK2NsYXNzIGFsaWduZWRfYWxsb2NhdG9yX2FkYXB0b3I7CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25lZF9hbGxvY2F0b3JfZm9yd2FyZC5ocHAKQEAgLTAsMCArMSwyMyBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdORURfQUxMT0NBVE9SX0ZPUldBUkRfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdORURfQUxMT0NBVE9SX0ZPUldBUkRfSFBQCisKKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3RlbXBsYXRlPGNsYXNzIFQsIHN0ZDo6c2l6ZV90IEFsaWdubWVudCA9IDE+CitjbGFzcyBhbGlnbmVkX2FsbG9jYXRvcjsKKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9hbGlnbmVkX2RlbGV0ZS5ocHAKQEAgLTAsMCArMSwzMiBAQAorLyoKKyhjKSAyMDE0LTIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQUxJR05FRF9ERUxFVEVfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdORURfREVMRVRFX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vYWxpZ25lZF9hbGxvYy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vYWxpZ25lZF9kZWxldGVfZm9yd2FyZC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworc3RydWN0IGFsaWduZWRfZGVsZXRlIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgb3BlcmF0b3IoKShUKiBwdHIpIGNvbnN0CisgICAgICAgIEJPT1NUX05PRVhDRVBUX0lGKEJPT1NUX05PRVhDRVBUX0VYUFIocHRyLT5+VCgpKSkgeworICAgICAgICBpZiAocHRyKSB7CisgICAgICAgICAgICBwdHItPn5UKCk7CisgICAgICAgICAgICBib29zdDo6YWxpZ25tZW50OjphbGlnbmVkX2ZyZWUocHRyKTsKKyAgICAgICAgfQorICAgIH0KK307CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25lZF9kZWxldGVfZm9yd2FyZC5ocHAKQEAgLTAsMCArMSwyMCBAQAorLyoKKyhjKSAyMDE0LTIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQUxJR05FRF9ERUxFVEVfRk9SV0FSRF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fQUxJR05FRF9ERUxFVEVfRk9SV0FSRF9IUFAKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCitzdHJ1Y3QgYWxpZ25lZF9kZWxldGU7CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vYWxpZ25tZW50X29mLmhwcApAQCAtMCwwICsxLDUyIEBACisvKgorKGMpIDIwMTQtMjAxNiBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9BTElHTk1FTlRfT0ZfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FMSUdOTUVOVF9PRl9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9lbGVtZW50X3R5cGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWdubWVudF9vZl9mb3J3YXJkLmhwcD4KKworI2lmIGRlZmluZWQoQk9PU1RfTVNWQykKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mX21zdmMuaHBwPgorI2VsaWYgZGVmaW5lZChfX0dOVUNfXykgJiYgZGVmaW5lZChfX3VuaXhfXykgJiYgIWRlZmluZWQoX19MUDY0X18pCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWdubWVudF9vZi5ocHA+CisjZWxpZiBkZWZpbmVkKEJPT1NUX0NMQU5HKSAmJiAhZGVmaW5lZChfX3g4Nl82NF9fKQorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2YuaHBwPgorI2VsaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTFfSERSX1RZUEVfVFJBSVRTKQorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2ZfY3h4MTEuaHBwPgorI2VsaWYgZGVmaW5lZChfX2doc19fKSAmJiAoX19HSFNfVkVSU0lPTl9OVU1CRVIgPj0gNjAwKQorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2ZfZ2NjLmhwcD4KKyNlbGlmIGRlZmluZWQoX19DT0RFR0VBUkNfXykKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mX2NvZGVnZWFyLmhwcD4KKyNlbGlmIGRlZmluZWQoQk9PU1RfQ0xBTkcpCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWdubWVudF9vZl9jbGFuZy5ocHA+CisjZWxpZiBfX0dOVUNfXyA+IDQKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mX2djYy5ocHA+CisjZWxpZiAoX19HTlVDX18gPT0gNCkgJiYgKF9fR05VQ19NSU5PUl9fID49IDMpCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2FsaWdubWVudF9vZl9nY2MuaHBwPgorI2Vsc2UKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mLmhwcD4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3RlbXBsYXRlPGNsYXNzIFQ+CitzdHJ1Y3QgYWxpZ25tZW50X29mCisgICAgOiBkZXRhaWw6OmFsaWdubWVudF9vZjx0eXBlbmFtZSBkZXRhaWw6OmVsZW1lbnRfdHlwZTxUPjo6dHlwZT4geyB9OworCisjaWYgIWRlZmluZWQoQk9PU1RfTk9fQ1hYMTRfVkFSSUFCTEVfVEVNUExBVEVTKQordGVtcGxhdGU8Y2xhc3MgVD4KK2NvbnN0ZXhwciBzdGQ6OnNpemVfdCBhbGlnbm1lbnRfb2ZfdiA9IGFsaWdubWVudF9vZjxUPjo6dmFsdWU7CisjZW5kaWYKKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9hbGlnbm1lbnRfb2ZfZm9yd2FyZC5ocHAKQEAgLTAsMCArMSwyMSBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0FMSUdOTUVOVF9PRl9GT1JXQVJEX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9BTElHTk1FTlRfT0ZfRk9SV0FSRF9IUFAKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGFsaWdubWVudF9vZjsKKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9hc3N1bWVfYWxpZ25lZC5ocHAKQEAgLTAsMCArMSwyOSBAQAorLyoKKyhjKSAyMDE1IE51bVNjYWxlIFNBUworKGMpIDIwMTUgTFJJIFVNUiA4NjIzIENOUlMvVW5pdmVyc2l0eSBQYXJpcyBTdWQgWEkKKworKGMpIDIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORURfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0FTU1VNRV9BTElHTkVEX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmIGRlZmluZWQoQk9PU1RfTVNWQykKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvYXNzdW1lX2FsaWduZWRfbXN2Yy5ocHA+CisjZWxpZiBkZWZpbmVkKEJPT1NUX0NMQU5HKSAmJiBkZWZpbmVkKF9faGFzX2J1aWx0aW4pCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkX2NsYW5nLmhwcD4KKyNlbGlmIEJPT1NUX0dDQ19WRVJTSU9OID49IDQwNzAwCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkX2djYy5ocHA+CisjZWxpZiBkZWZpbmVkKF9fSU5URUxfQ09NUElMRVIpCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkX2ludGVsLmhwcD4KKyNlbHNlCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkLmhwcD4KKyNlbmRpZgorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvYWRkcmVzcy5ocHAKQEAgLTAsMCArMSwyNyBAQAorLyoKKyAoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKyBnbGVuam9mZSBhdCBnbWFpbCBkb3QgY29tCisKKyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKKyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKyBodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FERFJFU1NfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9BRERSRVNTX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY3N0ZGludC5ocHA+CisjaW5jbHVkZSA8Y3N0ZGRlZj4KKworbmFtZXNwYWNlIGJvb3N0IHsKKyAgICBuYW1lc3BhY2UgYWxpZ25tZW50IHsKKyAgICAgICAgbmFtZXNwYWNlIGRldGFpbCB7CisjaWYgZGVmaW5lZChCT09TVF9IQVNfSU5UUFRSX1QpCisgICAgICAgICAgICB0eXBlZGVmIGJvb3N0Ojp1aW50cHRyX3QgYWRkcmVzc190OworI2Vsc2UKKyAgICAgICAgICAgIHR5cGVkZWYgc3RkOjpzaXplX3QgYWRkcmVzc190OworI2VuZGlmCisgICAgICAgIH0KKyAgICB9Cit9CisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hZGRyZXNzb2YuaHBwCkBAIC0wLDAgKzEsMzQgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUREUkVTU09GX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUREUkVTU09GX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0FERFJFU1NPRikKKyNpbmNsdWRlIDxtZW1vcnk+CisjZWxzZQorI2luY2x1ZGUgPGJvb3N0L2NvcmUvYWRkcmVzc29mLmhwcD4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0FERFJFU1NPRikKK3VzaW5nIHN0ZDo6YWRkcmVzc29mOworI2Vsc2UKK3VzaW5nIGJvb3N0OjphZGRyZXNzb2Y7CisjZW5kaWYKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbi5ocHAKQEAgLTAsMCArMSwzOCBAQAorLyoKKyhjKSAyMDE0LTIwMTYgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05fSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK2lubGluZSB2b2lkKiBhbGlnbihzdGQ6OnNpemVfdCBhbGlnbm1lbnQsIHN0ZDo6c2l6ZV90IHNpemUsCisgICAgdm9pZComIHB0ciwgc3RkOjpzaXplX3QmIHNwYWNlKQoreworICAgIEJPT1NUX0FTU0VSVChkZXRhaWw6OmlzX2FsaWdubWVudChhbGlnbm1lbnQpKTsKKyAgICBpZiAoc2l6ZSA8PSBzcGFjZSkgeworICAgICAgICBjaGFyKiBwID0gKGNoYXIqKSgoKHN0ZDo6c2l6ZV90KXB0ciArIGFsaWdubWVudCAtIDEpICYKKyAgICAgICAgICAgIH4oYWxpZ25tZW50IC0gMSkpOworICAgICAgICBzdGQ6OnNpemVfdCBuID0gc3BhY2UgLSAocCAtIHN0YXRpY19jYXN0PGNoYXIqPihwdHIpKTsKKyAgICAgICAgaWYgKHNpemUgPD0gbikgeworICAgICAgICAgICAgcHRyID0gcDsKKyAgICAgICAgICAgIHNwYWNlID0gbjsKKyAgICAgICAgICAgIHJldHVybiBwOworICAgICAgICB9CisgICAgfQorICAgIHJldHVybiAwOworfQorCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbl9jeHgxMS5ocHAKQEAgLTAsMCArMSwyMiBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTl9DWFgxMV9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOX0NYWDExX0hQUAorCisjaW5jbHVkZSA8bWVtb3J5PgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK3VzaW5nIHN0ZDo6YWxpZ247CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2FsaWduX2Rvd24uaHBwCkBAIC0wLDAgKzEsMjggQEAKKy8qCisoYykgMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05fRE9XTl9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOX0RPV05fSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbl9kb3duX2ZvcndhcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworaW5saW5lIHZvaWQqIGFsaWduX2Rvd24odm9pZCogcHRyLCBzdGQ6OnNpemVfdCBhbGlnbm1lbnQpIEJPT1NUX05PRVhDRVBUCit7CisgICAgQk9PU1RfQVNTRVJUKGRldGFpbDo6aXNfYWxpZ25tZW50KGFsaWdubWVudCkpOworICAgIHJldHVybiAodm9pZCopKGFsaWduX2Rvd24oKHN0ZDo6c2l6ZV90KXB0ciwgYWxpZ25tZW50KSk7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2FsaWduX3VwLmhwcApAQCAtMCwwICsxLDI4IEBACisvKgorKGMpIDIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOX1VQX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05fVVBfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbl91cF9mb3J3YXJkLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK2lubGluZSB2b2lkKiBhbGlnbl91cCh2b2lkKiBwdHIsIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkgQk9PU1RfTk9FWENFUFQKK3sKKyAgICBCT09TVF9BU1NFUlQoZGV0YWlsOjppc19hbGlnbm1lbnQoYWxpZ25tZW50KSk7CisgICAgcmV0dXJuICh2b2lkKikoYWxpZ25fdXAoKHN0ZDo6c2l6ZV90KXB0ciwgYWxpZ25tZW50KSk7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2MuaHBwCkBAIC0wLDAgKzEsNTIgQEAKKy8qCisoYykgMjAxNC0yMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTkVEX0FMTE9DX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pc19hbGlnbm1lbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FsaWduL2FsaWduLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbm1lbnRfb2YuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8Y3N0ZGxpYj4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCitpbmxpbmUgdm9pZCogYWxpZ25lZF9hbGxvYyhzdGQ6OnNpemVfdCBhbGlnbm1lbnQsIHN0ZDo6c2l6ZV90IHNpemUpCisgICAgQk9PU1RfTk9FWENFUFQKK3sKKyAgICBCT09TVF9BU1NFUlQoZGV0YWlsOjppc19hbGlnbm1lbnQoYWxpZ25tZW50KSk7CisgICAgZW51bSB7CisgICAgICAgIG1pbl9hbGlnbiA9IGFsaWdubWVudF9vZjx2b2lkKj46OnZhbHVlCisgICAgfTsKKyAgICBpZiAoYWxpZ25tZW50IDwgbWluX2FsaWduKSB7CisgICAgICAgIGFsaWdubWVudCA9IG1pbl9hbGlnbjsKKyAgICB9CisgICAgc3RkOjpzaXplX3QgbiA9IHNpemUgKyBhbGlnbm1lbnQgLSBtaW5fYWxpZ247CisgICAgdm9pZCogciA9IDA7CisgICAgdm9pZCogcCA9IHN0ZDo6bWFsbG9jKHNpemVvZih2b2lkKikgKyBuKTsKKyAgICBpZiAocCkgeworICAgICAgICByID0gc3RhdGljX2Nhc3Q8Y2hhcio+KHApICsgc2l6ZW9mIHA7CisgICAgICAgICh2b2lkKWFsaWduKGFsaWdubWVudCwgc2l6ZSwgciwgbik7CisgICAgICAgICooc3RhdGljX2Nhc3Q8dm9pZCoqPihyKSAtIDEpID0gcDsKKyAgICB9CisgICAgcmV0dXJuIHI7Cit9CisKK2lubGluZSB2b2lkIGFsaWduZWRfZnJlZSh2b2lkKiBwdHIpIEJPT1NUX05PRVhDRVBUCit7CisgICAgaWYgKHB0cikgeworICAgICAgICBzdGQ6OmZyZWUoKihzdGF0aWNfY2FzdDx2b2lkKio+KHB0cikgLSAxKSk7CisgICAgfQorfQorCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbmVkX2FsbG9jX2FuZHJvaWQuaHBwCkBAIC0wLDAgKzEsMzQgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19BTkRST0lEX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19BTkRST0lEX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2lzX2FsaWdubWVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxtYWxsb2MuaD4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCitpbmxpbmUgdm9pZCogYWxpZ25lZF9hbGxvYyhzdGQ6OnNpemVfdCBhbGlnbm1lbnQsIHN0ZDo6c2l6ZV90IHNpemUpCisgICAgQk9PU1RfTk9FWENFUFQKK3sKKyAgICBCT09TVF9BU1NFUlQoZGV0YWlsOjppc19hbGlnbm1lbnQoYWxpZ25tZW50KSk7CisgICAgcmV0dXJuIDo6bWVtYWxpZ24oYWxpZ25tZW50LCBzaXplKTsKK30KKworaW5saW5lIHZvaWQgYWxpZ25lZF9mcmVlKHZvaWQqIHB0cikgQk9PU1RfTk9FWENFUFQKK3sKKyAgICA6OmZyZWUocHRyKTsKK30KKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19tYWNvcy5ocHAKQEAgLTAsMCArMSw0NCBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTkVEX0FMTE9DX01BQ09TX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19NQUNPU19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pc19hbGlnbm1lbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8c3RkbGliLmg+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworaW5saW5lIHZvaWQqIGFsaWduZWRfYWxsb2Moc3RkOjpzaXplX3QgYWxpZ25tZW50LCBzdGQ6OnNpemVfdCBzaXplKQorICAgIEJPT1NUX05PRVhDRVBUCit7CisgICAgQk9PU1RfQVNTRVJUKGRldGFpbDo6aXNfYWxpZ25tZW50KGFsaWdubWVudCkpOworICAgIGlmIChzaXplID09IDApIHsKKyAgICAgICAgcmV0dXJuIDA7CisgICAgfQorICAgIGlmIChhbGlnbm1lbnQgPCBzaXplb2Yodm9pZCopKSB7CisgICAgICAgIGFsaWdubWVudCA9IHNpemVvZih2b2lkKik7CisgICAgfQorICAgIHZvaWQqIHA7CisgICAgaWYgKDo6cG9zaXhfbWVtYWxpZ24oJnAsIGFsaWdubWVudCwgc2l6ZSkgIT0gMCkgeworICAgICAgICBwID0gMDsKKyAgICB9CisgICAgcmV0dXJuIHA7Cit9CisKK2lubGluZSB2b2lkIGFsaWduZWRfZnJlZSh2b2lkKiBwdHIpIEJPT1NUX05PRVhDRVBUCit7CisgICAgOjpmcmVlKHB0cik7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2NfbXN2Yy5ocHAKQEAgLTAsMCArMSwzNCBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTkVEX0FMTE9DX01TVkNfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTkVEX0FMTE9DX01TVkNfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPG1hbGxvYy5oPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK2lubGluZSB2b2lkKiBhbGlnbmVkX2FsbG9jKHN0ZDo6c2l6ZV90IGFsaWdubWVudCwgc3RkOjpzaXplX3Qgc2l6ZSkKKyAgICBCT09TVF9OT0VYQ0VQVAoreworICAgIEJPT1NUX0FTU0VSVChkZXRhaWw6OmlzX2FsaWdubWVudChhbGlnbm1lbnQpKTsKKyAgICByZXR1cm4gOjpfYWxpZ25lZF9tYWxsb2Moc2l6ZSwgYWxpZ25tZW50KTsKK30KKworaW5saW5lIHZvaWQgYWxpZ25lZF9mcmVlKHZvaWQqIHB0cikgQk9PU1RfTk9FWENFUFQKK3sKKyAgICA6Ol9hbGlnbmVkX2ZyZWUocHRyKTsKK30KKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25lZF9hbGxvY19wb3NpeC5ocHAKQEAgLTAsMCArMSw0MSBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTkVEX0FMTE9DX1BPU0lYX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19QT1NJWF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pc19hbGlnbm1lbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8c3RkbGliLmg+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworaW5saW5lIHZvaWQqIGFsaWduZWRfYWxsb2Moc3RkOjpzaXplX3QgYWxpZ25tZW50LCBzdGQ6OnNpemVfdCBzaXplKQorICAgIEJPT1NUX05PRVhDRVBUCit7CisgICAgQk9PU1RfQVNTRVJUKGRldGFpbDo6aXNfYWxpZ25tZW50KGFsaWdubWVudCkpOworICAgIGlmIChhbGlnbm1lbnQgPCBzaXplb2Yodm9pZCopKSB7CisgICAgICAgIGFsaWdubWVudCA9IHNpemVvZih2b2lkKik7CisgICAgfQorICAgIHZvaWQqIHA7CisgICAgaWYgKDo6cG9zaXhfbWVtYWxpZ24oJnAsIGFsaWdubWVudCwgc2l6ZSkgIT0gMCkgeworICAgICAgICBwID0gMDsKKyAgICB9CisgICAgcmV0dXJuIHA7Cit9CisKK2lubGluZSB2b2lkIGFsaWduZWRfZnJlZSh2b2lkKiBwdHIpIEJPT1NUX05PRVhDRVBUCit7CisgICAgOjpmcmVlKHB0cik7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2FsaWduZWRfYWxsb2Nfc3Vub3MuaHBwCkBAIC0wLDAgKzEsMzQgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05FRF9BTExPQ19TVU5PU19IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdORURfQUxMT0NfU1VOT1NfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPHN0ZGxpYi5oPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CisKK2lubGluZSB2b2lkKiBhbGlnbmVkX2FsbG9jKHN0ZDo6c2l6ZV90IGFsaWdubWVudCwgc3RkOjpzaXplX3Qgc2l6ZSkKKyAgICBCT09TVF9OT0VYQ0VQVAoreworICAgIEJPT1NUX0FTU0VSVChkZXRhaWw6OmlzX2FsaWdubWVudChhbGlnbm1lbnQpKTsKKyAgICByZXR1cm4gOjptZW1hbGlnbihhbGlnbm1lbnQsIHNpemUpOworfQorCitpbmxpbmUgdm9pZCBhbGlnbmVkX2ZyZWUodm9pZCogcHRyKSBCT09TVF9OT0VYQ0VQVAoreworICAgIDo6ZnJlZShwdHIpOworfQorCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2YuaHBwCkBAIC0wLDAgKzEsMzIgQEAKKy8qCisoYykgMjAxNC0yMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTk1FTlRfT0ZfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTk1FTlRfT0ZfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvbWluX3NpemUuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCBhbGlnbm9mX2hlbHBlciB7CisgICAgY2hhciB2YWx1ZTsKKyAgICBUIG9iamVjdDsKK307CisKK3RlbXBsYXRlPGNsYXNzIFQ+CitzdHJ1Y3QgYWxpZ25tZW50X29mCisgICAgOiBtaW5fc2l6ZTxzaXplb2YoVCksIHNpemVvZihhbGlnbm9mX2hlbHBlcjxUPikgLSBzaXplb2YoVCk+IHsgfTsKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2ZfY2xhbmcuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX0NMQU5HX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX0NMQU5HX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2ludGVncmFsX2NvbnN0YW50LmhwcD4KKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCBhbGlnbm1lbnRfb2YKKyAgICA6IGludGVncmFsX2NvbnN0YW50PHN0ZDo6c2l6ZV90LCBfX2FsaWdub2YoVCk+IHsgfTsKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2ZfY29kZWdlYXIuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX0NPREVHRUFSX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX0NPREVHRUFSX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2ludGVncmFsX2NvbnN0YW50LmhwcD4KKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCBhbGlnbm1lbnRfb2YKKyAgICA6IGludGVncmFsX2NvbnN0YW50PHN0ZDo6c2l6ZV90LCBhbGlnbm9mKFQpPiB7IH07CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mX2N4eDExLmhwcApAQCAtMCwwICsxLDI0IEBACisvKgorKGMpIDIwMTQgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOTUVOVF9PRl9DWFgxMV9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOTUVOVF9PRl9DWFgxMV9IUFAKKworI2luY2x1ZGUgPHR5cGVfdHJhaXRzPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordXNpbmcgc3RkOjphbGlnbm1lbnRfb2Y7CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvYWxpZ25tZW50X29mX2djYy5ocHAKQEAgLTAsMCArMSwyNyBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BTElHTk1FTlRfT0ZfR0NDX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX0dDQ19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pbnRlZ3JhbF9jb25zdGFudC5ocHA+CisjaW5jbHVkZSA8Y3N0ZGRlZj4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK3RlbXBsYXRlPGNsYXNzIFQ+CitzdHJ1Y3QgYWxpZ25tZW50X29mCisgICAgOiBpbnRlZ3JhbF9jb25zdGFudDxzdGQ6OnNpemVfdCwgX19hbGlnbm9mX18oVCk+IHsgfTsKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hbGlnbm1lbnRfb2ZfbXN2Yy5ocHAKQEAgLTAsMCArMSwzNCBAQAorLyoKKyhjKSAyMDE0LTIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FMSUdOTUVOVF9PRl9NU1ZDX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQUxJR05NRU5UX09GX01TVkNfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvbWluX3NpemUuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCBhbGlnbm9mX2hlbHBlciB7CisgICAgVCBmaXJzdDsKKyAgICBjaGFyIHZhbHVlOworICAgIFQgc2Vjb25kOworfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCBhbGlnbm1lbnRfb2YKKyAgICA6IG1pbl9zaXplPHNpemVvZihUKSwKKyAgICAgICAgc2l6ZW9mKGFsaWdub2ZfaGVscGVyPFQ+KSAtIChzaXplb2YoVCkgPDwgMSk+IHsgfTsKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hc3N1bWVfYWxpZ25lZC5ocHAKQEAgLTAsMCArMSwxNyBAQAorLyoKKyhjKSAyMDE1IE51bVNjYWxlIFNBUworKGMpIDIwMTUgTFJJIFVNUiA4NjIzIENOUlMvVW5pdmVyc2l0eSBQYXJpcyBTdWQgWEkKKworKGMpIDIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FTU1VNRV9BTElHTkVEX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQVNTVU1FX0FMSUdORURfSFBQCisKKyNkZWZpbmUgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORUQocCwgbikKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkX2NsYW5nLmhwcApAQCAtMCwwICsxLDE5IEBACisvKgorKGMpIDIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FTU1VNRV9BTElHTkVEX0NMQU5HX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQVNTVU1FX0FMSUdORURfQ0xBTkdfSFBQCisKKyNpZiBfX2hhc19idWlsdGluKF9fYnVpbHRpbl9hc3N1bWVfYWxpZ25lZCkKKyNkZWZpbmUgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORUQocCwgbikgXAorKHApID0gKF9fdHlwZW9mX18ocCkpKF9fYnVpbHRpbl9hc3N1bWVfYWxpZ25lZCgocCksIChuKSkpCisjZWxzZQorI2RlZmluZSBCT09TVF9BTElHTl9BU1NVTUVfQUxJR05FRChwLCBuKQorI2VuZGlmCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hc3N1bWVfYWxpZ25lZF9nY2MuaHBwCkBAIC0wLDAgKzEsMTggQEAKKy8qCisoYykgMjAxNSBOdW1TY2FsZSBTQVMKKyhjKSAyMDE1IExSSSBVTVIgODYyMyBDTlJTL1VuaXZlcnNpdHkgUGFyaXMgU3VkIFhJCisKKyhjKSAyMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BU1NVTUVfQUxJR05FRF9HQ0NfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9BU1NVTUVfQUxJR05FRF9HQ0NfSFBQCisKKyNkZWZpbmUgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORUQocCwgbikgXAorKHApID0gKF9fdHlwZW9mX18ocCkpKF9fYnVpbHRpbl9hc3N1bWVfYWxpZ25lZCgocCksIChuKSkpCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9hc3N1bWVfYWxpZ25lZF9pbnRlbC5ocHAKQEAgLTAsMCArMSwxOCBAQAorLyoKKyhjKSAyMDE1IE51bVNjYWxlIFNBUworKGMpIDIwMTUgTFJJIFVNUiA4NjIzIENOUlMvVW5pdmVyc2l0eSBQYXJpcyBTdWQgWEkKKworKGMpIDIwMTUgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0FTU1VNRV9BTElHTkVEX0lOVEVMX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQVNTVU1FX0FMSUdORURfSU5URUxfSFBQCisKKyNkZWZpbmUgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORUQocCwgbikgXAorX19hc3N1bWVfYWxpZ25lZCgocCksIChuKSkKKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2Fzc3VtZV9hbGlnbmVkX21zdmMuaHBwCkBAIC0wLDAgKzEsMjAgQEAKKy8qCisoYykgMjAxNSBOdW1TY2FsZSBTQVMKKyhjKSAyMDE1IExSSSBVTVIgODYyMyBDTlJTL1VuaXZlcnNpdHkgUGFyaXMgU3VkIFhJCisKKyhjKSAyMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9BU1NVTUVfQUxJR05FRF9NU1ZDX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfQVNTVU1FX0FMSUdORURfTVNWQ19IUFAKKworI2luY2x1ZGUgPGNzdGRkZWY+CisKKyNkZWZpbmUgQk9PU1RfQUxJR05fQVNTVU1FX0FMSUdORUQocCwgbikgXAorX19hc3N1bWUoKChzdGQ6OnNpemVfdCkocCkgJiAoKG4pIC0gMSkpID09IDApCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9lbGVtZW50X3R5cGUuaHBwCkBAIC0wLDAgKzEsOTMgQEAKKy8qCisoYykgMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfRUxFTUVOVF9UWVBFX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfRUxFTUVOVF9UWVBFX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0hEUl9UWVBFX1RSQUlUUykKKyNpbmNsdWRlIDx0eXBlX3RyYWl0cz4KKyNlbHNlCisjaW5jbHVkZSA8Y3N0ZGRlZj4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0hEUl9UWVBFX1RSQUlUUykKK3VzaW5nIHN0ZDo6cmVtb3ZlX3JlZmVyZW5jZTsKK3VzaW5nIHN0ZDo6cmVtb3ZlX2FsbF9leHRlbnRzOwordXNpbmcgc3RkOjpyZW1vdmVfY3Y7CisjZWxzZQordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfcmVmZXJlbmNlIHsKKyAgICB0eXBlZGVmIFQgdHlwZTsKK307CisKK3RlbXBsYXRlPGNsYXNzIFQ+CitzdHJ1Y3QgcmVtb3ZlX3JlZmVyZW5jZTxUJj4geworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX1JWQUxVRV9SRUZFUkVOQ0VTKQordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfcmVmZXJlbmNlPFQmJj4geworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IHJlbW92ZV9hbGxfZXh0ZW50cyB7CisgICAgdHlwZWRlZiBUIHR5cGU7Cit9OworCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IHJlbW92ZV9hbGxfZXh0ZW50czxUW10+CisgICAgOiByZW1vdmVfYWxsX2V4dGVudHM8VD4geyB9OworCit0ZW1wbGF0ZTxjbGFzcyBULCBzdGQ6OnNpemVfdCBOPgorc3RydWN0IHJlbW92ZV9hbGxfZXh0ZW50czxUW05dPgorICAgIDogcmVtb3ZlX2FsbF9leHRlbnRzPFQ+IHsgfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfY29uc3QgeworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfY29uc3Q8Y29uc3QgVD4geworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfdm9sYXRpbGUgeworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfdm9sYXRpbGU8dm9sYXRpbGUgVD4geworICAgIHR5cGVkZWYgVCB0eXBlOworfTsKKwordGVtcGxhdGU8Y2xhc3MgVD4KK3N0cnVjdCByZW1vdmVfY3YKKyAgICA6IHJlbW92ZV92b2xhdGlsZTx0eXBlbmFtZSByZW1vdmVfY29uc3Q8VD46OnR5cGU+IHsgfTsKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGVsZW1lbnRfdHlwZQorICAgIDogcmVtb3ZlX2N2PHR5cGVuYW1lIHJlbW92ZV9hbGxfZXh0ZW50czx0eXBlbmFtZQorICAgICAgICByZW1vdmVfcmVmZXJlbmNlPFQ+Ojp0eXBlPjo6dHlwZT4geyB9OworCit9IC8qIC5kZXRhaWwgKi8KK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2ludGVncmFsX2NvbnN0YW50LmhwcApAQCAtMCwwICsxLDQ2IEBACisvKgorKGMpIDIwMTQtMjAxNiBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfSU5URUdSQUxfQ09OU1RBTlRfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9JTlRFR1JBTF9DT05TVEFOVF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9IRFJfVFlQRV9UUkFJVFMpCisjaW5jbHVkZSA8dHlwZV90cmFpdHM+CisjZW5kaWYKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworbmFtZXNwYWNlIGRldGFpbCB7CisKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9IRFJfVFlQRV9UUkFJVFMpCit1c2luZyBzdGQ6OmludGVncmFsX2NvbnN0YW50OworI2Vsc2UKK3RlbXBsYXRlPGNsYXNzIFQsIFQgVmFsdWU+CitzdHJ1Y3QgaW50ZWdyYWxfY29uc3RhbnQgeworICAgIHR5cGVkZWYgVCB2YWx1ZV90eXBlOworICAgIHR5cGVkZWYgaW50ZWdyYWxfY29uc3RhbnQgdHlwZTsKKworICAgIEJPT1NUX0NPTlNURVhQUiBvcGVyYXRvciB2YWx1ZV90eXBlKCkgY29uc3QgQk9PU1RfTk9FWENFUFQgeworICAgICAgICByZXR1cm4gVmFsdWU7CisgICAgfQorCisgICAgQk9PU1RfQ09OU1RFWFBSIHZhbHVlX3R5cGUgb3BlcmF0b3IoKSgpIGNvbnN0IEJPT1NUX05PRVhDRVBUIHsKKyAgICAgICAgcmV0dXJuIFZhbHVlOworICAgIH0KKworICAgIEJPT1NUX1NUQVRJQ19DT05TVEVYUFIgVCB2YWx1ZSA9IFZhbHVlOworfTsKKyNlbmRpZgorCit9IC8qIC5kZXRhaWwgKi8KK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2lzX2FsaWduZWQuaHBwCkBAIC0wLDAgKzEsMzYgQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfSVNfQUxJR05FRF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0lTX0FMSUdORURfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9pc19hbGlnbmVkX2ZvcndhcmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKKworaW5saW5lIGJvb2wgaXNfYWxpZ25lZChjb25zdCB2b2lkKiBwdHIsIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkKKyAgICBCT09TVF9OT0VYQ0VQVAoreworICAgIEJPT1NUX0FTU0VSVChkZXRhaWw6OmlzX2FsaWdubWVudChhbGlnbm1lbnQpKTsKKyAgICByZXR1cm4gaXNfYWxpZ25lZCgoc3RkOjpzaXplX3QpcHRyLCBhbGlnbm1lbnQpOworfQorCitpbmxpbmUgYm9vbCBpc19hbGlnbmVkKHN0ZDo6c2l6ZV90IGFsaWdubWVudCwgY29uc3Qgdm9pZCogcHRyKQorICAgIEJPT1NUX05PRVhDRVBUCit7CisgICAgQk9PU1RfQVNTRVJUKGRldGFpbDo6aXNfYWxpZ25tZW50KGFsaWdubWVudCkpOworICAgIHJldHVybiBpc19hbGlnbmVkKChzdGQ6OnNpemVfdClwdHIsIGFsaWdubWVudCk7Cit9CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL2lzX2FsaWdubWVudC5ocHAKQEAgLTAsMCArMSwyOSBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9JU19BTElHTk1FTlRfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9JU19BTElHTk1FTlRfSFBQCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGNzdGRkZWY+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKK25hbWVzcGFjZSBkZXRhaWwgeworCitCT09TVF9DT05TVEVYUFIgaW5saW5lIGJvb2wgaXNfYWxpZ25tZW50KHN0ZDo6c2l6ZV90IHZhbHVlKQorICAgIEJPT1NUX05PRVhDRVBUCit7CisgICAgcmV0dXJuICh2YWx1ZSA+IDApICYmICgodmFsdWUgJiAodmFsdWUgLSAxKSkgPT0gMCk7Cit9CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25tZW50X2NvbnN0YW50LmhwcApAQCAtMCwwICsxLDI3IEBACisvKgorKGMpIDIwMTQgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX0lTX0FMSUdOTUVOVF9DT05TVEFOVF9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX0lTX0FMSUdOTUVOVF9DT05TVEFOVF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pbnRlZ3JhbF9jb25zdGFudC5ocHA+CisjaW5jbHVkZSA8Y3N0ZGRlZj4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK3RlbXBsYXRlPHN0ZDo6c2l6ZV90IE4+CitzdHJ1Y3QgaXNfYWxpZ25tZW50X2NvbnN0YW50CisgICAgOiBpbnRlZ3JhbF9jb25zdGFudDxib29sLCAoTiA+IDApICYmICgoTiAmIChOIC0gMSkpID09IDApPiB7IH07CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvbWF4X2FsaWduLmhwcApAQCAtMCwwICsxLDI3IEBACisvKgorKGMpIDIwMTQtMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfTUFYX0FMSUdOX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfTUFYX0FMSUdOX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL21heF9zaXplLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hbGlnbi9hbGlnbm1lbnRfb2YuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8Y2xhc3MgQSwgY2xhc3MgQj4KK3N0cnVjdCBtYXhfYWxpZ24KKyAgICA6IG1heF9zaXplPGFsaWdubWVudF9vZjxBPjo6dmFsdWUsIGFsaWdubWVudF9vZjxCPjo6dmFsdWU+IHsgfTsKKworfSAvKiAuZGV0YWlsICovCit9IC8qIC5hbGlnbm1lbnQgKi8KK30gLyogLmJvb3N0ICovCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FsaWduL2RldGFpbC9tYXhfY291bnRfb2YuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisgKGMpIDIwMTQgR2xlbiBKb3NlcGggRmVybmFuZGVzCisgZ2xlbmpvZmUgYXQgZ21haWwgZG90IGNvbQorCisgRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCisgTGljZW5zZSwgVmVyc2lvbiAxLjAuCisgaHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9NQVhfQ09VTlRfT0ZfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9NQVhfQ09VTlRfT0ZfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaW50ZWdyYWxfY29uc3RhbnQuaHBwPgorI2luY2x1ZGUgPGNzdGRkZWY+CisKK25hbWVzcGFjZSBib29zdCB7CisgICAgbmFtZXNwYWNlIGFsaWdubWVudCB7CisgICAgICAgIG5hbWVzcGFjZSBkZXRhaWwgeworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCBtYXhfY291bnRfb2YKKyAgICAgICAgICAgICAgICA6IGludGVncmFsX2NvbnN0YW50PHN0ZDo6c2l6ZV90LAorICAgICAgICAgICAgICAgICAgICB+c3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KDApIC8gc2l6ZW9mKFQpPiB7CisgICAgICAgICAgICB9OworICAgICAgICB9CisgICAgfQorfQorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvbWF4X29iamVjdHMuaHBwCkBAIC0wLDAgKzEsMjggQEAKKy8qCisoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9ERVRBSUxfTUFYX09CSkVDVFNfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9NQVhfT0JKRUNUU19IUFAKKworI2luY2x1ZGUgPGJvb3N0L2FsaWduL2RldGFpbC9pbnRlZ3JhbF9jb25zdGFudC5ocHA+CisjaW5jbHVkZSA8Y3N0ZGRlZj4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK3RlbXBsYXRlPGNsYXNzIFQ+CitzdHJ1Y3QgbWF4X29iamVjdHMKKyAgICA6IGludGVncmFsX2NvbnN0YW50PHN0ZDo6c2l6ZV90LAorICAgICAgICB+c3RhdGljX2Nhc3Q8c3RkOjpzaXplX3Q+KDApIC8gc2l6ZW9mKFQpPiB7IH07CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvbWF4X3NpemUuaHBwCkBAIC0wLDAgKzEsMjcgQEAKKy8qCisoYykgMjAxNC0yMDE1IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0RFVEFJTF9NQVhfU0laRV9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05fREVUQUlMX01BWF9TSVpFX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vZGV0YWlsL2ludGVncmFsX2NvbnN0YW50LmhwcD4KKyNpbmNsdWRlIDxjc3RkZGVmPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFsaWdubWVudCB7CituYW1lc3BhY2UgZGV0YWlsIHsKKwordGVtcGxhdGU8c3RkOjpzaXplX3QgQSwgc3RkOjpzaXplX3QgQj4KK3N0cnVjdCBtYXhfc2l6ZQorICAgIDogaW50ZWdyYWxfY29uc3RhbnQ8c3RkOjpzaXplX3QsIChBID4gQikgPyBBIDogQj4geyB9OworCit9IC8qIC5kZXRhaWwgKi8KK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vZGV0YWlsL21pbl9zaXplLmhwcApAQCAtMCwwICsxLDI3IEBACisvKgorKGMpIDIwMTQgR2xlbiBKb3NlcGggRmVybmFuZGVzCis8Z2xlbmpvZmUgLWF0LSBnbWFpbC5jb20+CisKK0Rpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZQorTGljZW5zZSwgVmVyc2lvbiAxLjAuCitodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX01JTl9TSVpFX0hQUAorI2RlZmluZSBCT09TVF9BTElHTl9ERVRBSUxfTUlOX1NJWkVfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaW50ZWdyYWxfY29uc3RhbnQuaHBwPgorI2luY2x1ZGUgPGNzdGRkZWY+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYWxpZ25tZW50IHsKK25hbWVzcGFjZSBkZXRhaWwgeworCit0ZW1wbGF0ZTxzdGQ6OnNpemVfdCBBLCBzdGQ6OnNpemVfdCBCPgorc3RydWN0IG1pbl9zaXplCisgICAgOiBpbnRlZ3JhbF9jb25zdGFudDxzdGQ6OnNpemVfdCwgKEEgPCBCKSA/IEEgOiBCPiB7IH07CisKK30gLyogLmRldGFpbCAqLworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvb2Zmc2V0X29iamVjdC5ocHAKQEAgLTAsMCArMSwyNCBAQAorLyoKKyAoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKyBnbGVuam9mZSBhdCBnbWFpbCBkb3QgY29tCisKKyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKKyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKyBodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX09GRlNFVF9PQkpFQ1RfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9PRkZTRVRfT0JKRUNUX0hQUAorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGlnbm1lbnQgeworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKyAgICAgICAgICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgICAgICAgICBzdHJ1Y3Qgb2Zmc2V0X29iamVjdCB7CisgICAgICAgICAgICAgICAgY2hhciBvZmZzZXQ7CisgICAgICAgICAgICAgICAgVCBvYmplY3Q7CisgICAgICAgICAgICB9OworICAgICAgICB9CisgICAgfQorfQorCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9kZXRhaWwvcmVtb3ZlX3RyYWl0cy5ocHAKQEAgLTAsMCArMSw5MCBAQAorLyoKKyAoYykgMjAxNCBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKyBnbGVuam9mZSBhdCBnbWFpbCBkb3QgY29tCisKKyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKKyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KKyBodHRwOi8vYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dAorKi8KKyNpZm5kZWYgQk9PU1RfQUxJR05fREVUQUlMX1JFTU9WRV9UUkFJVFNfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0RFVEFJTF9SRU1PVkVfVFJBSVRTX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmICFkZWZpbmVkKEJPT1NUX05PX0NYWDExX0hEUl9UWVBFX1RSQUlUUykKKyNpbmNsdWRlIDx0eXBlX3RyYWl0cz4KKyNlbHNlCisjaW5jbHVkZSA8Y3N0ZGRlZj4KKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworICAgIG5hbWVzcGFjZSBhbGlnbm1lbnQgeworICAgICAgICBuYW1lc3BhY2UgZGV0YWlsIHsKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9IRFJfVFlQRV9UUkFJVFMpCisgICAgICAgICAgICB1c2luZyBzdGQ6OnJlbW92ZV9yZWZlcmVuY2U7CisgICAgICAgICAgICB1c2luZyBzdGQ6OnJlbW92ZV9hbGxfZXh0ZW50czsKKyAgICAgICAgICAgIHVzaW5nIHN0ZDo6cmVtb3ZlX2N2OworI2Vsc2UKKyAgICAgICAgICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgICAgICAgICBzdHJ1Y3QgcmVtb3ZlX3JlZmVyZW5jZSB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiBUIHR5cGU7CisgICAgICAgICAgICB9OworCisgICAgICAgICAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgICAgICAgICAgc3RydWN0IHJlbW92ZV9yZWZlcmVuY2U8VCY+IHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIFQgdHlwZTsKKyAgICAgICAgICAgIH07CisKKyNpZiAhZGVmaW5lZChCT09TVF9OT19DWFgxMV9SVkFMVUVfUkVGRVJFTkNFUykKKyAgICAgICAgICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgICAgICAgICBzdHJ1Y3QgcmVtb3ZlX3JlZmVyZW5jZTxUJiY+IHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIFQgdHlwZTsKKyAgICAgICAgICAgIH07CisjZW5kaWYKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfYWxsX2V4dGVudHMgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgVCB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfYWxsX2V4dGVudHM8VFtdPiB7CisgICAgICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSByZW1vdmVfYWxsX2V4dGVudHM8VD46OnR5cGUgdHlwZTsKKyAgICAgICAgICAgIH07CisKKyAgICAgICAgICAgIHRlbXBsYXRlPGNsYXNzIFQsIHN0ZDo6c2l6ZV90IE4+CisgICAgICAgICAgICBzdHJ1Y3QgcmVtb3ZlX2FsbF9leHRlbnRzPFRbTl0+IHsKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIHJlbW92ZV9hbGxfZXh0ZW50czxUPjo6dHlwZSB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfY29uc3QgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgVCB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfY29uc3Q8Y29uc3QgVD4geworICAgICAgICAgICAgICAgIHR5cGVkZWYgVCB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfdm9sYXRpbGUgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgVCB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfdm9sYXRpbGU8dm9sYXRpbGUgVD4geworICAgICAgICAgICAgICAgIHR5cGVkZWYgVCB0eXBlOworICAgICAgICAgICAgfTsKKworICAgICAgICAgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICAgICAgICAgIHN0cnVjdCByZW1vdmVfY3YgeworICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgcmVtb3ZlX3ZvbGF0aWxlPHR5cGVuYW1lCisgICAgICAgICAgICAgICAgICAgIHJlbW92ZV9jb25zdDxUPjo6dHlwZT46OnR5cGUgdHlwZTsKKyAgICAgICAgICAgIH07CisjZW5kaWYKKyAgICAgICAgfQorICAgIH0KK30KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ24vaXNfYWxpZ25lZC5ocHAKQEAgLTAsMCArMSwyNyBAQAorLyoKKyhjKSAyMDE0IEdsZW4gSm9zZXBoIEZlcm5hbmRlcworPGdsZW5qb2ZlIC1hdC0gZ21haWwuY29tPgorCitEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUKK0xpY2Vuc2UsIFZlcnNpb24gMS4wLgoraHR0cDovL2Jvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQKKyovCisjaWZuZGVmIEJPT1NUX0FMSUdOX0lTX0FMSUdORURfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0lTX0FMSUdORURfSFBQCisKKyNpbmNsdWRlIDxib29zdC9hbGlnbi9kZXRhaWwvaXNfYWxpZ25lZC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYWxpZ24vaXNfYWxpZ25lZF9mb3J3YXJkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCitCT09TVF9DT05TVEVYUFIgaW5saW5lIGJvb2wgaXNfYWxpZ25lZChzdGQ6OnNpemVfdCB2YWx1ZSwKKyAgICBzdGQ6OnNpemVfdCBhbGlnbm1lbnQpIEJPT1NUX05PRVhDRVBUCit7CisgICAgcmV0dXJuICh2YWx1ZSAmIChhbGlnbm1lbnQgLSAxKSkgPT0gMDsKK30KKworfSAvKiAuYWxpZ25tZW50ICovCit9IC8qIC5ib29zdCAqLworCisjZW5kaWYKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbGlnbi9pc19hbGlnbmVkX2ZvcndhcmQuaHBwCkBAIC0wLDAgKzEsMjQgQEAKKy8qCisoYykgMjAxNSBHbGVuIEpvc2VwaCBGZXJuYW5kZXMKKzxnbGVuam9mZSAtYXQtIGdtYWlsLmNvbT4KKworRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlCitMaWNlbnNlLCBWZXJzaW9uIDEuMC4KK2h0dHA6Ly9ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0CisqLworI2lmbmRlZiBCT09TVF9BTElHTl9JU19BTElHTkVEX0ZPUldBUkRfSFBQCisjZGVmaW5lIEJPT1NUX0FMSUdOX0lTX0FMSUdORURfRk9SV0FSRF9IUFAKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Y3N0ZGRlZj4KKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhbGlnbm1lbnQgeworCitCT09TVF9DT05TVEVYUFIgYm9vbCBpc19hbGlnbmVkKHN0ZDo6c2l6ZV90IHZhbHVlLAorICAgIHN0ZDo6c2l6ZV90IGFsaWdubWVudCkgQk9PU1RfTk9FWENFUFQ7CisKK30gLyogLmFsaWdubWVudCAqLworfSAvKiAuYm9vc3QgKi8KKworI2VuZGlmCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYWxpZ25lZF9zdG9yYWdlLmhwcApAQCAtMCwwICsxLDE4IEBACisvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCisvLyBib29zdCBhbGlnbmVkX3N0b3JhZ2UuaHBwIGhlYWRlciBmaWxlCisvLyBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQorLy8KKy8vIENvcHlyaWdodCAoYykgMjAwMi0yMDAzCisvLyBFcmljIEZyaWVkbWFuLCBJdGF5IE1hbWFuCisvLworLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlCisvLyBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisjaWZuZGVmIEJPT1NUX0FMSUdORURfU1RPUkFHRV9IUFAKKyNkZWZpbmUgQk9PU1RfQUxJR05FRF9TVE9SQUdFX0hQUAorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvYWxpZ25lZF9zdG9yYWdlLmhwcD4KKworI2VuZGlmIC8vIEJPT1NUX0FMSUdORURfU1RPUkFHRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hbnkuaHBwCkBAIC0wLDAgKzEsMzI1IEBACisvLyBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9hbnkgZm9yIERvY3VtZW50YXRpb24uCisKKyNpZm5kZWYgQk9PU1RfQU5ZX0lOQ0xVREVECisjZGVmaW5lIEJPT1NUX0FOWV9JTkNMVURFRAorCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLyB3aGF0OiAgdmFyaWFudCB0eXBlIGJvb3N0OjphbnkKKy8vIHdobzogICBjb250cmlidXRlZCBieSBLZXZsaW4gSGVubmV5LAorLy8gICAgICAgIHdpdGggZmVhdHVyZXMgY29udHJpYnV0ZWQgYW5kIGJ1Z3MgZm91bmQgYnkKKy8vICAgICAgICBBbnRvbnkgUG9sdWtoaW4sIEVkIEJyZXksIE1hcmsgUm9kZ2VycywgCisvLyAgICAgICAgUGV0ZXIgRGltb3YsIGFuZCBKYW1lcyBDdXJyYW4KKy8vIHdoZW46ICBKdWx5IDIwMDEsIEFwcmlsIDIwMTMgLSBNYXkgMjAxMworCisjaW5jbHVkZSA8YWxnb3JpdGhtPgorCisjaW5jbHVkZSAiYm9vc3QvY29uZmlnLmhwcCIKKyNpbmNsdWRlIDxib29zdC90eXBlX2luZGV4LmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9yZW1vdmVfcmVmZXJlbmNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9kZWNheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2N2LmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9hZGRfcmVmZXJlbmNlLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19yZWZlcmVuY2UuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2NvbnN0LmhwcD4KKyNpbmNsdWRlIDxib29zdC90aHJvd19leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3V0aWxpdHkvZW5hYmxlX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19zYW1lLmhwcD4KKyNpbmNsdWRlIDxib29zdC90eXBlX3RyYWl0cy9pc19jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2lmLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0Cit7CisgICAgY2xhc3MgYW55CisgICAgeworICAgIHB1YmxpYzogLy8gc3RydWN0b3JzCisKKyAgICAgICAgYW55KCkgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgICA6IGNvbnRlbnQoMCkKKyAgICAgICAgeworICAgICAgICB9CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFsdWVUeXBlPgorICAgICAgICBhbnkoY29uc3QgVmFsdWVUeXBlICYgdmFsdWUpCisgICAgICAgICAgOiBjb250ZW50KG5ldyBob2xkZXI8CisgICAgICAgICAgICAgICAgQk9PU1RfREVEVUNFRF9UWVBFTkFNRSByZW1vdmVfY3Y8Qk9PU1RfREVEVUNFRF9UWVBFTkFNRSBkZWNheTxjb25zdCBWYWx1ZVR5cGU+Ojp0eXBlPjo6dHlwZQorICAgICAgICAgICAgPih2YWx1ZSkpCisgICAgICAgIHsKKyAgICAgICAgfQorCisgICAgICAgIGFueShjb25zdCBhbnkgJiBvdGhlcikKKyAgICAgICAgICA6IGNvbnRlbnQob3RoZXIuY29udGVudCA/IG90aGVyLmNvbnRlbnQtPmNsb25lKCkgOiAwKQorICAgICAgICB7CisgICAgICAgIH0KKworI2lmbmRlZiBCT09TVF9OT19DWFgxMV9SVkFMVUVfUkVGRVJFTkNFUworICAgICAgICAvLyBNb3ZlIGNvbnN0cnVjdG9yCisgICAgICAgIGFueShhbnkmJiBvdGhlcikgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgICA6IGNvbnRlbnQob3RoZXIuY29udGVudCkKKyAgICAgICAgeworICAgICAgICAgICAgb3RoZXIuY29udGVudCA9IDA7CisgICAgICAgIH0KKworICAgICAgICAvLyBQZXJmZWN0IGZvcndhcmRpbmcgb2YgVmFsdWVUeXBlCisgICAgICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZT4KKyAgICAgICAgYW55KFZhbHVlVHlwZSYmIHZhbHVlCisgICAgICAgICAgICAsIHR5cGVuYW1lIGJvb3N0OjpkaXNhYmxlX2lmPGJvb3N0Ojppc19zYW1lPGFueSYsIFZhbHVlVHlwZT4gPjo6dHlwZSogPSAwIC8vIGRpc2FibGUgaWYgdmFsdWUgaGFzIHR5cGUgYGFueSZgCisgICAgICAgICAgICAsIHR5cGVuYW1lIGJvb3N0OjpkaXNhYmxlX2lmPGJvb3N0Ojppc19jb25zdDxWYWx1ZVR5cGU+ID46OnR5cGUqID0gMCkgLy8gZGlzYWJsZSBpZiB2YWx1ZSBoYXMgdHlwZSBgY29uc3QgVmFsdWVUeXBlJiZgCisgICAgICAgICAgOiBjb250ZW50KG5ldyBob2xkZXI8IHR5cGVuYW1lIGRlY2F5PFZhbHVlVHlwZT46OnR5cGUgPihzdGF0aWNfY2FzdDxWYWx1ZVR5cGUmJj4odmFsdWUpKSkKKyAgICAgICAgeworICAgICAgICB9CisjZW5kaWYKKworICAgICAgICB+YW55KCkgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgeworICAgICAgICAgICAgZGVsZXRlIGNvbnRlbnQ7CisgICAgICAgIH0KKworICAgIHB1YmxpYzogLy8gbW9kaWZpZXJzCisKKyAgICAgICAgYW55ICYgc3dhcChhbnkgJiByaHMpIEJPT1NUX05PRVhDRVBUCisgICAgICAgIHsKKyAgICAgICAgICAgIHN0ZDo6c3dhcChjb250ZW50LCByaHMuY29udGVudCk7CisgICAgICAgICAgICByZXR1cm4gKnRoaXM7CisgICAgICAgIH0KKworCisjaWZkZWYgQk9PU1RfTk9fQ1hYMTFfUlZBTFVFX1JFRkVSRU5DRVMKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFsdWVUeXBlPgorICAgICAgICBhbnkgJiBvcGVyYXRvcj0oY29uc3QgVmFsdWVUeXBlICYgcmhzKQorICAgICAgICB7CisgICAgICAgICAgICBhbnkocmhzKS5zd2FwKCp0aGlzKTsKKyAgICAgICAgICAgIHJldHVybiAqdGhpczsKKyAgICAgICAgfQorCisgICAgICAgIGFueSAmIG9wZXJhdG9yPShhbnkgcmhzKQorICAgICAgICB7CisgICAgICAgICAgICBhbnkocmhzKS5zd2FwKCp0aGlzKTsKKyAgICAgICAgICAgIHJldHVybiAqdGhpczsKKyAgICAgICAgfQorCisjZWxzZSAKKyAgICAgICAgYW55ICYgb3BlcmF0b3I9KGNvbnN0IGFueSYgcmhzKQorICAgICAgICB7CisgICAgICAgICAgICBhbnkocmhzKS5zd2FwKCp0aGlzKTsKKyAgICAgICAgICAgIHJldHVybiAqdGhpczsKKyAgICAgICAgfQorCisgICAgICAgIC8vIG1vdmUgYXNzaWduZW1lbnQKKyAgICAgICAgYW55ICYgb3BlcmF0b3I9KGFueSYmIHJocykgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgeworICAgICAgICAgICAgcmhzLnN3YXAoKnRoaXMpOworICAgICAgICAgICAgYW55KCkuc3dhcChyaHMpOworICAgICAgICAgICAgcmV0dXJuICp0aGlzOworICAgICAgICB9CisKKyAgICAgICAgLy8gUGVyZmVjdCBmb3J3YXJkaW5nIG9mIFZhbHVlVHlwZQorICAgICAgICB0ZW1wbGF0ZSA8Y2xhc3MgVmFsdWVUeXBlPgorICAgICAgICBhbnkgJiBvcGVyYXRvcj0oVmFsdWVUeXBlJiYgcmhzKQorICAgICAgICB7CisgICAgICAgICAgICBhbnkoc3RhdGljX2Nhc3Q8VmFsdWVUeXBlJiY+KHJocykpLnN3YXAoKnRoaXMpOworICAgICAgICAgICAgcmV0dXJuICp0aGlzOworICAgICAgICB9CisjZW5kaWYKKworICAgIHB1YmxpYzogLy8gcXVlcmllcworCisgICAgICAgIGJvb2wgZW1wdHkoKSBjb25zdCBCT09TVF9OT0VYQ0VQVAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gIWNvbnRlbnQ7CisgICAgICAgIH0KKworICAgICAgICB2b2lkIGNsZWFyKCkgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgeworICAgICAgICAgICAgYW55KCkuc3dhcCgqdGhpcyk7CisgICAgICAgIH0KKworICAgICAgICBjb25zdCBib29zdDo6dHlwZWluZGV4Ojp0eXBlX2luZm8mIHR5cGUoKSBjb25zdCBCT09TVF9OT0VYQ0VQVAorICAgICAgICB7CisgICAgICAgICAgICByZXR1cm4gY29udGVudCA/IGNvbnRlbnQtPnR5cGUoKSA6IGJvb3N0Ojp0eXBlaW5kZXg6OnR5cGVfaWQ8dm9pZD4oKS50eXBlX2luZm8oKTsKKyAgICAgICAgfQorCisjaWZuZGVmIEJPT1NUX05PX01FTUJFUl9URU1QTEFURV9GUklFTkRTCisgICAgcHJpdmF0ZTogLy8gdHlwZXMKKyNlbHNlCisgICAgcHVibGljOiAvLyB0eXBlcyAocHVibGljIHNvIGFueV9jYXN0IGNhbiBiZSBub24tZnJpZW5kKQorI2VuZGlmCisKKyAgICAgICAgY2xhc3MgcGxhY2Vob2xkZXIKKyAgICAgICAgeworICAgICAgICBwdWJsaWM6IC8vIHN0cnVjdG9ycworCisgICAgICAgICAgICB2aXJ0dWFsIH5wbGFjZWhvbGRlcigpCisgICAgICAgICAgICB7CisgICAgICAgICAgICB9CisKKyAgICAgICAgcHVibGljOiAvLyBxdWVyaWVzCisKKyAgICAgICAgICAgIHZpcnR1YWwgY29uc3QgYm9vc3Q6OnR5cGVpbmRleDo6dHlwZV9pbmZvJiB0eXBlKCkgY29uc3QgQk9PU1RfTk9FWENFUFQgPSAwOworCisgICAgICAgICAgICB2aXJ0dWFsIHBsYWNlaG9sZGVyICogY2xvbmUoKSBjb25zdCA9IDA7CisKKyAgICAgICAgfTsKKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYWx1ZVR5cGU+CisgICAgICAgIGNsYXNzIGhvbGRlciA6IHB1YmxpYyBwbGFjZWhvbGRlcgorICAgICAgICB7CisgICAgICAgIHB1YmxpYzogLy8gc3RydWN0b3JzCisKKyAgICAgICAgICAgIGhvbGRlcihjb25zdCBWYWx1ZVR5cGUgJiB2YWx1ZSkKKyAgICAgICAgICAgICAgOiBoZWxkKHZhbHVlKQorICAgICAgICAgICAgeworICAgICAgICAgICAgfQorCisjaWZuZGVmIEJPT1NUX05PX0NYWDExX1JWQUxVRV9SRUZFUkVOQ0VTCisgICAgICAgICAgICBob2xkZXIoVmFsdWVUeXBlJiYgdmFsdWUpCisgICAgICAgICAgICAgIDogaGVsZChzdGF0aWNfY2FzdDwgVmFsdWVUeXBlJiYgPih2YWx1ZSkpCisgICAgICAgICAgICB7CisgICAgICAgICAgICB9CisjZW5kaWYKKyAgICAgICAgcHVibGljOiAvLyBxdWVyaWVzCisKKyAgICAgICAgICAgIHZpcnR1YWwgY29uc3QgYm9vc3Q6OnR5cGVpbmRleDo6dHlwZV9pbmZvJiB0eXBlKCkgY29uc3QgQk9PU1RfTk9FWENFUFQKKyAgICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gYm9vc3Q6OnR5cGVpbmRleDo6dHlwZV9pZDxWYWx1ZVR5cGU+KCkudHlwZV9pbmZvKCk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgICAgIHZpcnR1YWwgcGxhY2Vob2xkZXIgKiBjbG9uZSgpIGNvbnN0CisgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBob2xkZXIoaGVsZCk7CisgICAgICAgICAgICB9CisKKyAgICAgICAgcHVibGljOiAvLyByZXByZXNlbnRhdGlvbgorCisgICAgICAgICAgICBWYWx1ZVR5cGUgaGVsZDsKKworICAgICAgICBwcml2YXRlOiAvLyBpbnRlbnRpb25hbGx5IGxlZnQgdW5pbXBsZW1lbnRlZAorICAgICAgICAgICAgaG9sZGVyICYgb3BlcmF0b3I9KGNvbnN0IGhvbGRlciAmKTsKKyAgICAgICAgfTsKKworI2lmbmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworCisgICAgcHJpdmF0ZTogLy8gcmVwcmVzZW50YXRpb24KKworICAgICAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYWx1ZVR5cGU+CisgICAgICAgIGZyaWVuZCBWYWx1ZVR5cGUgKiBhbnlfY2FzdChhbnkgKikgQk9PU1RfTk9FWENFUFQ7CisKKyAgICAgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFsdWVUeXBlPgorICAgICAgICBmcmllbmQgVmFsdWVUeXBlICogdW5zYWZlX2FueV9jYXN0KGFueSAqKSBCT09TVF9OT0VYQ0VQVDsKKworI2Vsc2UKKworICAgIHB1YmxpYzogLy8gcmVwcmVzZW50YXRpb24gKHB1YmxpYyBzbyBhbnlfY2FzdCBjYW4gYmUgbm9uLWZyaWVuZCkKKworI2VuZGlmCisKKyAgICAgICAgcGxhY2Vob2xkZXIgKiBjb250ZW50OworCisgICAgfTsKKyAKKyAgICBpbmxpbmUgdm9pZCBzd2FwKGFueSAmIGxocywgYW55ICYgcmhzKSBCT09TVF9OT0VYQ0VQVAorICAgIHsKKyAgICAgICAgbGhzLnN3YXAocmhzKTsKKyAgICB9CisKKyAgICBjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiYWRfYW55X2Nhc3QgOgorI2lmbmRlZiBCT09TVF9OT19SVFRJCisgICAgICAgIHB1YmxpYyBzdGQ6OmJhZF9jYXN0CisjZWxzZQorICAgICAgICBwdWJsaWMgc3RkOjpleGNlcHRpb24KKyNlbmRpZgorICAgIHsKKyAgICBwdWJsaWM6CisgICAgICAgIHZpcnR1YWwgY29uc3QgY2hhciAqIHdoYXQoKSBjb25zdCBCT09TVF9OT0VYQ0VQVF9PUl9OT1RIUk9XCisgICAgICAgIHsKKyAgICAgICAgICAgIHJldHVybiAiYm9vc3Q6OmJhZF9hbnlfY2FzdDogIgorICAgICAgICAgICAgICAgICAgICJmYWlsZWQgY29udmVyc2lvbiB1c2luZyBib29zdDo6YW55X2Nhc3QiOworICAgICAgICB9CisgICAgfTsKKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZT4KKyAgICBWYWx1ZVR5cGUgKiBhbnlfY2FzdChhbnkgKiBvcGVyYW5kKSBCT09TVF9OT0VYQ0VQVAorICAgIHsKKyAgICAgICAgcmV0dXJuIG9wZXJhbmQgJiYgb3BlcmFuZC0+dHlwZSgpID09IGJvb3N0Ojp0eXBlaW5kZXg6OnR5cGVfaWQ8VmFsdWVUeXBlPigpCisgICAgICAgICAgICA/ICZzdGF0aWNfY2FzdDxhbnk6OmhvbGRlcjxCT09TVF9ERURVQ0VEX1RZUEVOQU1FIHJlbW92ZV9jdjxWYWx1ZVR5cGU+Ojp0eXBlPiAqPihvcGVyYW5kLT5jb250ZW50KS0+aGVsZAorICAgICAgICAgICAgOiAwOworICAgIH0KKworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZT4KKyAgICBpbmxpbmUgY29uc3QgVmFsdWVUeXBlICogYW55X2Nhc3QoY29uc3QgYW55ICogb3BlcmFuZCkgQk9PU1RfTk9FWENFUFQKKyAgICB7CisgICAgICAgIHJldHVybiBhbnlfY2FzdDxWYWx1ZVR5cGU+KGNvbnN0X2Nhc3Q8YW55ICo+KG9wZXJhbmQpKTsKKyAgICB9CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYWx1ZVR5cGU+CisgICAgVmFsdWVUeXBlIGFueV9jYXN0KGFueSAmIG9wZXJhbmQpCisgICAgeworICAgICAgICB0eXBlZGVmIEJPT1NUX0RFRFVDRURfVFlQRU5BTUUgcmVtb3ZlX3JlZmVyZW5jZTxWYWx1ZVR5cGU+Ojp0eXBlIG5vbnJlZjsKKworCisgICAgICAgIG5vbnJlZiAqIHJlc3VsdCA9IGFueV9jYXN0PG5vbnJlZj4oJm9wZXJhbmQpOworICAgICAgICBpZighcmVzdWx0KQorICAgICAgICAgICAgYm9vc3Q6OnRocm93X2V4Y2VwdGlvbihiYWRfYW55X2Nhc3QoKSk7CisKKyAgICAgICAgLy8gQXR0ZW1wdCB0byBhdm9pZCBjb25zdHJ1Y3Rpb24gb2YgYSB0ZW1wb3Jhcnkgb2JqZWN0IGluIGNhc2VzIHdoZW4gCisgICAgICAgIC8vIGBWYWx1ZVR5cGVgIGlzIG5vdCBhIHJlZmVyZW5jZS4gRXhhbXBsZToKKyAgICAgICAgLy8gYHN0YXRpY19jYXN0PHN0ZDo6c3RyaW5nPigqcmVzdWx0KTtgIAorICAgICAgICAvLyB3aGljaCBpcyBlcXVhbCB0byBgc3RkOjpzdHJpbmcoKnJlc3VsdCk7YAorICAgICAgICB0eXBlZGVmIEJPT1NUX0RFRFVDRURfVFlQRU5BTUUgYm9vc3Q6Om1wbDo6aWZfPAorICAgICAgICAgICAgYm9vc3Q6OmlzX3JlZmVyZW5jZTxWYWx1ZVR5cGU+LAorICAgICAgICAgICAgVmFsdWVUeXBlLAorICAgICAgICAgICAgQk9PU1RfREVEVUNFRF9UWVBFTkFNRSBib29zdDo6YWRkX3JlZmVyZW5jZTxWYWx1ZVR5cGU+Ojp0eXBlCisgICAgICAgID46OnR5cGUgcmVmX3R5cGU7CisKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PHJlZl90eXBlPigqcmVzdWx0KTsKKyAgICB9CisKKyAgICB0ZW1wbGF0ZTx0eXBlbmFtZSBWYWx1ZVR5cGU+CisgICAgaW5saW5lIFZhbHVlVHlwZSBhbnlfY2FzdChjb25zdCBhbnkgJiBvcGVyYW5kKQorICAgIHsKKyAgICAgICAgdHlwZWRlZiBCT09TVF9ERURVQ0VEX1RZUEVOQU1FIHJlbW92ZV9yZWZlcmVuY2U8VmFsdWVUeXBlPjo6dHlwZSBub25yZWY7CisgICAgICAgIHJldHVybiBhbnlfY2FzdDxjb25zdCBub25yZWYgJj4oY29uc3RfY2FzdDxhbnkgJj4ob3BlcmFuZCkpOworICAgIH0KKworI2lmbmRlZiBCT09TVF9OT19DWFgxMV9SVkFMVUVfUkVGRVJFTkNFUworICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZT4KKyAgICBpbmxpbmUgVmFsdWVUeXBlIGFueV9jYXN0KGFueSYmIG9wZXJhbmQpCisgICAgeworICAgICAgICBCT09TVF9TVEFUSUNfQVNTRVJUX01TRygKKyAgICAgICAgICAgIGJvb3N0Ojppc19ydmFsdWVfcmVmZXJlbmNlPFZhbHVlVHlwZSYmPjo6dmFsdWUgLyp0cnVlIGlmIFZhbHVlVHlwZSBpcyBydmFsdWUgb3IganVzdCBhIHZhbHVlKi8KKyAgICAgICAgICAgIHx8IGJvb3N0Ojppc19jb25zdDwgdHlwZW5hbWUgYm9vc3Q6OnJlbW92ZV9yZWZlcmVuY2U8VmFsdWVUeXBlPjo6dHlwZSA+Ojp2YWx1ZSwKKyAgICAgICAgICAgICJib29zdDo6YW55X2Nhc3Qgc2hhbGwgbm90IGJlIHVzZWQgZm9yIGdldHRpbmcgbm9uY29uc3QgcmVmZXJlbmNlcyB0byB0ZW1wb3Jhcnkgb2JqZWN0cyIgCisgICAgICAgICk7CisgICAgICAgIHJldHVybiBhbnlfY2FzdDxWYWx1ZVR5cGU+KG9wZXJhbmQpOworICAgIH0KKyNlbmRpZgorCisKKyAgICAvLyBOb3RlOiBUaGUgInVuc2FmZSIgdmVyc2lvbnMgb2YgYW55X2Nhc3QgYXJlIG5vdCBwYXJ0IG9mIHRoZQorICAgIC8vIHB1YmxpYyBpbnRlcmZhY2UgYW5kIG1heSBiZSByZW1vdmVkIGF0IGFueSB0aW1lLiBUaGV5IGFyZQorICAgIC8vIHJlcXVpcmVkIHdoZXJlIHdlIGtub3cgd2hhdCB0eXBlIGlzIHN0b3JlZCBpbiB0aGUgYW55IGFuZCBjYW4ndAorICAgIC8vIHVzZSB0eXBlaWQoKSBjb21wYXJpc29uLCBlLmcuLCB3aGVuIG91ciB0eXBlcyBtYXkgdHJhdmVsIGFjcm9zcworICAgIC8vIGRpZmZlcmVudCBzaGFyZWQgbGlicmFyaWVzLgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIFZhbHVlVHlwZT4KKyAgICBpbmxpbmUgVmFsdWVUeXBlICogdW5zYWZlX2FueV9jYXN0KGFueSAqIG9wZXJhbmQpIEJPT1NUX05PRVhDRVBUCisgICAgeworICAgICAgICByZXR1cm4gJnN0YXRpY19jYXN0PGFueTo6aG9sZGVyPFZhbHVlVHlwZT4gKj4ob3BlcmFuZC0+Y29udGVudCktPmhlbGQ7CisgICAgfQorCisgICAgdGVtcGxhdGU8dHlwZW5hbWUgVmFsdWVUeXBlPgorICAgIGlubGluZSBjb25zdCBWYWx1ZVR5cGUgKiB1bnNhZmVfYW55X2Nhc3QoY29uc3QgYW55ICogb3BlcmFuZCkgQk9PU1RfTk9FWENFUFQKKyAgICB7CisgICAgICAgIHJldHVybiB1bnNhZmVfYW55X2Nhc3Q8VmFsdWVUeXBlPihjb25zdF9jYXN0PGFueSAqPihvcGVyYW5kKSk7CisgICAgfQorfQorCisvLyBDb3B5cmlnaHQgS2V2bGluIEhlbm5leSwgMjAwMCwgMjAwMSwgMjAwMi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKy8vCisvLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUKKy8vIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKyNlbmRpZgpuZXcgZmlsZSBtb2RlIDEwMDY0NApCaW5hcnkgZmlsZXMgL2Rldi9udWxsIGFuZCBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvLkRTX1N0b3JlIGRpZmZlcgpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYWRkX2ZhY2V0LmhwcApAQCAtMCwwICsxLDU1IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfQUREX0ZBQ0VUX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0FERF9GQUNFVF9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBhZGRfZmFjZXQuaHBwCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMyBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGxvY2FsZT4KKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKworLy8gZG9lcyBTVExwb3J0IHVzZXMgbmF0aXZlIFNUTCBmb3IgbG9jYWxlcz8KKyNpZiAoZGVmaW5lZChfX1NHSV9TVExfUE9SVCkmJiBkZWZpbmVkKF9TVExQX05PX09XTl9JT1NUUkVBTVMpKQorLy8gYW5kIHRoaXMgbmF0aXZlIFNUTCBsaWIgaXMgb2xkIERpbmt1bXdhcmUgKGhhcyBub3QgZGVmaW5lZCBfQ1BQTElCX1ZFUikKKyMgIGlmIChkZWZpbmVkKF9ZVkFMUykgJiYgIWRlZmluZWQoX19JQk1DUFBfXykpIHx8ICFkZWZpbmVkKF9DUFBMSUJfVkVSKQorIyAgICBkZWZpbmUgQk9PU1RfQVJDSElWRV9PTERfRElOS1VNV0FSRV9CRU5FQVRIX1NUTFBPUlQKKyMgIGVuZGlmCisjZW5kaWYKKworbmFtZXNwYWNlIGJvb3N0IHsgCituYW1lc3BhY2UgYXJjaGl2ZSB7CisKK3RlbXBsYXRlPGNsYXNzIEZhY2V0PgoraW5saW5lIHN0ZDo6bG9jYWxlICogCithZGRfZmFjZXQoY29uc3Qgc3RkOjpsb2NhbGUgJmwsIEZhY2V0ICogZil7CisgICAgcmV0dXJuCisgICAgICAgICNpZiBkZWZpbmVkIEJPT1NUX0FSQ0hJVkVfT0xEX0RJTktVTVdBUkVfQkVORUFUSF9TVExQT1JUIAorICAgICAgICAgICAgLy8gc3RkIG5hbWVzcGFjZSB1c2VkIGZvciBuYXRpdmUgbG9jYWxlCisgICAgICAgICAgICBuZXcgc3RkOjpsb2NhbGUoc3RkOjpfQWRkZmFjKGwsIGYpKTsKKyAgICAgICAgI2VsaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9ESU5LVU1XQVJFX1NURExJQiwgPT0gMSkgLy8gb2xkIERpbmt1bXdhcgorICAgICAgICAgICAgLy8gc3RkIG5hbWVzcGFjZSB1c2VkIGZvciBuYXRpdmUgbG9jYWxlCisgICAgICAgICAgICBuZXcgc3RkOjpsb2NhbGUoc3RkOjpfQWRkZmFjKGwsIGYpKTsKKyAgICAgICAgI2Vsc2UKKyAgICAgICAgICAgIC8vIHN0YW5kYXJkIGNvbXBhdGlibGUKKyAgICAgICAgICAgIG5ldyBzdGQ6OmxvY2FsZShsLCBmKTsKKyAgICAgICAgI2VuZGlmCit9CisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyN1bmRlZiBCT09TVF9BUkNISVZFX09MRF9ESU5LVU1XQVJFX0JFTkVBVEhfU1RMUE9SVAorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9BRERfRkFDRVRfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9hcmNoaXZlX2V4Y2VwdGlvbi5ocHAKQEAgLTAsMCArMSwxMDAgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9BUkNISVZFX0VYQ0VQVElPTl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9BUkNISVZFX0VYQ0VQVElPTl9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBhcmNoaXZlL2FyY2hpdmVfZXhjZXB0aW9uLmhwcDoKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8ZXhjZXB0aW9uPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8c3RyaW5nPgorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4gCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvZGVjbC5ocHA+CisKKy8vIG5vdGU6IHRoZSBvbmx5IHJlYXNvbiB0aGlzIGlzIGluIGhlcmUgaXMgdGhhdCB3aW5kb3dzIGhlYWRlcgorLy8gaW5jbHVkZXMgI2RlZmluZSBleGNlcHRpb25fY29kZSBfZXhjZXB0aW9uX2NvZGUgKGFycnJnZ2hoaGghKS4KKy8vIHRoZSBtb3N0IGV4cGVkaWVudCB3YXkgdG8gYWRkcmVzcyB0aGlzIGlzIGJlIHN1cmUgdGhhdCB0aGlzCisvLyBoZWFkZXIgaXMgYWx3YXlzIGluY2x1ZGVkIHdoZW5ldmVyIHRoaXMgaGVhZGVyIGZpbGUgaXMgaW5jbHVkZWQuCisjaWYgZGVmaW5lZChCT09TVF9XSU5ET1dTKSAKKyNpbmNsdWRlIDxleGNwdC5oPiAKKyNlbmRpZiAKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBleGNlcHRpb25zIHRocm93biBieSBhcmNoaXZlcworLy8KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGFyY2hpdmVfZXhjZXB0aW9uIDogCisgICAgcHVibGljIHZpcnR1YWwgc3RkOjpleGNlcHRpb24KK3sKK3ByaXZhdGU6CisgICAgY2hhciBtX2J1ZmZlclsxMjhdOworcHJvdGVjdGVkOgorICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB1bnNpZ25lZCBpbnQKKyAgICBhcHBlbmQodW5zaWduZWQgaW50IGwsIGNvbnN0IGNoYXIgKiBhKTsKKyAgICBCT09TVF9BUkNISVZFX0RFQ0wKKyAgICBhcmNoaXZlX2V4Y2VwdGlvbigpIEJPT1NUX05PRVhDRVBUOworcHVibGljOgorICAgIHR5cGVkZWYgZW51bSB7CisgICAgICAgIG5vX2V4Y2VwdGlvbiwgICAgICAgLy8gaW5pdGlhbGl6ZWQgd2l0aG91dCBjb2RlCisgICAgICAgIG90aGVyX2V4Y2VwdGlvbiwgICAgLy8gYW55IGV4Y2VwdG9uIG5vdCBsaXN0ZWQgYmVsb3cKKyAgICAgICAgdW5yZWdpc3RlcmVkX2NsYXNzLCAvLyBhdHRlbXB0IHRvIHNlcmlhbGl6ZSBhIHBvaW50ZXIgb2YKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbiB1bnJlZ2lzdGVyZWQgY2xhc3MKKyAgICAgICAgaW52YWxpZF9zaWduYXR1cmUsICAvLyBmaXJzdCBsaW5lIG9mIGFyY2hpdmUgZG9lcyBub3QgY29udGFpbgorICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGVjdGVkIHN0cmluZworICAgICAgICB1bnN1cHBvcnRlZF92ZXJzaW9uLC8vIGFyY2hpdmUgY3JlYXRlZCB3aXRoIGxpYnJhcnkgdmVyc2lvbgorICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnNlcXVlbnQgdG8gdGhpcyBvbmUKKyAgICAgICAgcG9pbnRlcl9jb25mbGljdCwgICAvLyBhbiBhdHRlbXB0IGhhcyBiZWVuIG1hZGUgdG8gZGlyZWN0bHkKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXJpYWxpemUgYW4gb2JqZWN0IHdoaWNoIGhhcworICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgYmVlbiBzZXJpYWxpemVkIHRocm91Z2ggYSBwb2ludGVyLiAgCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2VyZSB0aGlzIHBlcm1pdHRlZCwgdGhlIGFyY2hpdmUgbG9hZCB3b3VsZCByZXN1bHQgCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIGNyZWF0aW9uIG9mIGFuIGV4dHJhIGNvcHkgb2YgdGhlIG9iZWN0LgorICAgICAgICBpbmNvbXBhdGlibGVfbmF0aXZlX2Zvcm1hdCwgLy8gYXR0ZW1wdCB0byByZWFkIG5hdGl2ZSBiaW5hcnkgZm9ybWF0CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gaW5jb21wYXRpYmxlIHBsYXRmb3JtCisgICAgICAgIGFycmF5X3NpemVfdG9vX3Nob3J0LC8vIGFycmF5IGJlaW5nIGxvYWRlZCBkb2Vzbid0IGZpdCBpbiBhcnJheSBhbGxvY2F0ZWQKKyAgICAgICAgaW5wdXRfc3RyZWFtX2Vycm9yLCAvLyBlcnJvciBvbiBpbnB1dCBzdHJlYW0KKyAgICAgICAgaW52YWxpZF9jbGFzc19uYW1lLCAvLyBjbGFzcyBuYW1lIGdyZWF0ZXIgdGhhbiB0aGUgbWF4aW11bSBwZXJtaXR0ZWQuCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYSBjb3JydXB0ZWQgYXJjaGl2ZSBvciBhbiBhdHRlbXB0CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gaW5zZXJ0IHZpcnVzIHZpYSBidWZmZXIgb3ZlcnJ1biBtZXRob2QuCisgICAgICAgIHVucmVnaXN0ZXJlZF9jYXN0LCAgIC8vIGJhc2UgLSBkZXJpdmVkIHJlbGF0aW9uc2hpcCBub3QgcmVnaXN0ZXJlZCB3aXRoIAorICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWRfY2FzdF9yZWdpc3RlcgorICAgICAgICB1bnN1cHBvcnRlZF9jbGFzc192ZXJzaW9uLCAvLyB0eXBlIHNhdmVkIHdpdGggYSB2ZXJzaW9uICMgZ3JlYXRlciB0aGFuIHRoZSAKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmUgdXNlZCBieSB0aGUgcHJvZ3JhbS4gIFRoaXMgaW5kaWNhdGVzIHRoYXQgdGhlIHByb2dyYW0KKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZWVkcyB0byBiZSByZWJ1aWx0LgorICAgICAgICBtdWx0aXBsZV9jb2RlX2luc3RhbnRpYXRpb24sIC8vIGNvZGUgZm9yIGltcGxlbWVudGluZyBzZXJpYWxpemF0aW9uIGZvciBzb21lCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHlwZSBoYXMgYmVlbiBpbnN0YW50aWF0ZWQgaW4gbW9yZSB0aGFuIG9uZSBtb2R1bGUuCisgICAgICAgIG91dHB1dF9zdHJlYW1fZXJyb3IgLy8gZXJyb3Igb24gaW5wdXQgc3RyZWFtCisgICAgfSBleGNlcHRpb25fY29kZTsKKyAgICBleGNlcHRpb25fY29kZSBjb2RlOworCisgICAgQk9PU1RfQVJDSElWRV9ERUNMIGFyY2hpdmVfZXhjZXB0aW9uKAorICAgICAgICBleGNlcHRpb25fY29kZSBjLCAKKyAgICAgICAgY29uc3QgY2hhciAqIGUxID0gTlVMTCwKKyAgICAgICAgY29uc3QgY2hhciAqIGUyID0gTlVMTAorICAgICkgQk9PU1RfTk9FWENFUFQ7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIGFyY2hpdmVfZXhjZXB0aW9uKGFyY2hpdmVfZXhjZXB0aW9uIGNvbnN0ICYpIEJPT1NUX05PRVhDRVBUIDsKKyAgICB2aXJ0dWFsIEJPT1NUX0FSQ0hJVkVfREVDTCB+YXJjaGl2ZV9leGNlcHRpb24oKSBCT09TVF9OT0VYQ0VQVF9PUl9OT1RIUk9XIDsKKyAgICB2aXJ0dWFsIEJPT1NUX0FSQ0hJVkVfREVDTCBjb25zdCBjaGFyICogd2hhdCgpIGNvbnN0IEJPT1NUX05PRVhDRVBUX09SX05PVEhST1cgOworfTsKKworfS8vIG5hbWVzcGFjZSBhcmNoaXZlCit9Ly8gbmFtZXNwYWNlIGJvb3N0CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKKyNlbmRpZiAvL0JPT1NUX0FSQ0hJVkVfQVJDSElWRV9FWENFUFRJT05fSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9iYXNpY19hcmNoaXZlLmhwcApAQCAtMCwwICsxLDMwNCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX0FSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiYXNpY19hcmNoaXZlLmhwcDoKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorI2luY2x1ZGUgPGNzdHJpbmc+IC8vIGNvdW50CisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPiAvLyBzaXplX3QKKyNpbmNsdWRlIDxib29zdC9ub25jb3B5YWJsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaW50ZWdlcl90cmFpdHMuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYXV0b19saW5rX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyNwcmFnbWEgd2FybmluZyggcHVzaCApCisjcHJhZ21hIHdhcm5pbmcoIGRpc2FibGUgOiA0MjQ0IDQyNjcgKQorI2VuZGlmCisKKy8qIE5PVEUgOiBXYXJuaW5nICA6IFdhcm5pbmcgOiBXYXJuaW5nIDogV2FybmluZyA6IFdhcm5pbmcKKyAqIERvbid0IGV2ZXIgY2hhbmdlcyB0aGlzLiAgSWYgeW91IGRvLCB0aGV5IHByZXZpb3VzbHkgY3JlYXRlZAorICogYmluYXJ5IGFyY2hpdmVzIHdvbid0IGJlIHJlYWRhYmxlICEhIQorICovCitjbGFzcyBsaWJyYXJ5X3ZlcnNpb25fdHlwZSB7Citwcml2YXRlOgorICAgIHR5cGVkZWYgdWludF9sZWFzdDE2X3QgYmFzZV90eXBlOworICAgIGJhc2VfdHlwZSB0OworcHVibGljOgorICAgIGxpYnJhcnlfdmVyc2lvbl90eXBlKCk6IHQoMCkge307CisgICAgZXhwbGljaXQgbGlicmFyeV92ZXJzaW9uX3R5cGUoY29uc3QgdW5zaWduZWQgaW50ICYgdF8pIDogdCh0Xyl7CisgICAgICAgIEJPT1NUX0FTU0VSVCh0XyA8PSBib29zdDo6aW50ZWdlcl90cmFpdHM8YmFzZV90eXBlPjo6Y29uc3RfbWF4KTsKKyAgICB9CisgICAgbGlicmFyeV92ZXJzaW9uX3R5cGUoY29uc3QgbGlicmFyeV92ZXJzaW9uX3R5cGUgJiB0XykgOiAKKyAgICAgICAgdCh0Xy50KQorICAgIHt9CisgICAgbGlicmFyeV92ZXJzaW9uX3R5cGUgJiBvcGVyYXRvcj0oY29uc3QgbGlicmFyeV92ZXJzaW9uX3R5cGUgJiByaHMpeworICAgICAgICB0ID0gcmhzLnQ7IAorICAgICAgICByZXR1cm4gKnRoaXM7CisgICAgfQorICAgIC8vIHVzZWQgZm9yIHRleHQgb3V0cHV0CisgICAgb3BlcmF0b3IgYmFzZV90eXBlICgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIHQ7CisgICAgfSAgICAgICAgICAgICAgICAKKyAgICAvLyB1c2VkIGZvciB0ZXh0IGlucHV0CisgICAgb3BlcmF0b3IgYmFzZV90eXBlICYgKCl7CisgICAgICAgIHJldHVybiB0OworICAgIH0gICAgICAgICAgICAgICAgCisgICAgYm9vbCBvcGVyYXRvcj09KGNvbnN0IGxpYnJhcnlfdmVyc2lvbl90eXBlICYgcmhzKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0ID09IHJocy50OworICAgIH0gCisgICAgYm9vbCBvcGVyYXRvcjwoY29uc3QgbGlicmFyeV92ZXJzaW9uX3R5cGUgJiByaHMpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIHQgPCByaHMudDsKKyAgICB9ICAgCit9OworCitCT09TVF9BUkNISVZFX0RFQ0wgbGlicmFyeV92ZXJzaW9uX3R5cGUKK0JPT1NUX0FSQ0hJVkVfVkVSU0lPTigpOworCitjbGFzcyB2ZXJzaW9uX3R5cGUgeworcHJpdmF0ZToKKyAgICB0eXBlZGVmIHVpbnRfbGVhc3QzMl90IGJhc2VfdHlwZTsKKyAgICBiYXNlX3R5cGUgdDsKK3B1YmxpYzoKKyAgICAvLyBzaG91bGQgYmUgcHJpdmF0ZSAtIGJ1dCBNUEkgZmFpbHMgaWYgaXQncyBub3QhISEKKyAgICB2ZXJzaW9uX3R5cGUoKTogdCgwKSB7fTsKKyAgICBleHBsaWNpdCB2ZXJzaW9uX3R5cGUoY29uc3QgdW5zaWduZWQgaW50ICYgdF8pIDogdCh0Xyl7CisgICAgICAgIEJPT1NUX0FTU0VSVCh0XyA8PSBib29zdDo6aW50ZWdlcl90cmFpdHM8YmFzZV90eXBlPjo6Y29uc3RfbWF4KTsKKyAgICB9CisgICAgdmVyc2lvbl90eXBlKGNvbnN0IHZlcnNpb25fdHlwZSAmIHRfKSA6IAorICAgICAgICB0KHRfLnQpCisgICAge30KKyAgICB2ZXJzaW9uX3R5cGUgJiBvcGVyYXRvcj0oY29uc3QgdmVyc2lvbl90eXBlICYgcmhzKXsKKyAgICAgICAgdCA9IHJocy50OyAKKyAgICAgICAgcmV0dXJuICp0aGlzOworICAgIH0KKyAgICAvLyB1c2VkIGZvciB0ZXh0IG91dHB1dAorICAgIG9wZXJhdG9yIGJhc2VfdHlwZSAoKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0OworICAgIH0gICAgICAgICAgICAgICAgCisgICAgLy8gdXNlZCBmb3IgdGV4dCBpbnRwdXQKKyAgICBvcGVyYXRvciBiYXNlX3R5cGUgICYgKCl7CisgICAgICAgIHJldHVybiB0OworICAgIH0gICAgICAgICAgICAgICAgCisgICAgYm9vbCBvcGVyYXRvcj09KGNvbnN0IHZlcnNpb25fdHlwZSAmIHJocykgY29uc3QgeworICAgICAgICByZXR1cm4gdCA9PSByaHMudDsKKyAgICB9IAorICAgIGJvb2wgb3BlcmF0b3I8KGNvbnN0IHZlcnNpb25fdHlwZSAmIHJocykgY29uc3QgeworICAgICAgICByZXR1cm4gdCA8IHJocy50OworICAgIH0gICAKK307CisKK2NsYXNzIGNsYXNzX2lkX3R5cGUgeworcHJpdmF0ZToKKyAgICB0eXBlZGVmIGludF9sZWFzdDE2X3QgYmFzZV90eXBlOworICAgIGJhc2VfdHlwZSB0OworcHVibGljOgorICAgIC8vIHNob3VsZCBiZSBwcml2YXRlIC0gYnV0IHRoZW4gY2FuJ3QgdXNlIEJPT1NUX1NUUk9OR19UWVBFIGJlbG93CisgICAgY2xhc3NfaWRfdHlwZSgpIDogdCgwKSB7fTsKKyAgICBleHBsaWNpdCBjbGFzc19pZF90eXBlKGNvbnN0IGludCB0XykgOiB0KHRfKXsKKyAgICAgICAgQk9PU1RfQVNTRVJUKHRfIDw9IGJvb3N0OjppbnRlZ2VyX3RyYWl0czxiYXNlX3R5cGU+Ojpjb25zdF9tYXgpOworICAgIH0KKyAgICBleHBsaWNpdCBjbGFzc19pZF90eXBlKGNvbnN0IHN0ZDo6c2l6ZV90IHRfKSA6IHQodF8peworIC8vICAgICAgIEJPT1NUX0FTU0VSVCh0XyA8PSBib29zdDo6aW50ZWdlcl90cmFpdHM8YmFzZV90eXBlPjo6Y29uc3RfbWF4KTsKKyAgICB9CisgICAgY2xhc3NfaWRfdHlwZShjb25zdCBjbGFzc19pZF90eXBlICYgdF8pIDogCisgICAgICAgIHQodF8udCkKKyAgICB7fQorICAgIGNsYXNzX2lkX3R5cGUgJiBvcGVyYXRvcj0oY29uc3QgY2xhc3NfaWRfdHlwZSAmIHJocyl7CisgICAgICAgIHQgPSByaHMudDsgCisgICAgICAgIHJldHVybiAqdGhpczsKKyAgICB9CisKKyAgICAvLyB1c2VkIGZvciB0ZXh0IG91dHB1dAorICAgIG9wZXJhdG9yIGludCAoKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0OworICAgIH0gICAgICAgICAgICAgICAgCisgICAgLy8gdXNlZCBmb3IgdGV4dCBpbnB1dAorICAgIG9wZXJhdG9yIGludF9sZWFzdDE2X3QgJigpIHsKKyAgICAgICAgcmV0dXJuIHQ7CisgICAgfSAgICAgICAgICAgICAgICAKKyAgICBib29sIG9wZXJhdG9yPT0oY29uc3QgY2xhc3NfaWRfdHlwZSAmIHJocykgY29uc3QgeworICAgICAgICByZXR1cm4gdCA9PSByaHMudDsKKyAgICB9IAorICAgIGJvb2wgb3BlcmF0b3I8KGNvbnN0IGNsYXNzX2lkX3R5cGUgJiByaHMpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIHQgPCByaHMudDsKKyAgICB9ICAgCit9OworCisjZGVmaW5lIE5VTExfUE9JTlRFUl9UQUcgYm9vc3Q6OmFyY2hpdmU6OmNsYXNzX2lkX3R5cGUoLTEpCisKK2NsYXNzIG9iamVjdF9pZF90eXBlIHsKK3ByaXZhdGU6CisgICAgdHlwZWRlZiB1aW50X2xlYXN0MzJfdCBiYXNlX3R5cGU7CisgICAgYmFzZV90eXBlIHQ7CitwdWJsaWM6CisgICAgb2JqZWN0X2lkX3R5cGUoKTogdCgwKSB7fTsKKyAgICAvLyBub3RlOiBwcmVzdW1lcyB0aGF0IHNpemVfdCA+PSB1bnNpZ25lZCBpbnQuCisgICAgZXhwbGljaXQgb2JqZWN0X2lkX3R5cGUoY29uc3Qgc3RkOjpzaXplX3QgJiB0XykgOiB0KHRfKXsKKyAgICAgICAgQk9PU1RfQVNTRVJUKHRfIDw9IGJvb3N0OjppbnRlZ2VyX3RyYWl0czxiYXNlX3R5cGU+Ojpjb25zdF9tYXgpOworICAgIH0KKyAgICBvYmplY3RfaWRfdHlwZShjb25zdCBvYmplY3RfaWRfdHlwZSAmIHRfKSA6IAorICAgICAgICB0KHRfLnQpCisgICAge30KKyAgICBvYmplY3RfaWRfdHlwZSAmIG9wZXJhdG9yPShjb25zdCBvYmplY3RfaWRfdHlwZSAmIHJocyl7CisgICAgICAgIHQgPSByaHMudDsgCisgICAgICAgIHJldHVybiAqdGhpczsKKyAgICB9CisgICAgLy8gdXNlZCBmb3IgdGV4dCBvdXRwdXQKKyAgICBvcGVyYXRvciB1aW50X2xlYXN0MzJfdCAoKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0OworICAgIH0gICAgICAgICAgICAgICAgCisgICAgLy8gdXNlZCBmb3IgdGV4dCBpbnB1dAorICAgIG9wZXJhdG9yIHVpbnRfbGVhc3QzMl90ICYgKCkgeworICAgICAgICByZXR1cm4gdDsKKyAgICB9ICAgICAgICAgICAgICAgIAorICAgIGJvb2wgb3BlcmF0b3I9PShjb25zdCBvYmplY3RfaWRfdHlwZSAmIHJocykgY29uc3QgeworICAgICAgICByZXR1cm4gdCA9PSByaHMudDsKKyAgICB9IAorICAgIGJvb2wgb3BlcmF0b3I8KGNvbnN0IG9iamVjdF9pZF90eXBlICYgcmhzKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0IDwgcmhzLnQ7CisgICAgfSAgIAorfTsKKworI2lmIGRlZmluZWQoX01TQ19WRVIpCisjcHJhZ21hIHdhcm5pbmcoIHBvcCApCisjZW5kaWYKKworc3RydWN0IHRyYWNraW5nX3R5cGUgeworICAgIGJvb2wgdDsKKyAgICBleHBsaWNpdCB0cmFja2luZ190eXBlKGNvbnN0IGJvb2wgdF8gPSBmYWxzZSkKKyAgICAgICAgOiB0KHRfKQorICAgIHt9OworICAgIHRyYWNraW5nX3R5cGUoY29uc3QgdHJhY2tpbmdfdHlwZSAmIHRfKQorICAgICAgICA6IHQodF8udCkKKyAgICB7fQorICAgIG9wZXJhdG9yIGJvb2wgKCkgY29uc3QgeworICAgICAgICByZXR1cm4gdDsKKyAgICB9OworICAgIG9wZXJhdG9yIGJvb2wgJiAoKSB7CisgICAgICAgIHJldHVybiB0OworICAgIH07CisgICAgdHJhY2tpbmdfdHlwZSAmIG9wZXJhdG9yPShjb25zdCBib29sIHRfKXsKKyAgICAgICAgdCA9IHRfOworICAgICAgICByZXR1cm4gKnRoaXM7CisgICAgfQorICAgIGJvb2wgb3BlcmF0b3I9PShjb25zdCB0cmFja2luZ190eXBlICYgcmhzKSBjb25zdCB7CisgICAgICAgIHJldHVybiB0ID09IHJocy50OworICAgIH0KKyAgICBib29sIG9wZXJhdG9yPT0oY29uc3QgYm9vbCAmIHJocykgY29uc3QgeworICAgICAgICByZXR1cm4gdCA9PSByaHM7CisgICAgfQorICAgIHRyYWNraW5nX3R5cGUgJiBvcGVyYXRvcj0oY29uc3QgdHJhY2tpbmdfdHlwZSAmIHJocyl7CisgICAgICAgIHQgPSByaHMudDsKKyAgICAgICAgcmV0dXJuICp0aGlzOworICAgIH0KK307CisKK3N0cnVjdCBjbGFzc19uYW1lX3R5cGUgOiAKKyAgICBwcml2YXRlIGJvb3N0Ojpub25jb3B5YWJsZSAKK3sKKyAgICBjaGFyICp0OworICAgIG9wZXJhdG9yIGNvbnN0IGNoYXIgKiAmICgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGNvbnN0X2Nhc3Q8Y29uc3QgY2hhciAqICY+KHQpOworICAgIH0KKyAgICBvcGVyYXRvciBjaGFyICogKCkgeworICAgICAgICByZXR1cm4gdDsKKyAgICB9CisgICAgc3RkOjpzaXplX3Qgc2l6ZSgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIHN0ZDo6c3RybGVuKHQpOworICAgIH0KKyAgICBleHBsaWNpdCBjbGFzc19uYW1lX3R5cGUoY29uc3QgY2hhciAqa2V5XykgCisgICAgOiB0KGNvbnN0X2Nhc3Q8Y2hhciAqPihrZXlfKSl7fQorICAgIGV4cGxpY2l0IGNsYXNzX25hbWVfdHlwZShjaGFyICprZXlfKSAKKyAgICA6IHQoa2V5Xyl7fQorICAgIGNsYXNzX25hbWVfdHlwZSAmIG9wZXJhdG9yPShjb25zdCBjbGFzc19uYW1lX3R5cGUgJiByaHMpeworICAgICAgICB0ID0gcmhzLnQ7CisgICAgICAgIHJldHVybiAqdGhpczsKKyAgICB9Cit9OworCitlbnVtIGFyY2hpdmVfZmxhZ3MgeworICAgIG5vX2hlYWRlciA9IDEsICAvLyBzdXBwcmVzcyBhcmNoaXZlIGhlYWRlciBpbmZvCisgICAgbm9fY29kZWN2dCA9IDIsICAvLyBzdXBwcmVzcyBhbHRlcmF0aW9uIG9mIGNvZGVjdnQgZmFjZXQKKyAgICBub194bWxfdGFnX2NoZWNraW5nID0gNCwgICAvLyBzdXBwcmVzcyBjaGVja2luZyBvZiB4bWwgdGFncworICAgIG5vX3RyYWNraW5nID0gOCwgICAgICAgICAgIC8vIHN1cHByZXNzIEFMTCB0cmFja2luZworICAgIGZsYWdzX2xhc3QgPSA4Cit9OworCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1NJR05BVFVSRSgpOworCisvKiBOT1RFIDogV2FybmluZyAgOiBXYXJuaW5nIDogV2FybmluZyA6IFdhcm5pbmcgOiBXYXJuaW5nCisgKiBJZiBhbnkgb2YgdGhlc2UgYXJlIGNoYW5nZWQgdG8gZGlmZmVyZW50IHNpemVkIHR5cGVzLCAKKyAqIGJpbmFyeV9pYXJjaGl2ZSB3b24ndCBiZSBhYmxlIHRvIHJlYWQgb2xkZXIgYXJjaGl2ZXMKKyAqIHVubGVzcyB5b3UgcmV2IHRoZSBsaWJyYXJ5IHZlcnNpb24gYW5kIGluY2x1ZGUgY29uZGl0aW9uYWwKKyAqIGNvZGUgYmFzZWQgb24gdGhlIGxpYnJhcnkgdmVyc2lvbi4gIFRoZXJlIGlzIG5vdGhpbmcKKyAqIGluaGVyZW50bHkgd3JvbmcgaW4gZG9pbmcgdGhpcyAtIGJ1dCB5b3UgaGF2ZSB0byBiZSBzdXBlcgorICogY2FyZWZ1bCBiZWNhdXNlIGl0J3MgZWFzeSB0byBnZXQgd3JvbmcgYW5kIHN0YXJ0IGJyZWFraW5nCisgKiBvbGQgYXJjaGl2ZXMgISEhCisgKi8KKworI2RlZmluZSBCT09TVF9BUkNISVZFX1NUUk9OR19UWVBFREVGKFQsIEQpICAgICAgICAgXAorICAgIGNsYXNzIEQgOiBwdWJsaWMgVCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgIHB1YmxpYzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICBleHBsaWNpdCBEKGNvbnN0IFQgdHQpIDogVCh0dCl7fSAgICAgICAgICAgXAorICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAorLyoqLworCitCT09TVF9BUkNISVZFX1NUUk9OR19UWVBFREVGKGNsYXNzX2lkX3R5cGUsIGNsYXNzX2lkX3JlZmVyZW5jZV90eXBlKQorQk9PU1RfQVJDSElWRV9TVFJPTkdfVFlQRURFRihjbGFzc19pZF90eXBlLCBjbGFzc19pZF9vcHRpb25hbF90eXBlKQorQk9PU1RfQVJDSElWRV9TVFJPTkdfVFlQRURFRihvYmplY3RfaWRfdHlwZSwgb2JqZWN0X3JlZmVyZW5jZV90eXBlKQorCit9Ly8gbmFtZXNwYWNlIGFyY2hpdmUKK30vLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbGV2ZWwuaHBwPgorCisvLyBzZXQgaW1wbGVtZW50YXRpb24gbGV2ZWwgdG8gcHJpbWl0aXZlIGZvciBhbGwgdHlwZXMKKy8vIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgc2VyaWFsaXphdGlvbiBsaWJyYXJ5CisKK0JPT1NUX0NMQVNTX0lNUExFTUVOVEFUSU9OKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSwgcHJpbWl0aXZlX3R5cGUpCitCT09TVF9DTEFTU19JTVBMRU1FTlRBVElPTihib29zdDo6YXJjaGl2ZTo6dmVyc2lvbl90eXBlLCBwcmltaXRpdmVfdHlwZSkKK0JPT1NUX0NMQVNTX0lNUExFTUVOVEFUSU9OKGJvb3N0OjphcmNoaXZlOjpjbGFzc19pZF90eXBlLCBwcmltaXRpdmVfdHlwZSkKK0JPT1NUX0NMQVNTX0lNUExFTUVOVEFUSU9OKGJvb3N0OjphcmNoaXZlOjpjbGFzc19pZF9yZWZlcmVuY2VfdHlwZSwgcHJpbWl0aXZlX3R5cGUpCitCT09TVF9DTEFTU19JTVBMRU1FTlRBVElPTihib29zdDo6YXJjaGl2ZTo6Y2xhc3NfaWRfb3B0aW9uYWxfdHlwZSwgcHJpbWl0aXZlX3R5cGUpCitCT09TVF9DTEFTU19JTVBMRU1FTlRBVElPTihib29zdDo6YXJjaGl2ZTo6Y2xhc3NfbmFtZV90eXBlLCBwcmltaXRpdmVfdHlwZSkKK0JPT1NUX0NMQVNTX0lNUExFTUVOVEFUSU9OKGJvb3N0OjphcmNoaXZlOjpvYmplY3RfaWRfdHlwZSwgcHJpbWl0aXZlX3R5cGUpCitCT09TVF9DTEFTU19JTVBMRU1FTlRBVElPTihib29zdDo6YXJjaGl2ZTo6b2JqZWN0X3JlZmVyZW5jZV90eXBlLCBwcmltaXRpdmVfdHlwZSkKK0JPT1NUX0NMQVNTX0lNUExFTUVOVEFUSU9OKGJvb3N0OjphcmNoaXZlOjp0cmFja2luZ190eXBlLCBwcmltaXRpdmVfdHlwZSkKKworI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vaXNfYml0d2lzZV9zZXJpYWxpemFibGUuaHBwPgorCisvLyBzZXQgdHlwZXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBzZXJpYWxpemF0aW9uIGxpYnJhcnkgCisvLyB0byBiZSBiaXR3aXNlIHNlcmlhbGl6YWJsZQorCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUpCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6dmVyc2lvbl90eXBlKQorQk9PU1RfSVNfQklUV0lTRV9TRVJJQUxJWkFCTEUoYm9vc3Q6OmFyY2hpdmU6OmNsYXNzX2lkX3R5cGUpCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6Y2xhc3NfaWRfcmVmZXJlbmNlX3R5cGUpCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6Y2xhc3NfaWRfb3B0aW9uYWxfdHlwZSkKK0JPT1NUX0lTX0JJVFdJU0VfU0VSSUFMSVpBQkxFKGJvb3N0OjphcmNoaXZlOjpjbGFzc19uYW1lX3R5cGUpCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6b2JqZWN0X2lkX3R5cGUpCitCT09TVF9JU19CSVRXSVNFX1NFUklBTElaQUJMRShib29zdDo6YXJjaGl2ZTo6b2JqZWN0X3JlZmVyZW5jZV90eXBlKQorQk9PU1RfSVNfQklUV0lTRV9TRVJJQUxJWkFCTEUoYm9vc3Q6OmFyY2hpdmU6OnRyYWNraW5nX3R5cGUpCisKKyNlbmRpZiAvL0JPT1NUX0FSQ0hJVkVfQkFTSUNfQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2Jhc2ljX2JpbmFyeV9pYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSwyMDQgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CQVNJQ19CSU5BUllfSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfQklOQVJZX0lBUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX2JpbmFyeV9pYXJjaGl2ZS5ocHAKKy8vCisvLyBhcmNoaXZlcyBzdG9yZWQgYXMgbmF0aXZlIGJpbmFyeSAtIHRoaXMgc2hvdWxkIGJlIHRoZSBmYXN0ZXN0IHdheQorLy8gdG8gYXJjaGl2ZSB0aGUgc3RhdGUgb2YgYSBncm91cCBvZiBvYmVjdHMuICBJdCBtYWtlcyBubyBhdHRlbXB0IHRvCisvLyBjb252ZXJ0IHRvIGFueSBjYW5vbmljYWwgZm9ybS4KKworLy8gSU4gR0VORVJBTCwgQVJDSElWRVMgQ1JFQVRFRCBXSVRIIFRISVMgQ0xBU1MgV0lMTCBOT1QgQkUgUkVBREFCTEUKKy8vIE9OIFBMQVRGT1JNIEFQQVJUIEZST00gVEhFIE9ORSBUSEVZIEFSRSBDUkVBVEVEIE9OCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL3dvcmthcm91bmQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9iYXNpY19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9jb21tb25faWFyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vY29sbGVjdGlvbl9zaXplX3R5cGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vc3RyaW5nLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL2l0ZW1fdmVyc2lvbl90eXBlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9pbnRlZ2VyX3RyYWl0cy5ocHA+CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7IAorbmFtZXNwYWNlIGFyY2hpdmUgeworCituYW1lc3BhY2UgZGV0YWlsIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlPiBjbGFzcyBpbnRlcmZhY2VfaWFyY2hpdmU7Cit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfYmluYXJ5X2lhcmNoaXZlIC0gcmVhZCBzZXJpYWxpemVkIG9iamVjdHMgZnJvbSBhIGlucHV0IGJpbmFyeSBzdHJlYW0KK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiYXNpY19iaW5hcnlfaWFyY2hpdmUgOiAKKyAgICBwdWJsaWMgZGV0YWlsOjpjb21tb25faWFyY2hpdmU8QXJjaGl2ZT4KK3sKKyNpZmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworcHVibGljOgorI2Vsc2UKK3Byb3RlY3RlZDoKKyAgICAjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA8IDE1MDApCisgICAgICAgIC8vIGZvciBzb21lIGluZXhwbGljYWJsZSByZWFzb24gaW5zZXJ0aW9uIG9mICJjbGFzcyIgZ2VuZXJhdGVzIGNvbXBpbGUgZXJybworICAgICAgICAvLyBvbiBtc3ZjIDcuMQorICAgICAgICBmcmllbmQgZGV0YWlsOjppbnRlcmZhY2VfaWFyY2hpdmU8QXJjaGl2ZT47CisgICAgI2Vsc2UKKyAgICAgICAgZnJpZW5kIGNsYXNzIGRldGFpbDo6aW50ZXJmYWNlX2lhcmNoaXZlPEFyY2hpdmU+OworICAgICNlbmRpZgorI2VuZGlmCisgICAgLy8gaW50ZXJtZWRpYXRlIGxldmVsIHRvIHN1cHBvcnQgb3ZlcnJpZGUgb2Ygb3BlcmF0b3JzCisgICAgLy8gZm90IHRlbXBsYXRlcyBpbiB0aGUgYWJzZW5jZSBvZiBwYXJ0aWFsIGZ1bmN0aW9uIAorICAgIC8vIHRlbXBsYXRlIG9yZGVyaW5nLiBJZiB3ZSBnZXQgaGVyZSBwYXNzIHRvIGJhc2UgY2xhc3MKKyAgICAvLyBub3RlIGV4dHJhIG5vbnNlbnNlIHRvIHNuZWFrIGl0IHBhc3MgdGhlIGJvcmxhbmQgY29tcGllcnMKKyAgICB0eXBlZGVmIGRldGFpbDo6Y29tbW9uX2lhcmNoaXZlPEFyY2hpdmU+IGRldGFpbF9jb21tb25faWFyY2hpdmU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIGxvYWRfb3ZlcnJpZGUoVCAmIHQpeworICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTo6bG9hZF9vdmVycmlkZSh0KTsKKyAgICB9CisKKyAgICAvLyBpbmNsdWRlIHRoZXNlIHRvIHRyYXAgYSBjaGFuZ2UgaW4gYmluYXJ5IGZvcm1hdCB3aGljaAorICAgIC8vIGlzbid0IHNwZWNpZmljYWxseSBoYW5kbGVkCisgICAgLy8gdXB0byAzMksgY2xhc3NlcworICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc2l6ZW9mKGNsYXNzX2lkX3R5cGUpID09IHNpemVvZihpbnRfbGVhc3QxNl90KSk7CisgICAgQk9PU1RfU1RBVElDX0FTU0VSVChzaXplb2YoY2xhc3NfaWRfcmVmZXJlbmNlX3R5cGUpID09IHNpemVvZihpbnRfbGVhc3QxNl90KSk7CisgICAgLy8gdXB0byAyRyBvYmplY3RzCisgICAgQk9PU1RfU1RBVElDX0FTU0VSVChzaXplb2Yob2JqZWN0X2lkX3R5cGUpID09IHNpemVvZih1aW50X2xlYXN0MzJfdCkpOworICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc2l6ZW9mKG9iamVjdF9yZWZlcmVuY2VfdHlwZSkgPT0gc2l6ZW9mKHVpbnRfbGVhc3QzMl90KSk7CisKKyAgICAvLyBiaW5hcnkgZmlsZXMgZG9uJ3QgaW5jbHVkZSB0aGUgb3B0aW9uYWwgaW5mb3JtYXRpb24gCisgICAgdm9pZCBsb2FkX292ZXJyaWRlKGNsYXNzX2lkX29wdGlvbmFsX3R5cGUgJiAvKiB0ICovKXt9CisKKyAgICB2b2lkIGxvYWRfb3ZlcnJpZGUodHJhY2tpbmdfdHlwZSAmIHQsIGludCAvKnZlcnNpb24qLyl7CisgICAgICAgIGxpYnJhcnlfdmVyc2lvbl90eXBlIGx2dCA9IHRoaXMtPmdldF9saWJyYXJ5X3ZlcnNpb24oKTsKKyAgICAgICAgaWYoYm9vc3Q6OmFyY2hpdmU6OmxpYnJhcnlfdmVyc2lvbl90eXBlKDYpIDwgbHZ0KXsKKyAgICAgICAgICAgIGludF9sZWFzdDhfdCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IGJvb3N0OjphcmNoaXZlOjp0cmFja2luZ190eXBlKHgpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICBib29sIHg9MDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpID4+IHg7CisgICAgICAgICAgICB0ID0gYm9vc3Q6OmFyY2hpdmU6OnRyYWNraW5nX3R5cGUoeCk7CisgICAgICAgIH0KKyAgICB9CisgICAgdm9pZCBsb2FkX292ZXJyaWRlKGNsYXNzX2lkX3R5cGUgJiB0KXsKKyAgICAgICAgbGlicmFyeV92ZXJzaW9uX3R5cGUgbHZ0ID0gdGhpcy0+Z2V0X2xpYnJhcnlfdmVyc2lvbigpOworICAgICAgICBpZihib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUoNykgPCBsdnQpeworICAgICAgICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTo6bG9hZF9vdmVycmlkZSh0KTsKKyAgICAgICAgfQorICAgICAgICBlbHNlCisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg2KSA8IGx2dCl7CisgICAgICAgICAgICBpbnRfbGVhc3QxNl90IHg9MDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpID4+IHg7CisgICAgICAgICAgICB0ID0gYm9vc3Q6OmFyY2hpdmU6OmNsYXNzX2lkX3R5cGUoeCk7CisgICAgICAgIH0KKyAgICAgICAgZWxzZXsKKyAgICAgICAgICAgIGludCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IGJvb3N0OjphcmNoaXZlOjpjbGFzc19pZF90eXBlKHgpOworICAgICAgICB9CisgICAgfQorICAgIHZvaWQgbG9hZF9vdmVycmlkZShjbGFzc19pZF9yZWZlcmVuY2VfdHlwZSAmIHQpeworICAgICAgICBsb2FkX292ZXJyaWRlKHN0YXRpY19jYXN0PGNsYXNzX2lkX3R5cGUgJj4odCkpOworICAgIH0KKworICAgIHZvaWQgbG9hZF9vdmVycmlkZSh2ZXJzaW9uX3R5cGUgJiB0KXsKKyAgICAgICAgbGlicmFyeV92ZXJzaW9uX3R5cGUgbHZ0ID0gdGhpcy0+Z2V0X2xpYnJhcnlfdmVyc2lvbigpOworICAgICAgICBpZihib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUoNykgPCBsdnQpeworICAgICAgICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTo6bG9hZF9vdmVycmlkZSh0KTsKKyAgICAgICAgfQorICAgICAgICBlbHNlCisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg2KSA8IGx2dCl7CisgICAgICAgICAgICB1aW50X2xlYXN0OF90IHg9MDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpID4+IHg7CisgICAgICAgICAgICB0ID0gYm9vc3Q6OmFyY2hpdmU6OnZlcnNpb25fdHlwZSh4KTsKKyAgICAgICAgfQorICAgICAgICBlbHNlCisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg1KSA8IGx2dCl7CisgICAgICAgICAgICB1aW50X2xlYXN0MTZfdCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IGJvb3N0OjphcmNoaXZlOjp2ZXJzaW9uX3R5cGUoeCk7CisgICAgICAgIH0KKyAgICAgICAgZWxzZQorICAgICAgICBpZihib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUoMikgPCBsdnQpeworICAgICAgICAgICAgLy8gdXB0byAyNTUgdmVyc2lvbnMKKyAgICAgICAgICAgIHVuc2lnbmVkIGNoYXIgeD0wOworICAgICAgICAgICAgKiB0aGlzLT5UaGlzKCkgPj4geDsKKyAgICAgICAgICAgIHQgPSB2ZXJzaW9uX3R5cGUoeCk7CisgICAgICAgIH0KKyAgICAgICAgZWxzZXsKKyAgICAgICAgICAgIHVuc2lnbmVkIGludCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IGJvb3N0OjphcmNoaXZlOjp2ZXJzaW9uX3R5cGUoeCk7CisgICAgICAgIH0KKyAgICB9CisKKyAgICB2b2lkIGxvYWRfb3ZlcnJpZGUoYm9vc3Q6OnNlcmlhbGl6YXRpb246Oml0ZW1fdmVyc2lvbl90eXBlICYgdCl7CisgICAgICAgIGxpYnJhcnlfdmVyc2lvbl90eXBlIGx2dCA9IHRoaXMtPmdldF9saWJyYXJ5X3ZlcnNpb24oKTsKKy8vICAgICAgICBpZihib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUoNykgPCBsdnQpeworICAgICAgICBpZihib29zdDo6YXJjaGl2ZTo6bGlicmFyeV92ZXJzaW9uX3R5cGUoNikgPCBsdnQpeworICAgICAgICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTo6bG9hZF9vdmVycmlkZSh0KTsKKyAgICAgICAgfQorICAgICAgICBlbHNlCisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg2KSA8IGx2dCl7CisgICAgICAgICAgICB1aW50X2xlYXN0MTZfdCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IGJvb3N0OjpzZXJpYWxpemF0aW9uOjppdGVtX3ZlcnNpb25fdHlwZSh4KTsKKyAgICAgICAgfQorICAgICAgICBlbHNleworICAgICAgICAgICAgdW5zaWduZWQgaW50IHg9MDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpID4+IHg7CisgICAgICAgICAgICB0ID0gYm9vc3Q6OnNlcmlhbGl6YXRpb246Oml0ZW1fdmVyc2lvbl90eXBlKHgpOworICAgICAgICB9CisgICAgfQorCisgICAgdm9pZCBsb2FkX292ZXJyaWRlKHNlcmlhbGl6YXRpb246OmNvbGxlY3Rpb25fc2l6ZV90eXBlICYgdCl7CisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg1KSA8IHRoaXMtPmdldF9saWJyYXJ5X3ZlcnNpb24oKSl7CisgICAgICAgICAgICB0aGlzLT5kZXRhaWxfY29tbW9uX2lhcmNoaXZlOjpsb2FkX292ZXJyaWRlKHQpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICB1bnNpZ25lZCBpbnQgeD0wOworICAgICAgICAgICAgKiB0aGlzLT5UaGlzKCkgPj4geDsKKyAgICAgICAgICAgIHQgPSBzZXJpYWxpemF0aW9uOjpjb2xsZWN0aW9uX3NpemVfdHlwZSh4KTsKKyAgICAgICAgfSAKKyAgICB9CisKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWRfb3ZlcnJpZGUoY2xhc3NfbmFtZV90eXBlICYgdCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBpbml0KCk7CisgICAKKyAgICBiYXNpY19iaW5hcnlfaWFyY2hpdmUodW5zaWduZWQgaW50IGZsYWdzKSA6CisgICAgICAgIGRldGFpbDo6Y29tbW9uX2lhcmNoaXZlPEFyY2hpdmU+KGZsYWdzKQorICAgIHt9Cit9OworCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9CQVNJQ19CSU5BUllfSUFSQ0hJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9iYXNpY19iaW5hcnlfaXByaW1pdGl2ZS5ocHAKQEAgLTAsMCArMSwxOTggQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CSU5BUllfSVBSSU1JVElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CSU5BUllfSVBSSU1JVElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorI3ByYWdtYSB3YXJuaW5nKCBkaXNhYmxlIDogNDgwMCApCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX2JpbmFyeV9pcHJpbWl0aXZlLmhwcAorLy8KKy8vIGFyY2hpdmVzIHN0b3JlZCBhcyBuYXRpdmUgYmluYXJ5IC0gdGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3Qgd2F5CisvLyB0byBhcmNoaXZlIHRoZSBzdGF0ZSBvZiBhIGdyb3VwIG9mIG9iZWN0cy4gIEl0IG1ha2VzIG5vIGF0dGVtcHQgdG8KKy8vIGNvbnZlcnQgdG8gYW55IGNhbm9uaWNhbCBmb3JtLgorCisvLyBJTiBHRU5FUkFMLCBBUkNISVZFUyBDUkVBVEVEIFdJVEggVEhJUyBDTEFTUyBXSUxMIE5PVCBCRSBSRUFEQUJMRQorLy8gT04gUExBVEZPUk0gQVBBUlQgRlJPTSBUSEUgT05FIFRIRVkgQVJFIENSRUFURUQgT04KKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8aW9zZndkPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPGNzdHJpbmc+IC8vIHN0ZDo6bWVtY3B5CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc3RkOjpzaXplX3QKKyNpbmNsdWRlIDxzdHJlYW1idWY+IC8vIGJhc2ljX3N0cmVhbWJ1ZgorI2luY2x1ZGUgPHN0cmluZz4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaWYgZGVmaW5lZChCT09TVF9OT19TVERDX05BTUVTUEFDRSkKK25hbWVzcGFjZSBzdGR7IAorICAgIHVzaW5nIDo6bWVtY3B5OyAKKyAgICB1c2luZyA6OnNpemVfdDsKK30gLy8gbmFtZXNwYWNlIHN0ZAorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9jc3RkaW50LmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3Rocm93X2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaW50ZWdlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvaW50ZWdlcl90cmFpdHMuaHBwPgorCisvLyNpbmNsdWRlIDxib29zdC9tcGwvcGxhY2Vob2xkZXJzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL2lzX2JpdHdpc2Vfc2VyaWFsaXphYmxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL2FycmF5LmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfc3RyZWFtYnVmX2xvY2FsZV9zYXZlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9jb2RlY3Z0X251bGwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYXJjaGl2ZV9leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworbmFtZXNwYWNlIGJvb3N0IHsgCituYW1lc3BhY2UgYXJjaGl2ZSB7CisKKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiaW5hcnlfaWFyY2hpdmUgLSByZWFkIHNlcmlhbGl6ZWQgb2JqZWN0cyBmcm9tIGEgaW5wdXQgYmluYXJ5IHN0cmVhbQordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgRWxlbSwgY2xhc3MgVHI+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiYXNpY19iaW5hcnlfaXByaW1pdGl2ZSB7CisjaWZuZGVmIEJPT1NUX05PX01FTUJFUl9URU1QTEFURV9GUklFTkRTCisgICAgZnJpZW5kIGNsYXNzIGxvYWRfYWNjZXNzOworcHJvdGVjdGVkOgorI2Vsc2UKK3B1YmxpYzoKKyNlbmRpZgorICAgIHN0ZDo6YmFzaWNfc3RyZWFtYnVmPEVsZW0sIFRyPiAmIG1fc2I7CisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgI2lmbmRlZiBCT09TVF9OT19TVERfTE9DQUxFCisgICAgLy8gbm90ZSBvcmRlciEgLSBpZiB5b3UgY2hhbmdlIHRoaXMsIGxpYnN0ZCsrIHdpbGwgZmFpbCEKKyAgICAvLyBhKSBjcmVhdGUgbmV3IGxvY2FsZSB3aXRoIG5ldyBjb2RlY3Z0IGZhY2V0CisgICAgLy8gYikgc2F2ZSBjdXJyZW50IGxvY2FsZQorICAgIC8vIGMpIGNoYW5nZSBsb2NhbGUgdG8gbmV3IG9uZQorICAgIC8vIGQpIHVzZSBzdHJlYW0gYnVmZmVyCisgICAgLy8gZSkgY2hhbmdlIGxvY2FsZSBiYWNrIHRvIG9yaWdpbmFsCisgICAgLy8gZikgZGVzdHJveSBuZXcgY29kZWN2dCBmYWNldAorICAgIGJvb3N0OjphcmNoaXZlOjpjb2RlY3Z0X251bGw8RWxlbT4gY29kZWN2dF9udWxsX2ZhY2V0OworICAgIGJhc2ljX3N0cmVhbWJ1Zl9sb2NhbGVfc2F2ZXI8RWxlbSwgVHI+IGxvY2FsZV9zYXZlcjsKKyAgICBzdGQ6OmxvY2FsZSBhcmNoaXZlX2xvY2FsZTsKKyAgICAjZW5kaWYKKworICAgIC8vIG1haW4gdGVtcGxhdGUgZm9yIHNlcmlsaXphdGlvbiBvZiBwcmltaXRpdmUgdHlwZXMKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgbG9hZChUICYgdCl7CisgICAgICAgIGxvYWRfYmluYXJ5KCYgdCwgc2l6ZW9mKFQpKTsKKyAgICB9CisKKyAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KKyAgICAvLyBmdW5kYW1lbnRhbCB0eXBlcyB0aGF0IG5lZWQgc3BlY2lhbCB0cmVhdG1lbnQKKyAgICAKKyAgICAvLyB0cmFwIHVzYWdlIG9mIGludmFsaWQgdW5pbml0aWFsaXplZCBib29sZWFuIAorICAgIHZvaWQgbG9hZChib29sICYgdCl7CisgICAgICAgIGxvYWRfYmluYXJ5KCYgdCwgc2l6ZW9mKHQpKTsKKyAgICAgICAgaW50IGkgPSB0OworICAgICAgICBCT09TVF9BU1NFUlQoMCA9PSBpIHx8IDEgPT0gaSk7CisgICAgICAgICh2b2lkKWk7IC8vIHdhcm5pbmcgc3VwcHJlc3Npb24gZm9yIHJlbGVhc2UgYnVpbGRzLgorICAgIH0KKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWQoc3RkOjpzdHJpbmcgJnMpOworICAgICNpZm5kZWYgQk9PU1RfTk9fU1REX1dTVFJJTkcKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWQoc3RkOjp3c3RyaW5nICZ3cyk7CisgICAgI2VuZGlmCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBsb2FkKGNoYXIgKiB0KTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWQod2NoYXJfdCAqIHQpOworCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBpbml0KCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIAorICAgIGJhc2ljX2JpbmFyeV9pcHJpbWl0aXZlKAorICAgICAgICBzdGQ6OmJhc2ljX3N0cmVhbWJ1ZjxFbGVtLCBUcj4gJiBzYiwgCisgICAgICAgIGJvb2wgbm9fY29kZWN2dAorICAgICk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIAorICAgIH5iYXNpY19iaW5hcnlfaXByaW1pdGl2ZSgpOworcHVibGljOgorICAgIC8vIHdlIHByb3ZpZGUgYW4gb3B0aW1pemVkIGxvYWQgZm9yIGFsbCBmdW5kYW1lbnRhbCB0eXBlcworICAgIC8vIHR5cGVkZWYgc2VyaWFsaXphdGlvbjo6aXNfYml0d2lzZV9zZXJpYWxpemFibGU8bXBsOjpfMT4gCisgICAgLy8gdXNlX2FycmF5X29wdGltaXphdGlvbjsKKyAgICBzdHJ1Y3QgdXNlX2FycmF5X29wdGltaXphdGlvbiB7ICAKKyAgICAgICAgdGVtcGxhdGUgPGNsYXNzIFQ+ICAKKyAgICAgICAgI2lmIGRlZmluZWQoQk9PU1RfTk9fREVQRU5ERU5UX05FU1RFRF9ERVJJVkFUSU9OUykgIAorICAgICAgICAgICAgc3RydWN0IGFwcGx5IHsgIAorICAgICAgICAgICAgICAgIHR5cGVkZWYgdHlwZW5hbWUgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmlzX2JpdHdpc2Vfc2VyaWFsaXphYmxlPCBUID46OnR5cGUgdHlwZTsgIAorICAgICAgICAgICAgfTsKKyAgICAgICAgI2Vsc2UKKyAgICAgICAgICAgIHN0cnVjdCBhcHBseSA6IHB1YmxpYyBib29zdDo6c2VyaWFsaXphdGlvbjo6aXNfYml0d2lzZV9zZXJpYWxpemFibGU8IFQgPiB7fTsgIAorICAgICAgICAjZW5kaWYKKyAgICB9OworCisgICAgLy8gdGhlIG9wdGltaXplZCBsb2FkX2FycmF5IGRpc3BhdGNoZXMgdG8gbG9hZF9iaW5hcnkgCisgICAgdGVtcGxhdGUgPGNsYXNzIFZhbHVlVHlwZT4KKyAgICB2b2lkIGxvYWRfYXJyYXkoc2VyaWFsaXphdGlvbjo6YXJyYXlfd3JhcHBlcjxWYWx1ZVR5cGU+JiBhLCB1bnNpZ25lZCBpbnQpCisgICAgeworICAgICAgbG9hZF9iaW5hcnkoYS5hZGRyZXNzKCksYS5jb3VudCgpKnNpemVvZihWYWx1ZVR5cGUpKTsKKyAgICB9CisKKyAgICB2b2lkCisgICAgbG9hZF9iaW5hcnkodm9pZCAqYWRkcmVzcywgc3RkOjpzaXplX3QgY291bnQpOworfTsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgRWxlbSwgY2xhc3MgVHI+CitpbmxpbmUgdm9pZAorYmFzaWNfYmluYXJ5X2lwcmltaXRpdmU8QXJjaGl2ZSwgRWxlbSwgVHI+Ojpsb2FkX2JpbmFyeSgKKyAgICB2b2lkICphZGRyZXNzLCAKKyAgICBzdGQ6OnNpemVfdCBjb3VudAorKXsKKyAgICAvLyBub3RlOiBhbiBvcHRpbWl6ZXIgc2hvdWxkIGVsaW1pbmF0ZSB0aGUgZm9sbG93aW5nIGZvciBjaGFyIGZpbGVzCisgICAgQk9PU1RfQVNTRVJUKAorICAgICAgICBzdGF0aWNfY2FzdDxzdGQ6OnN0cmVhbXNpemU+KGNvdW50IC8gc2l6ZW9mKEVsZW0pKSAKKyAgICAgICAgPD0gYm9vc3Q6OmludGVnZXJfdHJhaXRzPHN0ZDo6c3RyZWFtc2l6ZT46OmNvbnN0X21heAorICAgICk7CisgICAgc3RkOjpzdHJlYW1zaXplIHMgPSBzdGF0aWNfY2FzdDxzdGQ6OnN0cmVhbXNpemU+KGNvdW50IC8gc2l6ZW9mKEVsZW0pKTsKKyAgICBzdGQ6OnN0cmVhbXNpemUgc2NvdW50ID0gbV9zYi5zZ2V0bigKKyAgICAgICAgc3RhdGljX2Nhc3Q8RWxlbSAqPihhZGRyZXNzKSwgCisgICAgICAgIHMKKyAgICApOworICAgIGlmKHNjb3VudCAhPSBzKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZV9leGNlcHRpb24oYXJjaGl2ZV9leGNlcHRpb246OmlucHV0X3N0cmVhbV9lcnJvcikKKyAgICAgICAgKTsKKyAgICAvLyBub3RlOiBhbiBvcHRpbWl6ZXIgc2hvdWxkIGVsaW1pbmF0ZSB0aGUgZm9sbG93aW5nIGZvciBjaGFyIGZpbGVzCisgICAgQk9PU1RfQVNTRVJUKGNvdW50ICUgc2l6ZW9mKEVsZW0pIDw9IGJvb3N0OjppbnRlZ2VyX3RyYWl0czxzdGQ6OnN0cmVhbXNpemU+Ojpjb25zdF9tYXgpOworICAgIHMgPSBzdGF0aWNfY2FzdDxzdGQ6OnN0cmVhbXNpemU+KGNvdW50ICUgc2l6ZW9mKEVsZW0pKTsKKyAgICBpZigwIDwgcyl7CisvLyAgICAgICAgaWYoaXMuZmFpbCgpKQorLy8gICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorLy8gICAgICAgICAgICAgICAgYXJjaGl2ZV9leGNlcHRpb24oYXJjaGl2ZV9leGNlcHRpb246OnN0cmVhbV9lcnJvcikKKy8vICAgICAgICApOworICAgICAgICBFbGVtIHQ7CisgICAgICAgIHNjb3VudCA9IG1fc2Iuc2dldG4oJiB0LCAxKTsKKyAgICAgICAgaWYoc2NvdW50ICE9IDEpCisgICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgICAgIGFyY2hpdmVfZXhjZXB0aW9uKGFyY2hpdmVfZXhjZXB0aW9uOjppbnB1dF9zdHJlYW1fZXJyb3IpCisgICAgICAgICAgICApOworICAgICAgICBzdGQ6Om1lbWNweShzdGF0aWNfY2FzdDxjaGFyKj4oYWRkcmVzcykgKyAoY291bnQgLSBzKSwgJnQsIHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90PihzKSk7CisgICAgfQorfQorCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcCBwcmFnbWFzCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JJTkFSWV9JUFJJTUlUSVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmFzaWNfYmluYXJ5X29hcmNoaXZlLmhwcApAQCAtMCwwICsxLDE4NSBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX0JJTkFSWV9PQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19CSU5BUllfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfYmluYXJ5X29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKy8vIGFyY2hpdmVzIHN0b3JlZCBhcyBuYXRpdmUgYmluYXJ5IC0gdGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3Qgd2F5CisvLyB0byBhcmNoaXZlIHRoZSBzdGF0ZSBvZiBhIGdyb3VwIG9mIG9iZWN0cy4gIEl0IG1ha2VzIG5vIGF0dGVtcHQgdG8KKy8vIGNvbnZlcnQgdG8gYW55IGNhbm9uaWNhbCBmb3JtLgorCisvLyBJTiBHRU5FUkFMLCBBUkNISVZFUyBDUkVBVEVEIFdJVEggVEhJUyBDTEFTUyBXSUxMIE5PVCBCRSBSRUFEQUJMRQorLy8gT04gUExBVEZPUk0gQVBBUlQgRlJPTSBUSEUgT05FIFRIRVkgQVJFIENSRUFURSBPTgorCisjaW5jbHVkZSA8Ym9vc3QvYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2ludGVnZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2ludGVnZXJfdHJhaXRzLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NvbW1vbl9vYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zdHJpbmcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vY29sbGVjdGlvbl9zaXplX3R5cGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vaXRlbV92ZXJzaW9uX3R5cGUuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCituYW1lc3BhY2UgZGV0YWlsIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlPiBjbGFzcyBpbnRlcmZhY2Vfb2FyY2hpdmU7Cit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfYmluYXJ5X29hcmNoaXZlIC0gd3JpdGUgc2VyaWFsaXplZCBvYmplY3RzIHRvIGEgYmluYXJ5IG91dHB1dCBzdHJlYW0KKy8vIG5vdGU6IHRoaXMgYXJjaGl2ZSBoYXMgbm8gcHJldGVuc2lvbnMgdG8gcG9ydGFiaWxpdHkuICBBcmNoaXZlIGZvcm1hdAorLy8gbWF5IHZhcnkgYWNyb3NzIG1hY2hpbmUgYXJjaGl0ZWN0dXJlcyBhbmQgY29tcGlsZXJzLiAgQWJvdXQgdGhlIG9ubHkKKy8vIGd1YXJlbnRlZSBpcyB0aGF0IGFuIGFyY2hpdmUgY3JlYXRlZCB3aXRoIHRoaXMgY29kZSB3aWxsIGJlIHJlYWRhYmxlCisvLyBieSBhIHByb2dyYW0gYnVpbHQgd2l0aCB0aGUgc2FtZSB0b29scyBmb3IgdGhlIHNhbWUgbWFjaG5lLiAgVGhpcyBjbGFzcworLy8gZG9lcyBoYXZlIHRoZSB2aXJ0dWUgb2YgYnVpZGluZyB0aGUgc21hbGxlcyBhcmNoaXZlIGluIHRoZSBtaW5pbXVtIGFtb3VudAorLy8gb2YgdGltZS4gIFNvIHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBpdCBtYXkgYmUgaGUgcmlnaHQgY2hvaWNlLgordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX2JpbmFyeV9vYXJjaGl2ZSA6IAorICAgIHB1YmxpYyBkZXRhaWw6OmNvbW1vbl9vYXJjaGl2ZTxBcmNoaXZlPgoreworI2lmZGVmIEJPT1NUX05PX01FTUJFUl9URU1QTEFURV9GUklFTkRTCitwdWJsaWM6CisjZWxzZQorcHJvdGVjdGVkOgorICAgICNpZiBCT09TVF9XT1JLQVJPVU5EKEJPT1NUX01TVkMsIDwgMTUwMCkKKyAgICAgICAgLy8gZm9yIHNvbWUgaW5leHBsaWNhYmxlIHJlYXNvbiBpbnNlcnRpb24gb2YgImNsYXNzIiBnZW5lcmF0ZXMgY29tcGlsZSBlcnJvCisgICAgICAgIC8vIG9uIG1zdmMgNy4xCisgICAgICAgIGZyaWVuZCBkZXRhaWw6OmludGVyZmFjZV9vYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAjZWxzZQorICAgICAgICBmcmllbmQgY2xhc3MgZGV0YWlsOjppbnRlcmZhY2Vfb2FyY2hpdmU8QXJjaGl2ZT47CisgICAgI2VuZGlmCisjZW5kaWYKKyAgICAvLyBhbnkgZGF0YXR5cGUgbm90IHNwZWNpZmVkIGJlbG93IHdpbGwgYmUgaGFuZGxlZCBieSBiYXNlIGNsYXNzCisgICAgdHlwZWRlZiBkZXRhaWw6OmNvbW1vbl9vYXJjaGl2ZTxBcmNoaXZlPiBkZXRhaWxfY29tbW9uX29hcmNoaXZlOworICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgdm9pZCBzYXZlX292ZXJyaWRlKGNvbnN0IFQgJiB0KXsKKyAgICAgIHRoaXMtPmRldGFpbF9jb21tb25fb2FyY2hpdmU6OnNhdmVfb3ZlcnJpZGUodCk7CisgICAgfQorCisgICAgLy8gaW5jbHVkZSB0aGVzZSB0byB0cmFwIGEgY2hhbmdlIGluIGJpbmFyeSBmb3JtYXQgd2hpY2gKKyAgICAvLyBpc24ndCBzcGVjaWZpY2FsbHkgaGFuZGxlZAorICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc2l6ZW9mKHRyYWNraW5nX3R5cGUpID09IHNpemVvZihib29sKSk7CisgICAgLy8gdXB0byAzMksgY2xhc3NlcworICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc2l6ZW9mKGNsYXNzX2lkX3R5cGUpID09IHNpemVvZihpbnRfbGVhc3QxNl90KSk7CisgICAgQk9PU1RfU1RBVElDX0FTU0VSVChzaXplb2YoY2xhc3NfaWRfcmVmZXJlbmNlX3R5cGUpID09IHNpemVvZihpbnRfbGVhc3QxNl90KSk7CisgICAgLy8gdXB0byAyRyBvYmplY3RzCisgICAgQk9PU1RfU1RBVElDX0FTU0VSVChzaXplb2Yob2JqZWN0X2lkX3R5cGUpID09IHNpemVvZih1aW50X2xlYXN0MzJfdCkpOworICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQoc2l6ZW9mKG9iamVjdF9yZWZlcmVuY2VfdHlwZSkgPT0gc2l6ZW9mKHVpbnRfbGVhc3QzMl90KSk7CisKKyAgICAvLyBiaW5hcnkgZmlsZXMgZG9uJ3QgaW5jbHVkZSB0aGUgb3B0aW9uYWwgaW5mb3JtYXRpb24gCisgICAgdm9pZCBzYXZlX292ZXJyaWRlKGNvbnN0IGNsYXNzX2lkX29wdGlvbmFsX3R5cGUgJiAvKiB0ICovKXt9CisKKyAgICAvLyBlbmFibGUgdGhpcyBpZiB3ZSBkZWNpZGUgdG8gc3VwcG9ydCBnZW5lcmF0aW9uIG9mIHByZXZpb3VzIHZlcnNpb25zCisgICAgI2lmIDAKKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoY29uc3QgYm9vc3Q6OmFyY2hpdmU6OnZlcnNpb25fdHlwZSAmIHQpeworICAgICAgICBsaWJyYXJ5X3ZlcnNpb25fdHlwZSBsdnQgPSB0aGlzLT5nZXRfbGlicmFyeV92ZXJzaW9uKCk7CisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg3KSA8IGx2dCl7CisgICAgICAgICAgICB0aGlzLT5kZXRhaWxfY29tbW9uX29hcmNoaXZlOjpzYXZlX292ZXJyaWRlKHQpOworICAgICAgICB9CisgICAgICAgIGVsc2UKKyAgICAgICAgaWYoYm9vc3Q6OmFyY2hpdmU6OmxpYnJhcnlfdmVyc2lvbl90eXBlKDYpIDwgbHZ0KXsKKyAgICAgICAgICAgIGNvbnN0IGJvb3N0Ojp1aW50X2xlYXN0MTZfdCB4ID0gdDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHg7CisgICAgICAgIH0KKyAgICAgICAgZWxzZXsKKyAgICAgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCB4ID0gdDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHg7CisgICAgICAgIH0KKyAgICB9CisgICAgdm9pZCBzYXZlX292ZXJyaWRlKGNvbnN0IGJvb3N0OjpzZXJpYWxpemF0aW9uOjppdGVtX3ZlcnNpb25fdHlwZSAmIHQpeworICAgICAgICBsaWJyYXJ5X3ZlcnNpb25fdHlwZSBsdnQgPSB0aGlzLT5nZXRfbGlicmFyeV92ZXJzaW9uKCk7CisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg3KSA8IGx2dCl7CisgICAgICAgICAgICB0aGlzLT5kZXRhaWxfY29tbW9uX29hcmNoaXZlOjpzYXZlX292ZXJyaWRlKHQpOworICAgICAgICB9CisgICAgICAgIGVsc2UKKyAgICAgICAgaWYoYm9vc3Q6OmFyY2hpdmU6OmxpYnJhcnlfdmVyc2lvbl90eXBlKDYpIDwgbHZ0KXsKKyAgICAgICAgICAgIGNvbnN0IGJvb3N0Ojp1aW50X2xlYXN0MTZfdCB4ID0gdDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHg7CisgICAgICAgIH0KKyAgICAgICAgZWxzZXsKKyAgICAgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCB4ID0gdDsKKyAgICAgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHg7CisgICAgICAgIH0KKyAgICB9CisKKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoY2xhc3NfaWRfdHlwZSAmIHQpeworICAgICAgICBsaWJyYXJ5X3ZlcnNpb25fdHlwZSBsdnQgPSB0aGlzLT5nZXRfbGlicmFyeV92ZXJzaW9uKCk7CisgICAgICAgIGlmKGJvb3N0OjphcmNoaXZlOjpsaWJyYXJ5X3ZlcnNpb25fdHlwZSg3KSA8IGx2dCl7CisgICAgICAgICAgICB0aGlzLT5kZXRhaWxfY29tbW9uX29hcmNoaXZlOjpzYXZlX292ZXJyaWRlKHQpOworICAgICAgICB9CisgICAgICAgIGVsc2UKKyAgICAgICAgaWYoYm9vc3Q6OmFyY2hpdmU6OmxpYnJhcnlfdmVyc2lvbl90eXBlKDYpIDwgbHZ0KXsKKyAgICAgICAgICAgIGNvbnN0IGJvb3N0OjppbnRfbGVhc3QxNl90IHggPSB0OworICAgICAgICAgICAgKiB0aGlzLT5UaGlzKCkgPDwgeDsKKyAgICAgICAgfQorICAgICAgICBlbHNleworICAgICAgICAgICAgY29uc3QgaW50IHggPSB0OworICAgICAgICAgICAgKiB0aGlzLT5UaGlzKCkgPDwgeDsKKyAgICAgICAgfQorICAgIH0KKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoY2xhc3NfaWRfcmVmZXJlbmNlX3R5cGUgJiB0KXsKKyAgICAgICAgc2F2ZV9vdmVycmlkZShzdGF0aWNfY2FzdDxjbGFzc19pZF90eXBlICY+KHQpKTsKKyAgICB9CisKKyAgICAjZW5kaWYKKworICAgIC8vIGV4cGxpY2l0bHkgY29udmVydCB0byBjaGFyICogdG8gYXZvaWQgY29tcGlsZSBhbWJpZ3VpdGllcworICAgIHZvaWQgc2F2ZV9vdmVycmlkZShjb25zdCBjbGFzc19uYW1lX3R5cGUgJiB0KXsKKyAgICAgICAgY29uc3Qgc3RkOjpzdHJpbmcgcyh0KTsKKyAgICAgICAgKiB0aGlzLT5UaGlzKCkgPDwgczsKKyAgICB9CisKKyAgICAjaWYgMAorICAgIHZvaWQgc2F2ZV9vdmVycmlkZShjb25zdCBzZXJpYWxpemF0aW9uOjpjb2xsZWN0aW9uX3NpemVfdHlwZSAmIHQpeworICAgICAgICBpZiAoZ2V0X2xpYnJhcnlfdmVyc2lvbigpIDwgYm9vc3Q6OmFyY2hpdmU6OmxpYnJhcnlfdmVyc2lvbl90eXBlKDYpKXsKKyAgICAgICAgICAgIHVuc2lnbmVkIGludCB4PTA7CisgICAgICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB4OworICAgICAgICAgICAgdCA9IHNlcmlhbGl6YXRpb246OmNvbGxlY3Rpb25fc2l6ZV90eXBlKHgpOworICAgICAgICB9IAorICAgICAgICBlbHNleworICAgICAgICAgICAgKiB0aGlzLT5UaGlzKCkgPj4gdDsKKyAgICAgICAgfQorICAgIH0KKyAgICAjZW5kaWYKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGluaXQoKTsKKworICAgIGJhc2ljX2JpbmFyeV9vYXJjaGl2ZSh1bnNpZ25lZCBpbnQgZmxhZ3MpIDoKKyAgICAgICAgZGV0YWlsOjpjb21tb25fb2FyY2hpdmU8QXJjaGl2ZT4oZmxhZ3MpCisgICAge30KK307CisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JBU0lDX0JJTkFSWV9PQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2Jhc2ljX2JpbmFyeV9vcHJpbWl0aXZlLmhwcApAQCAtMCwwICsxLDE4OCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX0JJTkFSWV9PUFJJTUlUSVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0JBU0lDX0JJTkFSWV9PUFJJTUlUSVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX2JpbmFyeV9vcHJpbWl0aXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKy8vIGFyY2hpdmVzIHN0b3JlZCBhcyBuYXRpdmUgYmluYXJ5IC0gdGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3Qgd2F5CisvLyB0byBhcmNoaXZlIHRoZSBzdGF0ZSBvZiBhIGdyb3VwIG9mIG9iZWN0cy4gIEl0IG1ha2VzIG5vIGF0dGVtcHQgdG8KKy8vIGNvbnZlcnQgdG8gYW55IGNhbm9uaWNhbCBmb3JtLgorCisvLyBJTiBHRU5FUkFMLCBBUkNISVZFUyBDUkVBVEVEIFdJVEggVEhJUyBDTEFTUyBXSUxMIE5PVCBCRSBSRUFEQUJMRQorLy8gT04gUExBVEZPUk0gQVBBUlQgRlJPTSBUSEUgT05FIFRIRVkgQVJFIENSRUFURSBPTgorCisjaW5jbHVkZSA8aW9zZndkPgorI2luY2x1ZGUgPGJvb3N0L2Fzc2VydC5ocHA+CisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPHN0cmVhbWJ1Zj4gLy8gYmFzaWNfc3RyZWFtYnVmCisjaW5jbHVkZSA8c3RyaW5nPgorI2luY2x1ZGUgPGNzdGRkZWY+IC8vIHNpemVfdAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZHsgCisgICAgdXNpbmcgOjpzaXplX3Q7IAorfSAvLyBuYW1lc3BhY2Ugc3RkCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2ludGVnZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2ludGVnZXJfdHJhaXRzLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zY29wZWRfcHRyLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3Rocm93X2V4Y2VwdGlvbi5ocHA+CisKKy8vI2luY2x1ZGUgPGJvb3N0L21wbC9wbGFjZWhvbGRlcnMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vaXNfYml0d2lzZV9zZXJpYWxpemFibGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vYXJyYXkuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9iYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2NvZGVjdnRfbnVsbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9hcmNoaXZlX2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYXV0b19saW5rX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiYXNpY19iaW5hcnlfb3ByaW1pdGl2ZSAtIGJpbmFyeSBvdXRwdXQgb2YgcHJtaXRpdmVzCisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIEVsZW0sIGNsYXNzIFRyPgorY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmFzaWNfYmluYXJ5X29wcmltaXRpdmUgeworI2lmbmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworICAgIGZyaWVuZCBjbGFzcyBzYXZlX2FjY2VzczsKK3Byb3RlY3RlZDoKKyNlbHNlCitwdWJsaWM6CisjZW5kaWYKKyAgICBzdGQ6OmJhc2ljX3N0cmVhbWJ1ZjxFbGVtLCBUcj4gJiBtX3NiOworICAgIC8vIHJldHVybiBhIHBvaW50ZXIgdG8gdGhlIG1vc3QgZGVyaXZlZCBjbGFzcworICAgIEFyY2hpdmUgKiBUaGlzKCl7CisgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxBcmNoaXZlICo+KHRoaXMpOworICAgIH0KKyAgICAjaWZuZGVmIEJPT1NUX05PX1NURF9MT0NBTEUKKyAgICAvLyBub3RlIG9yZGVyISAtIGlmIHlvdSBjaGFuZ2UgdGhpcywgbGlic3RkKysgd2lsbCBmYWlsIQorICAgIC8vIGEpIGNyZWF0ZSBuZXcgbG9jYWxlIHdpdGggbmV3IGNvZGVjdnQgZmFjZXQKKyAgICAvLyBiKSBzYXZlIGN1cnJlbnQgbG9jYWxlCisgICAgLy8gYykgY2hhbmdlIGxvY2FsZSB0byBuZXcgb25lCisgICAgLy8gZCkgdXNlIHN0cmVhbSBidWZmZXIKKyAgICAvLyBlKSBjaGFuZ2UgbG9jYWxlIGJhY2sgdG8gb3JpZ2luYWwKKyAgICAvLyBmKSBkZXN0cm95IG5ldyBjb2RlY3Z0IGZhY2V0CisgICAgYm9vc3Q6OmFyY2hpdmU6OmNvZGVjdnRfbnVsbDxFbGVtPiBjb2RlY3Z0X251bGxfZmFjZXQ7CisgICAgYmFzaWNfc3RyZWFtYnVmX2xvY2FsZV9zYXZlcjxFbGVtLCBUcj4gbG9jYWxlX3NhdmVyOworICAgIHN0ZDo6bG9jYWxlIGFyY2hpdmVfbG9jYWxlOworICAgICNlbmRpZgorICAgIC8vIGRlZmF1bHQgc2F2aW5nIG9mIHByaW1pdGl2ZXMuCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmUoY29uc3QgVCAmIHQpCisgICAgeworICAgICAgICBzYXZlX2JpbmFyeSgmIHQsIHNpemVvZihUKSk7CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZnVuZGFtZW50YWwgdHlwZXMgdGhhdCBuZWVkIHNwZWNpYWwgdHJlYXRtZW50CisgICAgCisgICAgLy8gdHJhcCB1c2FnZSBvZiBpbnZhbGlkIHVuaW5pdGlhbGl6ZWQgYm9vbGVhbiB3aGljaCB3b3VsZAorICAgIC8vIG90aGVyd2lzZSBjcmFzaCBvbiBsb2FkLgorICAgIHZvaWQgc2F2ZShjb25zdCBib29sIHQpeworICAgICAgICBCT09TVF9BU1NFUlQoMCA9PSBzdGF0aWNfY2FzdDxpbnQ+KHQpIHx8IDEgPT0gc3RhdGljX2Nhc3Q8aW50Pih0KSk7CisgICAgICAgIHNhdmVfYmluYXJ5KCYgdCwgc2l6ZW9mKHQpKTsKKyAgICB9CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBzYXZlKGNvbnN0IHN0ZDo6c3RyaW5nICZzKTsKKyAgICAjaWZuZGVmIEJPT1NUX05PX1NURF9XU1RSSU5HCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBzYXZlKGNvbnN0IHN0ZDo6d3N0cmluZyAmd3MpOworICAgICNlbmRpZgorICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZShjb25zdCBjaGFyICogdCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBzYXZlKGNvbnN0IHdjaGFyX3QgKiB0KTsKKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgaW5pdCgpOworICAgIAorICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCAKKyAgICBiYXNpY19iaW5hcnlfb3ByaW1pdGl2ZSgKKyAgICAgICAgc3RkOjpiYXNpY19zdHJlYW1idWY8RWxlbSwgVHI+ICYgc2IsIAorICAgICAgICBib29sIG5vX2NvZGVjdnQKKyAgICApOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCAKKyAgICB+YmFzaWNfYmluYXJ5X29wcmltaXRpdmUoKTsKK3B1YmxpYzoKKworICAgIC8vIHdlIHByb3ZpZGUgYW4gb3B0aW1pemVkIHNhdmUgZm9yIGFsbCBmdW5kYW1lbnRhbCB0eXBlcworICAgIC8vIHR5cGVkZWYgc2VyaWFsaXphdGlvbjo6aXNfYml0d2lzZV9zZXJpYWxpemFibGU8bXBsOjpfMT4gCisgICAgLy8gdXNlX2FycmF5X29wdGltaXphdGlvbjsKKyAgICAvLyB3b3JrYXJvdW5kIHdpdGhvdXQgdXNpbmcgbXBsIGxhbWJkYXMKKyAgICBzdHJ1Y3QgdXNlX2FycmF5X29wdGltaXphdGlvbiB7CisgICAgICAgIHRlbXBsYXRlIDxjbGFzcyBUPiAgCisgICAgICAgICNpZiBkZWZpbmVkKEJPT1NUX05PX0RFUEVOREVOVF9ORVNURURfREVSSVZBVElPTlMpICAKKyAgICAgICAgICAgIHN0cnVjdCBhcHBseSB7ICAKKyAgICAgICAgICAgICAgICB0eXBlZGVmIHR5cGVuYW1lIGJvb3N0OjpzZXJpYWxpemF0aW9uOjppc19iaXR3aXNlX3NlcmlhbGl6YWJsZTwgVCA+Ojp0eXBlIHR5cGU7ICAKKyAgICAgICAgICAgIH07CisgICAgICAgICNlbHNlCisgICAgICAgICAgICBzdHJ1Y3QgYXBwbHkgOiBwdWJsaWMgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmlzX2JpdHdpc2Vfc2VyaWFsaXphYmxlPCBUID4ge307ICAKKyAgICAgICAgI2VuZGlmCisgICAgfTsKKworICAgIC8vIHRoZSBvcHRpbWl6ZWQgc2F2ZV9hcnJheSBkaXNwYXRjaGVzIHRvIHNhdmVfYmluYXJ5IAorICAgIHRlbXBsYXRlIDxjbGFzcyBWYWx1ZVR5cGU+CisgICAgdm9pZCBzYXZlX2FycmF5KGJvb3N0OjpzZXJpYWxpemF0aW9uOjphcnJheV93cmFwcGVyPFZhbHVlVHlwZT4gY29uc3QmIGEsIHVuc2lnbmVkIGludCkKKyAgICB7CisgICAgICBzYXZlX2JpbmFyeShhLmFkZHJlc3MoKSxhLmNvdW50KCkqc2l6ZW9mKFZhbHVlVHlwZSkpOworICAgIH0KKworICAgIHZvaWQgc2F2ZV9iaW5hcnkoY29uc3Qgdm9pZCAqYWRkcmVzcywgc3RkOjpzaXplX3QgY291bnQpOworfTsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgRWxlbSwgY2xhc3MgVHI+CitpbmxpbmUgdm9pZCAKK2Jhc2ljX2JpbmFyeV9vcHJpbWl0aXZlPEFyY2hpdmUsIEVsZW0sIFRyPjo6c2F2ZV9iaW5hcnkoCisgICAgY29uc3Qgdm9pZCAqYWRkcmVzcywgCisgICAgc3RkOjpzaXplX3QgY291bnQKKyl7CisgICAgLy8gQk9PU1RfQVNTRVJUKGNvdW50IDw9IHN0ZDo6c2l6ZV90KGJvb3N0OjppbnRlZ2VyX3RyYWl0czxzdGQ6OnN0cmVhbXNpemU+Ojpjb25zdF9tYXgpKTsKKyAgICAvLyBub3RlOiBpZiB0aGUgZm9sbG93aW5nIGFzc2VydGlvbnMgZmFpbAorICAgIC8vIGEgbGlrZWx5IGNhdXNlIGlzIHRoYXQgdGhlIG91dHB1dCBzdHJlYW0gaXMgc2V0IHRvICJ0ZXh0IgorICAgIC8vIG1vZGUgd2hlcmUgYnkgY3IgY2hhcmFjdGVycyByZWNpZXZlIHNwZWNpYWwgdHJlYXRtZW50LgorICAgIC8vIGJlIHN1cmUgdGhhdCB0aGUgb3V0cHV0IHN0cmVhbSBpcyBvcGVuZWQgd2l0aCBpb3M6OmJpbmFyeQorICAgIC8vaWYob3MuZmFpbCgpKQorICAgIC8vICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0aHJvd19leGNlcHRpb24oCisgICAgLy8gICAgICAgIGFyY2hpdmVfZXhjZXB0aW9uKGFyY2hpdmVfZXhjZXB0aW9uOjpvdXRwdXRfc3RyZWFtX2Vycm9yKQorICAgIC8vICAgICk7CisgICAgLy8gZmlndXJlIG51bWJlciBvZiBlbGVtZW50cyB0byBvdXRwdXQgLSByb3VuZCB1cAorICAgIGNvdW50ID0gKCBjb3VudCArIHNpemVvZihFbGVtKSAtIDEpIC8gc2l6ZW9mKEVsZW0pOworICAgIHN0ZDo6c3RyZWFtc2l6ZSBzY291bnQgPSBtX3NiLnNwdXRuKAorICAgICAgICBzdGF0aWNfY2FzdDxjb25zdCBFbGVtICo+KGFkZHJlc3MpLCAKKyAgICAgICAgc3RhdGljX2Nhc3Q8c3RkOjpzdHJlYW1zaXplPihjb3VudCkKKyAgICApOworICAgIGlmKGNvdW50ICE9IHN0YXRpY19jYXN0PHN0ZDo6c2l6ZV90PihzY291bnQpKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZV9leGNlcHRpb24oYXJjaGl2ZV9leGNlcHRpb246Om91dHB1dF9zdHJlYW1fZXJyb3IpCisgICAgICAgICk7CisgICAgLy9vcy53cml0ZSgKKyAgICAvLyAgICBzdGF0aWNfY2FzdDxjb25zdCB0eXBlbmFtZSBPU3RyZWFtOjpjaGFyX3R5cGUgKj4oYWRkcmVzcyksIAorICAgIC8vICAgIGNvdW50CisgICAgLy8pOworICAgIC8vQk9PU1RfQVNTRVJUKG9zLmdvb2QoKSk7Cit9CisKK30gLy9uYW1lc3BhY2UgYm9vc3QgCit9IC8vbmFtZXNwYWNlIGFyY2hpdmUgCisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfQklOQVJZX09QUklNSVRJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9iYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyLmhwcApAQCAtMCwwICsxLDEwOCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX1NUUkVBTUJVRl9MT0NBTEVfU0FWRVJfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfU1RSRUFNQlVGX0xPQ0FMRV9TQVZFUl9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDUgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbQorCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworLy8gbm90ZSBkZXJpdmVkIGZyb20gYm9vc3QvaW8vaW9zX3N0YXRlLmhwcAorLy8gQ29weXJpZ2h0IDIwMDIsIDIwMDUgRGFyeWxlIFdhbGtlci4gIFVzZSwgbW9kaWZpY2F0aW9uLCBhbmQgZGlzdHJpYnV0aW9uCisvLyBhcmUgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUgTGljZW5zZSwgVmVyc2lvbiAxLjAuICAoU2VlIGFjY29tcGFueWluZworLy8gZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgYSBjb3B5IGF0IDxodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQ+LikKKworLy8gIFNlZSA8aHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9pby8+IGZvciB0aGUgbGlicmFyeSdzIGhvbWUgcGFnZS4KKworI2lmbmRlZiBCT09TVF9OT19TVERfTE9DQUxFCisKKyNpbmNsdWRlIDxsb2NhbGU+ICAgICAvLyBmb3Igc3RkOjpsb2NhbGUKKyNpbmNsdWRlIDxpb3M+CisjaW5jbHVkZSA8c3RyZWFtYnVmPiAgLy8gZm9yIHN0ZDo6YmFzaWNfc3RyZWFtYnVmCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L25vbmNvcHlhYmxlLmhwcD4KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdHsKK25hbWVzcGFjZSBhcmNoaXZleworCit0ZW1wbGF0ZSA8IHR5cGVuYW1lIENoLCBjbGFzcyBUciA+CitjbGFzcyBiYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyIDoKKyAgICBwcml2YXRlIGJvb3N0Ojpub25jb3B5YWJsZQoreworcHVibGljOgorICAgIGV4cGxpY2l0IGJhc2ljX3N0cmVhbWJ1Zl9sb2NhbGVfc2F2ZXIoc3RkOjpiYXNpY19zdHJlYW1idWY8Q2gsIFRyPiAmcykgOgorICAgICAgICBtX3N0cmVhbWJ1ZihzKSwKKyAgICAgICAgbV9sb2NhbGUocy5nZXRsb2MoKSkKKyAgICB7fQorICAgIH5iYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyKCl7CisgICAgICAgIG1fc3RyZWFtYnVmLnB1YnN5bmMoKTsKKyAgICAgICAgbV9zdHJlYW1idWYucHViaW1idWUobV9sb2NhbGUpOworICAgIH0KK3ByaXZhdGU6CisgICAgc3RkOjpiYXNpY19zdHJlYW1idWY8Q2gsIFRyPiAmICAgICAgIG1fc3RyZWFtYnVmOworICAgIHN0ZDo6bG9jYWxlIGNvbnN0ICBtX2xvY2FsZTsKK307CisKK3RlbXBsYXRlIDwgdHlwZW5hbWUgQ2gsIGNsYXNzIFRyID4KK2NsYXNzIGJhc2ljX2lzdHJlYW1fbG9jYWxlX3NhdmVyIDoKKyAgICBwcml2YXRlIGJvb3N0Ojpub25jb3B5YWJsZQoreworcHVibGljOgorICAgIGV4cGxpY2l0IGJhc2ljX2lzdHJlYW1fbG9jYWxlX3NhdmVyKHN0ZDo6YmFzaWNfaXN0cmVhbTxDaCwgVHI+ICZzKSA6CisgICAgICAgIG1faXN0cmVhbShzKSwKKyAgICAgICAgbV9sb2NhbGUocy5nZXRsb2MoKSkKKyAgICB7fQorICAgIH5iYXNpY19pc3RyZWFtX2xvY2FsZV9zYXZlcigpeworICAgICAgICAvLyBsaWJzdGRjKysgY3Jhc2hlcyB3aXRob3V0IHRoaXMKKyAgICAgICAgbV9pc3RyZWFtLnN5bmMoKTsKKyAgICAgICAgbV9pc3RyZWFtLmltYnVlKG1fbG9jYWxlKTsKKyAgICB9Citwcml2YXRlOgorICAgIHN0ZDo6YmFzaWNfaXN0cmVhbTxDaCwgVHI+ICYgbV9pc3RyZWFtOworICAgIHN0ZDo6bG9jYWxlIGNvbnN0ICBtX2xvY2FsZTsKK307CisKK3RlbXBsYXRlIDwgdHlwZW5hbWUgQ2gsIGNsYXNzIFRyID4KK2NsYXNzIGJhc2ljX29zdHJlYW1fbG9jYWxlX3NhdmVyIDoKKyAgICBwcml2YXRlIGJvb3N0Ojpub25jb3B5YWJsZQoreworcHVibGljOgorICAgIGV4cGxpY2l0IGJhc2ljX29zdHJlYW1fbG9jYWxlX3NhdmVyKHN0ZDo6YmFzaWNfb3N0cmVhbTxDaCwgVHI+ICZzKSA6CisgICAgICAgIG1fb3N0cmVhbShzKSwKKyAgICAgICAgbV9sb2NhbGUocy5nZXRsb2MoKSkKKyAgICB7fQorICAgIH5iYXNpY19vc3RyZWFtX2xvY2FsZV9zYXZlcigpeworICAgICAgICBtX29zdHJlYW0uZmx1c2goKTsKKyAgICAgICAgbV9vc3RyZWFtLmltYnVlKG1fbG9jYWxlKTsKKyAgICB9Citwcml2YXRlOgorICAgIHN0ZDo6YmFzaWNfb3N0cmVhbTxDaCwgVHI+ICYgbV9vc3RyZWFtOworICAgIHN0ZDo6bG9jYWxlIGNvbnN0ICBtX2xvY2FsZTsKK307CisKKworfSAvLyBhcmNoaXZlCit9IC8vIGJvb3N0CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNlbmRpZiAvLyBCT09TVF9OT19TVERfTE9DQUxFCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9CQVNJQ19TVFJFQU1CVUZfTE9DQUxFX1NBVkVSX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmFzaWNfdGV4dF9pYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSw5NiBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX1RFWFRfSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9JQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiYXNpY190ZXh0X2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKy8vIGFyY2hpdmVzIHN0b3JlZCBhcyB0ZXh0IC0gbm90ZSB0aGVzZSBhciB0ZW1wbGF0ZWQgb24gdGhlIGJhc2ljCisvLyBzdHJlYW0gdGVtcGxhdGVzIHRvIGFjY29tbW9kYXRlIHdpZGUgKGFuZCBvdGhlcj8pIGtpbmQgb2YgY2hhcmFjdGVycworLy8KKy8vIG5vdGUgdGhlIGZhY3QgdGhhdCBvbiBsaWJyYXJpZXMgd2l0aG91dCB3aWRlIGNoYXJhY3RlcnMsIG9zdHJlYW0gaXMKKy8vIGlzIG5vdCBhIHNwZWNpYWxpemF0aW9uIG9mIGJhc2ljX29zdHJlYW0gd2hpY2ggaW4gZmFjdCBpcyBub3QgZGVmaW5lZAorLy8gaW4gc3VjaCBjYXNlcy4gICBTbyB3ZSBjYW4ndCB1c2UgYmFzaWNfb3N0cmVhbTxJU3RyZWFtOjpjaGFyX3R5cGU+IGJ1dCByYXRoZXIKKy8vIHVzZSB0d28gdGVtcGxhdGUgcGFyYW1ldGVycworCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9kZXRhaWwvd29ya2Fyb3VuZC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9jb21tb25faWFyY2hpdmUuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCituYW1lc3BhY2UgZGV0YWlsIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlPiBjbGFzcyBpbnRlcmZhY2VfaWFyY2hpdmU7Cit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfdGV4dF9pYXJjaGl2ZSAtIHJlYWQgc2VyaWFsaXplZCBvYmplY3RzIGZyb20gYSBpbnB1dCB0ZXh0IHN0cmVhbQordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX3RleHRfaWFyY2hpdmUgOiAKKyAgICBwdWJsaWMgZGV0YWlsOjpjb21tb25faWFyY2hpdmU8QXJjaGl2ZT4KK3sKKyNpZmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworcHVibGljOgorI2Vsc2UKK3Byb3RlY3RlZDoKKyAgICAjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA8IDE1MDApCisgICAgICAgIC8vIGZvciBzb21lIGluZXhwbGljYWJsZSByZWFzb24gaW5zZXJ0aW9uIG9mICJjbGFzcyIgZ2VuZXJhdGVzIGNvbXBpbGUgZXJybworICAgICAgICAvLyBvbiBtc3ZjIDcuMQorICAgICAgICBmcmllbmQgZGV0YWlsOjppbnRlcmZhY2VfaWFyY2hpdmU8QXJjaGl2ZT47CisgICAgI2Vsc2UKKyAgICAgICAgZnJpZW5kIGNsYXNzIGRldGFpbDo6aW50ZXJmYWNlX2lhcmNoaXZlPEFyY2hpdmU+OworICAgICNlbmRpZgorI2VuZGlmCisgICAgLy8gaW50ZXJtZWRpYXRlIGxldmVsIHRvIHN1cHBvcnQgb3ZlcnJpZGUgb2Ygb3BlcmF0b3JzCisgICAgLy8gZm90IHRlbXBsYXRlcyBpbiB0aGUgYWJzZW5jZSBvZiBwYXJ0aWFsIGZ1bmN0aW9uIAorICAgIC8vIHRlbXBsYXRlIG9yZGVyaW5nCisgICAgdHlwZWRlZiBkZXRhaWw6OmNvbW1vbl9pYXJjaGl2ZTxBcmNoaXZlPiBkZXRhaWxfY29tbW9uX2lhcmNoaXZlOworICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgdm9pZCBsb2FkX292ZXJyaWRlKFQgJiB0KXsKKyAgICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTo6bG9hZF9vdmVycmlkZSh0KTsKKyAgICB9CisgICAgLy8gdGV4dCBmaWxlIGRvbid0IGluY2x1ZGUgdGhlIG9wdGlvbmFsIGluZm9ybWF0aW9uIAorICAgIHZvaWQgbG9hZF9vdmVycmlkZShjbGFzc19pZF9vcHRpb25hbF90eXBlICYgLyp0Ki8pe30KKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgbG9hZF9vdmVycmlkZShjbGFzc19uYW1lX3R5cGUgJiB0KTsKKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgaW5pdCh2b2lkKTsKKworICAgIGJhc2ljX3RleHRfaWFyY2hpdmUodW5zaWduZWQgaW50IGZsYWdzKSA6IAorICAgICAgICBkZXRhaWw6OmNvbW1vbl9pYXJjaGl2ZTxBcmNoaXZlPihmbGFncykKKyAgICB7fQorICAgIH5iYXNpY190ZXh0X2lhcmNoaXZlKCl7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2Jhc2ljX3RleHRfaXByaW1pdGl2ZS5ocHAKQEAgLTAsMCArMSwxNDIgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CQVNJQ19URVhUX0lQUklNSVRJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9JUFJJTUlUSVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX3RleHRfaXByaW1pdGl2ZS5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisvLyBhcmNoaXZlcyBzdG9yZWQgYXMgdGV4dCAtIG5vdGUgdGhlc2UgYXJlIHRlbXBsYXRlZCBvbiB0aGUgYmFzaWMKKy8vIHN0cmVhbSB0ZW1wbGF0ZXMgdG8gYWNjb21tb2RhdGUgd2lkZSAoYW5kIG90aGVyPykga2luZCBvZiBjaGFyYWN0ZXJzCisvLworLy8gTm90ZSB0aGUgZmFjdCB0aGF0IG9uIGxpYnJhcmllcyB3aXRob3V0IHdpZGUgY2hhcmFjdGVycywgb3N0cmVhbSBpcworLy8gbm90IGEgc3BlY2lhbGl6YXRpb24gb2YgYmFzaWNfb3N0cmVhbSB3aGljaCBpbiBmYWN0IGlzIG5vdCBkZWZpbmVkCisvLyBpbiBzdWNoIGNhc2VzLiAgIFNvIHdlIGNhbid0IHVzZSBiYXNpY19vc3RyZWFtPElTdHJlYW06OmNoYXJfdHlwZT4gYnV0IHJhdGhlcgorLy8gdXNlIHR3byB0ZW1wbGF0ZSBwYXJhbWV0ZXJzCisKKyNpbmNsdWRlIDxsb2NhbGU+CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc2l6ZV90CisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2lmIGRlZmluZWQoQk9PU1RfTk9fU1REQ19OQU1FU1BBQ0UpCituYW1lc3BhY2Ugc3RkeyAKKyAgICB1c2luZyA6OnNpemVfdDsgCisgICAgI2lmICEgZGVmaW5lZChCT09TVF9ESU5LVU1XQVJFX1NURExJQikgJiYgISBkZWZpbmVkKF9fU0dJX1NUTF9QT1JUKQorICAgICAgICB1c2luZyA6OmxvY2FsZTsKKyAgICAjZW5kaWYKK30gLy8gbmFtZXNwYWNlIHN0ZAorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9pby9pb3Nfc3RhdGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL3dvcmthcm91bmQuaHBwPgorI2lmIEJPT1NUX1dPUktBUk9VTkQoQk9PU1RfRElOS1VNV0FSRV9TVERMSUIsID09IDEpCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kaW5rdW13YXJlLmhwcD4KKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2NvZGVjdnRfbnVsbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9hcmNoaXZlX2V4Y2VwdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9iYXNpY19zdHJlYW1idWZfbG9jYWxlX3NhdmVyLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhcmNoaXZlIHsKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfdGV4dF9pYXJjaGl2ZSAtIGxvYWQgc2VyaWFsaXplZCBvYmplY3RzIGZyb20gYSBpbnB1dCB0ZXh0IHN0cmVhbQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjcHJhZ21hIHdhcm5pbmcoIHB1c2ggKQorI3ByYWdtYSB3YXJuaW5nKCBkaXNhYmxlIDogNDI0NCA0MjY3ICkKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBJU3RyZWFtPgorY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmFzaWNfdGV4dF9pcHJpbWl0aXZlIHsKK3Byb3RlY3RlZDoKKyAgICBJU3RyZWFtICZpczsKKyAgICBpbzo6aW9zX2ZsYWdzX3NhdmVyIGZsYWdzX3NhdmVyOworICAgIGlvOjppb3NfcHJlY2lzaW9uX3NhdmVyIHByZWNpc2lvbl9zYXZlcjsKKworICAgICNpZm5kZWYgQk9PU1RfTk9fU1REX0xPQ0FMRQorICAgIC8vIG5vdGUgb3JkZXIhIC0gaWYgeW91IGNoYW5nZSB0aGlzLCBsaWJzdGQrKyB3aWxsIGZhaWwhCisgICAgLy8gYSkgY3JlYXRlIG5ldyBsb2NhbGUgd2l0aCBuZXcgY29kZWN2dCBmYWNldAorICAgIC8vIGIpIHNhdmUgY3VycmVudCBsb2NhbGUKKyAgICAvLyBjKSBjaGFuZ2UgbG9jYWxlIHRvIG5ldyBvbmUKKyAgICAvLyBkKSB1c2Ugc3RyZWFtIGJ1ZmZlcgorICAgIC8vIGUpIGNoYW5nZSBsb2NhbGUgYmFjayB0byBvcmlnaW5hbAorICAgIC8vIGYpIGRlc3Ryb3kgbmV3IGNvZGVjdnQgZmFjZXQKKyAgICBib29zdDo6YXJjaGl2ZTo6Y29kZWN2dF9udWxsPHR5cGVuYW1lIElTdHJlYW06OmNoYXJfdHlwZT4gY29kZWN2dF9udWxsX2ZhY2V0OworICAgIHN0ZDo6bG9jYWxlIGFyY2hpdmVfbG9jYWxlOworICAgIGJhc2ljX2lzdHJlYW1fbG9jYWxlX3NhdmVyPAorICAgICAgICB0eXBlbmFtZSBJU3RyZWFtOjpjaGFyX3R5cGUsCisgICAgICAgIHR5cGVuYW1lIElTdHJlYW06OnRyYWl0c190eXBlCisgICAgPiBsb2NhbGVfc2F2ZXI7CisgICAgI2VuZGlmCisKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgbG9hZChUICYgdCkKKyAgICB7CisgICAgICAgIGlmKGlzID4+IHQpCisgICAgICAgICAgICByZXR1cm47CisgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0aHJvd19leGNlcHRpb24oCisgICAgICAgICAgICBhcmNoaXZlX2V4Y2VwdGlvbihhcmNoaXZlX2V4Y2VwdGlvbjo6aW5wdXRfc3RyZWFtX2Vycm9yKQorICAgICAgICApOworICAgIH0KKworICAgIHZvaWQgbG9hZChjaGFyICYgdCkKKyAgICB7CisgICAgICAgIHNob3J0IGludCBpOworICAgICAgICBsb2FkKGkpOworICAgICAgICB0ID0gaTsKKyAgICB9CisgICAgdm9pZCBsb2FkKHNpZ25lZCBjaGFyICYgdCkKKyAgICB7CisgICAgICAgIHNob3J0IGludCBpOworICAgICAgICBsb2FkKGkpOworICAgICAgICB0ID0gaTsKKyAgICB9CisgICAgdm9pZCBsb2FkKHVuc2lnbmVkIGNoYXIgJiB0KQorICAgIHsKKyAgICAgICAgdW5zaWduZWQgc2hvcnQgaW50IGk7CisgICAgICAgIGxvYWQoaSk7CisgICAgICAgIHQgPSBpOworICAgIH0KKworICAgICNpZm5kZWYgQk9PU1RfTk9fSU5UUklOU0lDX1dDSEFSX1QKKyAgICB2b2lkIGxvYWQod2NoYXJfdCAmIHQpCisgICAgeworICAgICAgICBCT09TVF9TVEFUSUNfQVNTRVJUKHNpemVvZih3Y2hhcl90KSA8PSBzaXplb2YoaW50KSk7CisgICAgICAgIGludCBpOworICAgICAgICBsb2FkKGkpOworICAgICAgICB0ID0gaTsKKyAgICB9CisgICAgI2VuZGlmCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIAorICAgIGJhc2ljX3RleHRfaXByaW1pdGl2ZShJU3RyZWFtICAmaXMsIGJvb2wgbm9fY29kZWN2dCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIAorICAgIH5iYXNpY190ZXh0X2lwcmltaXRpdmUoKTsKK3B1YmxpYzoKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWRfYmluYXJ5KHZvaWQgKmFkZHJlc3MsIHN0ZDo6c2l6ZV90IGNvdW50KTsKK307CisKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorI3ByYWdtYSB3YXJuaW5nKCBwb3AgKQorI2VuZGlmCisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9JUFJJTUlUSVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmFzaWNfdGV4dF9vYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSwxMTkgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CQVNJQ19URVhUX09BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0JBU0lDX1RFWFRfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfdGV4dF9vYXJjaGl2ZS5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisvLyBhcmNoaXZlcyBzdG9yZWQgYXMgdGV4dCAtIG5vdGUgdGhlc2UgYXIgdGVtcGxhdGVkIG9uIHRoZSBiYXNpYworLy8gc3RyZWFtIHRlbXBsYXRlcyB0byBhY2NvbW1vZGF0ZSB3aWRlIChhbmQgb3RoZXI/KSBraW5kIG9mIGNoYXJhY3RlcnMKKy8vCisvLyBub3RlIHRoZSBmYWN0IHRoYXQgb24gbGlicmFyaWVzIHdpdGhvdXQgd2lkZSBjaGFyYWN0ZXJzLCBvc3RyZWFtIGlzCisvLyBpcyBub3QgYSBzcGVjaWFsaXphdGlvbiBvZiBiYXNpY19vc3RyZWFtIHdoaWNoIGluIGZhY3QgaXMgbm90IGRlZmluZWQKKy8vIGluIHN1Y2ggY2FzZXMuICAgU28gd2UgY2FuJ3QgdXNlIGJhc2ljX29zdHJlYW08T1N0cmVhbTo6Y2hhcl90eXBlPiBidXQgcmF0aGVyCisvLyB1c2UgdHdvIHRlbXBsYXRlIHBhcmFtZXRlcnMKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL3dvcmthcm91bmQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NvbW1vbl9vYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zdHJpbmcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCituYW1lc3BhY2UgZGV0YWlsIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlPiBjbGFzcyBpbnRlcmZhY2Vfb2FyY2hpdmU7Cit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfdGV4dF9vYXJjaGl2ZSAKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiYXNpY190ZXh0X29hcmNoaXZlIDogCisgICAgcHVibGljIGRldGFpbDo6Y29tbW9uX29hcmNoaXZlPEFyY2hpdmU+Cit7CisjaWZkZWYgQk9PU1RfTk9fTUVNQkVSX1RFTVBMQVRFX0ZSSUVORFMKK3B1YmxpYzoKKyNlbHNlCitwcm90ZWN0ZWQ6CisgICAgI2lmIEJPT1NUX1dPUktBUk9VTkQoQk9PU1RfTVNWQywgPCAxNTAwKQorICAgICAgICAvLyBmb3Igc29tZSBpbmV4cGxpY2FibGUgcmVhc29uIGluc2VydGlvbiBvZiAiY2xhc3MiIGdlbmVyYXRlcyBjb21waWxlIGVycm8KKyAgICAgICAgLy8gb24gbXN2YyA3LjEKKyAgICAgICAgZnJpZW5kIGRldGFpbDo6aW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+OworICAgICNlbHNlCisgICAgICAgIGZyaWVuZCBjbGFzcyBkZXRhaWw6OmludGVyZmFjZV9vYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAjZW5kaWYKKyNlbmRpZgorCisgICAgZW51bSB7CisgICAgICAgIG5vbmUsCisgICAgICAgIGVvbCwKKyAgICAgICAgc3BhY2UKKyAgICB9IGRlbGltaXRlcjsKKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgbmV3dG9rZW4oKTsKKworICAgIHZvaWQgbmV3bGluZSgpeworICAgICAgICBkZWxpbWl0ZXIgPSBlb2w7CisgICAgfQorCisgICAgLy8gZGVmYXVsdCBwcm9jZXNzaW5nIC0ga2ljayBiYWNrIHRvIGJhc2UgY2xhc3MuICBOb3RlIHRoZQorICAgIC8vIGV4dHJhIHN0dWZmIHRvIGdldCBpdCBwYXNzZWQgYm9ybGFuZCBjb21waWxlcnMKKyAgICB0eXBlZGVmIGRldGFpbDo6Y29tbW9uX29hcmNoaXZlPEFyY2hpdmU+IGRldGFpbF9jb21tb25fb2FyY2hpdmU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoVCAmIHQpeworICAgICAgICB0aGlzLT5kZXRhaWxfY29tbW9uX29hcmNoaXZlOjpzYXZlX292ZXJyaWRlKHQpOworICAgIH0KKworICAgIC8vIHN0YXJ0IG5ldyBvYmplY3RzIG9uIGEgbmV3IGxpbmUKKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoY29uc3Qgb2JqZWN0X2lkX3R5cGUgJiB0KXsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5uZXdsaW5lKCk7CisgICAgICAgIHRoaXMtPmRldGFpbF9jb21tb25fb2FyY2hpdmU6OnNhdmVfb3ZlcnJpZGUodCk7CisgICAgfQorCisgICAgLy8gdGV4dCBmaWxlIGRvbid0IGluY2x1ZGUgdGhlIG9wdGlvbmFsIGluZm9ybWF0aW9uIAorICAgIHZvaWQgc2F2ZV9vdmVycmlkZShjb25zdCBjbGFzc19pZF9vcHRpb25hbF90eXBlICYgLyogdCAqLyl7fQorCisgICAgdm9pZCBzYXZlX292ZXJyaWRlKGNvbnN0IGNsYXNzX25hbWVfdHlwZSAmIHQpeworICAgICAgICBjb25zdCBzdGQ6OnN0cmluZyBzKHQpOworICAgICAgICAqIHRoaXMtPlRoaXMoKSA8PCBzOworICAgIH0KKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgaW5pdCgpOworCisgICAgYmFzaWNfdGV4dF9vYXJjaGl2ZSh1bnNpZ25lZCBpbnQgZmxhZ3MpIDoKKyAgICAgICAgZGV0YWlsOjpjb21tb25fb2FyY2hpdmU8QXJjaGl2ZT4oZmxhZ3MpLAorICAgICAgICBkZWxpbWl0ZXIobm9uZSkKKyAgICB7fQorICAgIH5iYXNpY190ZXh0X29hcmNoaXZlKCl7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9PQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2Jhc2ljX3RleHRfb3ByaW1pdGl2ZS5ocHAKQEAgLTAsMCArMSwyMTEgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CQVNJQ19URVhUX09QUklNSVRJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfVEVYVF9PUFJJTUlUSVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX3RleHRfb3ByaW1pdGl2ZS5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisvLyBhcmNoaXZlcyBzdG9yZWQgYXMgdGV4dCAtIG5vdGUgdGhlc2UgYXIgdGVtcGxhdGVkIG9uIHRoZSBiYXNpYworLy8gc3RyZWFtIHRlbXBsYXRlcyB0byBhY2NvbW1vZGF0ZSB3aWRlIChhbmQgb3RoZXI/KSBraW5kIG9mIGNoYXJhY3RlcnMKKy8vCisvLyBub3RlIHRoZSBmYWN0IHRoYXQgb24gbGlicmFyaWVzIHdpdGhvdXQgd2lkZSBjaGFyYWN0ZXJzLCBvc3RyZWFtIGlzCisvLyBpcyBub3QgYSBzcGVjaWFsaXphdGlvbiBvZiBiYXNpY19vc3RyZWFtIHdoaWNoIGluIGZhY3QgaXMgbm90IGRlZmluZWQKKy8vIGluIHN1Y2ggY2FzZXMuICAgU28gd2UgY2FuJ3QgdXNlIGJhc2ljX29zdHJlYW08T1N0cmVhbTo6Y2hhcl90eXBlPiBidXQgcmF0aGVyCisvLyB1c2UgdHdvIHRlbXBsYXRlIHBhcmFtZXRlcnMKKworI2luY2x1ZGUgPGlvbWFuaXA+CisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPGNzdGRkZWY+IC8vIHNpemVfdAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zdGF0aWNfYXNzZXJ0LmhwcD4KKyNpbmNsdWRlIDxib29zdC9pby9pb3Nfc3RhdGUuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvZGV0YWlsL3dvcmthcm91bmQuaHBwPgorI2lmIEJPT1NUX1dPUktBUk9VTkQoQk9PU1RfRElOS1VNV0FSRV9TVERMSUIsID09IDEpCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kaW5rdW13YXJlLmhwcD4KKyNlbmRpZgorCisjaWYgZGVmaW5lZChCT09TVF9OT19TVERDX05BTUVTUEFDRSkKK25hbWVzcGFjZSBzdGR7IAorICAgIHVzaW5nIDo6c2l6ZV90OworICAgICNpZiAhIGRlZmluZWQoQk9PU1RfRElOS1VNV0FSRV9TVERMSUIpICYmICEgZGVmaW5lZChfX1NHSV9TVExfUE9SVCkKKyAgICAgICAgdXNpbmcgOjpsb2NhbGU7CisgICAgI2VuZGlmCit9IC8vIG5hbWVzcGFjZSBzdGQKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZmxvYXRpbmdfcG9pbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9saW1pdHMuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2ludGVnZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2lvL2lvc19zdGF0ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90aHJvd19leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfc3RyZWFtYnVmX2xvY2FsZV9zYXZlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9jb2RlY3Z0X251bGwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYXJjaGl2ZV9leGNlcHRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiYXNpY190ZXh0X29wcmltaXRpdmUgLSBvdXRwdXQgb2YgcHJtaXRpdmVzIHRvIHN0cmVhbQordGVtcGxhdGU8Y2xhc3MgT1N0cmVhbT4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX3RleHRfb3ByaW1pdGl2ZQoreworcHJvdGVjdGVkOgorICAgIE9TdHJlYW0gJm9zOworICAgIGlvOjppb3NfZmxhZ3Nfc2F2ZXIgZmxhZ3Nfc2F2ZXI7CisgICAgaW86Omlvc19wcmVjaXNpb25fc2F2ZXIgcHJlY2lzaW9uX3NhdmVyOworCisgICAgI2lmbmRlZiBCT09TVF9OT19TVERfTE9DQUxFCisgICAgLy8gbm90ZSBvcmRlciEgLSBpZiB5b3UgY2hhbmdlIHRoaXMsIGxpYnN0ZCsrIHdpbGwgZmFpbCEKKyAgICAvLyBhKSBjcmVhdGUgbmV3IGxvY2FsZSB3aXRoIG5ldyBjb2RlY3Z0IGZhY2V0CisgICAgLy8gYikgc2F2ZSBjdXJyZW50IGxvY2FsZQorICAgIC8vIGMpIGNoYW5nZSBsb2NhbGUgdG8gbmV3IG9uZQorICAgIC8vIGQpIHVzZSBzdHJlYW0gYnVmZmVyCisgICAgLy8gZSkgY2hhbmdlIGxvY2FsZSBiYWNrIHRvIG9yaWdpbmFsCisgICAgLy8gZikgZGVzdHJveSBuZXcgY29kZWN2dCBmYWNldAorICAgIGJvb3N0OjphcmNoaXZlOjpjb2RlY3Z0X251bGw8dHlwZW5hbWUgT1N0cmVhbTo6Y2hhcl90eXBlPiBjb2RlY3Z0X251bGxfZmFjZXQ7CisgICAgc3RkOjpsb2NhbGUgYXJjaGl2ZV9sb2NhbGU7CisgICAgYmFzaWNfb3N0cmVhbV9sb2NhbGVfc2F2ZXI8CisgICAgICAgIHR5cGVuYW1lIE9TdHJlYW06OmNoYXJfdHlwZSwKKyAgICAgICAgdHlwZW5hbWUgT1N0cmVhbTo6dHJhaXRzX3R5cGUKKyAgICA+IGxvY2FsZV9zYXZlcjsKKyAgICAjZW5kaWYKKworICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGZ1bmRhbWVudGFsIHR5cGVzIHRoYXQgbmVlZCBzcGVjaWFsIHRyZWF0bWVudAorICAgIHZvaWQgc2F2ZShjb25zdCBib29sIHQpeworICAgICAgICAvLyB0cmFwIHVzYWdlIG9mIGludmFsaWQgdW5pbml0aWFsaXplZCBib29sZWFuIHdoaWNoIHdvdWxkCisgICAgICAgIC8vIG90aGVyd2lzZSBjcmFzaCBvbiBsb2FkLgorICAgICAgICBCT09TVF9BU1NFUlQoMCA9PSBzdGF0aWNfY2FzdDxpbnQ+KHQpIHx8IDEgPT0gc3RhdGljX2Nhc3Q8aW50Pih0KSk7CisgICAgICAgIGlmKG9zLmZhaWwoKSkKKyAgICAgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0aHJvd19leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYXJjaGl2ZV9leGNlcHRpb24oYXJjaGl2ZV9leGNlcHRpb246Om91dHB1dF9zdHJlYW1fZXJyb3IpCisgICAgICAgICAgICApOworICAgICAgICBvcyA8PCB0OworICAgIH0KKyAgICB2b2lkIHNhdmUoY29uc3Qgc2lnbmVkIGNoYXIgdCkKKyAgICB7CisgICAgICAgIHNhdmUoc3RhdGljX2Nhc3Q8c2hvcnQgaW50Pih0KSk7CisgICAgfQorICAgIHZvaWQgc2F2ZShjb25zdCB1bnNpZ25lZCBjaGFyIHQpCisgICAgeworICAgICAgICBzYXZlKHN0YXRpY19jYXN0PHNob3J0IHVuc2lnbmVkIGludD4odCkpOworICAgIH0KKyAgICB2b2lkIHNhdmUoY29uc3QgY2hhciB0KQorICAgIHsKKyAgICAgICAgc2F2ZShzdGF0aWNfY2FzdDxzaG9ydCBpbnQ+KHQpKTsKKyAgICB9CisgICAgI2lmbmRlZiBCT09TVF9OT19JTlRSSU5TSUNfV0NIQVJfVAorICAgIHZvaWQgc2F2ZShjb25zdCB3Y2hhcl90IHQpCisgICAgeworICAgICAgICBCT09TVF9TVEFUSUNfQVNTRVJUKHNpemVvZih3Y2hhcl90KSA8PSBzaXplb2YoaW50KSk7CisgICAgICAgIHNhdmUoc3RhdGljX2Nhc3Q8aW50Pih0KSk7CisgICAgfQorICAgICNlbmRpZgorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gc2F2aW5nIG9mIGFueSB0eXBlcyBub3QgbGlzdGVkIGFib3ZlCisKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgc2F2ZV9pbXBsKGNvbnN0IFQgJnQsIGJvb3N0OjptcGw6OmJvb2xfPGZhbHNlPiAmKXsKKyAgICAgICAgaWYob3MuZmFpbCgpKQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnRocm93X2V4Y2VwdGlvbigKKyAgICAgICAgICAgICAgICBhcmNoaXZlX2V4Y2VwdGlvbihhcmNoaXZlX2V4Y2VwdGlvbjo6b3V0cHV0X3N0cmVhbV9lcnJvcikKKyAgICAgICAgICAgICk7CisgICAgICAgIG9zIDw8IHQ7CisgICAgfQorCisgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisgICAgLy8gZmxvYXRpbmcgcG9pbnQgdHlwZXMgbmVlZCBldmVuIG1vcmUgc3BlY2lhbCB0cmVhdG1lbnQKKyAgICAvLyB0aGUgZm9sbG93aW5nIGRldGVybWluZXMgd2hldGhlciB0aGUgdHlwZSBUIGlzIHNvbWUgc29ydAorICAgIC8vIG9mIGZsb2F0aW5nIHBvaW50IHR5cGUuICBOb3RlIHRoYXQgd2UgdGhlbiBhc3N1bWUgdGhhdAorICAgIC8vIHRoZSBzdHJlYW0gPDwgb3BlcmF0b3IgaXMgZGVmaW5lZCBvbiB0aGF0IHR5cGUgLSBpZiBub3QKKyAgICAvLyB3ZSdsbCBnZXQgYSBjb21waWxlIHRpbWUgZXJyb3IuIFRoaXMgaXMgbWVhbnQgdG8gYXV0b21hdGljYWxseQorICAgIC8vIHN1cHBvcnQgc3ludGhlc2l6ZWQgdHlwZXMgd2hpY2ggc3VwcG9ydCBmbG9hdGluZyBwb2ludAorICAgIC8vIG9wZXJhdGlvbnMuIEFsc28gaXQgc2hvdWxkIGhhbmRsZSBjb21waWxlciBkZXBlbmRlbnQgdHlwZXMKKyAgICAvLyBzdWNoIGxvbmcgZG91YmxlLiAgRHVlIHRvIEpvaG4gTWFkZG9jay4KKworICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgc3RydWN0IGlzX2Zsb2F0IHsKKyAgICAgICAgdHlwZWRlZiB0eXBlbmFtZSBtcGw6OmJvb2xfPCAKKyAgICAgICAgICAgIGJvb3N0Ojppc19mbG9hdGluZ19wb2ludDxUPjo6dmFsdWUgCisgICAgICAgICAgICB8fCAoc3RkOjpudW1lcmljX2xpbWl0czxUPjo6aXNfc3BlY2lhbGl6ZWQKKyAgICAgICAgICAgICYmICFzdGQ6Om51bWVyaWNfbGltaXRzPFQ+Ojppc19pbnRlZ2VyCisgICAgICAgICAgICAmJiAhc3RkOjpudW1lcmljX2xpbWl0czxUPjo6aXNfZXhhY3QKKyAgICAgICAgICAgICYmIHN0ZDo6bnVtZXJpY19saW1pdHM8VD46Om1heF9leHBvbmVudCkgCisgICAgICAgID46OnR5cGUgdHlwZTsKKyAgICB9OworCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmVfaW1wbChjb25zdCBUICZ0LCBib29zdDo6bXBsOjpib29sXzx0cnVlPiAmKXsKKyAgICAgICAgLy8gbXVzdCBiZSBhIHVzZXIgbWlzdGFrZSAtIGNhbid0IHNlcmlhbGl6ZSB1bi1pbml0aWFsaXplZCBkYXRhCisgICAgICAgIGlmKG9zLmZhaWwoKSkKKyAgICAgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0aHJvd19leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYXJjaGl2ZV9leGNlcHRpb24oYXJjaGl2ZV9leGNlcHRpb246Om91dHB1dF9zdHJlYW1fZXJyb3IpCisgICAgICAgICAgICApOworICAgICAgICAvLyBUaGUgZm9ybXVsYWUgZm9yIHRoZSBudW1iZXIgb2YgZGVjaW1sYSBkaWdpdHMgcmVxdWlyZWQgaXMgZ2l2ZW4gaW4KKyAgICAgICAgLy8gaHR0cDovL3d3dzIub3Blbi1zdGQub3JnL0pUQzEvU0MyMi9XRzIxL2RvY3MvcGFwZXJzLzIwMDUvbjE4MjIucGRmCisgICAgICAgIC8vIHdoaWNoIGlzIGRlcml2ZWQgZnJvbSBLYWhhbidzIHBhcGVyOgorICAgICAgICAvLyB3d3cuZWVjcy5iZXJrZWxleS5lZHUvfndrYWhhbi9pZWVlNzU0c3RhdHVzL2llZWU3NTQucHMKKyAgICAgICAgLy8gY29uc3QgdW5zaWduZWQgaW50IGRpZ2l0cyA9IChzdGQ6Om51bWVyaWNfbGltaXRzPFQ+OjpkaWdpdHMgKiAzMDEwKSAvIDEwMDAwOworICAgICAgICAvLyBub3RlOiBJJ3ZlIGNvbW1lbnRlZCBvdXQgdGhlIGFib3ZlIGJlY2F1c2UgSSBkaWRuJ3QgZ2V0IGdvb2QgcmVzdWx0cy4gIGUuZy4KKyAgICAgICAgLy8gaW4gb25lIGNhc2UgSSBnb3QgYSBkaWZmZXJlbmNlIG9mIDE5IHVuaXRzLgorICAgICAgICAjaWZuZGVmIEJPT1NUX05PX0NYWDExX05VTUVSSUNfTElNSVRTCisgICAgICAgICAgICBjb25zdCB1bnNpZ25lZCBpbnQgZGlnaXRzID0gc3RkOjpudW1lcmljX2xpbWl0czxUPjo6bWF4X2RpZ2l0czEwOworICAgICAgICAjZWxzZQorICAgICAgICAgICAgY29uc3QgdW5zaWduZWQgaW50IGRpZ2l0cyA9IHN0ZDo6bnVtZXJpY19saW1pdHM8VD46OmRpZ2l0czEwICsgMjsKKyAgICAgICAgI2VuZGlmCisgICAgICAgIG9zIDw8IHN0ZDo6c2V0cHJlY2lzaW9uKGRpZ2l0cykgPDwgc3RkOjpzY2llbnRpZmljIDw8IHQ7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmUoY29uc3QgVCAmIHQpeworICAgICAgICBib29zdDo6aW86Omlvc19mbGFnc19zYXZlciBmcyhvcyk7CisgICAgICAgIGJvb3N0Ojppbzo6aW9zX3ByZWNpc2lvbl9zYXZlciBwcyhvcyk7CisgICAgICAgIHR5cGVuYW1lIGlzX2Zsb2F0PFQ+Ojp0eXBlIHRmOworICAgICAgICBzYXZlX2ltcGwodCwgdGYpOworICAgIH0KKworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTAorICAgIGJhc2ljX3RleHRfb3ByaW1pdGl2ZShPU3RyZWFtICYgb3MsIGJvb2wgbm9fY29kZWN2dCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIAorICAgIH5iYXNpY190ZXh0X29wcmltaXRpdmUoKTsKK3B1YmxpYzoKKyAgICAvLyB1bmZvcm1hdHRlZCBhcHBlbmQgb2Ygb25lIGNoYXJhY3RlcgorICAgIHZvaWQgcHV0KHR5cGVuYW1lIE9TdHJlYW06OmNoYXJfdHlwZSBjKXsKKyAgICAgICAgaWYob3MuZmFpbCgpKQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnRocm93X2V4Y2VwdGlvbigKKyAgICAgICAgICAgICAgICBhcmNoaXZlX2V4Y2VwdGlvbihhcmNoaXZlX2V4Y2VwdGlvbjo6b3V0cHV0X3N0cmVhbV9lcnJvcikKKyAgICAgICAgICAgICk7CisgICAgICAgIG9zLnB1dChjKTsKKyAgICB9CisgICAgLy8gdW5mb3JtYXR0ZWQgYXBwZW5kIG9mIG51bGwgdGVybWluYXRlZCBzdHJpbmcKKyAgICB2b2lkIHB1dChjb25zdCBjaGFyICogcyl7CisgICAgICAgIHdoaWxlKCdcMCcgIT0gKnMpCisgICAgICAgICAgICBvcy5wdXQoKnMrKyk7CisgICAgfQorICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkIAorICAgIHNhdmVfYmluYXJ5KGNvbnN0IHZvaWQgKmFkZHJlc3MsIHN0ZDo6c2l6ZV90IGNvdW50KTsKK307CisKK30gLy9uYW1lc3BhY2UgYm9vc3QgCit9IC8vbmFtZXNwYWNlIGFyY2hpdmUgCisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JBU0lDX1RFWFRfT1BSSU1JVElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2Jhc2ljX3htbF9hcmNoaXZlLmhwcApAQCAtMCwwICsxLDY3IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfQkFTSUNfWE1MX1RFWFRfQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19YTUxfVEVYVF9BUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX3htbF9hcmNoaXZlLmhwcDoKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9hcmNoaXZlX2V4Y2VwdGlvbi5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7IAorbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLyBjb25zdGFudCBzdHJpbmdzIHVzZWQgaW4geG1sIGkvbworCitleHRlcm4gCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1hNTF9PQkpFQ1RfSUQoKTsKKworZXh0ZXJuIAorQk9PU1RfQVJDSElWRV9ERUNMIGNvbnN0IGNoYXIgKgorQk9PU1RfQVJDSElWRV9YTUxfT0JKRUNUX1JFRkVSRU5DRSgpOworCitleHRlcm4gCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1hNTF9DTEFTU19JRCgpOworCitleHRlcm4gCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1hNTF9DTEFTU19JRF9SRUZFUkVOQ0UoKTsKKworZXh0ZXJuIAorQk9PU1RfQVJDSElWRV9ERUNMIGNvbnN0IGNoYXIgKgorQk9PU1RfQVJDSElWRV9YTUxfQ0xBU1NfTkFNRSgpOworCitleHRlcm4gCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1hNTF9UUkFDS0lORygpOworCitleHRlcm4gCitCT09TVF9BUkNISVZFX0RFQ0wgY29uc3QgY2hhciAqCitCT09TVF9BUkNISVZFX1hNTF9WRVJTSU9OKCk7CisKK2V4dGVybiAKK0JPT1NUX0FSQ0hJVkVfREVDTCBjb25zdCBjaGFyICoKK0JPT1NUX0FSQ0hJVkVfWE1MX1NJR05BVFVSRSgpOworCit9Ly8gbmFtZXNwYWNlIGFyY2hpdmUKK30vLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfWE1MX1RFWFRfQVJDSElWRV9IUFAKKwpuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmFzaWNfeG1sX2lhcmNoaXZlLmhwcApAQCAtMCwwICsxLDEyMCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX1hNTF9JQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19YTUxfSUFSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfeG1sX2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Fzc2VydC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9jb21tb25faWFyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3N0cmluZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CisKK25hbWVzcGFjZSBkZXRhaWwgeworICAgIHRlbXBsYXRlPGNsYXNzIEFyY2hpdmU+IGNsYXNzIGludGVyZmFjZV9pYXJjaGl2ZTsKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiYXNpY194bWxfaWFyY2hpdmUgLSByZWFkIHNlcmlhbGl6ZWQgb2JqZWN0cyBmcm9tIGEgaW5wdXQgdGV4dCBzdHJlYW0KK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiYXNpY194bWxfaWFyY2hpdmUgOgorICAgIHB1YmxpYyBkZXRhaWw6OmNvbW1vbl9pYXJjaGl2ZTxBcmNoaXZlPgoreworICAgIHVuc2lnbmVkIGludCBkZXB0aDsKKyNpZmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworcHVibGljOgorI2Vsc2UKK3Byb3RlY3RlZDoKKyAgICBmcmllbmQgY2xhc3MgZGV0YWlsOjppbnRlcmZhY2VfaWFyY2hpdmU8QXJjaGl2ZT47CisjZW5kaWYKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWRfc3RhcnQoY29uc3QgY2hhciAqbmFtZSk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBsb2FkX2VuZChjb25zdCBjaGFyICpuYW1lKTsKKworICAgIC8vIEFueXRoaW5nIG5vdCBhbiBhdHRyaWJ1dGUgYW5kIG5vdCBhIG5hbWUtdmFsdWUgcGFpciBpcyBhbgorICAgIC8vIHNob3VsZCBiZSB0cmFwcGVkIGhlcmUuCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIGxvYWRfb3ZlcnJpZGUoVCAmIHQpCisgICAgeworICAgICAgICAvLyBJZiB5b3VyIHByb2dyYW0gZmFpbHMgdG8gY29tcGlsZSBoZXJlLCBpdHMgbW9zdCBsaWtlbHkgZHVlIHRvCisgICAgICAgIC8vIG5vdCBzcGVjaWZ5aW5nIGFuIG52cCB3cmFwcGVyIGFyb3VuZCB0aGUgdmFyaWFibGUgdG8KKyAgICAgICAgLy8gYmUgc2VyaWFsaXplZC4KKyAgICAgICAgQk9PU1RfTVBMX0FTU0VSVCgoc2VyaWFsaXphdGlvbjo6aXNfd3JhcHBlcjwgVCA+KSk7CisgICAgICAgIHRoaXMtPmRldGFpbF9jb21tb25faWFyY2hpdmU6OmxvYWRfb3ZlcnJpZGUodCk7CisgICAgfQorCisgICAgLy8gQW55dGhpbmcgbm90IGFuIGF0dHJpYnV0ZSAtIHNlZSBiZWxvdyAtIHNob3VsZCBiZSBhIG5hbWUgdmFsdWUKKyAgICAvLyBwYWlyIGFuZCBiZSBwcm9jZXNzZWQgaGVyZQorICAgIHR5cGVkZWYgZGV0YWlsOjpjb21tb25faWFyY2hpdmU8QXJjaGl2ZT4gZGV0YWlsX2NvbW1vbl9pYXJjaGl2ZTsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgbG9hZF9vdmVycmlkZSgKKyAgICAgICAgY29uc3QgYm9vc3Q6OnNlcmlhbGl6YXRpb246Om52cDwgVCA+ICYgdAorICAgICl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+bG9hZF9zdGFydCh0Lm5hbWUoKSk7CisgICAgICAgIHRoaXMtPmRldGFpbF9jb21tb25faWFyY2hpdmU6OmxvYWRfb3ZlcnJpZGUodC52YWx1ZSgpKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5sb2FkX2VuZCh0Lm5hbWUoKSk7CisgICAgfQorCisgICAgLy8gc3BlY2lmaWMgb3ZlcnJpZGVzIGZvciBhdHRyaWJ1dGVzIC0gaGFuZGxlIGFzCisgICAgLy8gcHJpbWl0aXZlcy4gVGhlc2UgYXJlIG5vdCBuYW1lLXZhbHVlIHBhaXJzCisgICAgLy8gc28gdGhleSBoYXZlIHRvIGJlIGludGVyY2VwdGVkIGhlcmUgYW5kIHBhc3NlZCBvbiB0byBsb2FkLgorICAgIC8vIGFsdGhvdWdoIHRoZSBjbGFzc19pZCBpcyBpbmNsdWRlZCBpbiB0aGUgeG1sIHRleHQgZmlsZSBpbiBvcmRlcgorICAgIC8vIHRvIG1ha2UgdGhlIGZpbGUgc2VsZiBkZXNjcmliaW5nLCBpdCBpc24ndCB1c2VkIHdoZW4gbG9hZGluZworICAgIC8vIGFuIHhtbCBhcmNoaXZlLiAgU28gd2UgY2FuIHNraXAgaXQgaGVyZS4gIE5vdGU6IHdlIE1VU1Qgb3ZlcnJpZGUKKyAgICAvLyBpdCBvdGhlcndpc2UgaXQgd2lsbCBiZSBsb2FkZWQgYXMgYSBub3JtYWwgcHJpbWl0aXZlIHcvbyB0YWcgYW5kCisgICAgLy8gbGVhdmluZyB0aGUgYXJjaGl2ZSBpbiBhbiB1bmRldGVybWluZWQgc3RhdGUKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWRfb3ZlcnJpZGUoY2xhc3NfaWRfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgbG9hZF9vdmVycmlkZShjbGFzc19pZF9vcHRpb25hbF90eXBlICYgLyogdCAqLyl7fQorICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgbG9hZF9vdmVycmlkZShvYmplY3RfaWRfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgbG9hZF9vdmVycmlkZSh2ZXJzaW9uX3R5cGUgJiB0KTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGxvYWRfb3ZlcnJpZGUodHJhY2tpbmdfdHlwZSAmIHQpOworICAgIC8vIGNsYXNzX25hbWVfdHlwZSBjYW4ndCBiZSBoYW5kbGVkIGhlcmUgYXMgaXQgZGVwZW5kcyB1cG9uIHRoZQorICAgIC8vIGNoYXIgdHlwZSB1c2VkIGJ5IHRoZSBzdHJlYW0uICBTbyByZXF1aXJlIHRoZSBkZXJpdmVkIGltcGxlbWVudGF0aW9uCisgICAgLy8gaGFuZGxlIHRoaXMuCisgICAgLy8gdm9pZCBsb2FkX292ZXJyaWRlKGNsYXNzX25hbWVfdHlwZSAmIHQpOworCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisgICAgYmFzaWNfeG1sX2lhcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisgICAgfmJhc2ljX3htbF9pYXJjaGl2ZSgpOworfTsKKworfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfWE1MX0lBUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmFzaWNfeG1sX29hcmNoaXZlLmhwcApAQCAtMCwwICsxLDEzOCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX1hNTF9PQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19YTUxfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfeG1sX29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2Fzc2VydC5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9jb21tb25fb2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3N0cmluZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CisKK25hbWVzcGFjZSBkZXRhaWwgeworICAgIHRlbXBsYXRlPGNsYXNzIEFyY2hpdmU+IGNsYXNzIGludGVyZmFjZV9vYXJjaGl2ZTsKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiYXNpY194bWxfb2FyY2hpdmUgLSB3cml0ZSBzZXJpYWxpemVkIG9iamVjdHMgdG8gYSB4bWwgb3V0cHV0IHN0cmVhbQordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX3htbF9vYXJjaGl2ZSA6CisgICAgcHVibGljIGRldGFpbDo6Y29tbW9uX29hcmNoaXZlPEFyY2hpdmU+Cit7CisgICAgLy8gc3BlY2lhbCBzdHVmZiBmb3IgeG1sIG91dHB1dAorICAgIHVuc2lnbmVkIGludCBkZXB0aDsKKyAgICBib29sIHBlbmRpbmdfcHJlYW1ibGU7CisjaWZkZWYgQk9PU1RfTk9fTUVNQkVSX1RFTVBMQVRFX0ZSSUVORFMKK3B1YmxpYzoKKyNlbHNlCitwcm90ZWN0ZWQ6CisgICAgZnJpZW5kIGNsYXNzIGRldGFpbDo6aW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+OworI2VuZGlmCisgICAgYm9vbCBpbmRlbnRfbmV4dDsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIGluZGVudCgpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgaW5pdCgpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgd2luZHVwKCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICB3cml0ZV9hdHRyaWJ1dGUoCisgICAgICAgIGNvbnN0IGNoYXIgKmF0dHJpYnV0ZV9uYW1lLAorICAgICAgICBpbnQgdCwKKyAgICAgICAgY29uc3QgY2hhciAqY29uanVuY3Rpb24gPSAiPVwiIgorICAgICk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICB3cml0ZV9hdHRyaWJ1dGUoCisgICAgICAgIGNvbnN0IGNoYXIgKmF0dHJpYnV0ZV9uYW1lLAorICAgICAgICBjb25zdCBjaGFyICprZXkKKyAgICApOworICAgIC8vIGhlbHBlcnMgdXNlZCBiZWxvdworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZV9zdGFydChjb25zdCBjaGFyICpuYW1lKTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIHNhdmVfZW5kKGNvbnN0IGNoYXIgKm5hbWUpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgZW5kX3ByZWFtYmxlKCk7CisKKyAgICAvLyBBbnl0aGluZyBub3QgYW4gYXR0cmlidXRlIGFuZCBub3QgYSBuYW1lLXZhbHVlIHBhaXIgaXMgYW4KKyAgICAvLyBlcnJvciBhbmQgc2hvdWxkIGJlIHRyYXBwZWQgaGVyZS4KKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIHZvaWQgc2F2ZV9vdmVycmlkZShUICYgdCkKKyAgICB7CisgICAgICAgIC8vIElmIHlvdXIgcHJvZ3JhbSBmYWlscyB0byBjb21waWxlIGhlcmUsIGl0cyBtb3N0IGxpa2VseSBkdWUgdG8KKyAgICAgICAgLy8gbm90IHNwZWNpZnlpbmcgYW4gbnZwIHdyYXBwZXIgYXJvdW5kIHRoZSB2YXJpYWJsZSB0bworICAgICAgICAvLyBiZSBzZXJpYWxpemVkLgorICAgICAgICBCT09TVF9NUExfQVNTRVJUKChzZXJpYWxpemF0aW9uOjppc193cmFwcGVyPCBUID4pKTsKKyAgICAgICAgdGhpcy0+ZGV0YWlsX2NvbW1vbl9vYXJjaGl2ZTo6c2F2ZV9vdmVycmlkZSh0KTsKKyAgICB9CisKKyAgICAvLyBzcGVjaWFsIHRyZWF0bWVudCBmb3IgbmFtZS12YWx1ZSBwYWlycy4KKyAgICB0eXBlZGVmIGRldGFpbDo6Y29tbW9uX29hcmNoaXZlPEFyY2hpdmU+IGRldGFpbF9jb21tb25fb2FyY2hpdmU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoCisgICAgICAgIGNvbnN0IDo6Ym9vc3Q6OnNlcmlhbGl6YXRpb246Om52cDwgVCA+ICYgdAorICAgICl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+c2F2ZV9zdGFydCh0Lm5hbWUoKSk7CisgICAgICAgIHRoaXMtPmRldGFpbF9jb21tb25fb2FyY2hpdmU6OnNhdmVfb3ZlcnJpZGUodC5jb25zdF92YWx1ZSgpKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5zYXZlX2VuZCh0Lm5hbWUoKSk7CisgICAgfQorCisgICAgLy8gc3BlY2lmaWMgb3ZlcnJpZGVzIGZvciBhdHRyaWJ1dGVzIC0gbm90IG5hbWUgdmFsdWUgcGFpcnMgc28gd2UKKyAgICAvLyB3YW50IHRvIHRyYXAgdGhlbSBiZWZvcmUgdGhlIGFib3ZlICJmYWxsIHRocm91Z2giCisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBzYXZlX292ZXJyaWRlKGNvbnN0IGNsYXNzX2lkX3R5cGUgJiB0KTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIHNhdmVfb3ZlcnJpZGUoY29uc3QgY2xhc3NfaWRfb3B0aW9uYWxfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZV9vdmVycmlkZShjb25zdCBjbGFzc19pZF9yZWZlcmVuY2VfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZV9vdmVycmlkZShjb25zdCBvYmplY3RfaWRfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZV9vdmVycmlkZShjb25zdCBvYmplY3RfcmVmZXJlbmNlX3R5cGUgJiB0KTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wgdm9pZAorICAgIHNhdmVfb3ZlcnJpZGUoY29uc3QgdmVyc2lvbl90eXBlICYgdCk7CisgICAgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIHZvaWQKKyAgICBzYXZlX292ZXJyaWRlKGNvbnN0IGNsYXNzX25hbWVfdHlwZSAmIHQpOworICAgIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkCisgICAgc2F2ZV9vdmVycmlkZShjb25zdCB0cmFja2luZ190eXBlICYgdCk7CisKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wKKyAgICBiYXNpY194bWxfb2FyY2hpdmUodW5zaWduZWQgaW50IGZsYWdzKTsKKyAgICBCT09TVF9BUkNISVZFX09SX1dBUkNISVZFX0RFQ0wKKyAgICB+YmFzaWNfeG1sX29hcmNoaXZlKCk7Cit9OworCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9CQVNJQ19YTUxfT0FSQ0hJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9iaW5hcnlfaWFyY2hpdmUuaHBwCkBAIC0wLDAgKzEsNjQgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CSU5BUllfSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQklOQVJZX0lBUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJpbmFyeV9pYXJjaGl2ZS5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8aXN0cmVhbT4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2JpbmFyeV9pYXJjaGl2ZV9pbXBsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9yZWdpc3Rlcl9hcmNoaXZlLmhwcD4KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CisKKy8vIGRvIG5vdCBkZXJpdmUgZnJvbSB0aGlzIGNsYXNzLiAgSWYgeW91IHdhbnQgdG8gZXh0ZW5kIHRoaXMgZnVuY3Rpb25hbGl0eQorLy8gdmlhIGluaGVydGFuY2UsIGRlcml2ZWQgZnJvbSBiaW5hcnlfaWFyY2hpdmVfaW1wbCBpbnN0ZWFkLiAgVGhpcyB3aWxsCisvLyBwcmVzZXJ2ZSBjb3JyZWN0IHN0YXRpYyBwb2x5bW9ycGhpc20uCitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiaW5hcnlfaWFyY2hpdmUgOgorICAgIHB1YmxpYyBiaW5hcnlfaWFyY2hpdmVfaW1wbDwKKyAgICAgICAgYm9vc3Q6OmFyY2hpdmU6OmJpbmFyeV9pYXJjaGl2ZSwgCisgICAgICAgIHN0ZDo6aXN0cmVhbTo6Y2hhcl90eXBlLCAKKyAgICAgICAgc3RkOjppc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgID57CitwdWJsaWM6CisgICAgYmluYXJ5X2lhcmNoaXZlKHN0ZDo6aXN0cmVhbSAmIGlzLCB1bnNpZ25lZCBpbnQgZmxhZ3MgPSAwKSA6CisgICAgICAgIGJpbmFyeV9pYXJjaGl2ZV9pbXBsPAorICAgICAgICAgICAgYmluYXJ5X2lhcmNoaXZlLCBzdGQ6OmlzdHJlYW06OmNoYXJfdHlwZSwgc3RkOjppc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgICAgICA+KGlzLCBmbGFncykKKyAgICB7fQorICAgIGJpbmFyeV9pYXJjaGl2ZShzdGQ6OnN0cmVhbWJ1ZiAmIGJzYiwgdW5zaWduZWQgaW50IGZsYWdzID0gMCkgOgorICAgICAgICBiaW5hcnlfaWFyY2hpdmVfaW1wbDwKKyAgICAgICAgICAgIGJpbmFyeV9pYXJjaGl2ZSwgc3RkOjppc3RyZWFtOjpjaGFyX3R5cGUsIHN0ZDo6aXN0cmVhbTo6dHJhaXRzX3R5cGUKKyAgICAgICAgPihic2IsIGZsYWdzKQorICAgIHt9Cit9OworCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisvLyByZXF1aXJlZCBieSBleHBvcnQKK0JPT1NUX1NFUklBTElaQVRJT05fUkVHSVNURVJfQVJDSElWRShib29zdDo6YXJjaGl2ZTo6YmluYXJ5X2lhcmNoaXZlKQorQk9PU1RfU0VSSUFMSVpBVElPTl9VU0VfQVJSQVlfT1BUSU1JWkFUSU9OKGJvb3N0OjphcmNoaXZlOjpiaW5hcnlfaWFyY2hpdmUpCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JJTkFSWV9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2JpbmFyeV9pYXJjaGl2ZV9pbXBsLmhwcApAQCAtMCwwICsxLDEwNSBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JJTkFSWV9JQVJDSElWRV9JTVBMX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0JJTkFSWV9JQVJDSElWRV9JTVBMX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJpbmFyeV9pYXJjaGl2ZV9pbXBsLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxpc3RyZWFtPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfYmluYXJ5X2lwcmltaXRpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfYmluYXJ5X2lhcmNoaXZlLmhwcD4KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7IAorbmFtZXNwYWNlIGFyY2hpdmUgeworCituYW1lc3BhY2UgZGV0YWlsIHsKKyAgICB0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlPiBjbGFzcyBpbnRlcmZhY2VfaWFyY2hpdmU7Cit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgRWxlbSwgY2xhc3MgVHI+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBiaW5hcnlfaWFyY2hpdmVfaW1wbCA6IAorICAgIHB1YmxpYyBiYXNpY19iaW5hcnlfaXByaW1pdGl2ZTxBcmNoaXZlLCBFbGVtLCBUcj4sCisgICAgcHVibGljIGJhc2ljX2JpbmFyeV9pYXJjaGl2ZTxBcmNoaXZlPgoreworI2lmZGVmIEJPT1NUX05PX01FTUJFUl9URU1QTEFURV9GUklFTkRTCitwdWJsaWM6CisjZWxzZQorcHJvdGVjdGVkOgorICAgICNpZiBCT09TVF9XT1JLQVJPVU5EKEJPT1NUX01TVkMsIDwgMTUwMCkKKyAgICAgICAgLy8gZm9yIHNvbWUgaW5leHBsaWNhYmxlIHJlYXNvbiBpbnNlcnRpb24gb2YgImNsYXNzIiBnZW5lcmF0ZXMgY29tcGlsZSBlcnJvCisgICAgICAgIC8vIG9uIG1zdmMgNy4xCisgICAgICAgIGZyaWVuZCBkZXRhaWw6OmludGVyZmFjZV9pYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAgICAgZnJpZW5kIGJhc2ljX2JpbmFyeV9pYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAgICAgZnJpZW5kIGxvYWRfYWNjZXNzOworICAgICNlbHNlCisgICAgICAgIGZyaWVuZCBjbGFzcyBkZXRhaWw6OmludGVyZmFjZV9pYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAgICAgZnJpZW5kIGNsYXNzIGJhc2ljX2JpbmFyeV9pYXJjaGl2ZTxBcmNoaXZlPjsKKyAgICAgICAgZnJpZW5kIGNsYXNzIGxvYWRfYWNjZXNzOworICAgICNlbmRpZgorI2VuZGlmCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIGxvYWRfb3ZlcnJpZGUoVCAmIHQpeworICAgICAgICB0aGlzLT5iYXNpY19iaW5hcnlfaWFyY2hpdmU8QXJjaGl2ZT46OmxvYWRfb3ZlcnJpZGUodCk7CisgICAgfQorICAgIHZvaWQgaW5pdCh1bnNpZ25lZCBpbnQgZmxhZ3MpeworICAgICAgICBpZigwICE9IChmbGFncyAmIG5vX2hlYWRlcikpeworICAgICAgICAgICAgcmV0dXJuOworICAgICAgICB9CisgICAgICAgICNpZiAhIGRlZmluZWQoX19NV0VSS1NfXykKKyAgICAgICAgICAgIHRoaXMtPmJhc2ljX2JpbmFyeV9pYXJjaGl2ZTxBcmNoaXZlPjo6aW5pdCgpOworICAgICAgICAgICAgdGhpcy0+YmFzaWNfYmluYXJ5X2lwcmltaXRpdmU8QXJjaGl2ZSwgRWxlbSwgVHI+Ojppbml0KCk7CisgICAgICAgICNlbHNlCisgICAgICAgICAgICBiYXNpY19iaW5hcnlfaWFyY2hpdmU8QXJjaGl2ZT46OmluaXQoKTsKKyAgICAgICAgICAgIGJhc2ljX2JpbmFyeV9pcHJpbWl0aXZlPEFyY2hpdmUsIEVsZW0sIFRyPjo6aW5pdCgpOworICAgICAgICAjZW5kaWYKKyAgICB9CisgICAgYmluYXJ5X2lhcmNoaXZlX2ltcGwoCisgICAgICAgIHN0ZDo6YmFzaWNfc3RyZWFtYnVmPEVsZW0sIFRyPiAmIGJzYiwgCisgICAgICAgIHVuc2lnbmVkIGludCBmbGFncworICAgICkgOgorICAgICAgICBiYXNpY19iaW5hcnlfaXByaW1pdGl2ZTxBcmNoaXZlLCBFbGVtLCBUcj4oCisgICAgICAgICAgICBic2IsIAorICAgICAgICAgICAgMCAhPSAoZmxhZ3MgJiBub19jb2RlY3Z0KQorICAgICAgICApLAorICAgICAgICBiYXNpY19iaW5hcnlfaWFyY2hpdmU8QXJjaGl2ZT4oZmxhZ3MpCisgICAgeworICAgICAgICBpbml0KGZsYWdzKTsKKyAgICB9CisgICAgYmluYXJ5X2lhcmNoaXZlX2ltcGwoCisgICAgICAgIHN0ZDo6YmFzaWNfaXN0cmVhbTxFbGVtLCBUcj4gJiBpcywgCisgICAgICAgIHVuc2lnbmVkIGludCBmbGFncworICAgICkgOgorICAgICAgICBiYXNpY19iaW5hcnlfaXByaW1pdGl2ZTxBcmNoaXZlLCBFbGVtLCBUcj4oCisgICAgICAgICAgICAqIGlzLnJkYnVmKCksIAorICAgICAgICAgICAgMCAhPSAoZmxhZ3MgJiBub19jb2RlY3Z0KQorICAgICAgICApLAorICAgICAgICBiYXNpY19iaW5hcnlfaWFyY2hpdmU8QXJjaGl2ZT4oZmxhZ3MpCisgICAgeworICAgICAgICBpbml0KGZsYWdzKTsKKyAgICB9Cit9OworCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9CSU5BUllfSUFSQ0hJVkVfSU1QTF9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2JpbmFyeV9vYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSw2NCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JJTkFSWV9PQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CSU5BUllfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmluYXJ5X29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxvc3RyZWFtPgorI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9iaW5hcnlfb2FyY2hpdmVfaW1wbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvcmVnaXN0ZXJfYXJjaGl2ZS5ocHA+CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyAKK25hbWVzcGFjZSBhcmNoaXZlIHsKKworLy8gZG8gbm90IGRlcml2ZSBmcm9tIHRoaXMgY2xhc3MuICBJZiB5b3Ugd2FudCB0byBleHRlbmQgdGhpcyBmdW5jdGlvbmFsaXR5CisvLyB2aWEgaW5oZXJ0YW5jZSwgZGVyaXZlZCBmcm9tIGJpbmFyeV9vYXJjaGl2ZV9pbXBsIGluc3RlYWQuICBUaGlzIHdpbGwKKy8vIHByZXNlcnZlIGNvcnJlY3Qgc3RhdGljIHBvbHltb3JwaGlzbS4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJpbmFyeV9vYXJjaGl2ZSA6IAorICAgIHB1YmxpYyBiaW5hcnlfb2FyY2hpdmVfaW1wbDwKKyAgICAgICAgYmluYXJ5X29hcmNoaXZlLCBzdGQ6Om9zdHJlYW06OmNoYXJfdHlwZSwgc3RkOjpvc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgID4KK3sKK3B1YmxpYzoKKyAgICBiaW5hcnlfb2FyY2hpdmUoc3RkOjpvc3RyZWFtICYgb3MsIHVuc2lnbmVkIGludCBmbGFncyA9IDApIDoKKyAgICAgICAgYmluYXJ5X29hcmNoaXZlX2ltcGw8CisgICAgICAgICAgICBiaW5hcnlfb2FyY2hpdmUsIHN0ZDo6b3N0cmVhbTo6Y2hhcl90eXBlLCBzdGQ6Om9zdHJlYW06OnRyYWl0c190eXBlCisgICAgICAgID4ob3MsIGZsYWdzKQorICAgIHt9CisgICAgYmluYXJ5X29hcmNoaXZlKHN0ZDo6c3RyZWFtYnVmICYgYnNiLCB1bnNpZ25lZCBpbnQgZmxhZ3MgPSAwKSA6CisgICAgICAgIGJpbmFyeV9vYXJjaGl2ZV9pbXBsPAorICAgICAgICAgICAgYmluYXJ5X29hcmNoaXZlLCBzdGQ6Om9zdHJlYW06OmNoYXJfdHlwZSwgc3RkOjpvc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgICAgICA+KGJzYiwgZmxhZ3MpCisgICAge30KK307CisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKy8vIHJlcXVpcmVkIGJ5IGV4cG9ydAorQk9PU1RfU0VSSUFMSVpBVElPTl9SRUdJU1RFUl9BUkNISVZFKGJvb3N0OjphcmNoaXZlOjpiaW5hcnlfb2FyY2hpdmUpCitCT09TVF9TRVJJQUxJWkFUSU9OX1VTRV9BUlJBWV9PUFRJTUlaQVRJT04oYm9vc3Q6OmFyY2hpdmU6OmJpbmFyeV9vYXJjaGl2ZSkKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQklOQVJZX09BUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmluYXJ5X29hcmNoaXZlX2ltcGwuaHBwCkBAIC0wLDAgKzEsMTA2IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfQklOQVJZX09BUkNISVZFX0lNUExfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQklOQVJZX09BUkNISVZFX0lNUExfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmluYXJ5X29hcmNoaXZlX2ltcGwuaHBwCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPG9zdHJlYW0+CisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2Jhc2ljX2JpbmFyeV9vcHJpbWl0aXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2Jhc2ljX2JpbmFyeV9vYXJjaGl2ZS5ocHA+CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeyAKK25hbWVzcGFjZSBhcmNoaXZlIHsKKworbmFtZXNwYWNlIGRldGFpbCB7CisgICAgdGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4gY2xhc3MgaW50ZXJmYWNlX29hcmNoaXZlOworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIEVsZW0sIGNsYXNzIFRyPgorY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmluYXJ5X29hcmNoaXZlX2ltcGwgOiAKKyAgICBwdWJsaWMgYmFzaWNfYmluYXJ5X29wcmltaXRpdmU8QXJjaGl2ZSwgRWxlbSwgVHI+LAorICAgIHB1YmxpYyBiYXNpY19iaW5hcnlfb2FyY2hpdmU8QXJjaGl2ZT4KK3sKKyNpZmRlZiBCT09TVF9OT19NRU1CRVJfVEVNUExBVEVfRlJJRU5EUworcHVibGljOgorI2Vsc2UKK3Byb3RlY3RlZDoKKyAgICAjaWYgQk9PU1RfV09SS0FST1VORChCT09TVF9NU1ZDLCA8IDE1MDApCisgICAgICAgIC8vIGZvciBzb21lIGluZXhwbGljYWJsZSByZWFzb24gaW5zZXJ0aW9uIG9mICJjbGFzcyIgZ2VuZXJhdGVzIGNvbXBpbGUgZXJybworICAgICAgICAvLyBvbiBtc3ZjIDcuMQorICAgICAgICBmcmllbmQgZGV0YWlsOjppbnRlcmZhY2Vfb2FyY2hpdmU8QXJjaGl2ZT47CisgICAgICAgIGZyaWVuZCBiYXNpY19iaW5hcnlfb2FyY2hpdmU8QXJjaGl2ZT47CisgICAgICAgIGZyaWVuZCBzYXZlX2FjY2VzczsKKyAgICAjZWxzZQorICAgICAgICBmcmllbmQgY2xhc3MgZGV0YWlsOjppbnRlcmZhY2Vfb2FyY2hpdmU8QXJjaGl2ZT47CisgICAgICAgIGZyaWVuZCBjbGFzcyBiYXNpY19iaW5hcnlfb2FyY2hpdmU8QXJjaGl2ZT47CisgICAgICAgIGZyaWVuZCBjbGFzcyBzYXZlX2FjY2VzczsKKyAgICAjZW5kaWYKKyNlbmRpZgorICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgdm9pZCBzYXZlX292ZXJyaWRlKFQgJiB0KXsKKyAgICAgICAgdGhpcy0+YmFzaWNfYmluYXJ5X29hcmNoaXZlPEFyY2hpdmU+OjpzYXZlX292ZXJyaWRlKHQpOworICAgIH0KKyAgICB2b2lkIGluaXQodW5zaWduZWQgaW50IGZsYWdzKSB7CisgICAgICAgIGlmKDAgIT0gKGZsYWdzICYgbm9faGVhZGVyKSl7CisgICAgICAgICAgICByZXR1cm47CisgICAgICAgIH0KKyAgICAgICAgI2lmICEgZGVmaW5lZChfX01XRVJLU19fKQorICAgICAgICAgICAgdGhpcy0+YmFzaWNfYmluYXJ5X29hcmNoaXZlPEFyY2hpdmU+Ojppbml0KCk7CisgICAgICAgICAgICB0aGlzLT5iYXNpY19iaW5hcnlfb3ByaW1pdGl2ZTxBcmNoaXZlLCBFbGVtLCBUcj46OmluaXQoKTsKKyAgICAgICAgI2Vsc2UKKyAgICAgICAgICAgIGJhc2ljX2JpbmFyeV9vYXJjaGl2ZTxBcmNoaXZlPjo6aW5pdCgpOworICAgICAgICAgICAgYmFzaWNfYmluYXJ5X29wcmltaXRpdmU8QXJjaGl2ZSwgRWxlbSwgVHI+Ojppbml0KCk7CisgICAgICAgICNlbmRpZgorICAgIH0KKyAgICBiaW5hcnlfb2FyY2hpdmVfaW1wbCgKKyAgICAgICAgc3RkOjpiYXNpY19zdHJlYW1idWY8RWxlbSwgVHI+ICYgYnNiLCAKKyAgICAgICAgdW5zaWduZWQgaW50IGZsYWdzCisgICAgKSA6CisgICAgICAgIGJhc2ljX2JpbmFyeV9vcHJpbWl0aXZlPEFyY2hpdmUsIEVsZW0sIFRyPigKKyAgICAgICAgICAgIGJzYiwgCisgICAgICAgICAgICAwICE9IChmbGFncyAmIG5vX2NvZGVjdnQpCisgICAgICAgICksCisgICAgICAgIGJhc2ljX2JpbmFyeV9vYXJjaGl2ZTxBcmNoaXZlPihmbGFncykKKyAgICB7CisgICAgICAgIGluaXQoZmxhZ3MpOworICAgIH0KKyAgICBiaW5hcnlfb2FyY2hpdmVfaW1wbCgKKyAgICAgICAgc3RkOjpiYXNpY19vc3RyZWFtPEVsZW0sIFRyPiAmIG9zLCAKKyAgICAgICAgdW5zaWduZWQgaW50IGZsYWdzCisgICAgKSA6CisgICAgICAgIGJhc2ljX2JpbmFyeV9vcHJpbWl0aXZlPEFyY2hpdmUsIEVsZW0sIFRyPigKKyAgICAgICAgICAgICogb3MucmRidWYoKSwgCisgICAgICAgICAgICAwICE9IChmbGFncyAmIG5vX2NvZGVjdnQpCisgICAgICAgICksCisgICAgICAgIGJhc2ljX2JpbmFyeV9vYXJjaGl2ZTxBcmNoaXZlPihmbGFncykKKyAgICB7CisgICAgICAgIGluaXQoZmxhZ3MpOworICAgIH0KK307CisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JJTkFSWV9PQVJDSElWRV9JTVBMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvYmluYXJ5X3dpYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSw1NiBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JJTkFSWV9XSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQklOQVJZX1dJQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiaW5hcnlfd2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2lmZGVmIEJPT1NUX05PX1NURF9XU1RSRUFNQlVGCisjZXJyb3IgIndpZGUgY2hhciBpL28gbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtIgorI2Vsc2UKKworI2luY2x1ZGUgPGlzdHJlYW0+IC8vIHdpc3RyZWFtCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9iaW5hcnlfaWFyY2hpdmVfaW1wbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvcmVnaXN0ZXJfYXJjaGl2ZS5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7IAorbmFtZXNwYWNlIGFyY2hpdmUgeworCitjbGFzcyBiaW5hcnlfd2lhcmNoaXZlIDogCisgICAgcHVibGljIGJpbmFyeV9pYXJjaGl2ZV9pbXBsPAorICAgICAgICBiaW5hcnlfd2lhcmNoaXZlLCBzdGQ6Ondpc3RyZWFtOjpjaGFyX3R5cGUsIHN0ZDo6d2lzdHJlYW06OnRyYWl0c190eXBlCisgICAgPgoreworcHVibGljOgorICAgIGJpbmFyeV93aWFyY2hpdmUoc3RkOjp3aXN0cmVhbSAmIGlzLCB1bnNpZ25lZCBpbnQgZmxhZ3MgPSAwKSA6CisgICAgICAgIGJpbmFyeV9pYXJjaGl2ZV9pbXBsPAorICAgICAgICAgICAgYmluYXJ5X3dpYXJjaGl2ZSwgc3RkOjp3aXN0cmVhbTo6Y2hhcl90eXBlLCBzdGQ6Ondpc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgICAgICA+KGlzLCBmbGFncykKKyAgICB7fQorICAgIGJpbmFyeV93aWFyY2hpdmUoc3RkOjp3c3RyZWFtYnVmICYgYnNiLCB1bnNpZ25lZCBpbnQgZmxhZ3MgPSAwKSA6CisgICAgICAgIGJpbmFyeV9pYXJjaGl2ZV9pbXBsPAorICAgICAgICAgICAgYmluYXJ5X3dpYXJjaGl2ZSwgc3RkOjp3aXN0cmVhbTo6Y2hhcl90eXBlLCBzdGQ6Ondpc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgICAgICA+KGJzYiwgZmxhZ3MpCisgICAge30KK307CisKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKy8vIHJlcXVpcmVkIGJ5IGV4cG9ydAorQk9PU1RfU0VSSUFMSVpBVElPTl9SRUdJU1RFUl9BUkNISVZFKGJvb3N0OjphcmNoaXZlOjpiaW5hcnlfd2lhcmNoaXZlKQorCisjZW5kaWYgLy8gQk9PU1RfTk9fU1REX1dTVFJFQU1CVUYKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JJTkFSWV9XSUFSQ0hJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9iaW5hcnlfd29hcmNoaXZlLmhwcApAQCAtMCwwICsxLDU5IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfQklOQVJZX1dPQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CSU5BUllfV09BUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJpbmFyeV93b2FyY2hpdmUuaHBwCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaWZkZWYgQk9PU1RfTk9fU1REX1dTVFJFQU1CVUYKKyNlcnJvciAid2lkZSBjaGFyIGkvbyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm0iCisjZWxzZQorCisjaW5jbHVkZSA8b3N0cmVhbT4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2JpbmFyeV9vYXJjaGl2ZV9pbXBsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9yZWdpc3Rlcl9hcmNoaXZlLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsgCituYW1lc3BhY2UgYXJjaGl2ZSB7CisKKy8vIGRvIG5vdCBkZXJpdmUgZnJvbSB0aGlzIGNsYXNzLiAgSWYgeW91IHdhbnQgdG8gZXh0ZW5kIHRoaXMgZnVuY3Rpb25hbGl0eQorLy8gdmlhIGluaGVydGFuY2UsIGRlcml2ZWQgZnJvbSBiaW5hcnlfb2FyY2hpdmVfaW1wbCBpbnN0ZWFkLiAgVGhpcyB3aWxsCisvLyBwcmVzZXJ2ZSBjb3JyZWN0IHN0YXRpYyBwb2x5bW9ycGhpc20uCitjbGFzcyBiaW5hcnlfd29hcmNoaXZlIDogCisgICAgcHVibGljIGJpbmFyeV9vYXJjaGl2ZV9pbXBsPAorICAgICAgICAgICAgYmluYXJ5X3dvYXJjaGl2ZSwgc3RkOjp3b3N0cmVhbTo6Y2hhcl90eXBlLCBzdGQ6Ondvc3RyZWFtOjp0cmFpdHNfdHlwZQorICAgICAgICA+Cit7CitwdWJsaWM6CisgICAgYmluYXJ5X3dvYXJjaGl2ZShzdGQ6Ondvc3RyZWFtICYgb3MsIHVuc2lnbmVkIGludCBmbGFncyA9IDApIDoKKyAgICAgICAgYmluYXJ5X29hcmNoaXZlX2ltcGw8CisgICAgICAgICAgICBiaW5hcnlfd29hcmNoaXZlLCBzdGQ6Ondvc3RyZWFtOjpjaGFyX3R5cGUsIHN0ZDo6d29zdHJlYW06OnRyYWl0c190eXBlCisgICAgICAgID4ob3MsIGZsYWdzKQorICAgIHt9CisgICAgYmluYXJ5X3dvYXJjaGl2ZShzdGQ6OndzdHJlYW1idWYgJiBic2IsIHVuc2lnbmVkIGludCBmbGFncyA9IDApIDoKKyAgICAgICAgYmluYXJ5X29hcmNoaXZlX2ltcGw8CisgICAgICAgICAgICBiaW5hcnlfd29hcmNoaXZlLCBzdGQ6Ondvc3RyZWFtOjpjaGFyX3R5cGUsIHN0ZDo6d29zdHJlYW06OnRyYWl0c190eXBlCisgICAgICAgID4oYnNiLCBmbGFncykKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworLy8gcmVxdWlyZWQgYnkgZXhwb3J0CitCT09TVF9TRVJJQUxJWkFUSU9OX1JFR0lTVEVSX0FSQ0hJVkUoYm9vc3Q6OmFyY2hpdmU6OmJpbmFyeV93b2FyY2hpdmUpCisKKyNlbmRpZiAvLyBCT09TVF9OT19TVERfV1NUUkVBTUJVRgorI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQklOQVJZX1dPQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2NvZGVjdnRfbnVsbC5ocHAKQEAgLTAsMCArMSwxMDYgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9DT0RFQ1ZUX05VTExfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQ09ERUNWVF9OVUxMX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGNvZGVjdnRfbnVsbC5ocHA6CisKKy8vIChDKSBDb3B5cmlnaHQgMjAwNCBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4KKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8bG9jYWxlPgorI2luY2x1ZGUgPGNzdGRkZWY+IC8vIE5VTEwsIHNpemVfdAorI2luY2x1ZGUgPGN3Y2hhcj4gICAvLyBmb3IgbWJzdGF0ZV90CisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZCB7CisvLyBGb3IgU1RMcG9ydCBvbiBXaW5DRSwgQk9PU1RfTk9fU1REQ19OQU1FU1BBQ0UgY2FuIGdldCBkZWZpbmVkIGlmIFNUTHBvcnQgaXMgcHV0dGluZyBzeW1ib2xzIGluIGl0cyBvd24gbmFtZXNwYWNlLgorLy8gSW4gdGhlIGNhc2Ugb2YgY29kZWN2dCwgaG93ZXZlciwgdGhpcyBkb2VzIG5vdCBtZWFuIHRoYXQgY29kZWN2dCBpcyBpbiB0aGUgZ2xvYmFsIG5hbWVzcGFjZSAoaXQgd2lsbCBiZSBpbiBTVExwb3J0J3MgbmFtZXNwYWNlKQorIyAgaWYgIWRlZmluZWQoX19TR0lfU1RMX1BPUlQpICYmICFkZWZpbmVkKF9TVExQT1JUX1ZFUlNJT04pCisgICAgdXNpbmcgOjpjb2RlY3Z0OworIyAgZW5kaWYKKyAgICB1c2luZyA6Om1ic3RhdGVfdDsKKyAgICB1c2luZyA6OnNpemVfdDsKK30gLy8gbmFtZXNwYWNlCisjZW5kaWYKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CisKK3RlbXBsYXRlPGNsYXNzIENoPgorY2xhc3MgY29kZWN2dF9udWxsOworCit0ZW1wbGF0ZTw+CitjbGFzcyBjb2RlY3Z0X251bGw8Y2hhcj4gOiBwdWJsaWMgc3RkOjpjb2RlY3Z0PGNoYXIsIGNoYXIsIHN0ZDo6bWJzdGF0ZV90PgoreworICAgIHZpcnR1YWwgYm9vbCBkb19hbHdheXNfbm9jb252KCkgY29uc3QgdGhyb3coKSB7CisgICAgICAgIHJldHVybiB0cnVlOworICAgIH0KK3B1YmxpYzoKKyAgICBleHBsaWNpdCBjb2RlY3Z0X251bGwoc3RkOjpzaXplX3Qgbm9fbG9jYWxlX21hbmFnZSA9IDApIDoKKyAgICAgICAgc3RkOjpjb2RlY3Z0PGNoYXIsIGNoYXIsIHN0ZDo6bWJzdGF0ZV90Pihub19sb2NhbGVfbWFuYWdlKQorICAgIHt9CisgICAgdmlydHVhbCB+Y29kZWN2dF9udWxsKCl7fTsKK307CisKK3RlbXBsYXRlPD4KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGNvZGVjdnRfbnVsbDx3Y2hhcl90PiA6IHB1YmxpYyBzdGQ6OmNvZGVjdnQ8d2NoYXJfdCwgY2hhciwgc3RkOjptYnN0YXRlX3Q+Cit7CisgICAgdmlydHVhbCBCT09TVF9XQVJDSElWRV9ERUNMIHN0ZDo6Y29kZWN2dF9iYXNlOjpyZXN1bHQKKyAgICBkb19vdXQoCisgICAgICAgIHN0ZDo6bWJzdGF0ZV90ICYgc3RhdGUsCisgICAgICAgIGNvbnN0IHdjaGFyX3QgKiBmaXJzdDEsCisgICAgICAgIGNvbnN0IHdjaGFyX3QgKiBsYXN0MSwKKyAgICAgICAgY29uc3Qgd2NoYXJfdCAqICYgbmV4dDEsCisgICAgICAgIGNoYXIgKiBmaXJzdDIsCisgICAgICAgIGNoYXIgKiBsYXN0MiwKKyAgICAgICAgY2hhciAqICYgbmV4dDIKKyAgICApIGNvbnN0OworICAgIHZpcnR1YWwgQk9PU1RfV0FSQ0hJVkVfREVDTCBzdGQ6OmNvZGVjdnRfYmFzZTo6cmVzdWx0CisgICAgZG9faW4oCisgICAgICAgIHN0ZDo6bWJzdGF0ZV90ICYgc3RhdGUsCisgICAgICAgIGNvbnN0IGNoYXIgKiBmaXJzdDEsCisgICAgICAgIGNvbnN0IGNoYXIgKiBsYXN0MSwKKyAgICAgICAgY29uc3QgY2hhciAqICYgbmV4dDEsCisgICAgICAgIHdjaGFyX3QgKiBmaXJzdDIsCisgICAgICAgIHdjaGFyX3QgKiBsYXN0MiwKKyAgICAgICAgd2NoYXJfdCAqICYgbmV4dDIKKyAgICApIGNvbnN0OworICAgIHZpcnR1YWwgaW50IGRvX2VuY29kaW5nKCApIGNvbnN0IHRocm93KCApeworICAgICAgICByZXR1cm4gc2l6ZW9mKHdjaGFyX3QpIC8gc2l6ZW9mKGNoYXIpOworICAgIH0KKyAgICB2aXJ0dWFsIGludCBkb19tYXhfbGVuZ3RoKCApIGNvbnN0IHRocm93KCApeworICAgICAgICByZXR1cm4gZG9fZW5jb2RpbmcoKTsKKyAgICB9CitwdWJsaWM6CisgICAgZXhwbGljaXQgY29kZWN2dF9udWxsKHN0ZDo6c2l6ZV90IG5vX2xvY2FsZV9tYW5hZ2UgPSAwKSA6CisgICAgICAgIHN0ZDo6Y29kZWN2dDx3Y2hhcl90LCBjaGFyLCBzdGQ6Om1ic3RhdGVfdD4obm9fbG9jYWxlX21hbmFnZSkKKyAgICB7fQorICAgIHZpcnR1YWwgfmNvZGVjdnRfbnVsbCgpe307Cit9OworCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworIyAgcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcCBwcmFnbWFzCisKKyNlbmRpZiAvL0JPT1NUX0FSQ0hJVkVfQ09ERUNWVF9OVUxMX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwCkBAIC0wLDAgKzEsMTYgQEAKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBhYmlfcHJlZml4LmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisjaWZkZWYgQk9PU1RfTVNWQworIyAgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgIHByYWdtYSB3YXJuaW5nKGRpc2FibGUgOiA0MjUxIDQyMzEgNDY2MCA0Mjc1KQorI2VuZGlmCisKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcApAQCAtMCwwICsxLDE1IEBACisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYWJpX3N1ZmZpeC5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9hcmNoaXZlX3NlcmlhbGl6ZXJfbWFwLmhwcApAQCAtMCwwICsxLDU0IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfU0VSSUFMSVpFUl9NQVBfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfU0VSSUFMSVpFUl9NQVBfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYXJjaGl2ZV9zZXJpYWxpemVyX21hcC5ocHA6IGV4dGVuc3Rpb24gb2YgdHlwZV9pbmZvIHJlcXVpcmVkIGZvciAKKy8vIHNlcmlhbGl6YXRpb24uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwOSBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworLy8gbm90ZTogdGhpcyBpcyBub3RoaW5nIG1vcmUgdGhhbiB0aGUgdGhpbmVzdCBvZiB3cmFwcGVycyBhcm91bmQKKy8vIGJhc2ljX3NlcmlhbGl6ZXJfbWFwIHNvIHdlIGNhbiBoYXZlIGEgb25lIG1hcCAvIGFyY2hpdmUgdHlwZS4gCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGJhc2ljX3NlcmlhbGl6ZXI7CisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBhcmNoaXZlX3NlcmlhbGl6ZXJfbWFwIHsKK3B1YmxpYzoKKyAgICBzdGF0aWMgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIGJvb2wgaW5zZXJ0KGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgKiBicyk7CisgICAgc3RhdGljIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCB2b2lkIGVyYXNlKGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgKiBicyk7CisgICAgc3RhdGljIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCBjb25zdCBiYXNpY19zZXJpYWxpemVyICogZmluZCgKKyAgICAgICAgY29uc3QgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmV4dGVuZGVkX3R5cGVfaW5mbyAmIHR5cGVfCisgICAgKTsKK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCisjZW5kaWYgLy9CT09TVF9BUkNISVZFX1NFUklBTElaRVJfTUFQX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcApAQCAtMCwwICsxLDQ4IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0FVVE9fTElOS19BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9BVVRPX0xJTktfQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyAgYXV0b19saW5rX2FyY2hpdmUuaHBwCisvLworLy8gIChjKSBDb3B5cmlnaHQgUm9iZXJ0IFJhbWV5IDIwMDQKKy8vICBVc2UsIG1vZGlmaWNhdGlvbiwgYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGxpYnJhcnkgaG9tZSBwYWdlIGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL2xpYnMvc2VyaWFsaXphdGlvbgorCisvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLyAKKworLy8gVGhpcyBoZWFkZXIgaW1wbGVtZW50cyBzZXBhcmF0ZSBjb21waWxhdGlvbiBmZWF0dXJlcyBhcyBkZXNjcmliZWQgaW4KKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL21vcmUvc2VwYXJhdGVfY29tcGlsYXRpb24uaHRtbAorCisvLyAgZW5hYmxlIGF1dG9tYXRpYyBsaWJyYXJ5IHZhcmlhbnQgc2VsZWN0aW9uICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLyAKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwPgorCisjaWYgIWRlZmluZWQoQk9PU1RfQUxMX05PX0xJQikgJiYgIWRlZmluZWQoQk9PU1RfU0VSSUFMSVpBVElPTl9OT19MSUIpIFwKKyYmICAhZGVmaW5lZChCT09TVF9BUkNISVZFX1NPVVJDRSkgJiYgIWRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKSAgXAorJiYgICFkZWZpbmVkKEJPT1NUX1NFUklBTElaQVRJT05fU09VUkNFKQorCisgICAgLy8gU2V0IHRoZSBuYW1lIG9mIG91ciBsaWJyYXJ5LCB0aGlzIHdpbGwgZ2V0IHVuZGVmJ2VkIGJ5IGF1dG9fbGluay5ocHAKKyAgICAvLyBvbmNlIGl0J3MgZG9uZSB3aXRoIGl0OgorICAgIC8vCisgICAgI2RlZmluZSBCT09TVF9MSUJfTkFNRSBib29zdF9zZXJpYWxpemF0aW9uCisgICAgLy8KKyAgICAvLyBJZiB3ZSdyZSBpbXBvcnRpbmcgY29kZSBmcm9tIGEgZGxsLCB0aGVuIHRlbGwgYXV0b19saW5rLmhwcCBhYm91dCBpdDoKKyAgICAvLworICAgICNpZiBkZWZpbmVkKEJPT1NUX0FMTF9EWU5fTElOSykgfHwgZGVmaW5lZChCT09TVF9TRVJJQUxJWkFUSU9OX0RZTl9MSU5LKQorICAgICMgIGRlZmluZSBCT09TVF9EWU5fTElOSworICAgICNlbmRpZgorICAgIC8vCisgICAgLy8gQW5kIGluY2x1ZGUgdGhlIGhlYWRlciB0aGF0IGRvZXMgdGhlIHdvcms6CisgICAgLy8KKyAgICAjaW5jbHVkZSA8Ym9vc3QvY29uZmlnL2F1dG9fbGluay5ocHA+CisjZW5kaWYgIC8vIGF1dG8tbGlua2luZyBkaXNhYmxlZAorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQVVUT19MSU5LX0FSQ0hJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvYXV0b19saW5rX3dhcmNoaXZlLmhwcApAQCAtMCwwICsxLDQ3IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0FVVE9fTElOS19XQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfQVVUT19MSU5LX1dBUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vICBhdXRvX2xpbmtfd2FyY2hpdmUuaHBwCisvLworLy8gIChjKSBDb3B5cmlnaHQgUm9iZXJ0IFJhbWV5IDIwMDQKKy8vICBVc2UsIG1vZGlmaWNhdGlvbiwgYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGxpYnJhcnkgaG9tZSBwYWdlIGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL2xpYnMvc2VyaWFsaXphdGlvbgorCisvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLyAKKworLy8gVGhpcyBoZWFkZXIgaW1wbGVtZW50cyBzZXBhcmF0ZSBjb21waWxhdGlvbiBmZWF0dXJlcyBhcyBkZXNjcmliZWQgaW4KKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL21vcmUvc2VwYXJhdGVfY29tcGlsYXRpb24uaHRtbAorCisvLyAgZW5hYmxlIGF1dG9tYXRpYyBsaWJyYXJ5IHZhcmlhbnQgc2VsZWN0aW9uICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLyAKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwPgorCisjaWYgIWRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKSBcCismJiAhZGVmaW5lZChCT09TVF9BTExfTk9fTElCKSAmJiAhZGVmaW5lZChCT09TVF9TRVJJQUxJWkFUSU9OX05PX0xJQikKKworLy8gU2V0IHRoZSBuYW1lIG9mIG91ciBsaWJyYXJ5LCB0aGlzIHdpbGwgZ2V0IHVuZGVmJ2VkIGJ5IGF1dG9fbGluay5ocHAKKy8vIG9uY2UgaXQncyBkb25lIHdpdGggaXQ6CisvLworI2RlZmluZSBCT09TVF9MSUJfTkFNRSBib29zdF93c2VyaWFsaXphdGlvbgorLy8KKy8vIElmIHdlJ3JlIGltcG9ydGluZyBjb2RlIGZyb20gYSBkbGwsIHRoZW4gdGVsbCBhdXRvX2xpbmsuaHBwIGFib3V0IGl0OgorLy8KKyNpZiBkZWZpbmVkKEJPT1NUX0FMTF9EWU5fTElOSykgfHwgZGVmaW5lZChCT09TVF9TRVJJQUxJWkFUSU9OX0RZTl9MSU5LKQorIyAgZGVmaW5lIEJPT1NUX0RZTl9MSU5LCisjZW5kaWYKKy8vCisvLyBBbmQgaW5jbHVkZSB0aGUgaGVhZGVyIHRoYXQgZG9lcyB0aGUgd29yazoKKy8vCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnL2F1dG9fbGluay5ocHA+CisjZW5kaWYgIC8vIGF1dG8tbGlua2luZyBkaXNhYmxlZAorCisjZW5kaWYgLy8gQVJDSElWRV9ERVRBSUxfQVVUT19MSU5LX0FSQ0hJVkVfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfYXJjaGl2ZV9pbXBsLmhwcApAQCAtMCwwICsxLDQ4IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0JBU0lDX0FSQ0hJVkVfSU1QTF9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfQkFTSUNfQVJDSElWRV9JTVBMX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX2FyY2hpdmVfaW1wbC5ocHA6CisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworLy8gY2FuJ3QgdXNlIHRoaXMgLSBtdWNoIGFzIEknZCBsaWtlIHRvIGFzIGJvcmxhbmQgZG9lc24ndCBzdXBwb3J0IGl0CisvLyAjaW5jbHVkZSA8Ym9vc3Qvc2NvcGVkX3B0ci5ocHA+CisKKyNpbmNsdWRlIDxzZXQ+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBzZXJpYWxpemF0aW9uIHsKKyAgICBjbGFzcyBleHRlbmRlZF90eXBlX2luZm87Cit9IC8vIG5hbWVzcGFjZSBzZXJpYWxpemF0aW9uCisKK25hbWVzcGFjZSBhcmNoaXZlIHsKK25hbWVzcGFjZSBkZXRhaWwgeworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCitjbGFzcyBCT09TVF9BUkNISVZFX0RFQ0woQk9PU1RfUFBfRU1QVFkoKSkgYmFzaWNfYXJjaGl2ZV9pbXBsCit7Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKKyNlbmRpZiAvL0JPT1NUX0FSQ0hJVkVfREVUQUlMX0JBU0lDX0FSQ0hJVkVfSU1QTF9IUFAKKworCisKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19jb25maWcuaHBwCkBAIC0wLDAgKzEsNDUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfQkFTSUNfQ09ORklHX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9CQVNJQ19DT05GSUdfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLyAgYmFzaWNfY29uZmlnLmhwcCAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KKworLy8gIChjKSBDb3B5cmlnaHQgUm9iZXJ0IFJhbWV5IDIwMDQKKy8vICBVc2UsIG1vZGlmaWNhdGlvbiwgYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyAgaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGxpYnJhcnkgaG9tZSBwYWdlIGF0IGh0dHA6Ly93d3cuYm9vc3Qub3JnL2xpYnMvc2VyaWFsaXphdGlvbgorCisvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLyAKKworLy8gVGhpcyBoZWFkZXIgaW1wbGVtZW50cyBzZXBhcmF0ZSBjb21waWxhdGlvbiBmZWF0dXJlcyBhcyBkZXNjcmliZWQgaW4KKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL21vcmUvc2VwYXJhdGVfY29tcGlsYXRpb24uaHRtbAorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2lmZGVmIEJPT1NUX0hBU19ERUNMU1BFQyAvLyBkZWZpbmVkIGluIGNvbmZpZyBzeXN0ZW0KKy8vIHdlIG5lZWQgdG8gaW1wb3J0L2V4cG9ydCBvdXIgY29kZSBvbmx5IGlmIHRoZSB1c2VyIGhhcyBzcGVjaWZpY2FsbHkKKy8vIGFza2VkIGZvciBpdCBieSBkZWZpbmluZyBlaXRoZXIgQk9PU1RfQUxMX0RZTl9MSU5LIGlmIHRoZXkgd2FudCBhbGwgYm9vc3QKKy8vIGxpYnJhcmllcyB0byBiZSBkeW5hbWljYWxseSBsaW5rZWQsIG9yIEJPT1NUX0FSQ0hJVkVfRFlOX0xJTksKKy8vIGlmIHRoZXkgd2FudCBqdXN0IHRoaXMgb25lIHRvIGJlIGR5bmFtaWNhbGx5IGxpbmtlZDoKKyNpZiBkZWZpbmVkKEJPT1NUX0FMTF9EWU5fTElOSykgfHwgZGVmaW5lZChCT09TVF9BUkNISVZFX0RZTl9MSU5LKQorLy8gZXhwb3J0IGlmIHRoaXMgaXMgb3VyIG93biBzb3VyY2UsIG90aGVyd2lzZSBpbXBvcnQ6CisjaWZkZWYgQk9PU1RfQVJDSElWRV9TT1VSQ0UKKyMgZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTCBfX2RlY2xzcGVjKGRsbGV4cG9ydCkKKyNlbHNlCisjIGRlZmluZSBCT09TVF9BUkNISVZFX0RFQ0wgX19kZWNsc3BlYyhkbGxpbXBvcnQpCisjZW5kaWYgIC8vIEJPT1NUX0FSQ0hJVkVfU09VUkNFCisjZW5kaWYgIC8vIERZTl9MSU5LCisjZW5kaWYgIC8vIEJPT1NUX0hBU19ERUNMU1BFQworLy8KKy8vIGlmIEJPT1NUX0FSQ0hJVkVfREVDTCBpc24ndCBkZWZpbmVkIHlldCBkZWZpbmUgaXQgbm93OgorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFQ0wKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERUNMCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0JBU0lDX0NPTkZJR19IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSwxMDUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfQkFTSUNfSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0JBU0lDX0lBUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX2lhcmNoaXZlLmhwcDoKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisvLyBjYW4ndCB1c2UgdGhpcyAtIG11Y2ggYXMgSSdkIGxpa2UgdG8gYXMgYm9ybGFuZCBkb2Vzbid0IHN1cHBvcnQgaXQKKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvbm9uY29weWFibGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3Njb3BlZF9wdHIuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZ19lbnVtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2Jhc2ljX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2hlbHBlcl9jb2xsZWN0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBzZXJpYWxpemF0aW9uIHsKKyAgICBjbGFzcyBleHRlbmRlZF90eXBlX2luZm87Cit9IC8vIG5hbWVzcGFjZSBzZXJpYWxpemF0aW9uCisKK25hbWVzcGFjZSBhcmNoaXZlIHsKK25hbWVzcGFjZSBkZXRhaWwgeworCitjbGFzcyBiYXNpY19pYXJjaGl2ZV9pbXBsOworY2xhc3MgYmFzaWNfaXNlcmlhbGl6ZXI7CitjbGFzcyBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyOworCisvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCisvLyBjbGFzcyBiYXNpY19pYXJjaGl2ZSAtIHJlYWQgc2VyaWFsaXplZCBvYmplY3RzIGZyb20gYSBpbnB1dCBzdHJlYW0KK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX2lhcmNoaXZlIDoKKyAgICBwcml2YXRlIGJvb3N0Ojpub25jb3B5YWJsZSwKKyAgICBwdWJsaWMgYm9vc3Q6OmFyY2hpdmU6OmRldGFpbDo6aGVscGVyX2NvbGxlY3Rpb24KK3sKKyAgICBmcmllbmQgY2xhc3MgYmFzaWNfaWFyY2hpdmVfaW1wbDsKKyAgICAvLyBoaWRlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2xhc3MgdG8gbWluaW1pemUgaGVhZGVyIGNvbmNsdXNpb24KKyAgICBib29zdDo6c2NvcGVkX3B0cjxiYXNpY19pYXJjaGl2ZV9pbXBsPiBwaW1wbDsKKworICAgIHZpcnR1YWwgdm9pZCB2bG9hZCh2ZXJzaW9uX3R5cGUgJnQpID0gIDA7CisgICAgdmlydHVhbCB2b2lkIHZsb2FkKG9iamVjdF9pZF90eXBlICZ0KSA9ICAwOworICAgIHZpcnR1YWwgdm9pZCB2bG9hZChjbGFzc19pZF90eXBlICZ0KSA9ICAwOworICAgIHZpcnR1YWwgdm9pZCB2bG9hZChjbGFzc19pZF9vcHRpb25hbF90eXBlICZ0KSA9IDA7CisgICAgdmlydHVhbCB2b2lkIHZsb2FkKGNsYXNzX25hbWVfdHlwZSAmdCkgPSAwOworICAgIHZpcnR1YWwgdm9pZCB2bG9hZCh0cmFja2luZ190eXBlICZ0KSA9IDA7Citwcm90ZWN0ZWQ6CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIGJhc2ljX2lhcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyk7CisgICAgYm9vc3Q6OmFyY2hpdmU6OmRldGFpbDo6aGVscGVyX2NvbGxlY3Rpb24gJgorICAgIGdldF9oZWxwZXJfY29sbGVjdGlvbigpeworICAgICAgICByZXR1cm4gKnRoaXM7CisgICAgfQorcHVibGljOgorICAgIC8vIHNvbWUgbXN2YyB2ZXJzaW9ucyByZXF1aXJlIHRoYXQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBiZSBwdWJsaWMKKyAgICAvLyBvdGhlcndpc2UgaXQgc2hvdWxkIHJlYWxseSBwcm90ZWN0ZWQuCisgICAgdmlydHVhbCBCT09TVF9BUkNISVZFX0RFQ0wgfmJhc2ljX2lhcmNoaXZlKCk7CisgICAgLy8gbm90ZTogTk9UIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkuCisgICAgQk9PU1RfQVJDSElWRV9ERUNMIHZvaWQgbmV4dF9vYmplY3RfcG9pbnRlcih2b2lkICp0KTsKKyAgICBCT09TVF9BUkNISVZFX0RFQ0wgdm9pZCByZWdpc3Rlcl9iYXNpY19zZXJpYWxpemVyKAorICAgICAgICBjb25zdCBiYXNpY19pc2VyaWFsaXplciAmIGJpcworICAgICk7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIHZvaWQgbG9hZF9vYmplY3QoCisgICAgICAgIHZvaWQgKnQsIAorICAgICAgICBjb25zdCBiYXNpY19pc2VyaWFsaXplciAmIGJpcworICAgICk7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIGNvbnN0IGJhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIgKiAKKyAgICBsb2FkX3BvaW50ZXIoCisgICAgICAgIHZvaWQgKiAmIHQsIAorICAgICAgICBjb25zdCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICogYnBpc19wdHIsCisgICAgICAgIGNvbnN0IGJhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIgKiAoKmZpbmRlcikoCisgICAgICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgZXRpCisgICAgICAgICkKKyAgICApOworICAgIC8vIHJlYWwgcHVibGljIEFQSSBzdGFydHMgaGVyZQorICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIAorICAgIHNldF9saWJyYXJ5X3ZlcnNpb24obGlicmFyeV92ZXJzaW9uX3R5cGUgYXJjaGl2ZV9saWJyYXJ5X3ZlcnNpb24pOworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCBsaWJyYXJ5X3ZlcnNpb25fdHlwZSAKKyAgICBnZXRfbGlicmFyeV92ZXJzaW9uKCkgY29uc3Q7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIHVuc2lnbmVkIGludAorICAgIGdldF9mbGFncygpIGNvbnN0OworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIAorICAgIHJlc2V0X29iamVjdF9hZGRyZXNzKGNvbnN0IHZvaWQgKiBuZXdfYWRkcmVzcywgY29uc3Qgdm9pZCAqIG9sZF9hZGRyZXNzKTsKKyAgICBCT09TVF9BUkNISVZFX0RFQ0wgdm9pZCAKKyAgICBkZWxldGVfY3JlYXRlZF9wb2ludGVycygpOworfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy9CT09TVF9BUkNISVZFX0RFVEFJTF9CQVNJQ19JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pc2VyaWFsaXplci5ocHAKQEAgLTAsMCArMSw5MSBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9CQVNJQ19JU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfQkFTSUNfSVNFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfaXNlcmlhbGl6ZXIuaHBwOiBleHRlbnN0aW9uIG9mIHR5cGVfaW5mbyByZXF1aXJlZCBmb3Igc2VyaWFsaXphdGlvbi4KKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8Y3N0ZGxpYj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2Jhc2ljX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3NlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfcHJlZml4LmhwcD4gLy8gbXVzdCBiZSB0aGUgbGFzdCBoZWFkZXIKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2Ugc2VyaWFsaXphdGlvbiB7CisgICAgY2xhc3MgZXh0ZW5kZWRfdHlwZV9pbmZvOworfSAvLyBuYW1lc3BhY2Ugc2VyaWFsaXphdGlvbgorCisvLyBmb3J3YXJkIGRlY2xhcmF0aW9ucworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGJhc2ljX2lhcmNoaXZlOworY2xhc3MgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcjsKKworY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmFzaWNfaXNlcmlhbGl6ZXIgOiAKKyAgICBwdWJsaWMgYmFzaWNfc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICptX2JwaXM7Citwcm90ZWN0ZWQ6CisgICAgZXhwbGljaXQgQk9PU1RfQVJDSElWRV9ERUNMIGJhc2ljX2lzZXJpYWxpemVyKAorICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgdHlwZQorICAgICk7CisgICAgdmlydHVhbCBCT09TVF9BUkNISVZFX0RFQ0wgfmJhc2ljX2lzZXJpYWxpemVyKCk7CitwdWJsaWM6CisgICAgYm9vbCBzZXJpYWxpemVkX2FzX3BvaW50ZXIoKSBjb25zdCB7CisgICAgICAgIHJldHVybiBtX2JwaXMgIT0gTlVMTDsKKyAgICB9CisgICAgdm9pZCBzZXRfYnBpcyhiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICpicGlzKXsKKyAgICAgICAgbV9icGlzID0gYnBpczsKKyAgICB9CisgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplciAqIGdldF9icGlzX3B0cigpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fYnBpczsKKyAgICB9CisgICAgdmlydHVhbCB2b2lkIGxvYWRfb2JqZWN0X2RhdGEoCisgICAgICAgIGJhc2ljX2lhcmNoaXZlICYgYXIsIAorICAgICAgICB2b2lkICp4LAorICAgICAgICBjb25zdCB1bnNpZ25lZCBpbnQgZmlsZV92ZXJzaW9uCisgICAgKSBjb25zdCA9IDA7CisgICAgLy8gcmV0dXJucyB0cnVlIGlmIGNsYXNzX2luZm8gc2hvdWxkIGJlIHNhdmVkCisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCA9IDAgOworICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBvYmplY3RzIHNob3VsZCBiZSB0cmFja2VkCisgICAgdmlydHVhbCBib29sIHRyYWNraW5nKGNvbnN0IHVuc2lnbmVkIGludCkgY29uc3QgPSAwIDsKKyAgICAvLyByZXR1cm5zIGNsYXNzIHZlcnNpb24KKyAgICB2aXJ0dWFsIHZlcnNpb25fdHlwZSB2ZXJzaW9uKCkgY29uc3QgPSAwIDsKKyAgICAvLyByZXR1cm5zIHRydWUgaWYgdGhpcyBjbGFzcyBpcyBwb2x5bW9ycGhpYworICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0ID0gMDsKKyAgICB2aXJ0dWFsIHZvaWQgZGVzdHJveSgvKmNvbnN0Ki8gdm9pZCAqYWRkcmVzcykgY29uc3QgPSAwIDsKK307CisKK30gLy8gbmFtZXNwYWUgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQkFTSUNfSVNFUklBTElaRVJfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfb2FyY2hpdmUuaHBwCkBAIC0wLDAgKzEsOTQgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9CQVNJQ19PQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19PQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiYXNpY19vYXJjaGl2ZS5ocHA6CisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGNzdGRkZWY+IC8vIE5VTEwKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L25vbmNvcHlhYmxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zY29wZWRfcHRyLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZ19lbnVtLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9oZWxwZXJfY29sbGVjdGlvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2Ugc2VyaWFsaXphdGlvbiB7CisgICAgY2xhc3MgZXh0ZW5kZWRfdHlwZV9pbmZvOworfSAvLyBuYW1lc3BhY2Ugc2VyaWFsaXphdGlvbgorCituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfb2FyY2hpdmVfaW1wbDsKK2NsYXNzIGJhc2ljX29zZXJpYWxpemVyOworY2xhc3MgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplcjsKKworLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworLy8gY2xhc3MgYmFzaWNfb2FyY2hpdmUgLSB3cml0ZSBzZXJpYWxpemVkIG9iamVjdHMgdG8gYW4gb3V0cHV0IHN0cmVhbQorY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmFzaWNfb2FyY2hpdmUgOgorICAgIHByaXZhdGUgYm9vc3Q6Om5vbmNvcHlhYmxlLAorICAgIHB1YmxpYyBib29zdDo6YXJjaGl2ZTo6ZGV0YWlsOjpoZWxwZXJfY29sbGVjdGlvbgoreworICAgIGZyaWVuZCBjbGFzcyBiYXNpY19vYXJjaGl2ZV9pbXBsOworICAgIC8vIGhpZGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjbGFzcyB0byBtaW5pbWl6ZSBoZWFkZXIgY29uY2x1c2lvbgorICAgIGJvb3N0OjpzY29wZWRfcHRyPGJhc2ljX29hcmNoaXZlX2ltcGw+IHBpbXBsOworCisgICAgLy8gb3ZlcmxvYWQgdGhlc2UgdG8gYnJhY2tldCBvYmplY3QgYXR0cmlidXRlcy4gVXNlZCB0byBpbXBsZW1lbnQKKyAgICAvLyB4bWwgYXJjaGl2ZXMKKyAgICB2aXJ0dWFsIHZvaWQgdnNhdmUoY29uc3QgdmVyc2lvbl90eXBlIHQpID0gIDA7CisgICAgdmlydHVhbCB2b2lkIHZzYXZlKGNvbnN0IG9iamVjdF9pZF90eXBlIHQpID0gIDA7CisgICAgdmlydHVhbCB2b2lkIHZzYXZlKGNvbnN0IG9iamVjdF9yZWZlcmVuY2VfdHlwZSB0KSA9ICAwOworICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBjbGFzc19pZF90eXBlIHQpID0gIDA7CisgICAgdmlydHVhbCB2b2lkIHZzYXZlKGNvbnN0IGNsYXNzX2lkX29wdGlvbmFsX3R5cGUgdCkgPSAwOworICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBjbGFzc19pZF9yZWZlcmVuY2VfdHlwZSB0KSA9ICAwOworICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBjbGFzc19uYW1lX3R5cGUgJiB0KSA9IDA7CisgICAgdmlydHVhbCB2b2lkIHZzYXZlKGNvbnN0IHRyYWNraW5nX3R5cGUgdCkgPSAwOworcHJvdGVjdGVkOgorICAgIEJPT1NUX0FSQ0hJVkVfREVDTCBiYXNpY19vYXJjaGl2ZSh1bnNpZ25lZCBpbnQgZmxhZ3MgPSAwKTsKKyAgICBCT09TVF9BUkNISVZFX0RFQ0wgYm9vc3Q6OmFyY2hpdmU6OmRldGFpbDo6aGVscGVyX2NvbGxlY3Rpb24gJgorICAgIGdldF9oZWxwZXJfY29sbGVjdGlvbigpOworICAgIHZpcnR1YWwgQk9PU1RfQVJDSElWRV9ERUNMIH5iYXNpY19vYXJjaGl2ZSgpOworcHVibGljOgorICAgIC8vIG5vdGU6IE5PVCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlCisgICAgQk9PU1RfQVJDSElWRV9ERUNMIHZvaWQgcmVnaXN0ZXJfYmFzaWNfc2VyaWFsaXplcigKKyAgICAgICAgY29uc3QgYmFzaWNfb3NlcmlhbGl6ZXIgJiBib3MKKyAgICApOworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIHNhdmVfb2JqZWN0KAorICAgICAgICBjb25zdCB2b2lkICp4LCAKKyAgICAgICAgY29uc3QgYmFzaWNfb3NlcmlhbGl6ZXIgJiBib3MKKyAgICApOworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIHNhdmVfcG9pbnRlcigKKyAgICAgICAgY29uc3Qgdm9pZCAqIHQsIAorICAgICAgICBjb25zdCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICogYnBvc19wdHIKKyAgICApOworICAgIHZvaWQgc2F2ZV9udWxsX3BvaW50ZXIoKXsKKyAgICAgICAgdnNhdmUoTlVMTF9QT0lOVEVSX1RBRyk7CisgICAgfQorICAgIC8vIHJlYWwgcHVibGljIGludGVyZmFjZSBzdGFydHMgaGVyZQorICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIGVuZF9wcmVhbWJsZSgpOyAvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCBsaWJyYXJ5X3ZlcnNpb25fdHlwZSBnZXRfbGlicmFyeV92ZXJzaW9uKCkgY29uc3Q7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIHVuc2lnbmVkIGludCBnZXRfZmxhZ3MoKSBjb25zdDsKK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vQk9PU1RfQVJDSElWRV9CQVNJQ19PQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19vc2VyaWFsaXplci5ocHAKQEAgLTAsMCArMSw4OSBAQAorI2lmbmRlZiBCT09TVF9TRVJJQUxJWkFUSU9OX0JBU0lDX09TRVJJQUxJWkVSX0hQUAorI2RlZmluZSBCT09TVF9TRVJJQUxJWkFUSU9OX0JBU0lDX09TRVJJQUxJWkVSX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX29zZXJpYWxpemVyLmhwcDogZXh0ZW5zdGlvbiBvZiB0eXBlX2luZm8gcmVxdWlyZWQgZm9yIHNlcmlhbGl6YXRpb24uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGNzdGRkZWY+IC8vIE5VTEwKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L25vbmNvcHlhYmxlLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvYmFzaWNfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYXV0b19saW5rX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3NlcmlhbGl6ZXIuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworLy8gZm9yd2FyZCBkZWNsYXJhdGlvbnMKK25hbWVzcGFjZSBhcmNoaXZlIHsKK25hbWVzcGFjZSBkZXRhaWwgeworCitjbGFzcyBiYXNpY19vYXJjaGl2ZTsKK2NsYXNzIGJhc2ljX3BvaW50ZXJfb3NlcmlhbGl6ZXI7CisKK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX29zZXJpYWxpemVyIDoKKyAgICBwdWJsaWMgYmFzaWNfc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICptX2Jwb3M7Citwcm90ZWN0ZWQ6CisgICAgZXhwbGljaXQgQk9PU1RfQVJDSElWRV9ERUNMIGJhc2ljX29zZXJpYWxpemVyKAorICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgdHlwZV8KKyAgICApOworICAgIHZpcnR1YWwgQk9PU1RfQVJDSElWRV9ERUNMIH5iYXNpY19vc2VyaWFsaXplcigpOworcHVibGljOgorICAgIGJvb2wgc2VyaWFsaXplZF9hc19wb2ludGVyKCkgY29uc3QgeworICAgICAgICByZXR1cm4gbV9icG9zICE9IE5VTEw7CisgICAgfQorICAgIHZvaWQgc2V0X2Jwb3MoYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplciAqYnBvcyl7CisgICAgICAgIG1fYnBvcyA9IGJwb3M7CisgICAgfQorICAgIGNvbnN0IGJhc2ljX3BvaW50ZXJfb3NlcmlhbGl6ZXIgKiBnZXRfYnBvcygpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fYnBvczsKKyAgICB9CisgICAgdmlydHVhbCB2b2lkIHNhdmVfb2JqZWN0X2RhdGEoCisgICAgICAgIGJhc2ljX29hcmNoaXZlICYgYXIsIGNvbnN0IHZvaWQgKiB4CisgICAgKSBjb25zdCA9IDA7CisgICAgLy8gcmV0dXJucyB0cnVlIGlmIGNsYXNzX2luZm8gc2hvdWxkIGJlIHNhdmVkCisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCA9IDA7CisgICAgLy8gcmV0dXJucyB0cnVlIGlmIG9iamVjdHMgc2hvdWxkIGJlIHRyYWNrZWQKKyAgICB2aXJ0dWFsIGJvb2wgdHJhY2tpbmcoY29uc3QgdW5zaWduZWQgaW50IGZsYWdzKSBjb25zdCA9IDA7CisgICAgLy8gcmV0dXJucyBjbGFzcyB2ZXJzaW9uCisgICAgdmlydHVhbCB2ZXJzaW9uX3R5cGUgdmVyc2lvbigpIGNvbnN0ID0gMDsKKyAgICAvLyByZXR1cm5zIHRydWUgaWYgdGhpcyBjbGFzcyBpcyBwb2x5bW9ycGhpYworICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0ID0gMDsKK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2Ugc2VyaWFsaXphdGlvbgorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX1NFUklBTElaQVRJT05fQkFTSUNfT1NFUklBTElaRVJfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplci5ocHAKQEAgLTAsMCArMSw3MCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0JBU0lDX1BPSU5URVJfSVNFUklBTElaRVJfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfQkFTSUNfUE9JTlRFUl9JU0VSSUFMSVpFUl9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyLmhwcDogZXh0ZW5zdGlvbiBvZiB0eXBlX2luZm8gcmVxdWlyZWQgZm9yIAorLy8gc2VyaWFsaXphdGlvbi4KKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvbm9uY29weWFibGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19zZXJpYWxpemVyLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCisjaWZkZWYgQk9PU1RfTVNWQworIyAgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgIHByYWdtYSB3YXJuaW5nKGRpc2FibGUgOiA0NTExIDQ1MTIpCisjZW5kaWYKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBzZXJpYWxpemF0aW9uIHsKKyAgICBjbGFzcyBleHRlbmRlZF90eXBlX2luZm87Cit9IC8vIG5hbWVzcGFjZSBzZXJpYWxpemF0aW9uCisKKy8vIGZvcndhcmQgZGVjbGFyYXRpb25zCituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfaWFyY2hpdmU7CitjbGFzcyBiYXNpY19pc2VyaWFsaXplcjsKKworY2xhc3MgQk9PU1RfU1lNQk9MX1ZJU0lCTEUgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcgorICAgIDogcHVibGljIGJhc2ljX3NlcmlhbGl6ZXIgeworcHJvdGVjdGVkOgorICAgIGV4cGxpY2l0IEJPT1NUX0FSQ0hJVkVfREVDTCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyKAorICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgdHlwZV8KKyAgICApOworICAgIHZpcnR1YWwgQk9PU1RfQVJDSElWRV9ERUNMIH5iYXNpY19wb2ludGVyX2lzZXJpYWxpemVyKCk7CitwdWJsaWM6CisgICAgdmlydHVhbCB2b2lkICogaGVhcF9hbGxvY2F0aW9uKCkgY29uc3QgPSAwOworICAgIHZpcnR1YWwgY29uc3QgYmFzaWNfaXNlcmlhbGl6ZXIgJiBnZXRfYmFzaWNfc2VyaWFsaXplcigpIGNvbnN0ID0gMDsKKyAgICB2aXJ0dWFsIHZvaWQgbG9hZF9vYmplY3RfcHRyKAorICAgICAgICBiYXNpY19pYXJjaGl2ZSAmIGFyLCAKKyAgICAgICAgdm9pZCAqIHgsCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0ID0gMDsKK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfUE9JTlRFUl9JU0VSSUFMSVpFUl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19wb2ludGVyX29zZXJpYWxpemVyLmhwcApAQCAtMCwwICsxLDY4IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfQkFTSUNfUE9JTlRFUl9PU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9CQVNJQ19QT0lOVEVSX09TRVJJQUxJWkVSX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX3BvaW50ZXJfb3NlcmlhbGl6ZXIuaHBwOiBleHRlbnN0aW9uIG9mIHR5cGVfaW5mbyByZXF1aXJlZCBmb3IgCisvLyBzZXJpYWxpemF0aW9uLgorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKyNpbmNsdWRlIDxib29zdC9ub25jb3B5YWJsZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYXV0b19saW5rX2FyY2hpdmUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3NlcmlhbGl6ZXIuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGJhc2ljX29hcmNoaXZlOworY2xhc3MgYmFzaWNfb3NlcmlhbGl6ZXI7CisKK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGJhc2ljX3BvaW50ZXJfb3NlcmlhbGl6ZXIgOiAKKyAgICBwdWJsaWMgYmFzaWNfc2VyaWFsaXplcgoreworcHJvdGVjdGVkOgorICAgIGV4cGxpY2l0IEJPT1NUX0FSQ0hJVkVfREVDTCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyKAorICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgdHlwZV8KKyAgICApOworcHVibGljOgorICAgIHZpcnR1YWwgQk9PU1RfQVJDSElWRV9ERUNMIH5iYXNpY19wb2ludGVyX29zZXJpYWxpemVyKCk7CisgICAgdmlydHVhbCBjb25zdCBiYXNpY19vc2VyaWFsaXplciAmIGdldF9iYXNpY19zZXJpYWxpemVyKCkgY29uc3QgPSAwOworICAgIHZpcnR1YWwgdm9pZCBzYXZlX29iamVjdF9wdHIoCisgICAgICAgIGJhc2ljX29hcmNoaXZlICYgYXIsCisgICAgICAgIGNvbnN0IHZvaWQgKiB4CisgICAgKSBjb25zdCA9IDA7Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIGFyY2hpdmUKK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjcHJhZ21hIHdhcm5pbmcocG9wKQorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hYmlfc3VmZml4LmhwcD4gLy8gcG9wcyBhYmlfc3VmZml4LmhwcCBwcmFnbWFzCisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0JBU0lDX1BPSU5URVJfT1NFUklBTElaRVJfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfc2VyaWFsaXplci5ocHAKQEAgLTAsMCArMSw3NyBAQAorI2lmbmRlZiAgQk9PU1RfQVJDSElWRV9CQVNJQ19TRVJJQUxJWkVSX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0JBU0lDX1NFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gYmFzaWNfc2VyaWFsaXplci5ocHA6IGV4dGVuc3Rpb24gb2YgdHlwZV9pbmZvIHJlcXVpcmVkIGZvciBzZXJpYWxpemF0aW9uLgorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxib29zdC9hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGNzdGRkZWY+IC8vIE5VTEwKKworI2luY2x1ZGUgPGJvb3N0L25vbmNvcHlhYmxlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vZXh0ZW5kZWRfdHlwZV9pbmZvLmhwcD4KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfc2VyaWFsaXplciA6IAorICAgIHByaXZhdGUgYm9vc3Q6Om5vbmNvcHlhYmxlCit7CisgICAgY29uc3QgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmV4dGVuZGVkX3R5cGVfaW5mbyAqIG1fZXRpOworcHJvdGVjdGVkOgorICAgIGV4cGxpY2l0IGJhc2ljX3NlcmlhbGl6ZXIoCisgICAgICAgIGNvbnN0IGJvb3N0OjpzZXJpYWxpemF0aW9uOjpleHRlbmRlZF90eXBlX2luZm8gJiBldGkKKyAgICApIDogCisgICAgICAgIG1fZXRpKCYgZXRpKQorICAgIHt9CitwdWJsaWM6CisgICAgaW5saW5lIGJvb2wgCisgICAgb3BlcmF0b3I8KGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgJiByaHMpIGNvbnN0IHsKKyAgICAgICAgLy8gY2FuJ3QgY29tcGFyZSBhZGRyZXNzIHNpbmNlIHRoZXJlIGNhbiBiZSBtdWx0aXBsZSBldGkgcmVjb3JkcworICAgICAgICAvLyBmb3IgdGhlIHNhbWUgdHlwZSBpbiBkaWZmZXJlbnQgZXhlY3V0aW9uIG1vZHVsZXMgKHRoYXQgaXMsIERMTFMpCisgICAgICAgIC8vIGxlYXZlIHRoaXMgaGVyZSBhcyBhIHJlbWluZGVyIG5vdCB0byBkbyB0aGlzIQorICAgICAgICAvLyByZXR1cm4gJiBsaHMuZ2V0X2V0aSgpIDwgJiByaHMuZ2V0X2V0aSgpOworICAgICAgICByZXR1cm4gZ2V0X2V0aSgpIDwgcmhzLmdldF9ldGkoKTsKKyAgICB9CisgICAgY29uc3QgY2hhciAqIGdldF9kZWJ1Z19pbmZvKCkgY29uc3QgeworICAgICAgICByZXR1cm4gbV9ldGktPmdldF9kZWJ1Z19pbmZvKCk7CisgICAgfQorICAgIGNvbnN0IGJvb3N0OjpzZXJpYWxpemF0aW9uOjpleHRlbmRlZF90eXBlX2luZm8gJiBnZXRfZXRpKCkgY29uc3QgeworICAgICAgICByZXR1cm4gKiBtX2V0aTsKKyAgICB9Cit9OworCitjbGFzcyBiYXNpY19zZXJpYWxpemVyX2FyZyA6IHB1YmxpYyBiYXNpY19zZXJpYWxpemVyIHsKK3B1YmxpYzoKKyAgICBiYXNpY19zZXJpYWxpemVyX2FyZyhjb25zdCBzZXJpYWxpemF0aW9uOjpleHRlbmRlZF90eXBlX2luZm8gJiBldGkpIDoKKyAgICAgICAgYmFzaWNfc2VyaWFsaXplcihldGkpCisgICAge30KK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2lmZGVmIEJPT1NUX01TVkMKKyNwcmFnbWEgd2FybmluZyhwb3ApCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfQkFTSUNfU0VSSUFMSVpFUl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19zZXJpYWxpemVyX21hcC5ocHAKQEAgLTAsMCArMSw2OSBAQAorI2lmbmRlZiAgQk9PU1RfU0VSSUFMSVpFUl9NQVBfSFBQCisjZGVmaW5lIEJPT1NUX1NFUklBTElaRVJfTUFQX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGJhc2ljX3NlcmlhbGl6ZXJfbWFwLmhwcDogZXh0ZW5zdGlvbiBvZiB0eXBlX2luZm8gcmVxdWlyZWQgZm9yIHNlcmlhbGl6YXRpb24uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPHNldD4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvbm9uY29weWFibGUuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9wcmVmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCituYW1lc3BhY2UgYm9vc3QgeyAKK25hbWVzcGFjZSBzZXJpYWxpemF0aW9uIHsKKyAgICBjbGFzcyBleHRlbmRlZF90eXBlX2luZm87Cit9CisKK25hbWVzcGFjZSBhcmNoaXZlIHsKK25hbWVzcGFjZSBkZXRhaWwgeworCitjbGFzcyBiYXNpY19zZXJpYWxpemVyOworCitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRQorYmFzaWNfc2VyaWFsaXplcl9tYXAgOiBwdWJsaWMKKyAgICBib29zdDo6bm9uY29weWFibGUKK3sKKyAgICBzdHJ1Y3QgdHlwZV9pbmZvX3BvaW50ZXJfY29tcGFyZQorICAgIHsKKyAgICAgICAgYm9vbCBvcGVyYXRvcigpKAorICAgICAgICAgICAgY29uc3QgYmFzaWNfc2VyaWFsaXplciAqIGxocywgY29uc3QgYmFzaWNfc2VyaWFsaXplciAqIHJocworICAgICAgICApIGNvbnN0IDsKKyAgICB9OworICAgIHR5cGVkZWYgc3RkOjpzZXQ8CisgICAgICAgIGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgKiwgCisgICAgICAgIHR5cGVfaW5mb19wb2ludGVyX2NvbXBhcmUKKyAgICA+IG1hcF90eXBlOworICAgIG1hcF90eXBlIG1fbWFwOworcHVibGljOgorICAgIEJPT1NUX0FSQ0hJVkVfREVDTCBib29sIGluc2VydChjb25zdCBiYXNpY19zZXJpYWxpemVyICogYnMpOworICAgIEJPT1NUX0FSQ0hJVkVfREVDTCB2b2lkIGVyYXNlKGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgKiBicyk7CisgICAgQk9PU1RfQVJDSElWRV9ERUNMIGNvbnN0IGJhc2ljX3NlcmlhbGl6ZXIgKiBmaW5kKAorICAgICAgICBjb25zdCBib29zdDo6c2VyaWFsaXphdGlvbjo6ZXh0ZW5kZWRfdHlwZV9pbmZvICYgdHlwZV8KKyAgICApIGNvbnN0OworcHJpdmF0ZToKKyAgICAvLyBjdyA4LjMgcmVxdWlyZXMgdGhpcworICAgIGJhc2ljX3NlcmlhbGl6ZXJfbWFwJiBvcGVyYXRvcj0oYmFzaWNfc2VyaWFsaXplcl9tYXAgY29uc3QmKTsKK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBtdXN0IGJlIHRoZSBsYXN0IGhlYWRlcgorCisjZW5kaWYgLy8gQk9PU1RfU0VSSUFMSVpFUl9NQVBfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvY2hlY2suaHBwCkBAIC0wLDAgKzEsMTY5IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0NIRUNLX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9DSEVDS19IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI3ByYWdtYSBpbmxpbmVfZGVwdGgoNTExKQorI3ByYWdtYSBpbmxpbmVfcmVjdXJzaW9uKG9uKQorI2VuZGlmCisKKyNpZiBkZWZpbmVkKF9fTVdFUktTX18pCisjcHJhZ21hIGlubGluZV9kZXB0aCg1MTEpCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGNoZWNrLmhwcDogaW50ZXJmYWNlIGZvciBzZXJpYWxpemF0aW9uIHN5c3RlbS4KKworLy8gKEMpIENvcHlyaWdodCAyMDA5IFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2lzX2NvbnN0LmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L21wbC9ldmFsX2lmLmhwcD4KKyNpbmNsdWRlIDxib29zdC9tcGwvb3IuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9lcXVhbF90by5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2ludC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL25vdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2dyZWF0ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zdGF0aWNfd2FybmluZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi92ZXJzaW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL2xldmVsLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3RyYWNraW5nLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3dyYXBwZXIuaHBwPgorCituYW1lc3BhY2UgYm9vc3QgeworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKKy8vIGNoZWNrcyBmb3Igb2JqZWN0cworCit0ZW1wbGF0ZTxjbGFzcyBUPgoraW5saW5lIHZvaWQgY2hlY2tfb2JqZWN0X2xldmVsKCl7CisgICAgdHlwZWRlZiAKKyAgICAgICAgdHlwZW5hbWUgbXBsOjpncmVhdGVyX2VxdWFsPAorICAgICAgICAgICAgc2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPiwKKyAgICAgICAgICAgIG1wbDo6aW50XzxzZXJpYWxpemF0aW9uOjpwcmltaXRpdmVfdHlwZT4KKyAgICAgICAgPjo6dHlwZSB0eXBleDsKKworICAgIC8vIHRyYXAgYXR0ZW1wdHMgdG8gc2VyaWFsaXplIG9iamVjdHMgbWFya2VkCisgICAgLy8gbm90X3NlcmlhbGl6YWJsZQorICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQodHlwZXg6OnZhbHVlKTsKK30KKwordGVtcGxhdGU8Y2xhc3MgVD4KK2lubGluZSB2b2lkIGNoZWNrX29iamVjdF92ZXJzaW9uaW5nKCl7CisgICAgdHlwZWRlZiAKKyAgICAgICAgdHlwZW5hbWUgbXBsOjpvcl88CisgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmdyZWF0ZXI8CisgICAgICAgICAgICAgICAgc2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPiwKKyAgICAgICAgICAgICAgICBtcGw6OmludF88c2VyaWFsaXphdGlvbjo6b2JqZWN0X3NlcmlhbGl6YWJsZT4KKyAgICAgICAgICAgID4sCisgICAgICAgICAgICB0eXBlbmFtZSBtcGw6OmVxdWFsX3RvPAorICAgICAgICAgICAgICAgIHNlcmlhbGl6YXRpb246OnZlcnNpb248IFQgPiwKKyAgICAgICAgICAgICAgICBtcGw6OmludF88MD4KKyAgICAgICAgICAgID4KKyAgICAgICAgPiB0eXBleDsKKyAgICAvLyB0cmFwIGF0dGVtcHRzIHRvIHNlcmlhbGl6ZSB3aXRoIG9iamVjdHMgdGhhdCBkb24ndAorICAgIC8vIHNhdmUgY2xhc3MgaW5mb3JtYXRpb24gaW4gdGhlIGFyY2hpdmUgd2l0aCB2ZXJzaW9uaW5nLgorICAgIEJPT1NUX1NUQVRJQ19BU1NFUlQodHlwZXg6OnZhbHVlKTsKK30KKwordGVtcGxhdGU8Y2xhc3MgVD4KK2lubGluZSB2b2lkIGNoZWNrX29iamVjdF90cmFja2luZygpeworICAgIC8vIHByZXN1bWUgaXQgaGFzIGFscmVhZHkgYmVlbiBkZXRlcm1pbmVkIHRoYXQKKyAgICAvLyBUIGlzIG5vdCBhIGNvbnN0CisgICAgQk9PU1RfU1RBVElDX0FTU0VSVCghIGJvb3N0Ojppc19jb25zdDwgVCA+Ojp2YWx1ZSk7CisgICAgdHlwZWRlZiB0eXBlbmFtZSBtcGw6OmVxdWFsX3RvPAorICAgICAgICBzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+LAorICAgICAgICBtcGw6OmludF88c2VyaWFsaXphdGlvbjo6dHJhY2tfbmV2ZXI+CisgICAgPjo6dHlwZSB0eXBleDsKKyAgICAvLyBzYXZpbmcgYW4gbm9uLWNvbnN0IG9iamVjdCBvZiBhIHR5cGUgbm90IG1hcmtlZCAidHJhY2tfbmV2ZXIpCisKKyAgICAvLyBtYXkgYmUgYW4gaW5kaWNhdG9yIG9mIGFuIGVycm9yIHVzYWdlIG9mIHRoZQorICAgIC8vIHNlcmlhbGl6YXRpb24gbGlicmFyeSBhbmQgc2hvdWxkIGJlIGRvdWJsZSBjaGVja2VkLiAgCisgICAgLy8gU2VlIGRvY3VtZW50YXRpb24gb24gb2JqZWN0IHRyYWNraW5nLiAgQWxzbywgc2VlIHRoZSAKKyAgICAvLyAicmF0aW9uYWxlIiBzZWN0aW9uIG9mIHRoZSBkb2N1bWVuYXRpb24KKyAgICAvLyBmb3IgbW90aXZhdGlvbiBmb3IgdGhpcyBjaGVja2luZy4KKworICAgIEJPT1NUX1NUQVRJQ19XQVJOSU5HKHR5cGV4Ojp2YWx1ZSk7Cit9CisKKy8vIGNoZWNrcyBmb3IgcG9pbnRlcnMKKwordGVtcGxhdGU8Y2xhc3MgVD4KK2lubGluZSB2b2lkIGNoZWNrX3BvaW50ZXJfbGV2ZWwoKXsKKyAgICAvLyB3ZSBzaG91bGQgb25seSBpbnZva2UgdGhpcyBvbmNlIHdlIEtOT1cgdGhhdCBUCisgICAgLy8gaGFzIGJlZW4gdXNlZCBhcyBhIHBvaW50ZXIhIQorICAgIHR5cGVkZWYgCisgICAgICAgIHR5cGVuYW1lIG1wbDo6b3JfPAorICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjpncmVhdGVyPAorICAgICAgICAgICAgICAgIHNlcmlhbGl6YXRpb246OmltcGxlbWVudGF0aW9uX2xldmVsPCBUID4sCisgICAgICAgICAgICAgICAgbXBsOjppbnRfPHNlcmlhbGl6YXRpb246Om9iamVjdF9zZXJpYWxpemFibGU+CisgICAgICAgICAgICA+LAorICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjpub3RfPAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIG1wbDo6ZXF1YWxfdG88CisgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6YXRpb246OnRyYWNraW5nX2xldmVsPCBUID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aW50XzxzZXJpYWxpemF0aW9uOjp0cmFja19zZWxlY3RpdmVseT4KKyAgICAgICAgICAgICAgICA+CisgICAgICAgICAgICA+CisgICAgICAgID4gdHlwZXg7CisgICAgLy8gQWRkcmVzcyB0aGUgZm9sbG93aW5nIHdoZW4gc2VyaWFsaXppbmcgdG8gYSBwb2ludGVyOgorCisgICAgLy8gYSkgVGhpcyB0eXBlIGRvZXNuJ3Qgc2F2ZSBjbGFzcyBpbmZvcm1hdGlvbiBpbiB0aGUKKyAgICAvLyBhcmNoaXZlLiBUaGF0IGlzLCB0aGUgc2VyaWFsaXphdGlvbiB0cmFpdCBpbXBsZW1lbnRhdGlvbgorICAgIC8vIGxldmVsIDw9IG9iamVjdF9zZXJpYWxpemFibGUuCisgICAgLy8gYikgVHJhY2tpbmcgZm9yIHRoaXMgdHlwZSBpcyBzZXQgdG8gInRyYWNrIHNlbGVjdGl2ZWx5IgorCisgICAgLy8gaW4gdGhpcyBjYXNlLCBpbmRpY2F0aW9uIHRoYXQgYW4gb2JqZWN0IGlzIHRyYWNrZWQgaXMKKyAgICAvLyBub3Qgc3RvcmVkIGluIHRoZSBhcmNoaXZlIGl0c2VsZiAtIHNlZSBsZXZlbCA9PSBvYmplY3Rfc2VyaWFsaXphYmxlCisgICAgLy8gYnV0IHJhdGhlciB0aGUgZXhpc3RlbmNlIG9mIHRoZSBvcGVyYXRpb24gYXIgPj4gVCAqIGlzIHVzZWQgdG8gCisgICAgLy8gaW5mZXIgdGhhdCBhbiBvYmplY3Qgb2YgdGhpcyB0eXBlIHNob3VsZCBiZSB0cmFja2VkLiAgU28sIGlmCisgICAgLy8geW91IHNhdmUgdmlhIGEgcG9pbnRlciBidXQgZG9uJ3QgbG9hZCB2aWEgYSBwb2ludGVyIHRoZSBvcGVyYXRpb24KKyAgICAvLyB3aWxsIGZhaWwgb24gbG9hZCB3aXRob3V0IGdpdmVuIGFueSB2YWxpZCByZWFzb24gZm9yIHRoZSBmYWlsdXJlLgorCisgICAgLy8gU28gaWYgeW91ciBwcm9ncmFtIHRyYXBzIGhlcmUsIGNvbnNpZGVyIGNoYW5naW5nIHRoZSAKKyAgICAvLyB0cmFja2luZyBvciBpbXBsZW1lbnRhdGlvbiBsZXZlbCB0cmFpdHMgLSBvciBub3QKKyAgICAvLyBzZXJpYWxpemluZyB2aWEgYSBwb2ludGVyLgorICAgIEJPT1NUX1NUQVRJQ19XQVJOSU5HKHR5cGV4Ojp2YWx1ZSk7Cit9CisKK3RlbXBsYXRlPGNsYXNzIFQ+Cit2b2lkIGlubGluZSBjaGVja19wb2ludGVyX3RyYWNraW5nKCl7CisgICAgdHlwZWRlZiB0eXBlbmFtZSBtcGw6OmdyZWF0ZXI8CisgICAgICAgIHNlcmlhbGl6YXRpb246OnRyYWNraW5nX2xldmVsPCBUID4sCisgICAgICAgIG1wbDo6aW50XzxzZXJpYWxpemF0aW9uOjp0cmFja19uZXZlcj4KKyAgICA+Ojp0eXBlIHR5cGV4OworICAgIC8vIHNlcmlhbGl6aW5nIGFuIG9iamVjdCBvZiBhIHR5cGUgbWFya2VkICJ0cmFja19uZXZlciIgdGhyb3VnaCBhIHBvaW50ZXIKKyAgICAvLyBjb3VsZCByZXN1bHQgaW4gY3JlYXRpbmcgbW9yZSBvYmplY3RzIHRoYW4gd2VyZSBzYXZlZCEKKyAgICBCT09TVF9TVEFUSUNfV0FSTklORyh0eXBleDo6dmFsdWUpOworfQorCit0ZW1wbGF0ZTxjbGFzcyBUPgoraW5saW5lIHZvaWQgY2hlY2tfY29uc3RfbG9hZGluZygpeworICAgIHR5cGVkZWYKKyAgICAgICAgdHlwZW5hbWUgbXBsOjpvcl88CisgICAgICAgICAgICB0eXBlbmFtZSBib29zdDo6c2VyaWFsaXphdGlvbjo6aXNfd3JhcHBlcjwgVCA+LAorICAgICAgICAgICAgdHlwZW5hbWUgbXBsOjpub3RfPAorICAgICAgICAgICAgICAgIHR5cGVuYW1lIGJvb3N0Ojppc19jb25zdDwgVCA+CisgICAgICAgICAgICA+CisgICAgICAgID46OnR5cGUgdHlwZXg7CisgICAgLy8gY2Fubm90IGxvYWQgZGF0YSBpbnRvIGEgImNvbnN0IiBvYmplY3QgdW5sZXNzIGl0J3MgYQorICAgIC8vIHdyYXBwZXIgYXJvdW5kIHNvbWUgb3RoZXIgbm9uLWNvbnN0IG9iamVjdC4KKyAgICBCT09TVF9TVEFUSUNfQVNTRVJUKHR5cGV4Ojp2YWx1ZSk7Cit9CisKK30gLy8gZGV0YWlsCit9IC8vIGFyY2hpdmUKK30gLy8gYm9vc3QKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0NIRUNLX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2NvbW1vbl9pYXJjaGl2ZS5ocHAKQEAgLTAsMCArMSw4OCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9DT01NT05fSUFSQ0hJVkVfSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0NPTU1PTl9JQVJDSElWRV9IUFAKKworLy8gTVMgY29tcGF0aWJsZSBjb21waWxlcnMgc3VwcG9ydCAjcHJhZ21hIG9uY2UKKyNpZiBkZWZpbmVkKF9NU0NfVkVSKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBjb21tb25faWFyY2hpdmUuaHBwCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvaW50ZXJmYWNlX2lhcmNoaXZlLmhwcD4KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgZXh0ZW5kZWRfdHlwZV9pbmZvOworCisvLyBub3RlOiByZWZlcnJlZCB0byBhcyBDdXJpb3VzbHkgUmVjdXJyaW5nIFRlbXBsYXRlIFBhdHRlciAoQ1JUUCkKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CitjbGFzcyBCT09TVF9TWU1CT0xfVklTSUJMRSBjb21tb25faWFyY2hpdmUgOiAKKyAgICBwdWJsaWMgYmFzaWNfaWFyY2hpdmUsCisgICAgcHVibGljIGludGVyZmFjZV9pYXJjaGl2ZTxBcmNoaXZlPgoreworICAgIGZyaWVuZCBjbGFzcyBpbnRlcmZhY2VfaWFyY2hpdmU8QXJjaGl2ZT47Citwcml2YXRlOgorICAgIHZpcnR1YWwgdm9pZCB2bG9hZCh2ZXJzaW9uX3R5cGUgJiB0KXsKKyAgICAgICAgKiB0aGlzLT5UaGlzKCkgPj4gdDsgCisgICAgfQorICAgIHZpcnR1YWwgdm9pZCB2bG9hZChvYmplY3RfaWRfdHlwZSAmIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdmxvYWQoY2xhc3NfaWRfdHlwZSAmIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdmxvYWQoY2xhc3NfaWRfb3B0aW9uYWxfdHlwZSAmIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdmxvYWQodHJhY2tpbmdfdHlwZSAmIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA+PiB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdmxvYWQoY2xhc3NfbmFtZV90eXBlICZzKXsKKyAgICAgICAgKiB0aGlzLT5UaGlzKCkgPj4gczsKKyAgICB9Citwcm90ZWN0ZWQ6CisgICAgLy8gZGVmYXVsdCBwcm9jZXNzaW5nIC0gaW52b2tlIHNlcmlhbGl6YXRpb24gbGlicmFyeQorICAgIHRlbXBsYXRlPGNsYXNzIFQ+CisgICAgdm9pZCBsb2FkX292ZXJyaWRlKFQgJiB0KXsKKyAgICAgICAgYXJjaGl2ZTo6bG9hZCgqIHRoaXMtPlRoaXMoKSwgdCk7CisgICAgfQorICAgIC8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb25zIG9mIGZ1bmN0aW9ucyB3aGljaCBlbWl0IHN0YXJ0L2VuZCB0YWdzIGZvcgorICAgIC8vIGFyY2hpdmUgdHlwZXMgdGhhdCByZXF1aXJlIHRoZW0uCisgICAgdm9pZCBsb2FkX3N0YXJ0KGNvbnN0IGNoYXIgKiAvKm5hbWUqLyl7fQorICAgIHZvaWQgbG9hZF9lbmQoY29uc3QgY2hhciAqIC8qbmFtZSovKXt9CisgICAgLy8gZGVmYXVsdCBhcmNoaXZlIGluaXRpYWxpemF0aW9uCisgICAgY29tbW9uX2lhcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyA9IDApIDogCisgICAgICAgIGJhc2ljX2lhcmNoaXZlKGZsYWdzKSwKKyAgICAgICAgaW50ZXJmYWNlX2lhcmNoaXZlPEFyY2hpdmU+KCkKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX0lBUkNISVZFX0hQUAorCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvY29tbW9uX29hcmNoaXZlLmhwcApAQCAtMCwwICsxLDg4IEBACisjaWZuZGVmIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0NPTU1PTl9PQVJDSElWRV9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX09BUkNISVZFX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpCisjIHByYWdtYSBvbmNlCisjZW5kaWYKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8zLy8vLy8vLy8vNC8vLy8vLy8vLzUvLy8vLy8vLy82Ly8vLy8vLy8vNy8vLy8vLy8vLzgKKy8vIGNvbW1vbl9vYXJjaGl2ZS5ocHAKKworLy8gKEMpIENvcHlyaWdodCAyMDAyIFJvYmVydCBSYW1leSAtIGh0dHA6Ly93d3cucnJzZC5jb20gLiAKKy8vIFVzZSwgbW9kaWZpY2F0aW9uIGFuZCBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byB0aGUgQm9vc3QgU29mdHdhcmUKKy8vIExpY2Vuc2UsIFZlcnNpb24gMS4wLiAoU2VlIGFjY29tcGFueWluZyBmaWxlIExJQ0VOU0VfMV8wLnR4dCBvciBjb3B5IGF0CisvLyBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgaHR0cDovL3d3dy5ib29zdC5vcmcgZm9yIHVwZGF0ZXMsIGRvY3VtZW50YXRpb24sIGFuZCByZXZpc2lvbiBoaXN0b3J5LgorCisjaW5jbHVkZSA8Ym9vc3QvY29uZmlnLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX29hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2Vfb2FyY2hpdmUuaHBwPgorCisjaWZkZWYgQk9PU1RfTVNWQworIyAgcHJhZ21hIHdhcm5pbmcocHVzaCkKKyMgIHByYWdtYSB3YXJuaW5nKGRpc2FibGUgOiA0NTExIDQ1MTIpCisjZW5kaWYKKworbmFtZXNwYWNlIGJvb3N0IHsKK25hbWVzcGFjZSBhcmNoaXZlIHsKK25hbWVzcGFjZSBkZXRhaWwgeworCisvLyBub3RlOiByZWZlcnJlZCB0byBhcyBDdXJpb3VzbHkgUmVjdXJyaW5nIFRlbXBsYXRlIFBhdHRlciAoQ1JUUCkKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmU+CisKK2NsYXNzIEJPT1NUX1NZTUJPTF9WSVNJQkxFIGNvbW1vbl9vYXJjaGl2ZSA6CisgICAgcHVibGljIGJhc2ljX29hcmNoaXZlLAorICAgIHB1YmxpYyBpbnRlcmZhY2Vfb2FyY2hpdmU8QXJjaGl2ZT4KK3sKKyAgICBmcmllbmQgY2xhc3MgaW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+OworcHJpdmF0ZToKKyAgICB2aXJ0dWFsIHZvaWQgdnNhdmUoY29uc3QgdmVyc2lvbl90eXBlIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA8PCB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdnNhdmUoY29uc3Qgb2JqZWN0X2lkX3R5cGUgdCl7CisgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHQ7CisgICAgfQorICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBvYmplY3RfcmVmZXJlbmNlX3R5cGUgdCl7CisgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHQ7CisgICAgfQorICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBjbGFzc19pZF90eXBlIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA8PCB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdnNhdmUoY29uc3QgY2xhc3NfaWRfcmVmZXJlbmNlX3R5cGUgdCl7CisgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHQ7CisgICAgfQorICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCBjbGFzc19pZF9vcHRpb25hbF90eXBlIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA8PCB0OworICAgIH0KKyAgICB2aXJ0dWFsIHZvaWQgdnNhdmUoY29uc3QgY2xhc3NfbmFtZV90eXBlICYgdCl7CisgICAgICAgICogdGhpcy0+VGhpcygpIDw8IHQ7CisgICAgfQorICAgIHZpcnR1YWwgdm9pZCB2c2F2ZShjb25zdCB0cmFja2luZ190eXBlIHQpeworICAgICAgICAqIHRoaXMtPlRoaXMoKSA8PCB0OworICAgIH0KK3Byb3RlY3RlZDoKKyAgICAvLyBkZWZhdWx0IHByb2Nlc3NpbmcgLSBpbnZva2Ugc2VyaWFsaXphdGlvbiBsaWJyYXJ5CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICB2b2lkIHNhdmVfb3ZlcnJpZGUoVCAmIHQpeworICAgICAgICBhcmNoaXZlOjpzYXZlKCogdGhpcy0+VGhpcygpLCB0KTsKKyAgICB9CisgICAgdm9pZCBzYXZlX3N0YXJ0KGNvbnN0IGNoYXIgKiAvKm5hbWUqLyl7fQorICAgIHZvaWQgc2F2ZV9lbmQoY29uc3QgY2hhciAqIC8qbmFtZSovKXt9CisgICAgY29tbW9uX29hcmNoaXZlKHVuc2lnbmVkIGludCBmbGFncyA9IDApIDogCisgICAgICAgIGJhc2ljX29hcmNoaXZlKGZsYWdzKSwKKyAgICAgICAgaW50ZXJmYWNlX29hcmNoaXZlPEFyY2hpdmU+KCkKKyAgICB7fQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaWZkZWYgQk9PU1RfTVNWQworI3ByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfQ09NTU9OX09BUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2RlY2wuaHBwCkBAIC0wLDAgKzEsNTcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfREVDTF9IUFAgCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZiAKKworLy8vLy8vLy8vMS8vLy8vLy8vLzIvLy8vLy8vLy8gMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyAgZGVjbC5ocHAKKy8vCisvLyAgKGMpIENvcHlyaWdodCBSb2JlcnQgUmFtZXkgMjAwNAorLy8gIFVzZSwgbW9kaWZpY2F0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyAgTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vICBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQpCisKKy8vICBTZWUgbGlicmFyeSBob21lIHBhZ2UgYXQgaHR0cDovL3d3dy5ib29zdC5vcmcvbGlicy9zZXJpYWxpemF0aW9uCisKKy8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vIAorCisvLyBUaGlzIGhlYWRlciBpbXBsZW1lbnRzIHNlcGFyYXRlIGNvbXBpbGF0aW9uIGZlYXR1cmVzIGFzIGRlc2NyaWJlZCBpbgorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvbW9yZS9zZXBhcmF0ZV9jb21waWxhdGlvbi5odG1sCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorCisjaWYgKGRlZmluZWQoQk9PU1RfQUxMX0RZTl9MSU5LKSB8fCBkZWZpbmVkKEJPT1NUX1NFUklBTElaQVRJT05fRFlOX0xJTkspKQorICAgICNpZiBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfRVhQT1JUCisgICAgI2Vsc2UKKyAgICAgICAgI2RlZmluZSBCT09TVF9BUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0lNUE9SVAorICAgICNlbmRpZgorCisgICAgI2lmIGRlZmluZWQoQk9PU1RfV0FSQ0hJVkVfU09VUkNFKQorICAgICAgICAjZGVmaW5lIEJPT1NUX1dBUkNISVZFX0RFQ0wgQk9PU1RfU1lNQk9MX0VYUE9SVAorICAgICNlbHNlCisgICAgICAgICNkZWZpbmUgQk9PU1RfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyAgICAjaWYgZGVmaW5lZChCT09TVF9XQVJDSElWRV9TT1VSQ0UpIHx8IGRlZmluZWQoQk9PU1RfQVJDSElWRV9TT1VSQ0UpCisgICAgICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMIEJPT1NUX1NZTUJPTF9FWFBPUlQKKyAgICAjZWxzZQorICAgICAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfT1JfV0FSQ0hJVkVfREVDTCBCT09TVF9TWU1CT0xfSU1QT1JUCisgICAgI2VuZGlmCisKKyNlbmRpZgorCisjaWYgISBkZWZpbmVkKEJPT1NUX0FSQ0hJVkVfREVDTCkKKyAgICAjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVDTAorI2VuZGlmCisjaWYgISBkZWZpbmVkKEJPT1NUX1dBUkNISVZFX0RFQ0wpCisgICAgI2RlZmluZSBCT09TVF9XQVJDSElWRV9ERUNMCisjZW5kaWYKKyNpZiAhIGRlZmluZWQoQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMKQorICAgICNkZWZpbmUgQk9PU1RfQVJDSElWRV9PUl9XQVJDSElWRV9ERUNMCisjZW5kaWYKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0RFQ0xfSFBQCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Ci0tLSAvZGV2L251bGwKKysrIGIvbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS90aGlyZC1wYXJ0eS9ib29zdF8xXzYzXzAvYm9vc3QvYXJjaGl2ZS9kZXRhaWwvaGVscGVyX2NvbGxlY3Rpb24uaHBwCkBAIC0wLDAgKzEsOTkgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSEVMUEVSX0NPTExFQ1RJT05fSFBQCisjZGVmaW5lIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0hFTFBFUl9DT0xMRUNUSU9OX0hQUAorCisvLyBNUyBjb21wYXRpYmxlIGNvbXBpbGVycyBzdXBwb3J0ICNwcmFnbWEgb25jZQorI2lmIGRlZmluZWQoX01TQ19WRVIpICYmIChfTVNDX1ZFUiA+PSAxMDIwKQorIyBwcmFnbWEgb25jZQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBoZWxwZXJfY29sbGVjdGlvbi5ocHA6IGFyY2hpdmUgc3VwcG9ydCBmb3IgcnVuLXRpbWUgaGVscGVycworCisvLyAoQykgQ29weXJpZ2h0IDIwMDItMjAwOCBSb2JlcnQgUmFtZXkgYW5kIEpvYXF1aW4gTSBMb3BleiBNdW5vegorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisKKyNpbmNsdWRlIDxjc3RkZGVmPiAvLyBOVUxMCisjaW5jbHVkZSA8dmVjdG9yPgorI2luY2x1ZGUgPHV0aWxpdHk+CisjaW5jbHVkZSA8bWVtb3J5PgorI2luY2x1ZGUgPGFsZ29yaXRobT4KKworI2luY2x1ZGUgPGJvb3N0L2NvbmZpZy5ocHA+CisKKyNpbmNsdWRlIDxib29zdC9zbWFydF9wdHIvc2hhcmVkX3B0ci5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc21hcnRfcHRyL21ha2Vfc2hhcmVkLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIGFyY2hpdmUgeworbmFtZXNwYWNlIGRldGFpbCB7CisKK2NsYXNzIGhlbHBlcl9jb2xsZWN0aW9uCit7CisgICAgaGVscGVyX2NvbGxlY3Rpb24oY29uc3QgaGVscGVyX2NvbGxlY3Rpb24mKTsgICAgICAgICAgICAgIC8vIG5vbi1jb3B5YWJsZQorICAgIGhlbHBlcl9jb2xsZWN0aW9uJiBvcGVyYXRvciA9IChjb25zdCBoZWxwZXJfY29sbGVjdGlvbiYpOyAvLyBub24tY29weWFibGUKKworICAgIC8vIG5vdGU6IHdlIGRvbnQnIGFjdHVhbGx5ICJzaGFyZSIgdGhlIGZ1bmN0aW9uIG9iamVjdCBwb2ludGVyCisgICAgLy8gd2Ugb25seSB1c2Ugc2hhcmVkX3B0ciB0byBtYWtlIHN1cmUgdGhhdCBpdCBnZXQncyBkZWxldGVkCisKKyAgICB0eXBlZGVmIHN0ZDo6cGFpcjwKKyAgICAgICAgY29uc3Qgdm9pZCAqLAorICAgICAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPgorICAgID4gaGVscGVyX3ZhbHVlX3R5cGU7CisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBib29zdDo6c2hhcmVkX3B0cjx2b2lkPiBtYWtlX2hlbHBlcl9wdHIoKXsKKyAgICAgICAgLy8gdXNlIGJvb3N0OjpzaGFyZWRfcHRyIHJhdGhlciB0aGFuIHN0ZDo6c2hhcmVkX3B0ciB0byBtYWludGFpbgorICAgICAgICAvLyBjKyswMyBjb21wYXRpYmlsaXR5CisgICAgICAgIHJldHVybiBib29zdDo6bWFrZV9zaGFyZWQ8VD4oKTsKKyAgICB9CisKKyAgICB0eXBlZGVmIHN0ZDo6dmVjdG9yPGhlbHBlcl92YWx1ZV90eXBlPiBjb2xsZWN0aW9uOworICAgIGNvbGxlY3Rpb24gbV9jb2xsZWN0aW9uOworCisgICAgc3RydWN0IHByZWRpY2F0ZSB7CisgICAgICAgIEJPT1NUX0RFTEVURURfRlVOQ1RJT04ocHJlZGljYXRlICYgb3BlcmF0b3I9KGNvbnN0IHByZWRpY2F0ZSAmIHJocykpCisgICAgcHVibGljOgorICAgICAgICBjb25zdCB2b2lkICogY29uc3QgbV90aTsKKyAgICAgICAgYm9vbCBvcGVyYXRvcigpKGhlbHBlcl92YWx1ZV90eXBlIGNvbnN0ICZyaHMpIGNvbnN0IHsKKyAgICAgICAgICAgIHJldHVybiBtX3RpID09IHJocy5maXJzdDsKKyAgICAgICAgfQorICAgICAgICBwcmVkaWNhdGUoY29uc3Qgdm9pZCAqIHRpKSA6CisgICAgICAgICAgICBtX3RpKHRpKQorICAgICAgICB7fQorICAgIH07Citwcm90ZWN0ZWQ6CisgICAgaGVscGVyX2NvbGxlY3Rpb24oKXt9CisgICAgfmhlbHBlcl9jb2xsZWN0aW9uKCl7fQorcHVibGljOgorICAgIHRlbXBsYXRlPHR5cGVuYW1lIEhlbHBlcj4KKyAgICBIZWxwZXImIGZpbmRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApIHsKKyAgICAgICAgY29sbGVjdGlvbjo6Y29uc3RfaXRlcmF0b3IgaXQgPQorICAgICAgICAgICAgc3RkOjpmaW5kX2lmKAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5iZWdpbigpLAorICAgICAgICAgICAgICAgIG1fY29sbGVjdGlvbi5lbmQoKSwKKyAgICAgICAgICAgICAgICBwcmVkaWNhdGUoaWQpCisgICAgICAgICAgICApOworCisgICAgICAgIHZvaWQgKiBydmFsID0gMDsKKyAgICAgICAgaWYoaXQgPT0gbV9jb2xsZWN0aW9uLmVuZCgpKXsKKyAgICAgICAgICAgIG1fY29sbGVjdGlvbi5wdXNoX2JhY2soCisgICAgICAgICAgICAgICAgc3RkOjptYWtlX3BhaXIoaWQsIG1ha2VfaGVscGVyX3B0cjxIZWxwZXI+KCkpCisgICAgICAgICAgICApOworICAgICAgICAgICAgcnZhbCA9IG1fY29sbGVjdGlvbi5iYWNrKCkuc2Vjb25kLmdldCgpOworICAgICAgICB9CisgICAgICAgIGVsc2V7CisgICAgICAgICAgICBydmFsID0gaXQtPnNlY29uZC5nZXQoKTsKKyAgICAgICAgfQorICAgICAgICByZXR1cm4gKnN0YXRpY19jYXN0PEhlbHBlciAqPihydmFsKTsKKyAgICB9Cit9OworCit9IC8vIG5hbWVzcGFjZSBkZXRhaWwKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KK30gLy8gbmFtZXNwYWNlIGJvb3N0CisKKyNlbmRpZiAvLyBCT09TVF9BUkNISVZFX0RFVEFJTF9IRUxQRVJfQ09MTEVDVElPTl9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2VfaWFyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODUgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfSUFSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX2lhcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9hdXRvX2xpbmtfYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2hlbHBlcl9jb2xsZWN0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9pYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2VfaWFyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzx0cnVlPiBpc19sb2FkaW5nOworICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX2lzZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplciAmIGJwaXMgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX2lzZXJpYWxpemVyPEFyY2hpdmUsIFQ+IAorICAgICAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+cmVnaXN0ZXJfYmFzaWNfc2VyaWFsaXplcihicGlzLmdldF9iYXNpY19zZXJpYWxpemVyKCkpOworICAgICAgICByZXR1cm4gJiBicGlzOworICAgIH0KKyAgICB0ZW1wbGF0ZTxjbGFzcyBIZWxwZXI+CisgICAgSGVscGVyICYKKyAgICBnZXRfaGVscGVyKHZvaWQgKiBjb25zdCBpZCA9IDApeworICAgICAgICBoZWxwZXJfY29sbGVjdGlvbiAmIGhjID0gdGhpcy0+VGhpcygpLT5nZXRfaGVscGVyX2NvbGxlY3Rpb24oKTsKKyAgICAgICAgcmV0dXJuIGhjLnRlbXBsYXRlIGZpbmRfaGVscGVyPEhlbHBlcj4oaWQpOworICAgIH0KKyAgICAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvcj4+KFQgJiB0KXsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5sb2FkX292ZXJyaWRlKHQpOworICAgICAgICByZXR1cm4gKiB0aGlzLT5UaGlzKCk7CisgICAgfQorCisgICAgLy8gdGhlICYgb3BlcmF0b3IgCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3ImKFQgJiB0KXsKKyAgICAgICAgcmV0dXJuICoodGhpcy0+VGhpcygpKSA+PiB0OworICAgIH0KK307CisKK30gLy8gbmFtZXNwYWNlIGRldGFpbAorfSAvLyBuYW1lc3BhY2UgYXJjaGl2ZQorfSAvLyBuYW1lc3BhY2UgYm9vc3QKKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FiaV9zdWZmaXguaHBwPiAvLyBwb3BzIGFiaV9zdWZmaXguaHBwIHByYWdtYXMKKworI2VuZGlmIC8vIEJPT1NUX0FSQ0hJVkVfREVUQUlMX0lOVEVSRkFDRV9JQVJDSElWRV9IUFAKbmV3IGZpbGUgbW9kZSAxMDA2NDQKLS0tIC9kZXYvbnVsbAorKysgYi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlL3RoaXJkLXBhcnR5L2Jvb3N0XzFfNjNfMC9ib29zdC9hcmNoaXZlL2RldGFpbC9pbnRlcmZhY2Vfb2FyY2hpdmUuaHBwCkBAIC0wLDAgKzEsODcgQEAKKyNpZm5kZWYgQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX09BUkNISVZFX0hQUAorI2RlZmluZSBCT09TVF9BUkNISVZFX0RFVEFJTF9JTlRFUkZBQ0VfT0FSQ0hJVkVfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNlbmRpZgorCisvLy8vLy8vLy8xLy8vLy8vLy8vMi8vLy8vLy8vLzMvLy8vLy8vLy80Ly8vLy8vLy8vNS8vLy8vLy8vLzYvLy8vLy8vLy83Ly8vLy8vLy8vOAorLy8gaW50ZXJmYWNlX29hcmNoaXZlLmhwcAorCisvLyAoQykgQ29weXJpZ2h0IDIwMDIgUm9iZXJ0IFJhbWV5IC0gaHR0cDovL3d3dy5ycnNkLmNvbSAuIAorLy8gVXNlLCBtb2RpZmljYXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIHRoZSBCb29zdCBTb2Z0d2FyZQorLy8gTGljZW5zZSwgVmVyc2lvbiAxLjAuIChTZWUgYWNjb21wYW55aW5nIGZpbGUgTElDRU5TRV8xXzAudHh0IG9yIGNvcHkgYXQKKy8vIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCkKKworLy8gIFNlZSBodHRwOi8vd3d3LmJvb3N0Lm9yZyBmb3IgdXBkYXRlcywgZG9jdW1lbnRhdGlvbiwgYW5kIHJldmlzaW9uIGhpc3RvcnkuCisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gTlVMTAorI2luY2x1ZGUgPGJvb3N0L2NzdGRpbnQuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9ib29sLmhwcD4KKworI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2F1dG9fbGlua19hcmNoaXZlLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9vc2VyaWFsaXplci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3ByZWZpeC5ocHA+IC8vIG11c3QgYmUgdGhlIGxhc3QgaGVhZGVyCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NpbmdsZXRvbi5ocHA+CisKK25hbWVzcGFjZSBib29zdCB7CituYW1lc3BhY2UgYXJjaGl2ZSB7CituYW1lc3BhY2UgZGV0YWlsIHsKKworY2xhc3MgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplcjsKKwordGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZT4KK2NsYXNzIGludGVyZmFjZV9vYXJjaGl2ZSAKK3sKK3Byb3RlY3RlZDoKKyAgICBpbnRlcmZhY2Vfb2FyY2hpdmUoKXt9OworcHVibGljOgorICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLworICAgIC8vIGFyY2hpdmUgcHVibGljIGludGVyZmFjZQorICAgIHR5cGVkZWYgbXBsOjpib29sXzxmYWxzZT4gaXNfbG9hZGluZzsKKyAgICB0eXBlZGVmIG1wbDo6Ym9vbF88dHJ1ZT4gaXNfc2F2aW5nOworCisgICAgLy8gcmV0dXJuIGEgcG9pbnRlciB0byB0aGUgbW9zdCBkZXJpdmVkIGNsYXNzCisgICAgQXJjaGl2ZSAqIFRoaXMoKXsKKyAgICAgICAgcmV0dXJuIHN0YXRpY19jYXN0PEFyY2hpdmUgKj4odGhpcyk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBjb25zdCBiYXNpY19wb2ludGVyX29zZXJpYWxpemVyICogCisgICAgcmVnaXN0ZXJfdHlwZShjb25zdCBUICogPSBOVUxMKXsKKyAgICAgICAgY29uc3QgYmFzaWNfcG9pbnRlcl9vc2VyaWFsaXplciAmIGJwb3MgPQorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICBwb2ludGVyX29zZXJpYWxpemVyPEFyY2hpdmUsIFQ+CisgICAgICAgICAgICA+OjpnZXRfY29uc3RfaW5zdGFuY2UoKTsKKyAgICAgICAgdGhpcy0+VGhpcygpLT5yZWdpc3Rlcl9iYXNpY19zZXJpYWxpemVyKGJwb3MuZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSk7CisgICAgICAgIHJldHVybiAmIGJwb3M7CisgICAgfQorICAgIAorICAgIHRlbXBsYXRlPGNsYXNzIEhlbHBlcj4KKyAgICBIZWxwZXIgJgorICAgIGdldF9oZWxwZXIodm9pZCAqIGNvbnN0IGlkID0gMCl7CisgICAgICAgIGhlbHBlcl9jb2xsZWN0aW9uICYgaGMgPSB0aGlzLT5UaGlzKCktPmdldF9oZWxwZXJfY29sbGVjdGlvbigpOworICAgICAgICByZXR1cm4gaGMudGVtcGxhdGUgZmluZF9oZWxwZXI8SGVscGVyPihpZCk7CisgICAgfQorCisgICAgdGVtcGxhdGU8Y2xhc3MgVD4KKyAgICBBcmNoaXZlICYgb3BlcmF0b3I8PChjb25zdCBUICYgdCl7CisgICAgICAgIHRoaXMtPlRoaXMoKS0+c2F2ZV9vdmVycmlkZSh0KTsKKyAgICAgICAgcmV0dXJuICogdGhpcy0+VGhpcygpOworICAgIH0KKyAgICAKKyAgICAvLyB0aGUgJiBvcGVyYXRvciAKKyAgICB0ZW1wbGF0ZTxjbGFzcyBUPgorICAgIEFyY2hpdmUgJiBvcGVyYXRvciYoY29uc3QgVCAmIHQpeworICAgICAgICByZXR1cm4gKiB0aGlzIC0+VGhpcygpIDw8IHQ7CisgICAgfQorfTsKKworfSAvLyBuYW1lc3BhY2UgZGV0YWlsCit9IC8vIG5hbWVzcGFjZSBhcmNoaXZlCit9IC8vIG5hbWVzcGFjZSBib29zdAorCisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYWJpX3N1ZmZpeC5ocHA+IC8vIHBvcHMgYWJpX3N1ZmZpeC5ocHAgcHJhZ21hcworCisjZW5kaWYgLy8gQk9PU1RfQVJDSElWRV9ERVRBSUxfSU5URVJGQUNFX0lBUkNISVZFX0hQUApuZXcgZmlsZSBtb2RlIDEwMDY0NAotLS0gL2Rldi9udWxsCisrKyBiL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvdGhpcmQtcGFydHkvYm9vc3RfMV82M18wL2Jvb3N0L2FyY2hpdmUvZGV0YWlsL2lzZXJpYWxpemVyLmhwcApAQCAtMCwwICsxLDYyNCBAQAorI2lmbmRlZiBCT09TVF9BUkNISVZFX0RFVEFJTF9JU0VSSUFMSVpFUl9IUFAKKyNkZWZpbmUgQk9PU1RfQVJDSElWRV9ERVRBSUxfSVNFUklBTElaRVJfSFBQCisKKy8vIE1TIGNvbXBhdGlibGUgY29tcGlsZXJzIHN1cHBvcnQgI3ByYWdtYSBvbmNlCisjaWYgZGVmaW5lZChfTVNDX1ZFUikKKyMgcHJhZ21hIG9uY2UKKyNwcmFnbWEgaW5saW5lX2RlcHRoKDUxMSkKKyNwcmFnbWEgaW5saW5lX3JlY3Vyc2lvbihvbikKKyNlbmRpZgorCisjaWYgZGVmaW5lZChfX01XRVJLU19fKQorI3ByYWdtYSBpbmxpbmVfZGVwdGgoNTExKQorI2VuZGlmCisKKy8vLy8vLy8vLzEvLy8vLy8vLy8yLy8vLy8vLy8vMy8vLy8vLy8vLzQvLy8vLy8vLy81Ly8vLy8vLy8vNi8vLy8vLy8vLzcvLy8vLy8vLy84CisvLyBpc2VyaWFsaXplci5ocHA6IGludGVyZmFjZSBmb3Igc2VyaWFsaXphdGlvbiBzeXN0ZW0uCisKKy8vIChDKSBDb3B5cmlnaHQgMjAwMiBSb2JlcnQgUmFtZXkgLSBodHRwOi8vd3d3LnJyc2QuY29tIC4gCisvLyBVc2UsIG1vZGlmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGlzIHN1YmplY3QgdG8gdGhlIEJvb3N0IFNvZnR3YXJlCisvLyBMaWNlbnNlLCBWZXJzaW9uIDEuMC4gKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAorLy8gaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQorCisvLyAgU2VlIGh0dHA6Ly93d3cuYm9vc3Qub3JnIGZvciB1cGRhdGVzLCBkb2N1bWVudGF0aW9uLCBhbmQgcmV2aXNpb24gaGlzdG9yeS4KKworI2luY2x1ZGUgPG5ldz4gICAgIC8vIGZvciBwbGFjZW1lbnQgbmV3CisjaW5jbHVkZSA8Y3N0ZGRlZj4gLy8gc2l6ZV90LCBOVUxMCisKKyNpbmNsdWRlIDxib29zdC9jb25maWcuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2RldGFpbC93b3JrYXJvdW5kLmhwcD4KKyNpZiBkZWZpbmVkKEJPT1NUX05PX1NURENfTkFNRVNQQUNFKQorbmFtZXNwYWNlIHN0ZHsgCisgICAgdXNpbmcgOjpzaXplX3Q7IAorfSAvLyBuYW1lc3BhY2Ugc3RkCisjZW5kaWYKKworI2luY2x1ZGUgPGJvb3N0L3N0YXRpY19hc3NlcnQuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvbXBsL2V2YWxfaWYuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9pZGVudGl0eS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvbXBsL2dyZWF0ZXJfZXF1YWwuaHBwPgorI2luY2x1ZGUgPGJvb3N0L21wbC9lcXVhbF90by5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvY29yZS9ub19leGNlcHRpb25zX3N1cHBvcnQuaHBwPgorCisjaWZuZGVmIEJPT1NUX1NFUklBTElaQVRJT05fREVGQVVMVF9UWVBFX0lORk8gICAKKyAgICAjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9leHRlbmRlZF90eXBlX2luZm9fdHlwZWlkLmhwcD4gICAKKyNlbmRpZgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdGhyb3dfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NtYXJ0X2Nhc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vc3RhdGljX3dhcm5pbmcuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9pbnRlci5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfZW51bS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfY29uc3QuaHBwPgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL3JlbW92ZV9jb25zdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvcmVtb3ZlX2V4dGVudC5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvdHlwZV90cmFpdHMvaXNfcG9seW1vcnBoaWMuaHBwPgorCisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hc3N1bWVfYWJzdHJhY3QuaHBwPgorCisjaWZuZGVmIEJPT1NUX01TVkMKKyAgICAjZGVmaW5lIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IgKCAgICAgICAgICAgICAgICAgICAgXAorICAgICAgICAgICBCT09TVF9XT1JLQVJPVU5EKF9fSUJNQ1BQX18sIDwgMTIxMCkgICAgICAgICAgICBcCisgICAgICAgIHx8IGRlZmluZWQoX19TVU5QUk9fQ0MpICYmIChfX1NVTlBST19DQyA8IDB4NTkwKSAgIFwKKyAgICApCisjZWxzZQorICAgICNkZWZpbmUgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUiAwCisjZW5kaWYKKworI2lmICEgRE9OVF9VU0VfSEFTX05FV19PUEVSQVRPUgorI2luY2x1ZGUgPGJvb3N0L3R5cGVfdHJhaXRzL2hhc19uZXdfb3BlcmF0b3IuaHBwPgorI2VuZGlmCisKKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3NlcmlhbGl6YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vdmVyc2lvbi5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9sZXZlbC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90cmFja2luZy5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi90eXBlX2luZm9faW1wbGVtZW50YXRpb24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vbnZwLmhwcD4KKyNpbmNsdWRlIDxib29zdC9zZXJpYWxpemF0aW9uL3ZvaWRfY2FzdC5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9hcnJheS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9jb2xsZWN0aW9uX3NpemVfdHlwZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3Qvc2VyaWFsaXphdGlvbi9zaW5nbGV0b24uaHBwPgorI2luY2x1ZGUgPGJvb3N0L3NlcmlhbGl6YXRpb24vd3JhcHBlci5ocHA+CisKKy8vIHRoZSBmb2xsb3dpbmcgaXMgbmVlZCBvbmx5IGZvciBkeW5hbWljIGNhc3Qgb2YgcG9seW1vcnBoaWMgcG9pbnRlcnMKKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2FyY2hpdmVfZXhjZXB0aW9uLmhwcD4KKyNpbmNsdWRlIDxib29zdC9hcmNoaXZlL2RldGFpbC9iYXNpY19pYXJjaGl2ZS5ocHA+CisjaW5jbHVkZSA8Ym9vc3QvYXJjaGl2ZS9kZXRhaWwvYmFzaWNfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2Jhc2ljX3BvaW50ZXJfaXNlcmlhbGl6ZXIuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2FyY2hpdmVfc2VyaWFsaXplcl9tYXAuaHBwPgorI2luY2x1ZGUgPGJvb3N0L2FyY2hpdmUvZGV0YWlsL2NoZWNrLmhwcD4KKworbmFtZXNwYWNlIGJvb3N0IHsKKworbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24geworICAgIGNsYXNzIGV4dGVuZGVkX3R5cGVfaW5mbzsKK30gLy8gbmFtZXNwYWNlIHNlcmlhbGl6YXRpb24KKworbmFtZXNwYWNlIGFyY2hpdmUgeworCisvLyBhbiBhY2Nlc3NvciB0byBwZXJtaXQgZnJpZW5kIGFjY2VzcyB0byBhcmNoaXZlcy4gIE5lZWRlZCBiZWNhdXNlCisvLyBzb21lIGNvbXBpbGVycyBkb24ndCBoYW5kbGUgZnJpZW5kIHRlbXBsYXRlcyBjb21wbGV0ZWx5CitjbGFzcyBsb2FkX2FjY2VzcyB7CitwdWJsaWM6CisgICAgdGVtcGxhdGU8Y2xhc3MgQXJjaGl2ZSwgY2xhc3MgVD4KKyAgICBzdGF0aWMgdm9pZCBsb2FkX3ByaW1pdGl2ZShBcmNoaXZlICZhciwgVCAmdCl7CisgICAgICAgIGFyLmxvYWQodCk7CisgICAgfQorfTsKKworbmFtZXNwYWNlIGRldGFpbCB7CisKKyNpZmRlZiBCT09TVF9NU1ZDCisjICBwcmFnbWEgd2FybmluZyhwdXNoKQorIyAgcHJhZ21hIHdhcm5pbmcoZGlzYWJsZSA6IDQ1MTEgNDUxMikKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorY2xhc3MgaXNlcmlhbGl6ZXIgOiBwdWJsaWMgYmFzaWNfaXNlcmlhbGl6ZXIKK3sKK3ByaXZhdGU6CisgICAgdmlydHVhbCB2b2lkIGRlc3Ryb3koLypjb25zdCovIHZvaWQgKmFkZHJlc3MpIGNvbnN0IHsKKyAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OmFjY2Vzczo6ZGVzdHJveShzdGF0aWNfY2FzdDxUICo+KGFkZHJlc3MpKTsKKyAgICB9Citwcm90ZWN0ZWQ6CisgICAgLy8gcHJvdGVjdGVkIGNvbnN0cnVjdG9yIHNpbmNlIGl0J3MgYWx3YXlzIGNyZWF0ZWQgYnkgc2luZ2xldG9uCisgICAgZXhwbGljaXQgaXNlcmlhbGl6ZXIoKSA6CisgICAgICAgIGJhc2ljX2lzZXJpYWxpemVyKAorICAgICAgICAgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNpbmdsZXRvbjwKKyAgICAgICAgICAgICAgICB0eXBlbmFtZSAKKyAgICAgICAgICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dHlwZV9pbmZvX2ltcGxlbWVudGF0aW9uPCBUID46OnR5cGUKKyAgICAgICAgICAgID46OmdldF9jb25zdF9pbnN0YW5jZSgpCisgICAgICAgICkKKyAgICB7fQorcHVibGljOgorICAgIHZpcnR1YWwgQk9PU1RfRExMRVhQT1JUIHZvaWQgbG9hZF9vYmplY3RfZGF0YSgKKyAgICAgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICAgICAgdm9pZCAqeCwgCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7CisgICAgdmlydHVhbCBib29sIGNsYXNzX2luZm8oKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6aW1wbGVtZW50YXRpb25fbGV2ZWw8IFQgPjo6dmFsdWUgCisgICAgICAgICAgICA+PSBib29zdDo6c2VyaWFsaXphdGlvbjo6b2JqZWN0X2NsYXNzX2luZm87CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCB0cmFja2luZyhjb25zdCB1bnNpZ25lZCBpbnQgLyogZmxhZ3MgKi8pIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfYWx3YXlzCisgICAgICAgICAgICB8fCAoIGJvb3N0OjpzZXJpYWxpemF0aW9uOjp0cmFja2luZ19sZXZlbDwgVCA+Ojp2YWx1ZSAKKyAgICAgICAgICAgICAgICA9PSBib29zdDo6c2VyaWFsaXphdGlvbjo6dHJhY2tfc2VsZWN0aXZlbHkKKyAgICAgICAgICAgICAgICAmJiBzZXJpYWxpemVkX2FzX3BvaW50ZXIoKSk7CisgICAgfQorICAgIHZpcnR1YWwgdmVyc2lvbl90eXBlIHZlcnNpb24oKSBjb25zdCB7CisgICAgICAgIHJldHVybiB2ZXJzaW9uX3R5cGUoOjpib29zdDo6c2VyaWFsaXphdGlvbjo6dmVyc2lvbjwgVCA+Ojp2YWx1ZSk7CisgICAgfQorICAgIHZpcnR1YWwgYm9vbCBpc19wb2x5bW9ycGhpYygpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIGJvb3N0Ojppc19wb2x5bW9ycGhpYzwgVCA+Ojp2YWx1ZTsKKyAgICB9CisgICAgdmlydHVhbCB+aXNlcmlhbGl6ZXIoKXt9OworfTsKKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHBvcCkKKyNlbmRpZgorCit0ZW1wbGF0ZTxjbGFzcyBBcmNoaXZlLCBjbGFzcyBUPgorQk9PU1RfRExMRVhQT1JUIHZvaWQgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD46OmxvYWRfb2JqZWN0X2RhdGEoCisgICAgYmFzaWNfaWFyY2hpdmUgJiBhciwKKyAgICB2b2lkICp4LCAKKyAgICBjb25zdCB1bnNpZ25lZCBpbnQgZmlsZV92ZXJzaW9uCispIGNvbnN0IHsKKyAgICAvLyBub3RlOiB3ZSBub3cgY29tbWVudCB0aGlzIG91dC4gQmVmb3JlIHdlIHBlcm1pdGVkIGFyY2hpdmUKKyAgICAvLyB2ZXJzaW9uICMgdG8gYmUgdmVyeSBsYXJnZS4gIE5vdyB3ZSBkb24ndC4gIFRvIHBlcm1pdAorICAgIC8vIHJlYWRlcnMgb2YgdGhlc2Ugb2xkIGFyY2hpdmVzLCB3ZSBoYXZlIHRvIHN1cHByZXNzIHRoaXMgCisgICAgLy8gY29kZS4gIFBlcmhhcHMgaW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCByZS1lbmFibGUgaXQgYnV0CisgICAgLy8gcGVybWl0IGl0cyBzdXBwcmVzc2lvbiB3aXRoIGEgcnVudGltZSBzd2l0Y2guCisgICAgI2lmIDAKKyAgICAvLyB0cmFwIGNhc2Ugd2hlcmUgdGhlIHByb2dyYW0gY2Fubm90IGhhbmRsZSB0aGUgY3VycmVudCB2ZXJzaW9uCisgICAgaWYoZmlsZV92ZXJzaW9uID4gc3RhdGljX2Nhc3Q8Y29uc3QgdW5zaWduZWQgaW50Pih2ZXJzaW9uKCkpKQorICAgICAgICBib29zdDo6c2VyaWFsaXphdGlvbjo6dGhyb3dfZXhjZXB0aW9uKAorICAgICAgICAgICAgYXJjaGl2ZTo6YXJjaGl2ZV9leGNlcHRpb24oCisgICAgICAgICAgICAgICAgYm9vc3Q6OmFyY2hpdmU6OmFyY2hpdmVfZXhjZXB0aW9uOjp1bnN1cHBvcnRlZF9jbGFzc192ZXJzaW9uLAorICAgICAgICAgICAgICAgIGdldF9kZWJ1Z19pbmZvKCkKKyAgICAgICAgICAgICkKKyAgICAgICAgKTsKKyAgICAjZW5kaWYKKyAgICAvLyBtYWtlIHN1cmUgY2FsbCBpcyByb3V0ZWQgdGhyb3VnaCB0aGUgaGlnZXN0IGludGVyZmFjZSB0aGF0IG1pZ2h0CisgICAgLy8gYmUgc3BlY2lhbGl6ZWQgYnkgdGhlIHVzZXIuCisgICAgYm9vc3Q6OnNlcmlhbGl6YXRpb246OnNlcmlhbGl6ZV9hZGwoCisgICAgICAgIGJvb3N0OjpzZXJpYWxpemF0aW9uOjpzbWFydF9jYXN0X3JlZmVyZW5jZTxBcmNoaXZlICY+KGFyKSwKKyAgICAgICAgKiBzdGF0aWNfY2FzdDxUICo+KHgpLCAKKyAgICAgICAgZmlsZV92ZXJzaW9uCisgICAgKTsKK30KKworI2lmZGVmIEJPT1NUX01TVkMKKyMgIHByYWdtYSB3YXJuaW5nKHB1c2gpCisjICBwcmFnbWEgd2FybmluZyhkaXNhYmxlIDogNDUxMSA0NTEyKQorI2VuZGlmCisKKy8vIHRoZSBwdXJwb3NlIG9mIHRoaXMgY29kZSBpcyB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIGFuIG9iamVjdAorLy8gd2l0aG91dCByZXF1aXJpbmcgdGhlIGNvbnN0cnVjdG9yIHRvIGJlIGNhbGxlZC4gIFByZXN1bWFibHkKKy8vIHRoZSBhbGxvY2F0ZWQgb2JqZWN0IHdpbGwgYmUgc3Vic2VxdWVudGx5IGluaXRpYWxpemVkIHdpdGgKKy8vICJwbGFjZW1lbnQgbmV3Ii4gCisvLyBub3RlOiB3ZSBoYXZlIHRoZSBib29zdCB0eXBlIHRyYWl0IGhhc19uZXdfb3BlcmF0b3IgYnV0IHdlCisvLyBoYXZlIG5vIGNvcnJlc3BvbmRpbmcgaGFzX2RlbGV0ZV9vcGVyYXRvci4gIFNvIHdlIHByZXN1bWUKKy8vIHRoYXQgdGhlIGZvcm1lciBiZWluZyB0cnVlIHdvdWxkIGltcGx5IHRoYXQgdGhlIGEgZGVsZXRlCisvLyBvcGVyYXRvciBpcyBhbHNvIGRlZmluZWQgZm9yIHRoZSBjbGFzcyBULgorCit0ZW1wbGF0ZTxjbGFzcyBUPgorc3RydWN0IGhlYXBfYWxsb2NhdGlvbiB7CisgICAgLy8gYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiBkb2Vzbid0IHdvcmsgb24gdGhlc2UgY29tcGlsZXJzCisgICAgI2lmIERPTlRfVVNFX0hBU19ORVdfT1BFUkFUT1IKKyAgICAgICAgLy8gVGhpcyBkb2Vzbid0IGhhbmRsZSBvcGVyYXRvciBuZXcgb3ZlcmxvYWQgZm9yIGNsYXNzIFQKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCl7CisgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgIH0KKyAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICp0KXsKKyAgICAgICAgICAgIChvcGVyYXRvciBkZWxldGUodCkpOworICAgICAgICB9CisgICAgI2Vsc2UKKyAgICAgICAgLy8gbm90ZTogd2UgcHJlc3VtZSB0aGF0IGEgdHJ1ZSB2YWx1ZSBmb3IgaGFzX25ld19vcGVyYXRvcgorICAgICAgICAvLyBpbXBsaWVzIHRoZSBleGlzdGVuY2Ugb2YgYSBjbGFzcyBzcGVjaWZpYyBkZWxldGUgb3BlcmF0b3IgYXMgd2VsbAorICAgICAgICAvLyBhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvci4KKyAgICAgICAgc3RydWN0IGhhc19uZXdfb3BlcmF0b3IgeworICAgICAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgICAgIHJldHVybiBzdGF0aWNfY2FzdDxUICo+KChUOjpvcGVyYXRvciBuZXcpKHNpemVvZihUKSkpOworICAgICAgICAgICAgfQorICAgICAgICAgICAgc3RhdGljIHZvaWQgaW52b2tlX2RlbGV0ZShUICogdCkgeworICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBpbGF0aW9uIGZhaWxzIGhlcmUsIHRoZSBsaWtlbHkgY2F1c2UgdGhhdCB0aGUgY2xhc3MKKyAgICAgICAgICAgICAgICAvLyBUIGhhcyBhIGNsYXNzIHNwZWNpZmljIG5ldyBvcGVyYXRvciBidXQgbm8gY2xhc3Mgc3BlY2lmaWMKKyAgICAgICAgICAgICAgICAvLyBkZWxldGUgb3BlcmF0b3Igd2hpY2ggbWF0Y2hlcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZS4KKyAgICAgICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhpcyBzb2x1dGlvbiBhZGRyZXNzZXMgdGhlIGlzc3VlIHRoYXQgdHdvCisgICAgICAgICAgICAgICAgLy8gcG9zc2libGUgc2lnbmF0dXJlcy4gIEJ1dCBpdCBkb2Vzbid0IGFkZHJlc3MgdGhlIHBvc3NpYmlsaXR5CisgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGUgY2xhc3MgbWlnaHQgaGF2ZSBjbGFzcyBzcGVjaWZpYyBuZXcgd2l0aCBOTworICAgICAgICAgICAgICAgIC8vIGNsYXNzIHNwZWNpZmljIGRlbGV0ZSBhdCBhbGwuICBQYXRjaGVzIChjb21wYXRpYmxlIHdpdGgKKyAgICAgICAgICAgICAgICAvLyBDKyswMykgd2VsY29tZSEKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RydWN0IGRvZXNudF9oYXZlX25ld19vcGVyYXRvciB7CisgICAgICAgICAgICBzdGF0aWMgVCogaW52b2tlX25ldygpIHsKKyAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljX2Nhc3Q8VCAqPihvcGVyYXRvciBuZXcoc2l6ZW9mKFQpKSk7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBzdGF0aWMgdm9pZCBpbnZva2VfZGVsZXRlKFQgKiB0KSB7CisgICAgICAgICAgICAgICAgLy8gTm90ZTogSSdtIHJlbGlhbmNlIHVwb24gYXV0b21hdGljIGNvbnZlcnNpb24gZnJvbSBUICogdG8gdm9pZCAqIGhlcmUKKyAgICAgICAgICAgICAgICBkZWxldGUgdDsKKyAgICAgICAgICAgIH0KKyAgICAgICAgfTsKKyAgICAgICAgc3RhdGljIFQgKiBpbnZva2VfbmV3KCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHJldHVybiB0eXBleDo6aW52b2tlX25ldygpOworICAgICAgICB9CisgICAgICAgIHN0YXRpYyB2b2lkIGludm9rZV9kZWxldGUoVCAqdCkgeworICAgICAgICAgICAgdHlwZWRlZiB0eXBlbmFtZQorICAgICAgICAgICAgICAgIG1wbDo6ZXZhbF9pZjwKKyAgICAgICAgICAgICAgICAgICAgYm9vc3Q6Omhhc19uZXdfb3BlcmF0b3I8IFQgPiwKKyAgICAgICAgICAgICAgICAgICAgbXBsOjppZGVudGl0eTxoYXNfbmV3X29wZXJhdG9yID4sCisgICAgICAgICAgICAgICAgICAgIG1wbDo6aWRlbnRpdHk8ZG9lc250X2hhdmVfbmV3X29wZXJhdG9yID4gICAgCisgICAgICAgICAgICAgICAgPjo6dHlwZSB0eXBleDsKKyAgICAgICAgICAgIHR5cGV4OjppbnZva2VfZGVsZXRlKHQpOworICAgICAgICB9CisgICAgI2VuZGlmCisgICAgZXhwbGljaXQgaGVhcF9hbGxvY2F0aW9uKCl7CisgICAgICAgIG1fcCA9IGludm9rZV9uZXcoKTsKKyAgICB9CisgICAgfmhlYXBfYWxsb2NhdGlvbigpeworICAgICAgICBpZiAoMCAhPSBtX3ApCisgICAgICAgICAgICBpbnZva2VfZGVsZXRlKG1fcCk7CisgICAgfQorICAgIFQqIGdldCgpIGNvbnN0IHsKKyAgICAgICAgcmV0dXJuIG1fcDsKKyAgICB9CisKKyAgICBUKiByZWxlYXNlKCkgeworICAgICAgICBUKiBwID0gbV9wOworICAgICAgICBtX3AgPSAwOworICAgICAgICByZXR1cm4gcDsKKyAgICB9Citwcml2YXRlOgorICAgIFQqIG1fcDsKK307CisKK3RlbXBsYXRlPGNsYXNzIEFyY2hpdmUsIGNsYXNzIFQ+CitjbGFzcyBwb2ludGVyX2lzZXJpYWxpemVyIDoKKyAgICBwdWJsaWMgYmFzaWNfcG9pbnRlcl9pc2VyaWFsaXplcgoreworcHJpdmF0ZToKKyAgICB2aXJ0dWFsIHZvaWQgKiBoZWFwX2FsbG9jYXRpb24oKSBjb25zdCB7CisgICAgICAgIGRldGFpbDo6aGVhcF9hbGxvY2F0aW9uPFQ+IGg7CisgICAgICAgIFQgKiB0ID0gaC5nZXQoKTsKKyAgICAgICAgaC5yZWxlYXNlKCk7CisgICAgICAgIHJldHVybiB0OworICAgIH0KKyAgICB2aXJ0dWFsIGNvbnN0IGJhc2ljX2lzZXJpYWxpemVyICYgZ2V0X2Jhc2ljX3NlcmlhbGl6ZXIoKSBjb25zdCB7CisgICAgICAgIHJldHVybiBib29zdDo6c2VyaWFsaXphdGlvbjo6c2luZ2xldG9uPAorICAgICAgICAgICAgaXNlcmlhbGl6ZXI8QXJjaGl2ZSwgVD4KKyAgICAgICAgPjo6Z2V0X2NvbnN0X2luc3RhbmNlKCk7CisgICAgfQorICAgIEJPT1NUX0RMTEVYUE9SVCB2aXJ0dWFsIHZvaWQgbG9hZF9vYmplY3RfcHRyKAorICAgICAgICBiYXNpY19pYXJjaGl2ZSAmIGFyLCAKKyAgICAgICAgdm9pZCAqIHgsCisgICAgICAgIGNvbnN0IHVuc2lnbmVkIGludCBmaWxlX3ZlcnNpb24KKyAgICApIGNvbnN0IEJPT1NUX1VTRUQ7Citwcm90ZWN0ZWQ6CisgICAgLy8gdGhpcyBzaG91bGQgYWx3YXkgYmUgYSBzaW5nbGV0b24gc28gbWFrZSB0aGUgY29uc3RydWN0b3IgcHJvdGVjdGVkCisgICAgcG9pbnRlcl9pc2VyaWFsaXplcigpOworICAgIH5wCg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64"></text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxtZXNzYWdlc1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxtZXNzYWdlc1w+</last-pattern>
      <last-replace>onAnswerSelected</last-replace>
      <last-substitute encoding="base64">XDxtZXNzYWdlc1w+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDw7XD4=</entry>
        <entry encoding="base64">XDwiXD4=</entry>
        <entry encoding="base64">XDxleWVcPg==</entry>
        <entry encoding="base64">XDxBcHBOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxSb290U3RhY2tcPg==</entry>
        <entry encoding="base64">XDxhbGxRdWVzdGlvbnNcPg==</entry>
        <entry encoding="base64">XDxhbGxBY3RzXD4=</entry>
        <entry encoding="base64">XDxhbGxBY3RDYXRlZ29yaWVzXD4=</entry>
        <entry encoding="base64">XDxTdGFja05hdmlnYXRvclw+</entry>
        <entry encoding="base64">XDxUYWJOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxTd2l0Y2hOYXZpZ2F0b3JcPg==</entry>
        <entry encoding="base64">XDxleHRlcm5hbFVybFw+</entry>
        <entry>i</entry>
        <entry encoding="base64">XDxzZXRBbnN3ZXJzXD4=</entry>
        <entry encoding="base64">XDxUVmFsaWRhdGVRdWVzdGlvblw+</entry>
        <entry encoding="base64">XDxvbkFuc3dlcnNTZWxlY3RlZFw+</entry>
        <entry encoding="base64">XDx2YWxpZGF0ZVF1ZXN0aW9uXD4=</entry>
        <entry encoding="base64">XDx2ZXJzaW9uXD4=</entry>
        <entry encoding="base64">XDxwYXRjaEFubm91bmNlQ29udGFpbmVyRmFjdG9yeVw+</entry>
        <entry encoding="base64">XDxtZXNzYWdlc1w+</entry>
      </history-search>
      <history-cmd>
        <entry>%s//STORE_COURSES</entry>
        <entry>%s//course</entry>
        <entry>%s//VALID/g</entry>
        <entry>%s//willReconnectWithSSO/g</entry>
        <entry>%s//willReconnectInSSO/g</entry>
        <entry>%s//RootStack/g</entry>
        <entry>%s//RootNavigator/g</entry>
        <entry>%s//questions/g</entry>
        <entry>%s//acts/g</entry>
        <entry>%s//actCategories/g</entry>
        <entry>%s//createStackNavigator</entry>
        <entry>%s//createTabNavigator</entry>
        <entry>%s//createSwitchNavigator</entry>
        <entry>%s//url/g</entry>
        <entry>//setAnswers/gc</entry>
        <entry>%s//setAnswers/g</entry>
        <entry>%s//onAnswersSelected/g</entry>
        <entry>%s//onAnswerSelected/g</entry>
        <entry>wq</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>